"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/side-channel";
exports.ids = ["vendor-chunks/side-channel"];
exports.modules = {

/***/ "(action-browser)/./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"(action-browser)/./node_modules/get-intrinsic/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"(action-browser)/./node_modules/call-bind/callBound.js\");\nvar inspect = __webpack_require__(/*! object-inspect */ \"(action-browser)/./node_modules/object-inspect/index.js\");\nvar $TypeError = GetIntrinsic(\"%TypeError%\");\nvar $WeakMap = GetIntrinsic(\"%WeakMap%\", true);\nvar $Map = GetIntrinsic(\"%Map%\", true);\nvar $weakMapGet = callBound(\"WeakMap.prototype.get\", true);\nvar $weakMapSet = callBound(\"WeakMap.prototype.set\", true);\nvar $weakMapHas = callBound(\"WeakMap.prototype.has\", true);\nvar $mapGet = callBound(\"Map.prototype.get\", true);\nvar $mapSet = callBound(\"Map.prototype.set\", true);\nvar $mapHas = callBound(\"Map.prototype.has\", true);\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */ var listGetNode = function(list, key) {\n    for(var prev = list, curr; (curr = prev.next) !== null; prev = curr){\n        if (curr.key === key) {\n            prev.next = curr.next;\n            curr.next = list.next;\n            list.next = curr; // eslint-disable-line no-param-reassign\n            return curr;\n        }\n    }\n};\nvar listGet = function(objects, key) {\n    var node = listGetNode(objects, key);\n    return node && node.value;\n};\nvar listSet = function(objects, key, value) {\n    var node = listGetNode(objects, key);\n    if (node) {\n        node.value = value;\n    } else {\n        // Prepend the new node to the beginning of the list\n        objects.next = {\n            key: key,\n            next: objects.next,\n            value: value\n        };\n    }\n};\nvar listHas = function(objects, key) {\n    return !!listGetNode(objects, key);\n};\nmodule.exports = function getSideChannel() {\n    var $wm;\n    var $m;\n    var $o;\n    var channel = {\n        assert: function(key) {\n            if (!channel.has(key)) {\n                throw new $TypeError(\"Side channel does not contain \" + inspect(key));\n            }\n        },\n        get: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapGet($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapGet($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listGet($o, key);\n                }\n            }\n        },\n        has: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapHas($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapHas($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listHas($o, key);\n                }\n            }\n            return false;\n        },\n        set: function(key, value) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if (!$wm) {\n                    $wm = new $WeakMap();\n                }\n                $weakMapSet($wm, key, value);\n            } else if ($Map) {\n                if (!$m) {\n                    $m = new $Map();\n                }\n                $mapSet($m, key, value);\n            } else {\n                if (!$o) {\n                    /*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */ $o = {\n                        key: {},\n                        next: null\n                    };\n                }\n                listSet($o, key, value);\n            }\n        }\n    };\n    return channel;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/side-channel/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"(rsc)/./node_modules/get-intrinsic/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"(rsc)/./node_modules/call-bind/callBound.js\");\nvar inspect = __webpack_require__(/*! object-inspect */ \"(rsc)/./node_modules/object-inspect/index.js\");\nvar $TypeError = GetIntrinsic(\"%TypeError%\");\nvar $WeakMap = GetIntrinsic(\"%WeakMap%\", true);\nvar $Map = GetIntrinsic(\"%Map%\", true);\nvar $weakMapGet = callBound(\"WeakMap.prototype.get\", true);\nvar $weakMapSet = callBound(\"WeakMap.prototype.set\", true);\nvar $weakMapHas = callBound(\"WeakMap.prototype.has\", true);\nvar $mapGet = callBound(\"Map.prototype.get\", true);\nvar $mapSet = callBound(\"Map.prototype.set\", true);\nvar $mapHas = callBound(\"Map.prototype.has\", true);\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */ var listGetNode = function(list, key) {\n    for(var prev = list, curr; (curr = prev.next) !== null; prev = curr){\n        if (curr.key === key) {\n            prev.next = curr.next;\n            curr.next = list.next;\n            list.next = curr; // eslint-disable-line no-param-reassign\n            return curr;\n        }\n    }\n};\nvar listGet = function(objects, key) {\n    var node = listGetNode(objects, key);\n    return node && node.value;\n};\nvar listSet = function(objects, key, value) {\n    var node = listGetNode(objects, key);\n    if (node) {\n        node.value = value;\n    } else {\n        // Prepend the new node to the beginning of the list\n        objects.next = {\n            key: key,\n            next: objects.next,\n            value: value\n        };\n    }\n};\nvar listHas = function(objects, key) {\n    return !!listGetNode(objects, key);\n};\nmodule.exports = function getSideChannel() {\n    var $wm;\n    var $m;\n    var $o;\n    var channel = {\n        assert: function(key) {\n            if (!channel.has(key)) {\n                throw new $TypeError(\"Side channel does not contain \" + inspect(key));\n            }\n        },\n        get: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapGet($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapGet($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listGet($o, key);\n                }\n            }\n        },\n        has: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapHas($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapHas($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listHas($o, key);\n                }\n            }\n            return false;\n        },\n        set: function(key, value) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if (!$wm) {\n                    $wm = new $WeakMap();\n                }\n                $weakMapSet($wm, key, value);\n            } else if ($Map) {\n                if (!$m) {\n                    $m = new $Map();\n                }\n                $mapSet($m, key, value);\n            } else {\n                if (!$o) {\n                    /*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */ $o = {\n                        key: {},\n                        next: null\n                    };\n                }\n                listSet($o, key, value);\n            }\n        }\n    };\n    return channel;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/side-channel/index.js\n");

/***/ })

};
;