"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-currency-input-field";
exports.ids = ["vendor-chunks/react-currency-input-field"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-currency-input-field/dist/index.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-currency-input-field/dist/index.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatValue: () => (/* binding */ formatValue)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || from);\n}\n/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */ var escapeRegExp = function(stringToGoIntoTheRegex) {\n    return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n};\nvar abbrMap = {\n    k: 1000,\n    m: 1000000,\n    b: 1000000000\n};\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */ var parseAbbrValue = function(value, decimalSeparator) {\n    if (decimalSeparator === void 0) {\n        decimalSeparator = \".\";\n    }\n    var reg = new RegExp(\"(\\\\d+(\" + escapeRegExp(decimalSeparator) + \"\\\\d*)?)([kmb])$\", \"i\");\n    var match = value.match(reg);\n    if (match) {\n        var digits = match[1], abbr = match[3];\n        var multiplier = abbrMap[abbr.toLowerCase()];\n        return Number(digits.replace(decimalSeparator, \".\")) * multiplier;\n    }\n    return undefined;\n};\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */ var removeSeparators = function(value, separator) {\n    if (separator === void 0) {\n        separator = \",\";\n    }\n    var reg = new RegExp(escapeRegExp(separator), \"g\");\n    return value.replace(reg, \"\");\n};\n/**\n * Remove invalid characters\n */ var removeInvalidChars = function(value, validChars) {\n    var chars = escapeRegExp(validChars.join(\"\"));\n    var reg = new RegExp(\"[^\\\\d\" + chars + \"]\", \"gi\");\n    return value.replace(reg, \"\");\n};\n/**\n * Remove prefix, separators and extra decimals from value\n */ var cleanValue = function(_a) {\n    var value = _a.value, _b = _a.groupSeparator, groupSeparator = _b === void 0 ? \",\" : _b, _c = _a.decimalSeparator, decimalSeparator = _c === void 0 ? \".\" : _c, _d = _a.allowDecimals, allowDecimals = _d === void 0 ? true : _d, _e = _a.decimalsLimit, decimalsLimit = _e === void 0 ? 2 : _e, _f = _a.allowNegativeValue, allowNegativeValue = _f === void 0 ? true : _f, _g = _a.disableAbbreviations, disableAbbreviations = _g === void 0 ? false : _g, _h = _a.prefix, prefix = _h === void 0 ? \"\" : _h, _j = _a.transformRawValue, transformRawValue = _j === void 0 ? function(rawValue) {\n        return rawValue;\n    } : _j;\n    var transformedValue = transformRawValue(value);\n    if (transformedValue === \"-\") {\n        return transformedValue;\n    }\n    var abbreviations = disableAbbreviations ? [] : [\n        \"k\",\n        \"m\",\n        \"b\"\n    ];\n    var reg = new RegExp(\"((^|\\\\D)-\\\\d)|(-\" + escapeRegExp(prefix) + \")\");\n    var isNegative = reg.test(transformedValue);\n    // Is there a digit before the prefix? eg. 1$\n    var _k = RegExp(\"(\\\\d+)-?\" + escapeRegExp(prefix)).exec(value) || [], prefixWithValue = _k[0], preValue = _k[1];\n    var withoutPrefix = prefix ? prefixWithValue ? transformedValue.replace(prefixWithValue, \"\").concat(preValue) : transformedValue.replace(prefix, \"\") : transformedValue;\n    var withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n    var withoutInvalidChars = removeInvalidChars(withoutSeparators, __spreadArray([\n        groupSeparator,\n        decimalSeparator\n    ], abbreviations));\n    var valueOnly = withoutInvalidChars;\n    if (!disableAbbreviations) {\n        // disallow letter without number\n        if (abbreviations.some(function(letter) {\n            return letter === withoutInvalidChars.toLowerCase().replace(decimalSeparator, \"\");\n        })) {\n            return \"\";\n        }\n        var parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n        if (parsed) {\n            valueOnly = String(parsed);\n        }\n    }\n    var includeNegative = isNegative && allowNegativeValue ? \"-\" : \"\";\n    if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n        var _l = withoutInvalidChars.split(decimalSeparator), int = _l[0], decimals = _l[1];\n        var trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n        var includeDecimals = allowDecimals ? \"\" + decimalSeparator + trimmedDecimals : \"\";\n        return \"\" + includeNegative + int + includeDecimals;\n    }\n    return \"\" + includeNegative + valueOnly;\n};\nvar fixedDecimalValue = function(value, decimalSeparator, fixedDecimalLength) {\n    if (fixedDecimalLength && value.length > 1) {\n        if (value.includes(decimalSeparator)) {\n            var _a = value.split(decimalSeparator), int = _a[0], decimals = _a[1];\n            if (decimals.length > fixedDecimalLength) {\n                return \"\" + int + decimalSeparator + decimals.slice(0, fixedDecimalLength);\n            }\n        }\n        var reg = value.length > fixedDecimalLength ? new RegExp(\"(\\\\d+)(\\\\d{\" + fixedDecimalLength + \"})\") : new RegExp(\"(\\\\d)(\\\\d+)\");\n        var match = value.match(reg);\n        if (match) {\n            var int = match[1], decimals = match[2];\n            return \"\" + int + decimalSeparator + decimals;\n        }\n    }\n    return value;\n};\nvar getSuffix = function(value, _a) {\n    var _b = _a.groupSeparator, groupSeparator = _b === void 0 ? \",\" : _b, _c = _a.decimalSeparator, decimalSeparator = _c === void 0 ? \".\" : _c;\n    var suffixReg = new RegExp(\"\\\\d([^\" + escapeRegExp(groupSeparator) + escapeRegExp(decimalSeparator) + \"0-9]+)\");\n    var suffixMatch = value.match(suffixReg);\n    return suffixMatch ? suffixMatch[1] : undefined;\n};\n/**\n * Format value with decimal separator, group separator and prefix\n */ var formatValue = function(options) {\n    var _value = options.value, decimalSeparator = options.decimalSeparator, intlConfig = options.intlConfig, decimalScale = options.decimalScale, _a = options.prefix, prefix = _a === void 0 ? \"\" : _a, _b = options.suffix, suffix = _b === void 0 ? \"\" : _b;\n    if (_value === \"\" || _value === undefined) {\n        return \"\";\n    }\n    if (_value === \"-\") {\n        return \"-\";\n    }\n    var isNegative = new RegExp(\"^\\\\d?-\" + (prefix ? escapeRegExp(prefix) + \"?\" : \"\") + \"\\\\d\").test(_value);\n    var value = decimalSeparator !== \".\" ? replaceDecimalSeparator(_value, decimalSeparator, isNegative) : _value;\n    var defaultNumberFormatOptions = {\n        minimumFractionDigits: decimalScale || 0,\n        maximumFractionDigits: 20\n    };\n    var numberFormatter = intlConfig ? new Intl.NumberFormat(intlConfig.locale, intlConfig.currency ? __assign(__assign({}, defaultNumberFormatOptions), {\n        style: \"currency\",\n        currency: intlConfig.currency\n    }) : defaultNumberFormatOptions) : new Intl.NumberFormat(undefined, defaultNumberFormatOptions);\n    var parts = numberFormatter.formatToParts(Number(value));\n    var formatted = replaceParts(parts, options);\n    // Does intl formatting add a suffix?\n    var intlSuffix = getSuffix(formatted, __assign({}, options));\n    // Include decimal separator if user input ends with decimal separator\n    var includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : \"\";\n    var _c = value.match(RegExp(\"\\\\d+\\\\.(\\\\d+)\")) || [], decimals = _c[1];\n    // Keep original decimal padding if no decimalScale\n    if (decimalScale === undefined && decimals && decimalSeparator) {\n        if (formatted.includes(decimalSeparator)) {\n            formatted = formatted.replace(RegExp(\"(\\\\d+)(\" + escapeRegExp(decimalSeparator) + \")(\\\\d+)\", \"g\"), \"$1$2\" + decimals);\n        } else {\n            if (intlSuffix && !suffix) {\n                formatted = formatted.replace(intlSuffix, \"\" + decimalSeparator + decimals + intlSuffix);\n            } else {\n                formatted = \"\" + formatted + decimalSeparator + decimals;\n            }\n        }\n    }\n    if (suffix && includeDecimalSeparator) {\n        return \"\" + formatted + includeDecimalSeparator + suffix;\n    }\n    if (intlSuffix && includeDecimalSeparator) {\n        return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + intlSuffix);\n    }\n    if (intlSuffix && suffix) {\n        return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + suffix);\n    }\n    return [\n        formatted,\n        includeDecimalSeparator,\n        suffix\n    ].join(\"\");\n};\n/**\n * Before converting to Number, decimal separator has to be .\n */ var replaceDecimalSeparator = function(value, decimalSeparator, isNegative) {\n    var newValue = value;\n    if (decimalSeparator && decimalSeparator !== \".\") {\n        newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), \"g\"), \".\");\n        if (isNegative && decimalSeparator === \"-\") {\n            newValue = \"-\" + newValue.slice(1);\n        }\n    }\n    return newValue;\n};\nvar replaceParts = function(parts, _a) {\n    var prefix = _a.prefix, groupSeparator = _a.groupSeparator, decimalSeparator = _a.decimalSeparator, decimalScale = _a.decimalScale, _b = _a.disableGroupSeparators, disableGroupSeparators = _b === void 0 ? false : _b;\n    return parts.reduce(function(prev, _a, i) {\n        var type = _a.type, value = _a.value;\n        if (i === 0 && prefix) {\n            if (type === \"minusSign\") {\n                return [\n                    value,\n                    prefix\n                ];\n            }\n            if (type === \"currency\") {\n                return __spreadArray(__spreadArray([], prev), [\n                    prefix\n                ]);\n            }\n            return [\n                prefix,\n                value\n            ];\n        }\n        if (type === \"currency\") {\n            return prefix ? prev : __spreadArray(__spreadArray([], prev), [\n                value\n            ]);\n        }\n        if (type === \"group\") {\n            return !disableGroupSeparators ? __spreadArray(__spreadArray([], prev), [\n                groupSeparator !== undefined ? groupSeparator : value\n            ]) : prev;\n        }\n        if (type === \"decimal\") {\n            if (decimalScale !== undefined && decimalScale === 0) {\n                return prev;\n            }\n            return __spreadArray(__spreadArray([], prev), [\n                decimalSeparator !== undefined ? decimalSeparator : value\n            ]);\n        }\n        if (type === \"fraction\") {\n            return __spreadArray(__spreadArray([], prev), [\n                decimalScale !== undefined ? value.slice(0, decimalScale) : value\n            ]);\n        }\n        return __spreadArray(__spreadArray([], prev), [\n            value\n        ]);\n    }, [\n        \"\"\n    ]).join(\"\");\n};\nvar defaultConfig = {\n    currencySymbol: \"\",\n    groupSeparator: \"\",\n    decimalSeparator: \"\",\n    prefix: \"\",\n    suffix: \"\"\n};\n/**\n * Get locale config from input or default\n */ var getLocaleConfig = function(intlConfig) {\n    var _a = intlConfig || {}, locale = _a.locale, currency = _a.currency;\n    var numberFormatter = locale ? new Intl.NumberFormat(locale, currency ? {\n        currency: currency,\n        style: \"currency\"\n    } : undefined) : new Intl.NumberFormat();\n    return numberFormatter.formatToParts(1000.1).reduce(function(prev, curr, i) {\n        if (curr.type === \"currency\") {\n            if (i === 0) {\n                return __assign(__assign({}, prev), {\n                    currencySymbol: curr.value,\n                    prefix: curr.value\n                });\n            } else {\n                return __assign(__assign({}, prev), {\n                    currencySymbol: curr.value,\n                    suffix: curr.value\n                });\n            }\n        }\n        if (curr.type === \"group\") {\n            return __assign(__assign({}, prev), {\n                groupSeparator: curr.value\n            });\n        }\n        if (curr.type === \"decimal\") {\n            return __assign(__assign({}, prev), {\n                decimalSeparator: curr.value\n            });\n        }\n        return prev;\n    }, defaultConfig);\n};\nvar isNumber = function(input) {\n    return RegExp(/\\d/, \"gi\").test(input);\n};\nvar padTrimValue = function(value, decimalSeparator, decimalScale) {\n    if (decimalSeparator === void 0) {\n        decimalSeparator = \".\";\n    }\n    if (decimalScale === undefined || value === \"\" || value === undefined) {\n        return value;\n    }\n    if (!value.match(/\\d/g)) {\n        return \"\";\n    }\n    var _a = value.split(decimalSeparator), int = _a[0], decimals = _a[1];\n    if (decimalScale === 0) {\n        return int;\n    }\n    var newValue = decimals || \"\";\n    if (newValue.length < decimalScale) {\n        while(newValue.length < decimalScale){\n            newValue += \"0\";\n        }\n    } else {\n        newValue = newValue.slice(0, decimalScale);\n    }\n    return \"\" + int + decimalSeparator + newValue;\n};\n/**\n * Based on the last key stroke and the cursor position, update the value\n * and reposition the cursor to the right place\n */ var repositionCursor = function(_a) {\n    var selectionStart = _a.selectionStart, value = _a.value, lastKeyStroke = _a.lastKeyStroke, stateValue = _a.stateValue, groupSeparator = _a.groupSeparator;\n    var cursorPosition = selectionStart;\n    var modifiedValue = value;\n    if (stateValue && cursorPosition) {\n        var splitValue = value.split(\"\");\n        // if cursor is to right of groupSeparator and backspace pressed, delete the character to the left of the separator and reposition the cursor\n        if (lastKeyStroke === \"Backspace\" && stateValue[cursorPosition] === groupSeparator) {\n            splitValue.splice(cursorPosition - 1, 1);\n            cursorPosition -= 1;\n        }\n        // if cursor is to left of groupSeparator and delete pressed, delete the character to the right of the separator and reposition the cursor\n        if (lastKeyStroke === \"Delete\" && stateValue[cursorPosition] === groupSeparator) {\n            splitValue.splice(cursorPosition, 1);\n            cursorPosition += 1;\n        }\n        modifiedValue = splitValue.join(\"\");\n        return {\n            modifiedValue: modifiedValue,\n            cursorPosition: cursorPosition\n        };\n    }\n    return {\n        modifiedValue: modifiedValue,\n        cursorPosition: selectionStart\n    };\n};\nvar CurrencyInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_a, ref) {\n    var _b = _a.allowDecimals, allowDecimals = _b === void 0 ? true : _b, _c = _a.allowNegativeValue, allowNegativeValue = _c === void 0 ? true : _c, id = _a.id, name = _a.name, className = _a.className, customInput = _a.customInput, decimalsLimit = _a.decimalsLimit, defaultValue = _a.defaultValue, _d = _a.disabled, disabled = _d === void 0 ? false : _d, userMaxLength = _a.maxLength, userValue = _a.value, onValueChange = _a.onValueChange, fixedDecimalLength = _a.fixedDecimalLength, placeholder = _a.placeholder, decimalScale = _a.decimalScale, prefix = _a.prefix, suffix = _a.suffix, intlConfig = _a.intlConfig, step = _a.step, min = _a.min, max = _a.max, _e = _a.disableGroupSeparators, disableGroupSeparators = _e === void 0 ? false : _e, _f = _a.disableAbbreviations, disableAbbreviations = _f === void 0 ? false : _f, _decimalSeparator = _a.decimalSeparator, _groupSeparator = _a.groupSeparator, onChange = _a.onChange, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, transformRawValue = _a.transformRawValue, props = __rest(_a, [\n        \"allowDecimals\",\n        \"allowNegativeValue\",\n        \"id\",\n        \"name\",\n        \"className\",\n        \"customInput\",\n        \"decimalsLimit\",\n        \"defaultValue\",\n        \"disabled\",\n        \"maxLength\",\n        \"value\",\n        \"onValueChange\",\n        \"fixedDecimalLength\",\n        \"placeholder\",\n        \"decimalScale\",\n        \"prefix\",\n        \"suffix\",\n        \"intlConfig\",\n        \"step\",\n        \"min\",\n        \"max\",\n        \"disableGroupSeparators\",\n        \"disableAbbreviations\",\n        \"decimalSeparator\",\n        \"groupSeparator\",\n        \"onChange\",\n        \"onFocus\",\n        \"onBlur\",\n        \"onKeyDown\",\n        \"onKeyUp\",\n        \"transformRawValue\"\n    ]);\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n        throw new Error(\"decimalSeparator cannot be a number\");\n    }\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n        throw new Error(\"groupSeparator cannot be a number\");\n    }\n    var localeConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return getLocaleConfig(intlConfig);\n    }, [\n        intlConfig\n    ]);\n    var decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || \"\";\n    var groupSeparator = _groupSeparator || localeConfig.groupSeparator || \"\";\n    if (decimalSeparator && groupSeparator && decimalSeparator === groupSeparator && disableGroupSeparators === false) {\n        throw new Error(\"decimalSeparator cannot be the same as groupSeparator\");\n    }\n    var formatValueOptions = {\n        decimalSeparator: decimalSeparator,\n        groupSeparator: groupSeparator,\n        disableGroupSeparators: disableGroupSeparators,\n        intlConfig: intlConfig,\n        prefix: prefix || localeConfig.prefix,\n        suffix: suffix\n    };\n    var cleanValueOptions = {\n        decimalSeparator: decimalSeparator,\n        groupSeparator: groupSeparator,\n        allowDecimals: allowDecimals,\n        decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n        allowNegativeValue: allowNegativeValue,\n        disableAbbreviations: disableAbbreviations,\n        prefix: prefix || localeConfig.prefix,\n        transformRawValue: transformRawValue\n    };\n    var formattedStateValue = defaultValue !== undefined && defaultValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n        decimalScale: decimalScale,\n        value: String(defaultValue)\n    })) : userValue !== undefined && userValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n        decimalScale: decimalScale,\n        value: String(userValue)\n    })) : \"\";\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(formattedStateValue), stateValue = _g[0], setStateValue = _g[1];\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), dirty = _h[0], setDirty = _h[1];\n    var _j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), cursor = _j[0], setCursor = _j[1];\n    var _k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), changeCount = _k[0], setChangeCount = _k[1];\n    var _l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), lastKeyStroke = _l[0], setLastKeyStroke = _l[1];\n    var inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, function() {\n        return inputRef.current;\n    });\n    /**\n     * Process change in value\n     */ var processChange = function(value, selectionStart) {\n        setDirty(true);\n        var _a = repositionCursor({\n            selectionStart: selectionStart,\n            value: value,\n            lastKeyStroke: lastKeyStroke,\n            stateValue: stateValue,\n            groupSeparator: groupSeparator\n        }), modifiedValue = _a.modifiedValue, cursorPosition = _a.cursorPosition;\n        var stringValue = cleanValue(__assign({\n            value: modifiedValue\n        }, cleanValueOptions));\n        if (userMaxLength && stringValue.replace(/-/g, \"\").length > userMaxLength) {\n            return;\n        }\n        if (stringValue === \"\" || stringValue === \"-\" || stringValue === decimalSeparator) {\n            onValueChange && onValueChange(undefined, name, {\n                float: null,\n                formatted: \"\",\n                value: \"\"\n            });\n            setStateValue(stringValue);\n            // Always sets cursor after '-' or decimalSeparator input\n            setCursor(1);\n            return;\n        }\n        var stringValueWithoutSeparator = decimalSeparator ? stringValue.replace(decimalSeparator, \".\") : stringValue;\n        var numberValue = parseFloat(stringValueWithoutSeparator);\n        var formattedValue = formatValue(__assign({\n            value: stringValue\n        }, formatValueOptions));\n        if (cursorPosition !== undefined && cursorPosition !== null) {\n            // Prevent cursor jumping\n            var newCursor = cursorPosition + (formattedValue.length - value.length);\n            newCursor = newCursor <= 0 ? prefix ? prefix.length : 0 : newCursor;\n            setCursor(newCursor);\n            setChangeCount(changeCount + 1);\n        }\n        setStateValue(formattedValue);\n        if (onValueChange) {\n            var values = {\n                float: numberValue,\n                formatted: formattedValue,\n                value: stringValue\n            };\n            onValueChange(stringValue, name, values);\n        }\n    };\n    /**\n     * Handle change event\n     */ var handleOnChange = function(event) {\n        var _a = event.target, value = _a.value, selectionStart = _a.selectionStart;\n        processChange(value, selectionStart);\n        onChange && onChange(event);\n    };\n    /**\n     * Handle focus event\n     */ var handleOnFocus = function(event) {\n        onFocus && onFocus(event);\n        return stateValue ? stateValue.length : 0;\n    };\n    /**\n     * Handle blur event\n     *\n     * Format value by padding/trimming decimals if required by\n     */ var handleOnBlur = function(event) {\n        var value = event.target.value;\n        var valueOnly = cleanValue(__assign({\n            value: value\n        }, cleanValueOptions));\n        if (valueOnly === \"-\" || valueOnly === decimalSeparator || !valueOnly) {\n            setStateValue(\"\");\n            onBlur && onBlur(event);\n            return;\n        }\n        var fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n        var newValue = padTrimValue(fixedDecimals, decimalSeparator, decimalScale !== undefined ? decimalScale : fixedDecimalLength);\n        var numberValue = parseFloat(newValue.replace(decimalSeparator, \".\"));\n        var formattedValue = formatValue(__assign(__assign({}, formatValueOptions), {\n            value: newValue\n        }));\n        if (onValueChange) {\n            onValueChange(newValue, name, {\n                float: numberValue,\n                formatted: formattedValue,\n                value: newValue\n            });\n        }\n        setStateValue(formattedValue);\n        onBlur && onBlur(event);\n    };\n    /**\n     * Handle key down event\n     *\n     * Increase or decrease value by step\n     */ var handleOnKeyDown = function(event) {\n        var key = event.key;\n        setLastKeyStroke(key);\n        if (step && (key === \"ArrowUp\" || key === \"ArrowDown\")) {\n            event.preventDefault();\n            setCursor(stateValue.length);\n            var currentValue = parseFloat(userValue !== undefined && userValue !== null ? String(userValue).replace(decimalSeparator, \".\") : cleanValue(__assign({\n                value: stateValue\n            }, cleanValueOptions))) || 0;\n            var newValue = key === \"ArrowUp\" ? currentValue + step : currentValue - step;\n            if (min !== undefined && newValue < min) {\n                return;\n            }\n            if (max !== undefined && newValue > max) {\n                return;\n            }\n            var fixedLength = String(step).includes(\".\") ? Number(String(step).split(\".\")[1].length) : undefined;\n            processChange(String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(\".\", decimalSeparator));\n        }\n        onKeyDown && onKeyDown(event);\n    };\n    /**\n     * Handle key up event\n     *\n     * Move cursor if there is a suffix to prevent user typing past suffix\n     */ var handleOnKeyUp = function(event) {\n        var key = event.key, selectionStart = event.currentTarget.selectionStart;\n        if (key !== \"ArrowUp\" && key !== \"ArrowDown\" && stateValue !== \"-\") {\n            var suffix_1 = getSuffix(stateValue, {\n                groupSeparator: groupSeparator,\n                decimalSeparator: decimalSeparator\n            });\n            if (suffix_1 && selectionStart && selectionStart > stateValue.length - suffix_1.length) {\n                /* istanbul ignore else */ if (inputRef.current) {\n                    var newCursor = stateValue.length - suffix_1.length;\n                    inputRef.current.setSelectionRange(newCursor, newCursor);\n                }\n            }\n        }\n        onKeyUp && onKeyUp(event);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // prevent cursor jumping if editing value\n        if (dirty && stateValue !== \"-\" && inputRef.current && document.activeElement === inputRef.current) {\n            inputRef.current.setSelectionRange(cursor, cursor);\n        }\n    }, [\n        stateValue,\n        cursor,\n        inputRef,\n        dirty,\n        changeCount\n    ]);\n    /**\n     * If user has only entered \"-\" or decimal separator,\n     * keep the char to allow them to enter next value\n     */ var getRenderValue = function() {\n        if (userValue !== undefined && userValue !== null && stateValue !== \"-\" && (!decimalSeparator || stateValue !== decimalSeparator)) {\n            return formatValue(__assign(__assign({}, formatValueOptions), {\n                decimalScale: dirty ? undefined : decimalScale,\n                value: String(userValue)\n            }));\n        }\n        return stateValue;\n    };\n    var inputProps = __assign({\n        type: \"text\",\n        inputMode: \"decimal\",\n        id: id,\n        name: name,\n        className: className,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        onKeyDown: handleOnKeyDown,\n        onKeyUp: handleOnKeyUp,\n        placeholder: placeholder,\n        disabled: disabled,\n        value: getRenderValue(),\n        ref: inputRef\n    }, props);\n    if (customInput) {\n        var CustomInput = customInput;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CustomInput, __assign({}, inputProps));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", __assign({}, inputProps));\n});\nCurrencyInput.displayName = \"CurrencyInput\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CurrencyInput);\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-currency-input-field/dist/index.esm.js\n");

/***/ })

};
;