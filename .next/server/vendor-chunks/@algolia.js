/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia";
exports.ids = ["vendor-chunks/@algolia"];
exports.modules = {

/***/ "(ssr)/./node_modules/@algolia/events/events.js":
/*!************************************************!*\
  !*** ./node_modules/@algolia/events/events.js ***!
  \************************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nfunction EventEmitter() {\n    this._events = this._events || {};\n    this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n    if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError(\"n must be a positive number\");\n    this._maxListeners = n;\n    return this;\n};\nEventEmitter.prototype.emit = function(type) {\n    var er, handler, len, args, i, listeners;\n    if (!this._events) this._events = {};\n    // If there is no 'error' event listener then throw.\n    if (type === \"error\") {\n        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {\n            er = arguments[1];\n            if (er instanceof Error) {\n                throw er; // Unhandled 'error' event\n            } else {\n                // At least give some kind of context to the user\n                var err = new Error('Uncaught, unspecified \"error\" event. (' + er + \")\");\n                err.context = er;\n                throw err;\n            }\n        }\n    }\n    handler = this._events[type];\n    if (isUndefined(handler)) return false;\n    if (isFunction(handler)) {\n        switch(arguments.length){\n            // fast cases\n            case 1:\n                handler.call(this);\n                break;\n            case 2:\n                handler.call(this, arguments[1]);\n                break;\n            case 3:\n                handler.call(this, arguments[1], arguments[2]);\n                break;\n            // slower\n            default:\n                args = Array.prototype.slice.call(arguments, 1);\n                handler.apply(this, args);\n        }\n    } else if (isObject(handler)) {\n        args = Array.prototype.slice.call(arguments, 1);\n        listeners = handler.slice();\n        len = listeners.length;\n        for(i = 0; i < len; i++)listeners[i].apply(this, args);\n    }\n    return true;\n};\nEventEmitter.prototype.addListener = function(type, listener) {\n    var m;\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    if (!this._events) this._events = {};\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (this._events.newListener) this.emit(\"newListener\", type, isFunction(listener.listener) ? listener.listener : listener);\n    if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n    else if (isObject(this._events[type])) // If we've already got an array, just append.\n    this._events[type].push(listener);\n    else // Adding the second element, need to change to array.\n    this._events[type] = [\n        this._events[type],\n        listener\n    ];\n    // Check for listener leak\n    if (isObject(this._events[type]) && !this._events[type].warned) {\n        if (!isUndefined(this._maxListeners)) {\n            m = this._maxListeners;\n        } else {\n            m = EventEmitter.defaultMaxListeners;\n        }\n        if (m && m > 0 && this._events[type].length > m) {\n            this._events[type].warned = true;\n            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n            if (typeof console.trace === \"function\") {\n                // not supported in IE 10\n                console.trace();\n            }\n        }\n    }\n    return this;\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.once = function(type, listener) {\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    var fired = false;\n    function g() {\n        this.removeListener(type, g);\n        if (!fired) {\n            fired = true;\n            listener.apply(this, arguments);\n        }\n    }\n    g.listener = listener;\n    this.on(type, g);\n    return this;\n};\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n    var list, position, length, i;\n    if (!isFunction(listener)) throw TypeError(\"listener must be a function\");\n    if (!this._events || !this._events[type]) return this;\n    list = this._events[type];\n    length = list.length;\n    position = -1;\n    if (list === listener || isFunction(list.listener) && list.listener === listener) {\n        delete this._events[type];\n        if (this._events.removeListener) this.emit(\"removeListener\", type, listener);\n    } else if (isObject(list)) {\n        for(i = length; i-- > 0;){\n            if (list[i] === listener || list[i].listener && list[i].listener === listener) {\n                position = i;\n                break;\n            }\n        }\n        if (position < 0) return this;\n        if (list.length === 1) {\n            list.length = 0;\n            delete this._events[type];\n        } else {\n            list.splice(position, 1);\n        }\n        if (this._events.removeListener) this.emit(\"removeListener\", type, listener);\n    }\n    return this;\n};\nEventEmitter.prototype.removeAllListeners = function(type) {\n    var key, listeners;\n    if (!this._events) return this;\n    // not listening for removeListener, no need to emit\n    if (!this._events.removeListener) {\n        if (arguments.length === 0) this._events = {};\n        else if (this._events[type]) delete this._events[type];\n        return this;\n    }\n    // emit removeListener for all listeners on all events\n    if (arguments.length === 0) {\n        for(key in this._events){\n            if (key === \"removeListener\") continue;\n            this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = {};\n        return this;\n    }\n    listeners = this._events[type];\n    if (isFunction(listeners)) {\n        this.removeListener(type, listeners);\n    } else if (listeners) {\n        // LIFO order\n        while(listeners.length)this.removeListener(type, listeners[listeners.length - 1]);\n    }\n    delete this._events[type];\n    return this;\n};\nEventEmitter.prototype.listeners = function(type) {\n    var ret;\n    if (!this._events || !this._events[type]) ret = [];\n    else if (isFunction(this._events[type])) ret = [\n        this._events[type]\n    ];\n    else ret = this._events[type].slice();\n    return ret;\n};\nEventEmitter.prototype.listenerCount = function(type) {\n    if (this._events) {\n        var evlistener = this._events[type];\n        if (isFunction(evlistener)) return 1;\n        else if (evlistener) return evlistener.length;\n    }\n    return 0;\n};\nEventEmitter.listenerCount = function(emitter, type) {\n    return emitter.listenerCount(type);\n};\nfunction isFunction(arg) {\n    return typeof arg === \"function\";\n}\nfunction isNumber(arg) {\n    return typeof arg === \"number\";\n}\nfunction isObject(arg) {\n    return typeof arg === \"object\" && arg !== null;\n}\nfunction isUndefined(arg) {\n    return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@algolia/events/events.js\n");

/***/ })

};
;