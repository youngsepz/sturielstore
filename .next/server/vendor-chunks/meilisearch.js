"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/meilisearch";
exports.ids = ["vendor-chunks/meilisearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/meilisearch/dist/bundles/meilisearch.esm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRequests: () => (/* binding */ HttpRequests),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   MeiliSearch: () => (/* binding */ MeiliSearch),\n/* harmony export */   MeiliSearchApiError: () => (/* binding */ MeiliSearchApiError),\n/* harmony export */   MeiliSearchCommunicationError: () => (/* binding */ MeiliSearchCommunicationError),\n/* harmony export */   MeiliSearchError: () => (/* binding */ MeiliSearchError),\n/* harmony export */   MeiliSearchTimeOutError: () => (/* binding */ MeiliSearchTimeOutError),\n/* harmony export */   addProtocolIfNotPresent: () => (/* binding */ addProtocolIfNotPresent),\n/* harmony export */   addTrailingSlash: () => (/* binding */ addTrailingSlash),\n/* harmony export */   \"default\": () => (/* binding */ MeiliSearch),\n/* harmony export */   httpErrorHandler: () => (/* binding */ httpErrorHandler),\n/* harmony export */   httpResponseErrorHandler: () => (/* binding */ httpResponseErrorHandler),\n/* harmony export */   removeUndefinedFromObject: () => (/* binding */ removeUndefinedFromObject),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var cross_fetch_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch/polyfill */ \"(ssr)/./node_modules/cross-fetch/dist/node-polyfill.js\");\n/* harmony import */ var cross_fetch_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch_polyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar MeiliSearchCommunicationError = /** @class */ function(_super) {\n    __extends(MeiliSearchCommunicationError, _super);\n    function MeiliSearchCommunicationError(message, body, url, stack) {\n        var _this = this;\n        var _a, _b, _c;\n        _this = _super.call(this, message) || this;\n        _this.name = \"MeiliSearchCommunicationError\";\n        _this.type = \"MeiliSearchCommunicationError\";\n        if (body instanceof Response) {\n            _this.message = body.statusText;\n            _this.statusCode = body.status;\n        }\n        if (body instanceof Error) {\n            _this.errno = body.errno;\n            _this.code = body.code;\n        }\n        if (stack) {\n            _this.stack = stack;\n            _this.stack = (_a = _this.stack) === null || _a === void 0 ? void 0 : _a.replace(/(TypeError|FetchError)/, _this.name);\n            _this.stack = (_b = _this.stack) === null || _b === void 0 ? void 0 : _b.replace(\"Failed to fetch\", \"request to \".concat(url, \" failed, reason: connect ECONNREFUSED\"));\n            _this.stack = (_c = _this.stack) === null || _c === void 0 ? void 0 : _c.replace(\"Not Found\", \"Not Found: \".concat(url));\n        } else {\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(_this, MeiliSearchCommunicationError);\n            }\n        }\n        return _this;\n    }\n    return MeiliSearchCommunicationError;\n}(Error);\nvar MeiliSearchApiError = /** @class */ function(_super) {\n    __extends(class_1, _super);\n    function class_1(error, status) {\n        var _this = _super.call(this, error.message) || this;\n        _this.name = \"MeiliSearchApiError\";\n        _this.code = error.code;\n        _this.type = error.type;\n        _this.link = error.link;\n        _this.message = error.message;\n        _this.httpStatus = status;\n        // Make errors comparison possible. ex: error instanceof MeiliSearchApiError.\n        Object.setPrototypeOf(_this, MeiliSearchApiError.prototype);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(_this, MeiliSearchApiError);\n        }\n        return _this;\n    }\n    return class_1;\n}(Error);\nfunction httpResponseErrorHandler(response) {\n    return __awaiter(this, void 0, void 0, function() {\n        var err;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    if (!!response.ok) return [\n                        3 /*break*/ ,\n                        5\n                    ];\n                    err = void 0;\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4 /*yield*/ ,\n                        response.json()\n                    ];\n                case 2:\n                    err = _a.sent();\n                    return [\n                        3 /*break*/ ,\n                        4\n                    ];\n                case 3:\n                    _a.sent();\n                    throw new MeiliSearchCommunicationError(response.statusText, response, response.url);\n                case 4:\n                    throw new MeiliSearchApiError(err, response.status);\n                case 5:\n                    return [\n                        2 /*return*/ ,\n                        response\n                    ];\n            }\n        });\n    });\n}\nfunction httpErrorHandler(response, stack, url) {\n    if (response.type !== \"MeiliSearchApiError\") {\n        throw new MeiliSearchCommunicationError(response.message, response, url, stack);\n    }\n    throw response;\n}\nvar MeiliSearchError = /** @class */ function(_super) {\n    __extends(MeiliSearchError, _super);\n    function MeiliSearchError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"MeiliSearchError\";\n        _this.type = \"MeiliSearchError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(_this, MeiliSearchError);\n        }\n        return _this;\n    }\n    return MeiliSearchError;\n}(Error);\nvar MeiliSearchTimeOutError = /** @class */ function(_super) {\n    __extends(MeiliSearchTimeOutError, _super);\n    function MeiliSearchTimeOutError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"MeiliSearchTimeOutError\";\n        _this.type = _this.constructor.name;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(_this, MeiliSearchTimeOutError);\n        }\n        return _this;\n    }\n    return MeiliSearchTimeOutError;\n}(Error);\n/**\r\n * Removes undefined entries from object\r\n */ function removeUndefinedFromObject(obj) {\n    return Object.entries(obj).reduce(function(acc, curEntry) {\n        var key = curEntry[0], val = curEntry[1];\n        if (val !== undefined) acc[key] = val;\n        return acc;\n    }, {});\n}\nfunction sleep(ms) {\n    return __awaiter(this, void 0, void 0, function() {\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        new Promise(function(resolve) {\n                            return setTimeout(resolve, ms);\n                        })\n                    ];\n                case 1:\n                    return [\n                        2 /*return*/ ,\n                        _a.sent()\n                    ];\n            }\n        });\n    });\n}\nfunction addProtocolIfNotPresent(host) {\n    if (!(host.startsWith(\"https://\") || host.startsWith(\"http://\"))) {\n        return \"http://\".concat(host);\n    }\n    return host;\n}\nfunction addTrailingSlash(url) {\n    if (!url.endsWith(\"/\")) {\n        url += \"/\";\n    }\n    return url;\n}\nfunction constructHostURL(host) {\n    try {\n        host = addProtocolIfNotPresent(host);\n        host = addTrailingSlash(host);\n        return host;\n    } catch (e) {\n        throw new MeiliSearchError(\"The provided host is not valid.\");\n    }\n}\nvar HttpRequests = /** @class */ function() {\n    function HttpRequests(config) {\n        this.headers = Object.assign({}, config.headers || {}); // assign to avoid referencing\n        this.headers[\"Content-Type\"] = \"application/json\";\n        if (config.apiKey) {\n            this.headers[\"Authorization\"] = \"Bearer \".concat(config.apiKey);\n        }\n        try {\n            var host = constructHostURL(config.host);\n            this.url = new URL(host);\n        } catch (e) {\n            throw new MeiliSearchError(\"The provided host is not valid.\");\n        }\n    }\n    HttpRequests.prototype.request = function(_a) {\n        var method = _a.method, url = _a.url, params = _a.params, body = _a.body, config = _a.config;\n        return __awaiter(this, void 0, void 0, function() {\n            var constructURL, queryParams_1, response, parsedBody, parsedJson, e_1, stack;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        constructURL = new URL(url, this.url);\n                        if (params) {\n                            queryParams_1 = new URLSearchParams();\n                            Object.keys(params).filter(function(x) {\n                                return params[x] !== null;\n                            }).map(function(x) {\n                                return queryParams_1.set(x, params[x]);\n                            });\n                            constructURL.search = queryParams_1.toString();\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([\n                            1,\n                            4,\n                            ,\n                            5\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            fetch(constructURL.toString(), __assign(__assign({}, config), {\n                                method: method,\n                                body: JSON.stringify(body),\n                                headers: this.headers\n                            })).then(function(res) {\n                                return httpResponseErrorHandler(res);\n                            })\n                        ];\n                    case 2:\n                        response = _b.sent();\n                        return [\n                            4 /*yield*/ ,\n                            response.text()\n                        ];\n                    case 3:\n                        parsedBody = _b.sent();\n                        try {\n                            parsedJson = JSON.parse(parsedBody);\n                            return [\n                                2 /*return*/ ,\n                                parsedJson\n                            ];\n                        } catch (_) {\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 4:\n                        e_1 = _b.sent();\n                        stack = e_1.stack;\n                        httpErrorHandler(e_1, stack, constructURL.toString());\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 5:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    HttpRequests.prototype.get = function(url, params, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.request({\n                                method: \"GET\",\n                                url: url,\n                                params: params,\n                                config: config\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    HttpRequests.prototype.post = function(url, data, params, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.request({\n                                method: \"POST\",\n                                url: url,\n                                body: data,\n                                params: params,\n                                config: config\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    HttpRequests.prototype.put = function(url, data, params, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.request({\n                                method: \"PUT\",\n                                url: url,\n                                body: data,\n                                params: params,\n                                config: config\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    HttpRequests.prototype.patch = function(url, data, params, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.request({\n                                method: \"PATCH\",\n                                url: url,\n                                body: data,\n                                params: params,\n                                config: config\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    HttpRequests.prototype[\"delete\"] = function(url, data, params, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.request({\n                                method: \"DELETE\",\n                                url: url,\n                                body: data,\n                                params: params,\n                                config: config\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    return HttpRequests;\n}();\nvar TaskClient = /** @class */ function() {\n    function TaskClient(config) {\n        this.httpRequest = new HttpRequests(config);\n    }\n    TaskClient.prototype.getClientTask = function(uid) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"tasks/\".concat(uid);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    TaskClient.prototype.getClientTasks = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"tasks\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    TaskClient.prototype.getIndexTask = function(indexUid, taskId) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(indexUid, \"/tasks/\").concat(taskId);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    TaskClient.prototype.getIndexTasks = function(indexUid) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(indexUid, \"/tasks\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Wait for a task to be processed.\r\n     *\r\n     * @param {number} uid Task identifier\r\n     * @param {WaitOptions} options Additional configuration options\r\n     * @returns {Promise<Task>} Promise returning a task after it has been processed\r\n     */ TaskClient.prototype.waitForClientTask = function(taskId, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            var startingTime, response;\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        startingTime = Date.now();\n                        _e.label = 1;\n                    case 1:\n                        if (!(Date.now() - startingTime < timeOutMs)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.getClientTask(taskId)\n                        ];\n                    case 2:\n                        response = _e.sent();\n                        if (![\n                            \"enqueued\" /* TASK_ENQUEUED */ ,\n                            \"processing\" /* TASK_PROCESSING */ \n                        ].includes(response.status)) return [\n                            2 /*return*/ ,\n                            response\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            sleep(intervalMs)\n                        ];\n                    case 3:\n                        _e.sent();\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        throw new MeiliSearchTimeOutError(\"timeout of \".concat(timeOutMs, \"ms has exceeded on process \").concat(taskId, \" when waiting a task to be resolved.\"));\n                }\n            });\n        });\n    };\n    /**\r\n     * Waits for multiple tasks to be processed\r\n     *\r\n     * @param {number} taskIds Tasks identifier list\r\n     * @param {WaitOptions} options Wait options\r\n     * @returns {Promise<Result<Task[]>>} Promise returning a list of tasks after they have been processed\r\n     */ TaskClient.prototype.waitForClientTasks = function(taskIds, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            var tasks, _i, taskIds_1, taskId, task;\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        tasks = [];\n                        _i = 0, taskIds_1 = taskIds;\n                        _e.label = 1;\n                    case 1:\n                        if (!(_i < taskIds_1.length)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        taskId = taskIds_1[_i];\n                        return [\n                            4 /*yield*/ ,\n                            this.waitForClientTask(taskId, {\n                                timeOutMs: timeOutMs,\n                                intervalMs: intervalMs\n                            })\n                        ];\n                    case 2:\n                        task = _e.sent();\n                        tasks.push(task);\n                        _e.label = 3;\n                    case 3:\n                        _i++;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            {\n                                results: tasks\n                            }\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Waits for a task to be processed\r\n     *\r\n     * @param {number} taskId Task identifier\r\n     * @param {WaitOptions} options Wait options\r\n     * @returns {Promise<Task>} Promise returning a task after it has been processed\r\n     */ TaskClient.prototype.waitForIndexTask = function(indexUid, taskId, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            var startingTime, response;\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        startingTime = Date.now();\n                        _e.label = 1;\n                    case 1:\n                        if (!(Date.now() - startingTime < timeOutMs)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.getIndexTask(indexUid, taskId)\n                        ];\n                    case 2:\n                        response = _e.sent();\n                        if (![\n                            \"enqueued\" /* TASK_ENQUEUED */ ,\n                            \"processing\" /* TASK_PROCESSING */ \n                        ].includes(response.status)) return [\n                            2 /*return*/ ,\n                            response\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            sleep(intervalMs)\n                        ];\n                    case 3:\n                        _e.sent();\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        throw new MeiliSearchTimeOutError(\"timeout of \".concat(timeOutMs, \"ms has exceeded on process \").concat(taskId, \" when waiting for pending update to resolve.\"));\n                }\n            });\n        });\n    };\n    return TaskClient;\n}();\n/*\r\n * Bundle: MeiliSearch / Indexes\r\n * Project: MeiliSearch - Javascript API\r\n * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n * Copyright: 2019, MeiliSearch\r\n */ var Index = /** @class */ function() {\n    /**\r\n     * @param {Config} config Request configuration options\r\n     * @param {string} uid UID of the index\r\n     * @param {string} primaryKey? Primary Key of the index\r\n     */ function Index(config, uid, primaryKey) {\n        this.uid = uid;\n        this.primaryKey = primaryKey;\n        this.httpRequest = new HttpRequests(config);\n        this.tasks = new TaskClient(config);\n    }\n    ///\n    /// SEARCH\n    ///\n    /**\r\n     * Search for documents into an index\r\n     * @memberof Index\r\n     * @method search\r\n     * @template T\r\n     * @param {string | null} query? Query string\r\n     * @param {SearchParams} options? Search options\r\n     * @param {Partial<Request>} config? Additional request configuration options\r\n     * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n     */ Index.prototype.search = function(query, options, config) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/search\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, removeUndefinedFromObject(__assign(__assign({}, options), {\n                                q: query\n                            })), undefined, config)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Search for documents into an index using the GET method\r\n     * @memberof Index\r\n     * @method search\r\n     * @template T\r\n     * @param {string | null} query? Query string\r\n     * @param {SearchParams} options? Search options\r\n     * @param {Partial<Request>} config? Additional request configuration options\r\n     * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n     */ Index.prototype.searchGet = function(query, options, config) {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function() {\n            var url, parseFilter, getParams;\n            return __generator(this, function(_f) {\n                switch(_f.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/search\");\n                        parseFilter = function(filter) {\n                            if (typeof filter === \"string\") return filter;\n                            else if (Array.isArray(filter)) throw new MeiliSearchError(\"The filter query parameter should be in string format when using searchGet\");\n                            else return undefined;\n                        };\n                        getParams = __assign(__assign({\n                            q: query\n                        }, options), {\n                            filter: parseFilter(options === null || options === void 0 ? void 0 : options.filter),\n                            sort: (_a = options === null || options === void 0 ? void 0 : options.sort) === null || _a === void 0 ? void 0 : _a.join(\",\"),\n                            facetsDistribution: (_b = options === null || options === void 0 ? void 0 : options.facetsDistribution) === null || _b === void 0 ? void 0 : _b.join(\",\"),\n                            attributesToRetrieve: (_c = options === null || options === void 0 ? void 0 : options.attributesToRetrieve) === null || _c === void 0 ? void 0 : _c.join(\",\"),\n                            attributesToCrop: (_d = options === null || options === void 0 ? void 0 : options.attributesToCrop) === null || _d === void 0 ? void 0 : _d.join(\",\"),\n                            attributesToHighlight: (_e = options === null || options === void 0 ? void 0 : options.attributesToHighlight) === null || _e === void 0 ? void 0 : _e.join(\",\")\n                        });\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url, removeUndefinedFromObject(getParams), config)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _f.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// INDEX\n    ///\n    /**\r\n     * Get index information.\r\n     * @memberof Index\r\n     * @method getRawInfo\r\n     * @returns {Promise<IndexResponse>} Promise containing index information\r\n     */ Index.prototype.getRawInfo = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url, res;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        res = _a.sent();\n                        this.primaryKey = res.primaryKey;\n                        return [\n                            2 /*return*/ ,\n                            res\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Fetch and update Index information.\r\n     * @memberof Index\r\n     * @method fetchInfo\r\n     * @returns {Promise<this>} Promise to the current Index object with updated information\r\n     */ Index.prototype.fetchInfo = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.getRawInfo()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            this\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get Primary Key.\r\n     * @memberof Index\r\n     * @method fetchPrimaryKey\r\n     * @returns {Promise<string | undefined>} Promise containing the Primary Key of the index\r\n     */ Index.prototype.fetchPrimaryKey = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var _a;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        _a = this;\n                        return [\n                            4 /*yield*/ ,\n                            this.getRawInfo()\n                        ];\n                    case 1:\n                        _a.primaryKey = _b.sent().primaryKey;\n                        return [\n                            2 /*return*/ ,\n                            this.primaryKey\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Create an index.\r\n     * @memberof Index\r\n     * @method create\r\n     * @template T\r\n     * @param {string} uid Unique identifier of the Index\r\n     * @param {IndexOptions} options Index options\r\n     * @param {Config} config Request configuration options\r\n     * @returns {Promise<Index<T>>} Newly created Index object\r\n     */ Index.create = function(uid, options, config) {\n        if (options === void 0) {\n            options = {};\n        }\n        return __awaiter(this, void 0, void 0, function() {\n            var url, req;\n            return __generator(this, function(_a) {\n                url = \"indexes\";\n                req = new HttpRequests(config);\n                return [\n                    2 /*return*/ ,\n                    req.post(url, __assign(__assign({}, options), {\n                        uid: uid\n                    }))\n                ];\n            });\n        });\n    };\n    /**\r\n     * Update an index.\r\n     * @memberof Index\r\n     * @method update\r\n     * @param {IndexOptions} data Data to update\r\n     * @returns {Promise<this>} Promise to the current Index object with updated information\r\n     */ Index.prototype.update = function(data) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.put(url, data)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete an index.\r\n     * @memberof Index\r\n     * @method delete\r\n     * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n     */ Index.prototype[\"delete\"] = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// TASKS\n    ///\n    /**\r\n     * Get the list of all the index tasks.\r\n     *\r\n     * @memberof Indexes\r\n     * @method getTasks\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise containing all tasks\r\n     */ Index.prototype.getTasks = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.getIndexTasks(this.uid)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get one task of the index.\r\n     *\r\n     * @memberof Indexes\r\n     * @method getTask\r\n     * @param {number} taskId - Task identifier\r\n     *\r\n     * @returns {Promise<Task>} - Promise containing a task\r\n     */ Index.prototype.getTask = function(taskId) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.getIndexTask(this.uid, taskId)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Wait for a batch of an index tasks to be processed.\r\n     *\r\n     * @memberof Indexes\r\n     * @method waitForTasks\r\n     * @param {number[]} taskIds - Tasks identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise containing an array of tasks\r\n     */ Index.prototype.waitForTasks = function(taskIds, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.waitForClientTasks(taskIds, {\n                                timeOutMs: timeOutMs,\n                                intervalMs: intervalMs\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _e.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Wait for an index task to be processed.\r\n     *\r\n     * @memberof Indexes\r\n     * @method waitForTask\r\n     * @param {number} taskId - Task identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Task>} - Promise containing an array of tasks\r\n     */ Index.prototype.waitForTask = function(taskId, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.waitForClientTask(taskId, {\n                                timeOutMs: timeOutMs,\n                                intervalMs: intervalMs\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _e.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// STATS\n    ///\n    /**\r\n     * get stats of an index\r\n     * @memberof Index\r\n     * @method getStats\r\n     * @returns {Promise<IndexStats>} Promise containing object with stats of the index\r\n     */ Index.prototype.getStats = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/stats\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// DOCUMENTS\n    ///\n    /**\r\n     * get documents of an index\r\n     * @memberof Index\r\n     * @method getDocuments\r\n     * @template T\r\n     * @param {GetDocumentsParams<T>} options? Options to browse the documents\r\n     * @returns {Promise<GetDocumentsResponse<T>>} Promise containing Document responses\r\n     */ Index.prototype.getDocuments = function(options) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url, attr;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\n                        if (options !== undefined && Array.isArray(options.attributesToRetrieve)) {\n                            attr = options.attributesToRetrieve.join(\",\");\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url, __assign(__assign({}, options), attr !== undefined ? {\n                                attributesToRetrieve: attr\n                            } : {}))\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get one document\r\n     * @memberof Index\r\n     * @method getDocument\r\n     * @template T\r\n     * @param {string | number} documentId Document ID\r\n     * @returns {Promise<Document<T>>} Promise containing Document response\r\n     */ Index.prototype.getDocument = function(documentId) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Add or replace multiples documents to an index\r\n     * @memberof Index\r\n     * @method addDocuments\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.addDocuments = function(documents, options) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, documents, options)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Add or replace multiples documents to an index in batches\r\n     * @memberof Index\r\n     * @method addDocumentsInBatches\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n     * @param {number} batchSize Size of the batch\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued update objects for each batch\r\n     */ Index.prototype.addDocumentsInBatches = function(documents, batchSize, options) {\n        if (batchSize === void 0) {\n            batchSize = 1000;\n        }\n        return __awaiter(this, void 0, void 0, function() {\n            var updates, i, _a, _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        updates = [];\n                        i = 0;\n                        _c.label = 1;\n                    case 1:\n                        if (!(i < documents.length)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        _b = (_a = updates).push;\n                        return [\n                            4 /*yield*/ ,\n                            this.addDocuments(documents.slice(i, i + batchSize), options)\n                        ];\n                    case 2:\n                        _b.apply(_a, [\n                            _c.sent()\n                        ]);\n                        _c.label = 3;\n                    case 3:\n                        i += batchSize;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            updates\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Add or update multiples documents to an index\r\n     * @memberof Index\r\n     * @method updateDocuments\r\n     * @param {Array<Document<Partial<T>>>} documents Array of Document objects to add/update\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateDocuments = function(documents, options) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.put(url, documents, options)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Add or update multiples documents to an index in batches\r\n     * @memberof Index\r\n     * @method updateDocuments\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/update\r\n     * @param {number} batchSize Size of the batch\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued update objects for each batch\r\n     */ Index.prototype.updateDocumentsInBatches = function(documents, batchSize, options) {\n        if (batchSize === void 0) {\n            batchSize = 1000;\n        }\n        return __awaiter(this, void 0, void 0, function() {\n            var updates, i, _a, _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        updates = [];\n                        i = 0;\n                        _c.label = 1;\n                    case 1:\n                        if (!(i < documents.length)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        _b = (_a = updates).push;\n                        return [\n                            4 /*yield*/ ,\n                            this.updateDocuments(documents.slice(i, i + batchSize), options)\n                        ];\n                    case 2:\n                        _b.apply(_a, [\n                            _c.sent()\n                        ]);\n                        _c.label = 3;\n                    case 3:\n                        i += batchSize;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            updates\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete one document\r\n     * @memberof Index\r\n     * @method deleteDocument\r\n     * @param {string | number} documentId Id of Document to delete\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.deleteDocument = function(documentId) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete multiples documents of an index\r\n     * @memberof Index\r\n     * @method deleteDocuments\r\n     * @param {string[] | number[]} documentsIds Array of Document Ids to delete\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.deleteDocuments = function(documentsIds) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents/delete-batch\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, documentsIds)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete all documents of an index\r\n     * @memberof Index\r\n     * @method deleteAllDocuments\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.deleteAllDocuments = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// SETTINGS\n    ///\n    /**\r\n     * Retrieve all settings\r\n     * @memberof Index\r\n     * @method getSettings\r\n     * @returns {Promise<Settings>} Promise containing Settings object\r\n     */ Index.prototype.getSettings = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update all settings\r\n     * Any parameters not provided will be left unchanged.\r\n     * @memberof Index\r\n     * @method updateSettings\r\n     * @param {Settings} settings Object containing parameters with their updated values\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.updateSettings = function(settings) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, settings)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset settings.\r\n     * @memberof Index\r\n     * @method resetSettings\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.resetSettings = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// SYNONYMS\n    ///\n    /**\r\n     * Get the list of all synonyms\r\n     * @memberof Index\r\n     * @method getSynonyms\r\n     * @returns {Promise<object>} Promise containing object of synonym mappings\r\n     */ Index.prototype.getSynonyms = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the list of synonyms. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateSynonyms\r\n     * @param {Synonyms} synonyms Mapping of synonyms with their associated words\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.updateSynonyms = function(synonyms) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, synonyms)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the synonym list to be empty again\r\n     * @memberof Index\r\n     * @method resetSynonyms\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.resetSynonyms = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// STOP WORDS\n    ///\n    /**\r\n     * Get the list of all stop-words\r\n     * @memberof Index\r\n     * @method getStopWords\r\n     * @returns {Promise<string[]>} Promise containing array of stop-words\r\n     */ Index.prototype.getStopWords = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the list of stop-words. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateStopWords\r\n     * @param {StopWords} stopWords Array of strings that contains the stop-words.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateStopWords = function(stopWords) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, stopWords)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the stop-words list to be empty again\r\n     * @memberof Index\r\n     * @method resetStopWords\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetStopWords = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// RANKING RULES\n    ///\n    /**\r\n     * Get the list of all ranking-rules\r\n     * @memberof Index\r\n     * @method getRankingRules\r\n     * @returns {Promise<string[]} Promise containing array of ranking-rules\r\n     */ Index.prototype.getRankingRules = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the list of ranking-rules. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateRankingRules\r\n     * @param {RankingRules} rankingRules Array that contain ranking rules sorted by order of importance.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateRankingRules = function(rankingRules) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, rankingRules)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the ranking rules list to its default value\r\n     * @memberof Index\r\n     * @method resetRankingRules\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetRankingRules = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// DISTINCT ATTRIBUTE\n    ///\n    /**\r\n     * Get the distinct-attribute\r\n     * @memberof Index\r\n     * @method getDistinctAttribute\r\n     * @returns {Promise<string | null>} Promise containing the distinct-attribute of the index\r\n     */ Index.prototype.getDistinctAttribute = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the distinct-attribute.\r\n     * @memberof Index\r\n     * @method updateDistinctAttribute\r\n     * @param {DistinctAttribute} distinctAttribute Field name of the distinct-attribute\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateDistinctAttribute = function(distinctAttribute) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, distinctAttribute)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the distinct-attribute.\r\n     * @memberof Index\r\n     * @method resetDistinctAttribute\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetDistinctAttribute = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// FILTERABLE ATTRIBUTES\n    ///\n    /**\r\n     * Get the filterable-attributes\r\n     * @memberof Index\r\n     * @method getFilterableAttributes\r\n     * @returns {Promise<string[]>} Promise containing an array of filterable-attributes\r\n     */ Index.prototype.getFilterableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the filterable-attributes.\r\n     * @memberof Index\r\n     * @method updateFilterableAttributes\r\n     * @param {FilterableAttributes} filterableAttributes Array of strings containing the attributes that can be used as filters at query time\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateFilterableAttributes = function(filterableAttributes) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, filterableAttributes)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the filterable-attributes.\r\n     * @memberof Index\r\n     * @method resetFilterableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetFilterableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// SORTABLE ATTRIBUTES\n    ///\n    /**\r\n     * Get the sortable-attributes\r\n     * @memberof Index\r\n     * @method getSortableAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of sortable-attributes\r\n     */ Index.prototype.getSortableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the sortable-attributes.\r\n     * @memberof Index\r\n     * @method updateSortableAttributes\r\n     * @param {SortableAttributes} sortableAttributes Array of strings containing the attributes that can be used to sort search results at query time\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.updateSortableAttributes = function(sortableAttributes) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, sortableAttributes)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the sortable-attributes.\r\n     * @memberof Index\r\n     * @method resetSortableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.resetSortableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// SEARCHABLE ATTRIBUTE\n    ///\n    /**\r\n     * Get the searchable-attributes\r\n     * @memberof Index\r\n     * @method getSearchableAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of searchable-attributes\r\n     */ Index.prototype.getSearchableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the searchable-attributes.\r\n     * @memberof Index\r\n     * @method updateSearchableAttributes\r\n     * @param {SearchableAttributes} searchableAttributes Array of strings that contains searchable attributes sorted by order of importance(most to least important)\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.updateSearchableAttributes = function(searchableAttributes) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, searchableAttributes)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the searchable-attributes.\r\n     * @memberof Index\r\n     * @method resetSearchableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */ Index.prototype.resetSearchableAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// DISPLAYED ATTRIBUTE\n    ///\n    /**\r\n     * Get the displayed-attributes\r\n     * @memberof Index\r\n     * @method getDisplayedAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of displayed-attributes\r\n     */ Index.prototype.getDisplayedAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the displayed-attributes.\r\n     * @memberof Index\r\n     * @method updateDisplayedAttributes\r\n     * @param {DisplayedAttributes} displayedAttributes Array of strings that contains attributes of an index to display\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateDisplayedAttributes = function(displayedAttributes) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, displayedAttributes)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the displayed-attributes.\r\n     * @memberof Index\r\n     * @method resetDisplayedAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetDisplayedAttributes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// TYPO TOLERANCE\n    ///\n    /**\r\n     * Get the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method getTypoTolerance\r\n     * @returns {Promise<string[]>} Promise containing the typo tolerance settings.\r\n     */ Index.prototype.getTypoTolerance = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method updateTypoTolerance\r\n     * @param {TypoTolerance} typoTolerance Object containing the custom typo tolerance settings.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.updateTypoTolerance = function(typoTolerance) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, typoTolerance)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Reset the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method resetTypoTolerance\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */ Index.prototype.resetTypoTolerance = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    return Index;\n}();\n/*\r\n * Bundle: MeiliSearch\r\n * Project: MeiliSearch - Javascript API\r\n * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n * Copyright: 2019, MeiliSearch\r\n */ var Client = /** @class */ function() {\n    /**\r\n     * Creates new MeiliSearch instance\r\n     * @param {Config} config Configuration object\r\n     */ function Client(config) {\n        this.config = config;\n        this.httpRequest = new HttpRequests(config);\n        this.tasks = new TaskClient(config);\n    }\n    /**\r\n     * Return an Index instance\r\n     * @memberof MeiliSearch\r\n     * @method index\r\n     * @template T\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Index<T>} Instance of Index\r\n     */ Client.prototype.index = function(indexUid) {\n        return new Index(this.config, indexUid);\n    };\n    /**\r\n     * Gather information about an index by calling MeiliSearch and\r\n     * return an Index instance with the gathered information\r\n     * @memberof MeiliSearch\r\n     * @method getIndex\r\n     * @template T\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance\r\n     */ Client.prototype.getIndex = function(indexUid) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    new Index(this.config, indexUid).fetchInfo()\n                ];\n            });\n        });\n    };\n    /**\r\n     * Gather information about an index by calling MeiliSearch and\r\n     * return the raw JSON response\r\n     * @memberof MeiliSearch\r\n     * @method getRawIndex\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Promise<IndexResponse>} Promise returning index information\r\n     */ Client.prototype.getRawIndex = function(indexUid) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    new Index(this.config, indexUid).getRawInfo()\n                ];\n            });\n        });\n    };\n    /**\r\n     * Get all the indexes as Index instances.\r\n     * @memberof MeiliSearch\r\n     * @method getIndexes\r\n     * @returns {Promise<Index[]>} Promise returning array of raw index information\r\n     */ Client.prototype.getIndexes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var response, indexes;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.getRawIndexes()\n                        ];\n                    case 1:\n                        response = _a.sent();\n                        indexes = response.map(function(index) {\n                            return new Index(_this.config, index.uid, index.primaryKey);\n                        });\n                        return [\n                            2 /*return*/ ,\n                            indexes\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get all the indexes in their raw value (no Index instances).\r\n     * @memberof MeiliSearch\r\n     * @method getRawIndexes\r\n     * @returns {Promise<IndexResponse[]>} Promise returning array of raw index information\r\n     */ Client.prototype.getRawIndexes = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"indexes\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Create a new index\r\n     * @memberof MeiliSearch\r\n     * @method createIndex\r\n     * @template T\r\n     * @param {string} uid The index UID\r\n     * @param {IndexOptions} options Index options\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance\r\n     */ Client.prototype.createIndex = function(uid, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            Index.create(uid, options, this.config)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update an index\r\n     * @memberof MeiliSearch\r\n     * @method updateIndex\r\n     * @template T\r\n     * @param {string} uid The index UID\r\n     * @param {IndexOptions} options Index options to update\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance after updating\r\n     */ Client.prototype.updateIndex = function(uid, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            new Index(this.config, uid).update(options)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete an index\r\n     * @memberof MeiliSearch\r\n     * @method deleteIndex\r\n     * @param {string} uid The index UID\r\n     * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n     */ Client.prototype.deleteIndex = function(uid) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            new Index(this.config, uid)[\"delete\"]()\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Deletes an index if it already exists.\r\n     * @memberof MeiliSearch\r\n     * @method deleteIndexIfExists\r\n     * @param {string} uid The index UID\r\n     * @returns {Promise<boolean>} Promise which resolves to true when index exists and is deleted successfully, otherwise false if it does not exist\r\n     */ Client.prototype.deleteIndexIfExists = function(uid) {\n        return __awaiter(this, void 0, void 0, function() {\n            var e_1;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        _a.trys.push([\n                            0,\n                            2,\n                            ,\n                            3\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            this.deleteIndex(uid)\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            true\n                        ];\n                    case 2:\n                        e_1 = _a.sent();\n                        if (e_1.code === \"index_not_found\" /* INDEX_NOT_FOUND */ ) {\n                            return [\n                                2 /*return*/ ,\n                                false\n                            ];\n                        }\n                        throw e_1;\n                    case 3:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// TASKS\n    ///\n    /**\r\n     * Get the list of all client tasks\r\n     * @memberof MeiliSearch\r\n     * @method getTasks\r\n     * @returns {Promise<Result<Task[]>>} - Promise returning all tasks\r\n     */ Client.prototype.getTasks = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.getClientTasks()\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get one task on the client scope\r\n     * @memberof MeiliSearch\r\n     * @method getTask\r\n     * @param {number} taskId - Task identifier\r\n     * @returns {Promise<Task>} - Promise returning a task\r\n     */ Client.prototype.getTask = function(taskId) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.getClientTask(taskId)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Wait for a batch of tasks to be processed.\r\n     * @memberof MeiliSearch\r\n     * @method waitForTasks\r\n     * @param {number[]} taskIds - Tasks identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise returning an array of tasks\r\n     */ Client.prototype.waitForTasks = function(taskIds, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.waitForClientTasks(taskIds, {\n                                timeOutMs: timeOutMs,\n                                intervalMs: intervalMs\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _e.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Wait for a task to be processed.\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method waitForTask\r\n     * @param {number} taskId - Task identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Task>} - Promise returning an array of tasks\r\n     */ Client.prototype.waitForTask = function(taskId, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.tasks.waitForClientTask(taskId, {\n                                timeOutMs: timeOutMs,\n                                intervalMs: intervalMs\n                            })\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _e.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// KEYS\n    ///\n    /**\r\n     * Get all API keys\r\n     * @memberof MeiliSearch\r\n     * @method getKeys\r\n     * @returns {Promise<Keys>} Promise returning an object with keys\r\n     */ Client.prototype.getKeys = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"keys\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get one API key\r\n     * @memberof MeiliSearch\r\n     * @method getKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @returns {Promise<Keys>} Promise returning a key\r\n     */ Client.prototype.getKey = function(key) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"keys/\".concat(key);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Create one API key\r\n     * @memberof MeiliSearch\r\n     * @method createKey\r\n     *\r\n     * @param {KeyPayload} options - Key options\r\n     * @returns {Promise<Key>} Promise returning an object with keys\r\n     */ Client.prototype.createKey = function(options) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"keys\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url, options)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Update one API key\r\n     * @memberof MeiliSearch\r\n     * @method updateKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @param {KeyPayload} options - Key options\r\n     * @returns {Promise<Key>} Promise returning an object with keys\r\n     */ Client.prototype.updateKey = function(key, options) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"keys/\".concat(key);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.patch(url, options)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Delete one API key\r\n     * @memberof MeiliSearch\r\n     * @method deleteKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @returns {Promise<Void>}\r\n     */ Client.prototype.deleteKey = function(key) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"keys/\".concat(key);\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest[\"delete\"](url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// HEALTH\n    ///\n    /**\r\n     * Checks if the server is healthy, otherwise an error will be thrown.\r\n     * @memberof MeiliSearch\r\n     * @method health\r\n     * @returns {Promise<Health>} Promise returning an object with health details\r\n     */ Client.prototype.health = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"health\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Checks if the server is healthy, return true or false.\r\n     * @memberof MeiliSearch\r\n     * @method isHealthy\r\n     * @returns {Promise<boolean>} Promise returning a boolean\r\n     */ Client.prototype.isHealthy = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        _a.trys.push([\n                            0,\n                            2,\n                            ,\n                            3\n                        ]);\n                        url = \"health\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            true\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            false\n                        ];\n                    case 3:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// STATS\n    ///\n    /**\r\n     * Get the stats of all the database\r\n     * @memberof MeiliSearch\r\n     * @method getStats\r\n     * @returns {Promise<Stats>} Promise returning object of all the stats\r\n     */ Client.prototype.getStats = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"stats\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// VERSION\n    ///\n    /**\r\n     * Get the version of MeiliSearch\r\n     * @memberof MeiliSearch\r\n     * @method getVersion\r\n     * @returns {Promise<Version>} Promise returning object with version details\r\n     */ Client.prototype.getVersion = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"version\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    ///\n    /// DUMPS\n    ///\n    /**\r\n     * Triggers a dump creation process\r\n     * @memberof MeiliSearch\r\n     * @method createDump\r\n     * @returns {Promise<EnqueuedDump>} Promise returning object of the enqueued update\r\n     */ Client.prototype.createDump = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"dumps\";\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.post(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Get the status of a dump creation process\r\n     * @memberof MeiliSearch\r\n     * @method getDumpStatus\r\n     * @param {string} dumpUid Dump UID\r\n     * @returns {Promise<EnqueuedDump>} Promise returning object of the enqueued update\r\n     */ Client.prototype.getDumpStatus = function(dumpUid) {\n        return __awaiter(this, void 0, void 0, function() {\n            var url;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        url = \"dumps/\".concat(dumpUid, \"/status\");\n                        return [\n                            4 /*yield*/ ,\n                            this.httpRequest.get(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _a.sent()\n                        ];\n                }\n            });\n        });\n    };\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */ Client.prototype.generateTenantToken = function(_searchRules, _options) {\n        var error = new Error();\n        throw new Error(\"Meilisearch: failed to generate a tenant token. Generation of a token only works in a node environment \\n \".concat(error.stack, \".\"));\n    };\n    return Client;\n}();\nfunction encode64(data) {\n    return Buffer.from(JSON.stringify(data)).toString(\"base64\");\n}\n/**\r\n * Create the header of the token.\r\n *\r\n * @param {String} apiKey API key used to sign the token.\r\n * @param {String} encodedHeader Header of the token in base64.\r\n * @param {String} encodedPayload Payload of the token in base64.\r\n * @returns {String} The signature of the token in base64.\r\n */ function sign(apiKey, encodedHeader, encodedPayload) {\n    return crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac(\"sha256\", apiKey).update(\"\".concat(encodedHeader, \".\").concat(encodedPayload)).digest(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\r\n * Create the header of the token.\r\n *\r\n * @returns {String} The header encoded in base64.\r\n */ function createHeader() {\n    var header = {\n        alg: \"HS256\",\n        typ: \"JWT\"\n    };\n    return encode64(header).replace(/=/g, \"\");\n}\n/**\r\n * Validate the parameter used for the payload of the token.\r\n *\r\n * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n * @param {String} apiKey Api key used as issuer of the token.\r\n * @param {Date | undefined} expiresAt Date at which the token expires.\r\n */ function validatePayload(payloadParams) {\n    var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;\n    var error = new Error();\n    if (expiresAt) {\n        if (!(expiresAt instanceof Date) || expiresAt.getTime() < Date.now()) {\n            throw new Error(\"Meilisearch: When the expiresAt field in the token generation has a value, it must be a date set in the future and not in the past. \\n \".concat(error.stack, \".\"));\n        }\n    }\n    if (searchRules) {\n        if (!(typeof searchRules === \"object\" || Array.isArray(searchRules))) {\n            throw new Error(\"Meilisearch: The search rules added in the token generation must be of type array or object. \\n \".concat(error.stack, \".\"));\n        }\n    }\n    if (!apiKey || typeof apiKey !== \"string\") {\n        throw new Error(\"Meilisearch: The API key used for the token generation must exist and be of type string. \\n \".concat(error.stack, \".\"));\n    }\n}\n/**\r\n * Create the payload of the token.\r\n *\r\n * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n * @param {String} apiKey Api key used as issuer of the token.\r\n * @param {Date | undefined} expiresAt Date at which the token expires.\r\n * @returns {String} The payload encoded in base64.\r\n */ function createPayload(payloadParams) {\n    var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;\n    validatePayload(payloadParams);\n    var payload = {\n        searchRules: searchRules,\n        apiKeyPrefix: apiKey.substring(0, 8),\n        exp: expiresAt === null || expiresAt === void 0 ? void 0 : expiresAt.getTime()\n    };\n    return encode64(payload).replace(/=/g, \"\");\n}\nvar Token = /** @class */ function() {\n    function Token(config) {\n        this.config = config;\n    }\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */ Token.prototype.generateTenantToken = function(searchRules, options) {\n        var apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || this.config.apiKey || \"\";\n        var expiresAt = options === null || options === void 0 ? void 0 : options.expiresAt;\n        var encodedHeader = createHeader();\n        var encodedPayload = createPayload({\n            searchRules: searchRules,\n            apiKey: apiKey,\n            expiresAt: expiresAt\n        });\n        var signature = sign(apiKey, encodedHeader, encodedPayload);\n        return \"\".concat(encodedHeader, \".\").concat(encodedPayload, \".\").concat(signature);\n    };\n    return Token;\n}();\nvar MeiliSearch = /** @class */ function(_super) {\n    __extends(MeiliSearch, _super);\n    function MeiliSearch(config) {\n        var _this = _super.call(this, config) || this;\n        _this.tokens = new Token(config);\n        return _this;\n    }\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */ MeiliSearch.prototype.generateTenantToken = function(searchRules, options) {\n        if (true) {\n            return this.tokens.generateTenantToken(searchRules, options);\n        }\n        return _super.prototype.generateTenantToken.call(this, searchRules, options);\n    };\n    return MeiliSearch;\n}(Client);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.esm.js\n");

/***/ })

};
;