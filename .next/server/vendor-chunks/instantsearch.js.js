"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/instantsearch.js";
exports.ids = ["vendor-chunks/instantsearch.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/index.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar AlgoliaSearchHelper = __webpack_require__(/*! ./src/algoliasearch.helper */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\");\nvar SearchParameters = __webpack_require__(/*! ./src/SearchParameters */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./src/SearchResults */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @return {AlgoliaSearchHelper} The helper instance\n */ function algoliasearchHelper(client, index, opts) {\n    return new AlgoliaSearchHelper(client, index, opts);\n}\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */ algoliasearchHelper.version = __webpack_require__(/*! ./src/version */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/version.js\");\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */ algoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */ algoliasearchHelper.SearchParameters = SearchParameters;\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */ algoliasearchHelper.SearchResults = SearchResults;\nmodule.exports = algoliasearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxzQkFBc0JDLG1CQUFPQSxDQUFDO0FBQ2xDLElBQUlDLG1CQUFtQkQsbUJBQU9BLENBQUM7QUFDL0IsSUFBSUUsZ0JBQWdCRixtQkFBT0EsQ0FBQztBQUU1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBOEJDLEdBQ0QsU0FBU0csb0JBQW9CQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPLElBQUlQLG9CQUFvQkssUUFBUUMsT0FBT0M7QUFDaEQ7QUFFQTs7OztDQUlDLEdBQ0RILG9CQUFvQkksT0FBTyxHQUFHUCxtQkFBT0EsQ0FBQztBQUV0Qzs7OztDQUlDLEdBQ0RHLG9CQUFvQkosbUJBQW1CLEdBQUdBO0FBRTFDOzs7O0NBSUMsR0FDREksb0JBQW9CRixnQkFBZ0IsR0FBR0E7QUFFdkM7Ozs7Q0FJQyxHQUNERSxvQkFBb0JELGFBQWEsR0FBR0E7QUFFcENNLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9pbmRleC5qcz9iNGQyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFsZ29saWFTZWFyY2hIZWxwZXIgPSByZXF1aXJlKCcuL3NyYy9hbGdvbGlhc2VhcmNoLmhlbHBlcicpO1xudmFyIFNlYXJjaFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3NyYy9TZWFyY2hQYXJhbWV0ZXJzJyk7XG52YXIgU2VhcmNoUmVzdWx0cyA9IHJlcXVpcmUoJy4vc3JjL1NlYXJjaFJlc3VsdHMnKTtcblxuLyoqXG4gKiBUaGUgYWxnb2xpYXNlYXJjaEhlbHBlciBtb2R1bGUgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBsZXQgaXRzXG4gKiBjb250YWlucyBldmVyeXRoaW5nIG5lZWRlZCB0byB1c2UgdGhlIEFsZ29saWFzZWFyY2hcbiAqIEhlbHBlci4gSXQgaXMgYSBhbHNvIGEgZnVuY3Rpb24gdGhhdCBpbnN0YW5jaWF0ZSB0aGUgaGVscGVyLlxuICogVG8gdXNlIHRoZSBoZWxwZXIsIHlvdSBhbHNvIG5lZWQgdGhlIEFsZ29saWEgSlMgY2xpZW50IHYzLlxuICogQGV4YW1wbGVcbiAqIC8vdXNpbmcgdGhlIFVNRCBidWlsZFxuICogdmFyIGNsaWVudCA9IGFsZ29saWFzZWFyY2goJ2xhdGVuY3knLCAnNmJlMDU3NmZmNjFjMDUzZDVmOWEzMjI1ZTJhOTBmNzYnKTtcbiAqIHZhciBoZWxwZXIgPSBhbGdvbGlhc2VhcmNoSGVscGVyKGNsaWVudCwgJ2Jlc3RidXknLCB7XG4gKiAgIGZhY2V0czogWydzaGlwcGluZyddLFxuICogICBkaXNqdW5jdGl2ZUZhY2V0czogWydjYXRlZ29yeSddXG4gKiB9KTtcbiAqIGhlbHBlci5vbigncmVzdWx0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgY29uc29sZS5sb2coZXZlbnQucmVzdWx0cyk7XG4gKiB9KTtcbiAqIGhlbHBlclxuICogICAudG9nZ2xlRmFjZXRSZWZpbmVtZW50KCdjYXRlZ29yeScsICdNb3ZpZXMgJiBUViBTaG93cycpXG4gKiAgIC50b2dnbGVGYWNldFJlZmluZW1lbnQoJ3NoaXBwaW5nJywgJ0ZyZWUgc2hpcHBpbmcnKVxuICogICAuc2VhcmNoKCk7XG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGhlbHBlciBpcyBhbiBldmVudCBlbWl0dGVyIHVzaW5nIHRoZSBub2RlIEFQSVxuICogaGVscGVyLm9uKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5vbmNlKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5yZW1vdmVMaXN0ZW5lcigncmVzdWx0JywgdXBkYXRlVGhlUmVzdWx0cyk7XG4gKiBoZWxwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZXN1bHQnKTtcbiAqIEBtb2R1bGUgYWxnb2xpYXNlYXJjaEhlbHBlclxuICogQHBhcmFtICB7QWxnb2xpYVNlYXJjaH0gY2xpZW50IGFuIEFsZ29saWFTZWFyY2ggY2xpZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGluZGV4IHRoZSBuYW1lIG9mIHRoZSBpbmRleCB0byBxdWVyeVxuICogQHBhcmFtICB7U2VhcmNoUGFyYW1ldGVyc3xvYmplY3R9IG9wdHMgYW4gb2JqZWN0IGRlZmluaW5nIHRoZSBpbml0aWFsIGNvbmZpZyBvZiB0aGUgc2VhcmNoLiBJdCBkb2Vzbid0IGhhdmUgdG8gYmUgYSB7U2VhcmNoUGFyYW1ldGVyc30sIGp1c3QgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgeW91IG5lZWQgZnJvbSBpdC5cbiAqIEByZXR1cm4ge0FsZ29saWFTZWFyY2hIZWxwZXJ9IFRoZSBoZWxwZXIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWxnb2xpYXNlYXJjaEhlbHBlcihjbGllbnQsIGluZGV4LCBvcHRzKSB7XG4gIHJldHVybiBuZXcgQWxnb2xpYVNlYXJjaEhlbHBlcihjbGllbnQsIGluZGV4LCBvcHRzKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBjdXJyZW50bHkgdXNlZFxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci52ZXJzaW9uXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLnZlcnNpb24gPSByZXF1aXJlKCcuL3NyYy92ZXJzaW9uJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIHRoZSBIZWxwZXIuXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXJcbiAqIEB0eXBlIHtBbGdvbGlhU2VhcmNoSGVscGVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXIgPSBBbGdvbGlhU2VhcmNoSGVscGVyO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBzZWFyY2guXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnNcbiAqIEB0eXBlIHtTZWFyY2hQYXJhbWV0ZXJzfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnMgPSBTZWFyY2hQYXJhbWV0ZXJzO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIHNlYXJjaC5cbiAqIEBtZW1iZXIgbW9kdWxlOmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0c1xuICogQHR5cGUge1NlYXJjaFJlc3VsdHN9XG4gKi9cbmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0cyA9IFNlYXJjaFJlc3VsdHM7XG5cbm1vZHVsZS5leHBvcnRzID0gYWxnb2xpYXNlYXJjaEhlbHBlcjtcbiJdLCJuYW1lcyI6WyJBbGdvbGlhU2VhcmNoSGVscGVyIiwicmVxdWlyZSIsIlNlYXJjaFBhcmFtZXRlcnMiLCJTZWFyY2hSZXN1bHRzIiwiYWxnb2xpYXNlYXJjaEhlbHBlciIsImNsaWVudCIsImluZGV4Iiwib3B0cyIsInZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/DerivedHelper/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/DerivedHelper/index.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/@algolia/events/events.js\");\nvar inherits = __webpack_require__(/*! ../functions/inherits */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/inherits.js\");\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state\n */ function DerivedHelper(mainHelper, fn) {\n    this.main = mainHelper;\n    this.fn = fn;\n    this.lastResults = null;\n}\ninherits(DerivedHelper, EventEmitter);\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */ DerivedHelper.prototype.detach = function() {\n    this.removeAllListeners();\n    this.main.detachDerivedHelper(this);\n};\nDerivedHelper.prototype.getModifiedState = function(parameters) {\n    return this.fn(parameters);\n};\nmodule.exports = DerivedHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL0Rlcml2ZWRIZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUUzQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELFNBQVNFLGNBQWNDLFVBQVUsRUFBRUMsRUFBRTtJQUNuQyxJQUFJLENBQUNDLElBQUksR0FBR0Y7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0E7SUFDVixJQUFJLENBQUNFLFdBQVcsR0FBRztBQUNyQjtBQUVBTCxTQUFTQyxlQUFlSDtBQUV4Qjs7OztDQUlDLEdBQ0RHLGNBQWNLLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHO0lBQy9CLElBQUksQ0FBQ0Msa0JBQWtCO0lBQ3ZCLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxtQkFBbUIsQ0FBQyxJQUFJO0FBQ3BDO0FBRUFSLGNBQWNLLFNBQVMsQ0FBQ0ksZ0JBQWdCLEdBQUcsU0FBVUMsVUFBVTtJQUM3RCxPQUFPLElBQUksQ0FBQ1IsRUFBRSxDQUFDUTtBQUNqQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL0Rlcml2ZWRIZWxwZXIvaW5kZXguanM/NDcxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdAYWxnb2xpYS9ldmVudHMnKTtcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2luaGVyaXRzJyk7XG5cbi8qKlxuICogQSBEZXJpdmVkSGVscGVyIGlzIGEgd2F5IHRvIGNyZWF0ZSBzdWIgcmVxdWVzdHMgdG9cbiAqIEFsZ29saWEgZnJvbSBhIG1haW4gaGVscGVyLlxuICogQGNsYXNzXG4gKiBAY2xhc3NkZXNjIFRoZSBEZXJpdmVkSGVscGVyIHByb3ZpZGVzIGFuIGV2ZW50IGJhc2VkIGludGVyZmFjZSBmb3Igc2VhcmNoIGNhbGxiYWNrczpcbiAqICAtIHNlYXJjaDogd2hlbiBhIHNlYXJjaCBpcyB0cmlnZ2VyZWQgdXNpbmcgdGhlIGBzZWFyY2goKWAgbWV0aG9kLlxuICogIC0gcmVzdWx0OiB3aGVuIHRoZSByZXNwb25zZSBpcyByZXRyaWV2ZWQgZnJvbSBBbGdvbGlhIGFuZCBpcyBwcm9jZXNzZWQuXG4gKiAgICBUaGlzIGV2ZW50IGNvbnRhaW5zIGEge0BsaW5rIFNlYXJjaFJlc3VsdHN9IG9iamVjdCBhbmQgdGhlXG4gKiAgICB7QGxpbmsgU2VhcmNoUGFyYW1ldGVyc30gY29ycmVzcG9uZGluZyB0byB0aGlzIGFuc3dlci5cbiAqIEBwYXJhbSB7QWxnb2xpYVNlYXJjaEhlbHBlcn0gbWFpbkhlbHBlciB0aGUgbWFpbiBoZWxwZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGRlcml2ZWQgc3RhdGVcbiAqL1xuZnVuY3Rpb24gRGVyaXZlZEhlbHBlcihtYWluSGVscGVyLCBmbikge1xuICB0aGlzLm1haW4gPSBtYWluSGVscGVyO1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMubGFzdFJlc3VsdHMgPSBudWxsO1xufVxuXG5pbmhlcml0cyhEZXJpdmVkSGVscGVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vKipcbiAqIERldGFjaCB0aGlzIGhlbHBlciBmcm9tIHRoZSBtYWluIGhlbHBlclxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICogQHRocm93cyBFcnJvciBpZiB0aGUgZGVyaXZlZCBoZWxwZXIgaXMgYWxyZWFkeSBkZXRhY2hlZFxuICovXG5EZXJpdmVkSGVscGVyLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMubWFpbi5kZXRhY2hEZXJpdmVkSGVscGVyKHRoaXMpO1xufTtcblxuRGVyaXZlZEhlbHBlci5wcm90b3R5cGUuZ2V0TW9kaWZpZWRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gIHJldHVybiB0aGlzLmZuKHBhcmFtZXRlcnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXJpdmVkSGVscGVyO1xuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJpbmhlcml0cyIsIkRlcml2ZWRIZWxwZXIiLCJtYWluSGVscGVyIiwiZm4iLCJtYWluIiwibGFzdFJlc3VsdHMiLCJwcm90b3R5cGUiLCJkZXRhY2giLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJkZXRhY2hEZXJpdmVkSGVscGVyIiwiZ2V0TW9kaWZpZWRTdGF0ZSIsInBhcmFtZXRlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */ var defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar lib = {\n    /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */ addRefinement: function addRefinement(refinementList, attribute, value) {\n        if (lib.isRefined(refinementList, attribute, value)) {\n            return refinementList;\n        }\n        var valueAsString = \"\" + value;\n        var facetRefinement = !refinementList[attribute] ? [\n            valueAsString\n        ] : refinementList[attribute].concat(valueAsString);\n        var mod = {};\n        mod[attribute] = facetRefinement;\n        return defaultsPure({}, mod, refinementList);\n    },\n    /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */ removeRefinement: function removeRefinement(refinementList, attribute, value) {\n        if (value === undefined) {\n            // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n            // the form with a string will remove the attribute completely\n            return lib.clearRefinement(refinementList, function(v, f) {\n                return attribute === f;\n            });\n        }\n        var valueAsString = \"\" + value;\n        return lib.clearRefinement(refinementList, function(v, f) {\n            return attribute === f && valueAsString === v;\n        });\n    },\n    /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */ toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n        if (value === undefined) throw new Error(\"toggleRefinement should be used with a value\");\n        if (lib.isRefined(refinementList, attribute, value)) {\n            return lib.removeRefinement(refinementList, attribute, value);\n        }\n        return lib.addRefinement(refinementList, attribute, value);\n    },\n    /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */ clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n        if (attribute === undefined) {\n            // return the same object if the list is already empty\n            // this is mainly for tests, as it doesn't have much impact on performance\n            if (!objectHasKeys(refinementList)) {\n                return refinementList;\n            }\n            return {};\n        } else if (typeof attribute === \"string\") {\n            return omit(refinementList, [\n                attribute\n            ]);\n        } else if (typeof attribute === \"function\") {\n            var hasChanged = false;\n            var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n                var values = refinementList[key] || [];\n                var facetList = values.filter(function(value) {\n                    return !attribute(value, key, refinementType);\n                });\n                if (facetList.length !== values.length) {\n                    hasChanged = true;\n                }\n                memo[key] = facetList;\n                return memo;\n            }, {});\n            if (hasChanged) return newRefinementList;\n            return refinementList;\n        }\n        // We return nothing if the attribute is not undefined, a string or a function,\n        // as it is not a valid value for a refinement\n        return undefined;\n    },\n    /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */ isRefined: function isRefined(refinementList, attribute, refinementValue) {\n        var containsRefinements = Boolean(refinementList[attribute]) && refinementList[attribute].length > 0;\n        if (refinementValue === undefined || !containsRefinements) {\n            return containsRefinements;\n        }\n        var refinementValueAsString = \"\" + refinementValue;\n        return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n    }\n};\nmodule.exports = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/index.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar intersection = __webpack_require__(/*! ../functions/intersection */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/intersection.js\");\nvar merge = __webpack_require__(/*! ../functions/merge */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar valToNumber = __webpack_require__(/*! ../functions/valToNumber */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/valToNumber.js\");\nvar isValidUserToken = __webpack_require__(/*! ../utils/isValidUserToken */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\");\nvar RefinementList = __webpack_require__(/*! ./RefinementList */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\");\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */ function isEqualNumericRefinement(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        return a.length === b.length && a.every(function(el, i) {\n            return isEqualNumericRefinement(b[i], el);\n        });\n    }\n    return a === b;\n}\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */ function findArray(array, searchedValue) {\n    return find(array, function(currentValue) {\n        return isEqualNumericRefinement(currentValue, searchedValue);\n    });\n}\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */ /**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */ /**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */ function SearchParameters(newParameters) {\n    var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n    if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n        // eslint-disable-next-line no-console\n        console.warn(\"[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}\");\n    }\n    /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */ this.facets = params.facets || [];\n    /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */ this.disjunctiveFacets = params.disjunctiveFacets || [];\n    /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */ this.hierarchicalFacets = params.hierarchicalFacets || [];\n    // Refinements\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.facetsRefinements = params.facetsRefinements || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.facetsExcludes = params.facetsExcludes || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */ this.numericRefinements = params.numericRefinements || {};\n    /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */ this.tagRefinements = params.tagRefinements || [];\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(params).forEach(function(paramName) {\n        var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n        var isValueDefined = params[paramName] !== undefined;\n        if (!isKeyKnown && isValueDefined) {\n            self[paramName] = params[paramName];\n        }\n    });\n}\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */ SearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */ SearchParameters._parseNumbers = function(partialState) {\n    // Do not parse numbers again in SearchParameters, they ought to be parsed already\n    if (partialState instanceof SearchParameters) return partialState;\n    var numbers = {};\n    var numberKeys = [\n        \"aroundPrecision\",\n        \"aroundRadius\",\n        \"getRankingInfo\",\n        \"minWordSizefor2Typos\",\n        \"minWordSizefor1Typo\",\n        \"page\",\n        \"maxValuesPerFacet\",\n        \"distinct\",\n        \"minimumAroundRadius\",\n        \"hitsPerPage\",\n        \"minProximity\"\n    ];\n    numberKeys.forEach(function(k) {\n        var value = partialState[k];\n        if (typeof value === \"string\") {\n            var parsedValue = parseFloat(value);\n            // global isNaN is ok to use here, value is only number or NaN\n            numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n        }\n    });\n    // there's two formats of insideBoundingBox, we need to parse\n    // the one which is an array of float geo rectangles\n    if (Array.isArray(partialState.insideBoundingBox)) {\n        numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n            if (Array.isArray(geoRect)) {\n                return geoRect.map(function(value) {\n                    return parseFloat(value);\n                });\n            }\n            return geoRect;\n        });\n    }\n    if (partialState.numericRefinements) {\n        var numericRefinements = {};\n        Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n            var operators = partialState.numericRefinements[attribute] || {};\n            numericRefinements[attribute] = {};\n            Object.keys(operators).forEach(function(operator) {\n                var values = operators[operator];\n                var parsedValues = values.map(function(v) {\n                    if (Array.isArray(v)) {\n                        return v.map(function(vPrime) {\n                            if (typeof vPrime === \"string\") {\n                                return parseFloat(vPrime);\n                            }\n                            return vPrime;\n                        });\n                    } else if (typeof v === \"string\") {\n                        return parseFloat(v);\n                    }\n                    return v;\n                });\n                numericRefinements[attribute][operator] = parsedValues;\n            });\n        });\n        numbers.numericRefinements = numericRefinements;\n    }\n    return merge({}, partialState, numbers);\n};\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */ SearchParameters.make = function makeSearchParameters(newParameters) {\n    var instance = new SearchParameters(newParameters);\n    var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n    hierarchicalFacets.forEach(function(facet) {\n        if (facet.rootPath) {\n            var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n            if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n                instance = instance.clearRefinements(facet.name);\n            }\n            // get it again in case it has been cleared\n            currentRefinement = instance.getHierarchicalRefinement(facet.name);\n            if (currentRefinement.length === 0) {\n                instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n            }\n        }\n    });\n    return instance;\n};\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */ SearchParameters.validate = function(currentState, parameters) {\n    var params = parameters || {};\n    if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n        return new Error(\"[Tags] Cannot switch from the managed tag API to the advanced API. It is probably \" + \"an error, if it is really what you want, you should first clear the tags with clearTags method.\");\n    }\n    if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n        return new Error(\"[Tags] Cannot switch from the advanced tag API to the managed API. It is probably \" + \"an error, if it is not, you should first clear the tags with clearTags method.\");\n    }\n    if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {\n        return new Error(\"[Numeric filters] Can't switch from the advanced to the managed API. It\" + \" is probably an error, if this is really what you want, you have to first\" + \" clear the numeric filters.\");\n    }\n    if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n        return new Error(\"[Numeric filters] Can't switch from the managed API to the advanced. It\" + \" is probably an error, if this is really what you want, you have to first\" + \" clear the numeric filters.\");\n    }\n    return null;\n};\nSearchParameters.prototype = {\n    constructor: SearchParameters,\n    /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */ clearRefinements: function clearRefinements(attribute) {\n        var patch = {\n            numericRefinements: this._clearNumericRefinements(attribute),\n            facetsRefinements: RefinementList.clearRefinement(this.facetsRefinements, attribute, \"conjunctiveFacet\"),\n            facetsExcludes: RefinementList.clearRefinement(this.facetsExcludes, attribute, \"exclude\"),\n            disjunctiveFacetsRefinements: RefinementList.clearRefinement(this.disjunctiveFacetsRefinements, attribute, \"disjunctiveFacet\"),\n            hierarchicalFacetsRefinements: RefinementList.clearRefinement(this.hierarchicalFacetsRefinements, attribute, \"hierarchicalFacet\")\n        };\n        if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {\n            return this;\n        }\n        return this.setQueryParameters(patch);\n    },\n    /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */ clearTags: function clearTags() {\n        if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n        return this.setQueryParameters({\n            tagFilters: undefined,\n            tagRefinements: []\n        });\n    },\n    /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */ setIndex: function setIndex(index) {\n        if (index === this.index) return this;\n        return this.setQueryParameters({\n            index: index\n        });\n    },\n    /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */ setQuery: function setQuery(newQuery) {\n        if (newQuery === this.query) return this;\n        return this.setQueryParameters({\n            query: newQuery\n        });\n    },\n    /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */ setPage: function setPage(newPage) {\n        if (newPage === this.page) return this;\n        return this.setQueryParameters({\n            page: newPage\n        });\n    },\n    /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */ setFacets: function setFacets(facets) {\n        return this.setQueryParameters({\n            facets: facets\n        });\n    },\n    /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */ setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n        return this.setQueryParameters({\n            disjunctiveFacets: facets\n        });\n    },\n    /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */ setHitsPerPage: function setHitsPerPage(n) {\n        if (this.hitsPerPage === n) return this;\n        return this.setQueryParameters({\n            hitsPerPage: n\n        });\n    },\n    /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */ setTypoTolerance: function setTypoTolerance(typoTolerance) {\n        if (this.typoTolerance === typoTolerance) return this;\n        return this.setQueryParameters({\n            typoTolerance: typoTolerance\n        });\n    },\n    /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */ addNumericRefinement: function(attribute, operator, value) {\n        var val = valToNumber(value);\n        if (this.isNumericRefined(attribute, operator, val)) return this;\n        var mod = merge({}, this.numericRefinements);\n        mod[attribute] = merge({}, mod[attribute]);\n        if (mod[attribute][operator]) {\n            // Array copy\n            mod[attribute][operator] = mod[attribute][operator].slice();\n            // Add the element. Concat can't be used here because value can be an array.\n            mod[attribute][operator].push(val);\n        } else {\n            mod[attribute][operator] = [\n                val\n            ];\n        }\n        return this.setQueryParameters({\n            numericRefinements: mod\n        });\n    },\n    /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getConjunctiveRefinements: function(facetName) {\n        if (!this.isConjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.facetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getDisjunctiveRefinements: function(facetName) {\n        if (!this.isDisjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.disjunctiveFacetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getHierarchicalRefinement: function(facetName) {\n        // we send an array but we currently do not support multiple\n        // hierarchicalRefinements for a hierarchicalFacet\n        return this.hierarchicalFacetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getExcludeRefinements: function(facetName) {\n        if (!this.isConjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.facetsExcludes[facetName] || [];\n    },\n    /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */ removeNumericRefinement: function(attribute, operator, number) {\n        var paramValue = number;\n        if (paramValue !== undefined) {\n            if (!this.isNumericRefined(attribute, operator, paramValue)) {\n                return this;\n            }\n            return this.setQueryParameters({\n                numericRefinements: this._clearNumericRefinements(function(value, key) {\n                    return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));\n                })\n            });\n        } else if (operator !== undefined) {\n            if (!this.isNumericRefined(attribute, operator)) return this;\n            return this.setQueryParameters({\n                numericRefinements: this._clearNumericRefinements(function(value, key) {\n                    return key === attribute && value.op === operator;\n                })\n            });\n        }\n        if (!this.isNumericRefined(attribute)) return this;\n        return this.setQueryParameters({\n            numericRefinements: this._clearNumericRefinements(function(value, key) {\n                return key === attribute;\n            })\n        });\n    },\n    /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */ getNumericRefinements: function(facetName) {\n        return this.numericRefinements[facetName] || {};\n    },\n    /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */ getNumericRefinement: function(attribute, operator) {\n        return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n    },\n    /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */ _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n        if (attribute === undefined) {\n            if (!objectHasKeys(this.numericRefinements)) {\n                return this.numericRefinements;\n            }\n            return {};\n        } else if (typeof attribute === \"string\") {\n            return omit(this.numericRefinements, [\n                attribute\n            ]);\n        } else if (typeof attribute === \"function\") {\n            var hasChanged = false;\n            var numericRefinements = this.numericRefinements;\n            var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n                var operators = numericRefinements[key];\n                var operatorList = {};\n                operators = operators || {};\n                Object.keys(operators).forEach(function(operator) {\n                    var values = operators[operator] || [];\n                    var outValues = [];\n                    values.forEach(function(value) {\n                        var predicateResult = attribute({\n                            val: value,\n                            op: operator\n                        }, key, \"numeric\");\n                        if (!predicateResult) outValues.push(value);\n                    });\n                    if (outValues.length !== values.length) {\n                        hasChanged = true;\n                    }\n                    operatorList[operator] = outValues;\n                });\n                memo[key] = operatorList;\n                return memo;\n            }, {});\n            if (hasChanged) return newNumericRefinements;\n            return this.numericRefinements;\n        }\n        // We return nothing if the attribute is not undefined, a string or a function,\n        // as it is not a valid value for a refinement\n        return undefined;\n    },\n    /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */ addFacet: function addFacet(facet) {\n        if (this.isConjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.setQueryParameters({\n            facets: this.facets.concat([\n                facet\n            ])\n        });\n    },\n    /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */ addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n        if (this.isDisjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.setQueryParameters({\n            disjunctiveFacets: this.disjunctiveFacets.concat([\n                facet\n            ])\n        });\n    },\n    /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */ addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n        if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n            throw new Error(\"Cannot declare two hierarchical facets with the same name: `\" + hierarchicalFacet.name + \"`\");\n        }\n        return this.setQueryParameters({\n            hierarchicalFacets: this.hierarchicalFacets.concat([\n                hierarchicalFacet\n            ])\n        });\n    },\n    /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addFacetRefinement: function addFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addExcludeRefinement: function addExcludeRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.addRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */ addTagRefinement: function addTagRefinement(tag) {\n        if (this.isTagRefined(tag)) return this;\n        var modification = {\n            tagRefinements: this.tagRefinements.concat(tag)\n        };\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeFacet: function removeFacet(facet) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            facets: this.facets.filter(function(f) {\n                return f !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n                return f !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n        if (!this.isHierarchicalFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n                return f.name !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */ removeFacetRefinement: function removeFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */ removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */ removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.removeRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */ removeTagRefinement: function removeTagRefinement(tag) {\n        if (!this.isTagRefined(tag)) return this;\n        var modification = {\n            tagRefinements: this.tagRefinements.filter(function(t) {\n                return t !== tag;\n            })\n        };\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */ toggleRefinement: function toggleRefinement(facet, value) {\n        return this.toggleFacetRefinement(facet, value);\n    },\n    /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */ toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n        if (this.isHierarchicalFacet(facet)) {\n            return this.toggleHierarchicalFacetRefinement(facet, value);\n        } else if (this.isConjunctiveFacet(facet)) {\n            return this.toggleConjunctiveFacetRefinement(facet, value);\n        } else if (this.isDisjunctiveFacet(facet)) {\n            return this.toggleDisjunctiveFacetRefinement(facet, value);\n        }\n        throw new Error(\"Cannot refine the undeclared facet \" + facet + \"; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets\");\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.toggleRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n        if (!this.isHierarchicalFacet(facet)) {\n            throw new Error(facet + \" is not defined in the hierarchicalFacets attribute of the helper configuration\");\n        }\n        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n        var mod = {};\n        var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined && this.hierarchicalFacetsRefinements[facet].length > 0 && // remove current refinement:\n        // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n        (this.hierarchicalFacetsRefinements[facet][0] === value || // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);\n        if (upOneOrMultipleLevel) {\n            if (value.indexOf(separator) === -1) {\n                // go back to root level\n                mod[facet] = [];\n            } else {\n                mod[facet] = [\n                    value.slice(0, value.lastIndexOf(separator))\n                ];\n            }\n        } else {\n            mod[facet] = [\n                value\n            ];\n        }\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */ addHierarchicalFacetRefinement: function(facet, path) {\n        if (this.isHierarchicalFacetRefined(facet)) {\n            throw new Error(facet + \" is already refined.\");\n        }\n        if (!this.isHierarchicalFacet(facet)) {\n            throw new Error(facet + \" is not defined in the hierarchicalFacets attribute of the helper configuration.\");\n        }\n        var mod = {};\n        mod[facet] = [\n            path\n        ];\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */ removeHierarchicalFacetRefinement: function(facet) {\n        if (!this.isHierarchicalFacetRefined(facet)) {\n            return this;\n        }\n        var mod = {};\n        mod[facet] = [];\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */ toggleTagRefinement: function toggleTagRefinement(tag) {\n        if (this.isTagRefined(tag)) {\n            return this.removeTagRefinement(tag);\n        }\n        return this.addTagRefinement(tag);\n    },\n    /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */ isDisjunctiveFacet: function(facet) {\n        return this.disjunctiveFacets.indexOf(facet) > -1;\n    },\n    /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */ isHierarchicalFacet: function(facetName) {\n        return this.getHierarchicalFacetByName(facetName) !== undefined;\n    },\n    /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */ isConjunctiveFacet: function(facet) {\n        return this.facets.indexOf(facet) > -1;\n    },\n    /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */ isFacetRefined: function isFacetRefined(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.facetsRefinements, facet, value);\n    },\n    /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */ isExcludeRefined: function isExcludeRefined(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.facetsExcludes, facet, value);\n    },\n    /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */ isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n    },\n    /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */ isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n        if (!this.isHierarchicalFacet(facet)) {\n            return false;\n        }\n        var refinements = this.getHierarchicalRefinement(facet);\n        if (!value) {\n            return refinements.length > 0;\n        }\n        return refinements.indexOf(value) !== -1;\n    },\n    /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */ isNumericRefined: function isNumericRefined(attribute, operator, value) {\n        if (value === undefined && operator === undefined) {\n            return Boolean(this.numericRefinements[attribute]);\n        }\n        var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== undefined;\n        if (value === undefined || !isOperatorDefined) {\n            return isOperatorDefined;\n        }\n        var parsedValue = valToNumber(value);\n        var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== undefined;\n        return isOperatorDefined && isAttributeValueDefined;\n    },\n    /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */ isTagRefined: function isTagRefined(tag) {\n        return this.tagRefinements.indexOf(tag) !== -1;\n    },\n    /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */ getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        // attributes used for numeric filter can also be disjunctive\n        var disjunctiveNumericRefinedFacets = intersection(Object.keys(this.numericRefinements).filter(function(facet) {\n            return Object.keys(self.numericRefinements[facet]).length > 0;\n        }), this.disjunctiveFacets);\n        return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n            return self.disjunctiveFacetsRefinements[facet].length > 0;\n        }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets()).sort();\n    },\n    /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */ getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        return intersection(// enforce the order between the two arrays,\n        // so that refinement name index === hierarchical facet index\n        this.hierarchicalFacets.map(function(facet) {\n            return facet.name;\n        }), Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n            return self.hierarchicalFacetsRefinements[facet].length > 0;\n        })).sort();\n    },\n    /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */ getUnrefinedDisjunctiveFacets: function() {\n        var refinedFacets = this.getRefinedDisjunctiveFacets();\n        return this.disjunctiveFacets.filter(function(f) {\n            return refinedFacets.indexOf(f) === -1;\n        });\n    },\n    managedParameters: [\n        \"index\",\n        \"facets\",\n        \"disjunctiveFacets\",\n        \"facetsRefinements\",\n        \"hierarchicalFacets\",\n        \"facetsExcludes\",\n        \"disjunctiveFacetsRefinements\",\n        \"numericRefinements\",\n        \"tagRefinements\",\n        \"hierarchicalFacetsRefinements\"\n    ],\n    getQueryParams: function getQueryParams() {\n        var managedParameters = this.managedParameters;\n        var queryParams = {};\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        Object.keys(this).forEach(function(paramName) {\n            var paramValue = self[paramName];\n            if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n                queryParams[paramName] = paramValue;\n            }\n        });\n        return queryParams;\n    },\n    /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */ setQueryParameter: function setParameter(parameter, value) {\n        if (this[parameter] === value) return this;\n        var modification = {};\n        modification[parameter] = value;\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */ setQueryParameters: function setQueryParameters(params) {\n        if (!params) return this;\n        var error = SearchParameters.validate(this, params);\n        if (error) {\n            throw error;\n        }\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        var nextWithNumbers = SearchParameters._parseNumbers(params);\n        var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n            acc[key] = self[key];\n            return acc;\n        }, {});\n        var nextPlainObject = Object.keys(nextWithNumbers).reduce(function(previous, key) {\n            var isPreviousValueDefined = previous[key] !== undefined;\n            var isNextValueDefined = nextWithNumbers[key] !== undefined;\n            if (isPreviousValueDefined && !isNextValueDefined) {\n                return omit(previous, [\n                    key\n                ]);\n            }\n            if (isNextValueDefined) {\n                previous[key] = nextWithNumbers[key];\n            }\n            return previous;\n        }, previousPlainObject);\n        return new this.constructor(nextPlainObject);\n    },\n    /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */ resetPage: function() {\n        if (this.page === undefined) {\n            return this;\n        }\n        return this.setPage(0);\n    },\n    /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */ _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n        return hierarchicalFacet.sortBy || [\n            \"isRefined:desc\",\n            \"name:asc\"\n        ];\n    },\n    /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */ _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n        return hierarchicalFacet.separator || \" > \";\n    },\n    /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */ _getHierarchicalRootPath: function(hierarchicalFacet) {\n        return hierarchicalFacet.rootPath || null;\n    },\n    /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */ _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n        if (typeof hierarchicalFacet.showParentLevel === \"boolean\") {\n            return hierarchicalFacet.showParentLevel;\n        }\n        return true;\n    },\n    /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */ getHierarchicalFacetByName: function(hierarchicalFacetName) {\n        return find(this.hierarchicalFacets, function(f) {\n            return f.name === hierarchicalFacetName;\n        });\n    },\n    /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */ getHierarchicalFacetBreadcrumb: function(facetName) {\n        if (!this.isHierarchicalFacet(facetName)) {\n            return [];\n        }\n        var refinement = this.getHierarchicalRefinement(facetName)[0];\n        if (!refinement) return [];\n        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facetName));\n        var path = refinement.split(separator);\n        return path.map(function(part) {\n            return part.trim();\n        });\n    },\n    toString: function() {\n        return JSON.stringify(this, null, 2);\n    }\n};\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */ module.exports = SearchParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js ***!
  \*************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = generateTrees;\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar prepareHierarchicalFacetSortBy = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\nfunction generateTrees(state) {\n    return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n        var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n        var hierarchicalFacetRefinement = state.hierarchicalFacetsRefinements[hierarchicalFacet.name] && state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0] || \"\";\n        var hierarchicalSeparator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var hierarchicalRootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(hierarchicalFacet);\n        var sortBy = prepareHierarchicalFacetSortBy(state._getHierarchicalFacetSortBy(hierarchicalFacet));\n        var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {\n            return facetResult.exhaustive;\n        });\n        var generateTreeFn = generateHierarchicalTree(sortBy, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, hierarchicalFacetRefinement);\n        var results = hierarchicalFacetResult;\n        if (hierarchicalRootPath) {\n            results = hierarchicalFacetResult.slice(hierarchicalRootPath.split(hierarchicalSeparator).length);\n        }\n        return results.reduce(generateTreeFn, {\n            name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n            count: null,\n            isRefined: true,\n            path: null,\n            escapedValue: null,\n            exhaustive: rootExhaustive,\n            data: null\n        });\n    };\n}\nfunction generateHierarchicalTree(sortBy, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, currentRefinement) {\n    return function generateTree(hierarchicalTree, hierarchicalFacetResult, currentHierarchicalLevel) {\n        var parent = hierarchicalTree;\n        if (currentHierarchicalLevel > 0) {\n            var level = 0;\n            parent = hierarchicalTree;\n            while(level < currentHierarchicalLevel){\n                /**\n         * @type {object[]]} hierarchical data\n         */ var data = parent && Array.isArray(parent.data) ? parent.data : [];\n                parent = find(data, function(subtree) {\n                    return subtree.isRefined;\n                });\n                level++;\n            }\n        }\n        // we found a refined parent, let's add current level data under it\n        if (parent) {\n            // filter values in case an object has multiple categories:\n            //   {\n            //     categories: {\n            //       level0: ['beers', 'bières'],\n            //       level1: ['beers > IPA', 'bières > Belges']\n            //     }\n            //   }\n            //\n            // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n            // showing up\n            var picked = Object.keys(hierarchicalFacetResult.data).map(function(facetValue) {\n                return [\n                    facetValue,\n                    hierarchicalFacetResult.data[facetValue]\n                ];\n            }).filter(function(tuple) {\n                var facetValue = tuple[0];\n                return onlyMatchingTree(facetValue, parent.path || hierarchicalRootPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel);\n            });\n            parent.data = orderBy(picked.map(function(tuple) {\n                var facetValue = tuple[0];\n                var facetCount = tuple[1];\n                return format(facetCount, facetValue, hierarchicalSeparator, unescapeFacetValue(currentRefinement), hierarchicalFacetResult.exhaustive);\n            }), sortBy[0], sortBy[1]);\n        }\n        return hierarchicalTree;\n    };\n}\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(facetValue, parentPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel) {\n    // we want the facetValue is a child of hierarchicalRootPath\n    if (hierarchicalRootPath && (facetValue.indexOf(hierarchicalRootPath) !== 0 || hierarchicalRootPath === facetValue)) {\n        return false;\n    }\n    // we always want root levels (only when there is no prefix path)\n    return !hierarchicalRootPath && facetValue.indexOf(hierarchicalSeparator) === -1 || // if there is a rootPath, being root level mean 1 level under rootPath\n    hierarchicalRootPath && facetValue.split(hierarchicalSeparator).length - hierarchicalRootPath.split(hierarchicalSeparator).length === 1 || // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    facetValue.indexOf(hierarchicalSeparator) === -1 && currentRefinement.indexOf(hierarchicalSeparator) === -1 || // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 || // facetValue is a child of the current parent, add it\n    facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 && (hierarchicalShowParentLevel || facetValue.indexOf(currentRefinement) === 0);\n}\nfunction format(facetCount, facetValue, hierarchicalSeparator, currentRefinement, exhaustive) {\n    var parts = facetValue.split(hierarchicalSeparator);\n    return {\n        name: parts[parts.length - 1].trim(),\n        path: facetValue,\n        escapedValue: escapeFacetValue(facetValue),\n        count: facetCount,\n        isRefined: currentRefinement === facetValue || currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n        exhaustive: exhaustive,\n        data: null\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/index.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar compact = __webpack_require__(/*! ../functions/compact */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/compact.js\");\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar findIndex = __webpack_require__(/*! ../functions/findIndex */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/findIndex.js\");\nvar formatSort = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar merge = __webpack_require__(/*! ../functions/merge */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\nvar generateHierarchicalTree = __webpack_require__(/*! ./generate-hierarchical-tree */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\");\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */ /**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */ /**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */ /**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */ /**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */ function getIndices(attributes) {\n    var indices = {};\n    attributes.forEach(function(val, idx) {\n        indices[val] = idx;\n    });\n    return indices;\n}\nfunction assignFacetStats(dest, facetStats, key) {\n    if (facetStats && facetStats[key]) {\n        dest.stats = facetStats[key];\n    }\n}\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */ /**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */ function findMatchingHierarchicalFacetFromAttributeName(hierarchicalFacets, hierarchicalAttributeName) {\n    return find(hierarchicalFacets, function facetKeyMatchesAttribute(hierarchicalFacet) {\n        var facetNames = hierarchicalFacet.attributes || [];\n        return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    });\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/ function SearchResults(state, results, options) {\n    var mainSubResponse = results[0];\n    this._rawResults = results;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n    Object.keys(mainSubResponse).forEach(function(key) {\n        self[key] = mainSubResponse[key];\n    });\n    // Make every key of the result options reachable from the instance\n    Object.keys(options || {}).forEach(function(key) {\n        self[key] = options[key];\n    });\n    /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */ /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */ /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */ /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ this.processingTimeMS = results.reduce(function(sum, result) {\n        return result.processingTimeMS === undefined ? sum : sum + result.processingTimeMS;\n    }, 0);\n    /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */ this.disjunctiveFacets = [];\n    /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */ this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n        return [];\n    });\n    /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */ this.facets = [];\n    var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n    var facetsIndices = getIndices(state.facets);\n    var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n    var nextDisjunctiveResult = 1;\n    // Since we send request only for disjunctive facets that have been refined,\n    // we get the facets information from the first, general, response.\n    var mainFacets = mainSubResponse.facets || {};\n    Object.keys(mainFacets).forEach(function(facetKey) {\n        var facetValueObject = mainFacets[facetKey];\n        var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(state.hierarchicalFacets, facetKey);\n        if (hierarchicalFacet) {\n            // Place the hierarchicalFacet data at the correct index depending on\n            // the attributes order that was defined at the helper initialization\n            var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n            var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n                return f.name === hierarchicalFacet.name;\n            });\n            self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n                attribute: facetKey,\n                data: facetValueObject,\n                exhaustive: mainSubResponse.exhaustiveFacetsCount\n            };\n        } else {\n            var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n            var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n            var position;\n            if (isFacetDisjunctive) {\n                position = disjunctiveFacetsIndices[facetKey];\n                self.disjunctiveFacets[position] = {\n                    name: facetKey,\n                    data: facetValueObject,\n                    exhaustive: mainSubResponse.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n            }\n            if (isFacetConjunctive) {\n                position = facetsIndices[facetKey];\n                self.facets[position] = {\n                    name: facetKey,\n                    data: facetValueObject,\n                    exhaustive: mainSubResponse.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n            }\n        }\n    });\n    // Make sure we do not keep holes within the hierarchical facets\n    this.hierarchicalFacets = compact(this.hierarchicalFacets);\n    // aggregate the refined disjunctive facets\n    disjunctiveFacets.forEach(function(disjunctiveFacet) {\n        var result = results[nextDisjunctiveResult];\n        var facets = result && result.facets ? result.facets : {};\n        var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n        // There should be only item in facets.\n        Object.keys(facets).forEach(function(dfacet) {\n            var facetResults = facets[dfacet];\n            var position;\n            if (hierarchicalFacet) {\n                position = findIndex(state.hierarchicalFacets, function(f) {\n                    return f.name === hierarchicalFacet.name;\n                });\n                var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n                    return f.attribute === dfacet;\n                });\n                // previous refinements and no results so not able to find it\n                if (attributeIndex === -1) {\n                    return;\n                }\n                self.hierarchicalFacets[position][attributeIndex].data = merge({}, self.hierarchicalFacets[position][attributeIndex].data, facetResults);\n            } else {\n                position = disjunctiveFacetsIndices[dfacet];\n                var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n                self.disjunctiveFacets[position] = {\n                    name: dfacet,\n                    data: defaultsPure({}, facetResults, dataFromMainRequest),\n                    exhaustive: result.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n                if (state.disjunctiveFacetsRefinements[dfacet]) {\n                    state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n                        // add the disjunctive refinements if it is no more retrieved\n                        if (!self.disjunctiveFacets[position].data[refinementValue] && state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n                            self.disjunctiveFacets[position].data[refinementValue] = 0;\n                        }\n                    });\n                }\n            }\n        });\n        nextDisjunctiveResult++;\n    });\n    // if we have some parent level values for hierarchical facets, merge them\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n        var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n        // if we are already at a root refinement (or no refinement at all), there is no\n        // root level values request\n        if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n            return;\n        }\n        results.slice(nextDisjunctiveResult).forEach(function(result) {\n            var facets = result && result.facets ? result.facets : {};\n            Object.keys(facets).forEach(function(dfacet) {\n                var facetResults = facets[dfacet];\n                var position = findIndex(state.hierarchicalFacets, function(f) {\n                    return f.name === hierarchicalFacet.name;\n                });\n                var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n                    return f.attribute === dfacet;\n                });\n                // previous refinements and no results so not able to find it\n                if (attributeIndex === -1) {\n                    return;\n                }\n                // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n                // then the disjunctive values will be `beers` (count: 100),\n                // but we do not want to display\n                //   | beers (100)\n                //     > IPA (5)\n                // We want\n                //   | beers (5)\n                //     > IPA (5)\n                var defaultData = {};\n                if (currentRefinement.length > 0) {\n                    var root = currentRefinement[0].split(separator)[0];\n                    defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n                }\n                self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(defaultData, facetResults, self.hierarchicalFacets[position][attributeIndex].data);\n            });\n            nextDisjunctiveResult++;\n        });\n    });\n    // add the excludes\n    Object.keys(state.facetsExcludes).forEach(function(facetName) {\n        var excludes = state.facetsExcludes[facetName];\n        var position = facetsIndices[facetName];\n        self.facets[position] = {\n            name: facetName,\n            data: mainFacets[facetName],\n            exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        excludes.forEach(function(facetValue) {\n            self.facets[position] = self.facets[position] || {\n                name: facetName\n            };\n            self.facets[position].data = self.facets[position].data || {};\n            self.facets[position].data[facetValue] = 0;\n        });\n    });\n    /**\n   * @type {Array}\n   */ this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n    /**\n   * @type {Array}\n   */ this.facets = compact(this.facets);\n    /**\n   * @type {Array}\n   */ this.disjunctiveFacets = compact(this.disjunctiveFacets);\n    this._state = state;\n}\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */ SearchResults.prototype.getFacetByName = function(name) {\n    function predicate(facet) {\n        return facet.name === name;\n    }\n    return find(this.facets, predicate) || find(this.disjunctiveFacets, predicate) || find(this.hierarchicalFacets, predicate);\n};\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */ function extractNormalizedFacetValues(results, attribute) {\n    function predicate(facet) {\n        return facet.name === attribute;\n    }\n    if (results._state.isConjunctiveFacet(attribute)) {\n        var facet = find(results.facets, predicate);\n        if (!facet) return [];\n        return Object.keys(facet.data).map(function(name) {\n            var value = escapeFacetValue(name);\n            return {\n                name: name,\n                escapedValue: value,\n                count: facet.data[name],\n                isRefined: results._state.isFacetRefined(attribute, value),\n                isExcluded: results._state.isExcludeRefined(attribute, name)\n            };\n        });\n    } else if (results._state.isDisjunctiveFacet(attribute)) {\n        var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n        if (!disjunctiveFacet) return [];\n        return Object.keys(disjunctiveFacet.data).map(function(name) {\n            var value = escapeFacetValue(name);\n            return {\n                name: name,\n                escapedValue: value,\n                count: disjunctiveFacet.data[name],\n                isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n            };\n        });\n    } else if (results._state.isHierarchicalFacet(attribute)) {\n        var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n        if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n        var hierarchicalFacet = results._state.getHierarchicalFacetByName(attribute);\n        var separator = results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var currentRefinement = unescapeFacetValue(results._state.getHierarchicalRefinement(attribute)[0] || \"\");\n        if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n            currentRefinement = currentRefinement.replace(hierarchicalFacet.rootPath + separator, \"\");\n        }\n        var currentRefinementSplit = currentRefinement.split(separator);\n        currentRefinementSplit.unshift(attribute);\n        setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n        return hierarchicalFacetValues;\n    }\n    return undefined;\n}\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */ function setIsRefined(item, currentRefinement, depth) {\n    item.isRefined = item.name === currentRefinement[depth];\n    if (item.data) {\n        item.data.forEach(function(child) {\n            setIsRefined(child, currentRefinement, depth + 1);\n        });\n    }\n}\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */ function recSort(sortFn, node, names, level) {\n    level = level || 0;\n    if (Array.isArray(node)) {\n        return sortFn(node, names[level]);\n    }\n    if (!node.data || node.data.length === 0) {\n        return node;\n    }\n    var children = node.data.map(function(childNode) {\n        return recSort(sortFn, childNode, names, level + 1);\n    });\n    var sortedChildren = sortFn(children, names[level]);\n    var newNode = defaultsPure({\n        data: sortedChildren\n    }, node);\n    return newNode;\n}\nSearchResults.DEFAULT_SORT = [\n    \"isRefined:desc\",\n    \"count:desc\",\n    \"name:asc\"\n];\nfunction vanillaSortFn(order, data) {\n    return data.sort(order);\n}\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */ /**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */ function sortViaFacetOrdering(facetValues, facetOrdering) {\n    var orderedFacets = [];\n    var remainingFacets = [];\n    var order = facetOrdering.order || [];\n    /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */ var reverseOrder = order.reduce(function(acc, name, i) {\n        acc[name] = i;\n        return acc;\n    }, {});\n    facetValues.forEach(function(item) {\n        // hierarchical facets get sorted using their raw name\n        var name = item.path || item.name;\n        if (reverseOrder[name] !== undefined) {\n            orderedFacets[reverseOrder[name]] = item;\n        } else {\n            remainingFacets.push(item);\n        }\n    });\n    orderedFacets = orderedFacets.filter(function(facet) {\n        return facet;\n    });\n    var sortRemainingBy = facetOrdering.sortRemainingBy;\n    var ordering;\n    if (sortRemainingBy === \"hidden\") {\n        return orderedFacets;\n    } else if (sortRemainingBy === \"alpha\") {\n        ordering = [\n            [\n                \"path\",\n                \"name\"\n            ],\n            [\n                \"asc\",\n                \"asc\"\n            ]\n        ];\n    } else {\n        ordering = [\n            [\n                \"count\"\n            ],\n            [\n                \"desc\"\n            ]\n        ];\n    }\n    return orderedFacets.concat(orderBy(remainingFacets, ordering[0], ordering[1]));\n}\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */ function getFacetOrdering(results, attribute) {\n    return results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.values && results.renderingContent.facetOrdering.values[attribute];\n}\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */ SearchResults.prototype.getFacetValues = function(attribute, opts) {\n    var facetValues = extractNormalizedFacetValues(this, attribute);\n    if (!facetValues) {\n        return undefined;\n    }\n    var options = defaultsPure({}, opts, {\n        sortBy: SearchResults.DEFAULT_SORT,\n        // if no sortBy is given, attempt to sort based on facetOrdering\n        // if it is given, we still allow to sort via facet ordering first\n        facetOrdering: !(opts && opts.sortBy)\n    });\n    // eslint-disable-next-line consistent-this\n    var results = this;\n    var attributes;\n    if (Array.isArray(facetValues)) {\n        attributes = [\n            attribute\n        ];\n    } else {\n        var config = results._state.getHierarchicalFacetByName(facetValues.name);\n        attributes = config.attributes;\n    }\n    return recSort(function(data, facetName) {\n        if (options.facetOrdering) {\n            var facetOrdering = getFacetOrdering(results, facetName);\n            if (facetOrdering) {\n                return sortViaFacetOrdering(data, facetOrdering);\n            }\n        }\n        if (Array.isArray(options.sortBy)) {\n            var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n            return orderBy(data, order[0], order[1]);\n        } else if (typeof options.sortBy === \"function\") {\n            return vanillaSortFn(options.sortBy, data);\n        }\n        throw new Error(\"options.sortBy is optional but if defined it must be \" + \"either an array of string (predicates) or a sorting function\");\n    }, facetValues, attributes);\n};\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */ SearchResults.prototype.getFacetStats = function(attribute) {\n    if (this._state.isConjunctiveFacet(attribute)) {\n        return getFacetStatsIfAvailable(this.facets, attribute);\n    } else if (this._state.isDisjunctiveFacet(attribute)) {\n        return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n    }\n    return undefined;\n};\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */ /**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */ function getFacetStatsIfAvailable(facetList, facetName) {\n    var data = find(facetList, function(facet) {\n        return facet.name === facetName;\n    });\n    return data && data.stats;\n}\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */ SearchResults.prototype.getRefinements = function() {\n    var state = this._state;\n    // eslint-disable-next-line consistent-this\n    var results = this;\n    var res = [];\n    Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n        state.facetsRefinements[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"facet\", attributeName, name, results.facets));\n        });\n    });\n    Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n        state.facetsExcludes[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"exclude\", attributeName, name, results.facets));\n        });\n    });\n    Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n        state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"disjunctive\", attributeName, name, results.disjunctiveFacets));\n        });\n    });\n    Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n        state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n            res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n        });\n    });\n    Object.keys(state.numericRefinements).forEach(function(attributeName) {\n        var operators = state.numericRefinements[attributeName];\n        Object.keys(operators).forEach(function(operator) {\n            operators[operator].forEach(function(value) {\n                res.push({\n                    type: \"numeric\",\n                    attributeName: attributeName,\n                    name: value,\n                    numericValue: value,\n                    operator: operator\n                });\n            });\n        });\n    });\n    state.tagRefinements.forEach(function(name) {\n        res.push({\n            type: \"tag\",\n            attributeName: \"_tags\",\n            name: name\n        });\n    });\n    return res;\n};\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */ /**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */ function getRefinement(state, type, attributeName, name, resultsFacets) {\n    var facet = find(resultsFacets, function(f) {\n        return f.name === attributeName;\n    });\n    var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n    var exhaustive = facet && facet.exhaustive || false;\n    return {\n        type: type,\n        attributeName: attributeName,\n        name: name,\n        count: count,\n        exhaustive: exhaustive\n    };\n}\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */ function getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n    var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n    var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n    var split = name.split(separator);\n    var rootFacet = find(resultsFacets, function(facet) {\n        return facet.name === attributeName;\n    });\n    var facet = split.reduce(function(intermediateFacet, part) {\n        var newFacet = intermediateFacet && find(intermediateFacet.data, function(f) {\n            return f.name === part;\n        });\n        return newFacet !== undefined ? newFacet : intermediateFacet;\n    }, rootFacet);\n    var count = facet && facet.count || 0;\n    var exhaustive = facet && facet.exhaustive || false;\n    var path = facet && facet.path || \"\";\n    return {\n        type: \"hierarchical\",\n        attributeName: attributeName,\n        name: path,\n        count: count,\n        exhaustive: exhaustive\n    };\n}\nmodule.exports = SearchResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/algoliasearch.helper.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/algoliasearch.helper.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/@algolia/events/events.js\");\nvar DerivedHelper = __webpack_require__(/*! ./DerivedHelper */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\");\nvar escapeFacetValue = (__webpack_require__(/*! ./functions/escapeFacetValue */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\").escapeFacetValue);\nvar inherits = __webpack_require__(/*! ./functions/inherits */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/inherits.js\");\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ./functions/objectHasKeys */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ./functions/omit */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar requestBuilder = __webpack_require__(/*! ./requestBuilder */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/requestBuilder.js\");\nvar SearchParameters = __webpack_require__(/*! ./SearchParameters */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./SearchResults */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\nvar version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/version.js\");\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */ /**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */ /**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */ /**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */ /**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */ /**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */ /**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */ /**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */ function AlgoliaSearchHelper(client, index, options) {\n    if (typeof client.addAlgoliaAgent === \"function\") {\n        client.addAlgoliaAgent(\"JS Helper (\" + version + \")\");\n    }\n    this.setClient(client);\n    var opts = options || {};\n    opts.index = index;\n    this.state = SearchParameters.make(opts);\n    this.lastResults = null;\n    this._queryId = 0;\n    this._lastQueryIdReceived = -1;\n    this.derivedHelpers = [];\n    this._currentNbQueries = 0;\n}\ninherits(AlgoliaSearchHelper, EventEmitter);\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */ AlgoliaSearchHelper.prototype.search = function() {\n    this._search({\n        onlyWithDerivedHelpers: false\n    });\n    return this;\n};\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n    this._search({\n        onlyWithDerivedHelpers: true\n    });\n    return this;\n};\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */ AlgoliaSearchHelper.prototype.getQuery = function() {\n    var state = this.state;\n    return requestBuilder._getHitsSearchParams(state);\n};\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */ AlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n    var tempState = !options ? this.state : this.state.setQueryParameters(options);\n    var queries = requestBuilder._getQueries(tempState.index, tempState);\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    this._currentNbQueries++;\n    this.emit(\"searchOnce\", {\n        state: tempState\n    });\n    if (cb) {\n        this.client.search(queries).then(function(content) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit(\"searchQueueEmpty\");\n            }\n            cb(null, new SearchResults(tempState, content.results), tempState);\n        }).catch(function(err) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit(\"searchQueueEmpty\");\n            }\n            cb(err, null, tempState);\n        });\n        return undefined;\n    }\n    return this.client.search(queries).then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        return {\n            content: new SearchResults(tempState, content.results),\n            state: tempState,\n            _originalResponse: content\n        };\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        throw e;\n    });\n};\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */ AlgoliaSearchHelper.prototype.findAnswers = function(options) {\n    // eslint-disable-next-line no-console\n    console.warn(\"[algoliasearch-helper] answers is no longer supported\");\n    var state = this.state;\n    var derivedHelper = this.derivedHelpers[0];\n    if (!derivedHelper) {\n        return Promise.resolve([]);\n    }\n    var derivedState = derivedHelper.getModifiedState(state);\n    var data = merge({\n        attributesForPrediction: options.attributesForPrediction,\n        nbHits: options.nbHits\n    }, {\n        params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n            \"attributesToSnippet\",\n            \"hitsPerPage\",\n            \"restrictSearchableAttributes\",\n            \"snippetEllipsisText\"\n        ])\n    });\n    var errorMessage = \"search for answers was called, but this client does not have a function client.initIndex(index).findAnswers\";\n    if (typeof this.client.initIndex !== \"function\") {\n        throw new Error(errorMessage);\n    }\n    var index = this.client.initIndex(derivedState.index);\n    if (typeof index.findAnswers !== \"function\") {\n        throw new Error(errorMessage);\n    }\n    return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */ /**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */ /**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */ AlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n    var clientHasSFFV = typeof this.client.searchForFacetValues === \"function\";\n    var clientHasInitIndex = typeof this.client.initIndex === \"function\";\n    if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== \"function\") {\n        throw new Error(\"search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues\");\n    }\n    var state = this.state.setQueryParameters(userState || {});\n    var isDisjunctive = state.isDisjunctiveFacet(facet);\n    var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n    this._currentNbQueries++;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var searchForFacetValuesPromise;\n    // newer algoliasearch ^3.27.1 - ~4.0.0\n    if (clientHasSFFV) {\n        searchForFacetValuesPromise = this.client.searchForFacetValues([\n            {\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]);\n    // algoliasearch < 3.27.1\n    } else if (clientHasInitIndex) {\n        searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n    } else {\n        // @MAJOR only use client.search\n        delete algoliaQuery.facetName;\n        searchForFacetValuesPromise = this.client.search([\n            {\n                type: \"facet\",\n                facet: facet,\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]).then(function processResponse(response) {\n            return response.results[0];\n        });\n    }\n    this.emit(\"searchForFacetValues\", {\n        state: state,\n        facet: facet,\n        query: query\n    });\n    return searchForFacetValuesPromise.then(function addIsRefined(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        content = Array.isArray(content) ? content[0] : content;\n        content.facetHits.forEach(function(f) {\n            f.escapedValue = escapeFacetValue(f.value);\n            f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n        });\n        return content;\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        throw e;\n    });\n};\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setQuery = function(q) {\n    this._change({\n        state: this.state.resetPage().setQuery(q),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */ AlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n    this._change({\n        state: this.state.resetPage().clearRefinements(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.clearTags = function() {\n    this._change({\n        state: this.state.resetPage().clearTags(),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n    return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */ AlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, path) {\n    this._change({\n        state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addRefine = function() {\n    return this.addFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */ AlgoliaSearchHelper.prototype.addExclude = function() {\n    return this.addFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().addTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n    return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n    this._change({\n        state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeRefine = function() {\n    return this.removeFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */ AlgoliaSearchHelper.prototype.removeExclude = function() {\n    return this.removeFacetExclusion.apply(this, arguments);\n};\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().removeTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */ AlgoliaSearchHelper.prototype.toggleExclude = function() {\n    return this.toggleFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefine = function() {\n    return this.toggleFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().toggleTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */ AlgoliaSearchHelper.prototype.nextPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page + 1);\n};\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */ AlgoliaSearchHelper.prototype.previousPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page - 1);\n};\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */ function setCurrentPage(page) {\n    if (page < 0) throw new Error(\"Page requested below 0.\");\n    this._change({\n        state: this.state.setPage(page),\n        isPageReset: false\n    });\n    return this;\n}\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setIndex = function(name) {\n    this._change({\n        state: this.state.resetPage().setIndex(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */ AlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n    this._change({\n        state: this.state.resetPage().setQueryParameter(parameter, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setState = function(newState) {\n    this._change({\n        state: SearchParameters.make(newState),\n        isPageReset: false\n    });\n    return this;\n};\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */ AlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n};\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */ AlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n    if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n        return true;\n    } else if (this.state.isConjunctiveFacet(attribute)) {\n        return this.state.isFacetRefined(attribute);\n    } else if (this.state.isDisjunctiveFacet(attribute)) {\n        return this.state.isDisjunctiveFacetRefined(attribute);\n    } else if (this.state.isHierarchicalFacet(attribute)) {\n        return this.state.isHierarchicalFacetRefined(attribute);\n    }\n    // there's currently no way to know that the user did call `addNumericRefinement` at some point\n    // thus we cannot distinguish if there once was a numeric refinement that was cleared\n    // so we will return false in every other situations to be consistent\n    // while what we should do here is throw because we did not find the attribute in any type\n    // of refinement\n    return false;\n};\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */ AlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n    return this.state.isExcludeRefined(facet, value);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */ AlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n    return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */ AlgoliaSearchHelper.prototype.hasTag = function(tag) {\n    return this.state.isTagRefined(tag);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */ AlgoliaSearchHelper.prototype.isTagRefined = function() {\n    return this.hasTagRefinements.apply(this, arguments);\n};\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */ AlgoliaSearchHelper.prototype.getIndex = function() {\n    return this.state.index;\n};\nfunction getCurrentPage() {\n    return this.state.page;\n}\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */ AlgoliaSearchHelper.prototype.getTags = function() {\n    return this.state.tagRefinements;\n};\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */ AlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n    var refinements = [];\n    if (this.state.isConjunctiveFacet(facetName)) {\n        var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n        conjRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"conjunctive\"\n            });\n        });\n        var excludeRefinements = this.state.getExcludeRefinements(facetName);\n        excludeRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"exclude\"\n            });\n        });\n    } else if (this.state.isDisjunctiveFacet(facetName)) {\n        var disjunctiveRefinements = this.state.getDisjunctiveRefinements(facetName);\n        disjunctiveRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"disjunctive\"\n            });\n        });\n    }\n    var numericRefinements = this.state.getNumericRefinements(facetName);\n    Object.keys(numericRefinements).forEach(function(operator) {\n        var value = numericRefinements[operator];\n        refinements.push({\n            value: value,\n            operator: operator,\n            type: \"numeric\"\n        });\n    });\n    return refinements;\n};\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */ AlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n    return this.state.getNumericRefinement(attribute, operator);\n};\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */ AlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n    return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n// /////////// PRIVATE\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */ AlgoliaSearchHelper.prototype._search = function(options) {\n    var state = this.state;\n    var states = [];\n    var mainQueries = [];\n    if (!options.onlyWithDerivedHelpers) {\n        mainQueries = requestBuilder._getQueries(state.index, state);\n        states.push({\n            state: state,\n            queriesCount: mainQueries.length,\n            helper: this\n        });\n        this.emit(\"search\", {\n            state: state,\n            results: this.lastResults\n        });\n    }\n    var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n        var derivedState = derivedHelper.getModifiedState(state);\n        var derivedStateQueries = derivedState.index ? requestBuilder._getQueries(derivedState.index, derivedState) : [];\n        states.push({\n            state: derivedState,\n            queriesCount: derivedStateQueries.length,\n            helper: derivedHelper\n        });\n        derivedHelper.emit(\"search\", {\n            state: derivedState,\n            results: derivedHelper.lastResults\n        });\n        return derivedStateQueries;\n    });\n    var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n    var queryId = this._queryId++;\n    this._currentNbQueries++;\n    if (!queries.length) {\n        return Promise.resolve({\n            results: []\n        }).then(this._dispatchAlgoliaResponse.bind(this, states, queryId));\n    }\n    try {\n        this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n    } catch (error) {\n        // If we reach this part, we're in an internal error state\n        this.emit(\"error\", {\n            error: error\n        });\n    }\n    return undefined;\n};\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */ AlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n    // @TODO remove the number of outdated queries discarded instead of just one\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    if (this._currentNbQueries === 0) this.emit(\"searchQueueEmpty\");\n    var results = content.results.slice();\n    states.forEach(function(s) {\n        var state = s.state;\n        var queriesCount = s.queriesCount;\n        var helper = s.helper;\n        var specificResults = results.splice(0, queriesCount);\n        if (!state.index) {\n            helper.emit(\"result\", {\n                results: null,\n                state: state\n            });\n            return;\n        }\n        helper.lastResults = new SearchResults(state, specificResults);\n        helper.emit(\"result\", {\n            results: helper.lastResults,\n            state: state\n        });\n    });\n};\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    this.emit(\"error\", {\n        error: error\n    });\n    if (this._currentNbQueries === 0) this.emit(\"searchQueueEmpty\");\n};\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n    return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */ AlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n    return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\nAlgoliaSearchHelper.prototype._change = function(event) {\n    var state = event.state;\n    var isPageReset = event.isPageReset;\n    if (state !== this.state) {\n        this.state = state;\n        this.emit(\"change\", {\n            state: this.state,\n            results: this.lastResults,\n            isPageReset: isPageReset\n        });\n    }\n};\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.clearCache = function() {\n    if (this.client.clearCache) this.client.clearCache();\n    return this;\n};\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.setClient = function(newClient) {\n    if (this.client === newClient) return this;\n    if (typeof newClient.addAlgoliaAgent === \"function\") {\n        newClient.addAlgoliaAgent(\"JS Helper (\" + version + \")\");\n    }\n    this.client = newClient;\n    return this;\n};\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */ AlgoliaSearchHelper.prototype.getClient = function() {\n    return this.client;\n};\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper} a new DerivedHelper\n */ AlgoliaSearchHelper.prototype.derive = function(fn) {\n    var derivedHelper = new DerivedHelper(this, fn);\n    this.derivedHelpers.push(derivedHelper);\n    return derivedHelper;\n};\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */ AlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n    var pos = this.derivedHelpers.indexOf(derivedHelper);\n    if (pos === -1) throw new Error(\"Derived helper already detached\");\n    this.derivedHelpers.splice(pos, 1);\n};\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */ AlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n    return this._currentNbQueries > 0;\n};\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */ /**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */ module.exports = AlgoliaSearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/compact.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/compact.js ***!
  \**************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function compact(array) {\n    if (!Array.isArray(array)) {\n        return [];\n    }\n    return array.filter(Boolean);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRQyxLQUFLO0lBQ3JDLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixRQUFRO1FBQ3pCLE9BQU8sRUFBRTtJQUNYO0lBRUEsT0FBT0EsTUFBTUcsTUFBTSxDQUFDQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvY29tcGFjdC5qcz9mNmNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gYXJyYXkuZmlsdGVyKEJvb2xlYW4pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29tcGFjdCIsImFycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIiwiQm9vbGVhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js ***!
  \*******************************************************************************************************/
/***/ ((module) => {

eval("\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n    var sources = Array.prototype.slice.call(arguments);\n    return sources.reduceRight(function(acc, source) {\n        Object.keys(Object(source)).forEach(function(key) {\n            if (source[key] === undefined) {\n                return;\n            }\n            if (acc[key] !== undefined) {\n                // remove if already added, so that we can add it in correct order\n                delete acc[key];\n            }\n            acc[key] = source[key];\n        });\n        return acc;\n    }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9kZWZhdWx0c1B1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSx5RUFBeUU7QUFDekUsOEJBQThCO0FBQzlCQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0M7SUFDeEIsSUFBSUMsVUFBVUMsTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0M7SUFFekMsT0FBT0wsUUFBUU0sV0FBVyxDQUFDLFNBQVVDLEdBQUcsRUFBRUMsTUFBTTtRQUM5Q0MsT0FBT0MsSUFBSSxDQUFDRCxPQUFPRCxTQUFTRyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUMvQyxJQUFJSixNQUFNLENBQUNJLElBQUksS0FBS0MsV0FBVztnQkFDN0I7WUFDRjtZQUNBLElBQUlOLEdBQUcsQ0FBQ0ssSUFBSSxLQUFLQyxXQUFXO2dCQUMxQixrRUFBa0U7Z0JBQ2xFLE9BQU9OLEdBQUcsQ0FBQ0ssSUFBSTtZQUNqQjtZQUNBTCxHQUFHLENBQUNLLElBQUksR0FBR0osTUFBTSxDQUFDSSxJQUFJO1FBQ3hCO1FBQ0EsT0FBT0w7SUFDVCxHQUFHLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZGVmYXVsdHNQdXJlLmpzP2JmZjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvZGVmYXVsdHMsIGJ1dCBkb2Vzbid0IG11dGF0ZSB0aGUgdGFyZ2V0XG4vLyBpdCBhbHNvIHByZXNlcnZlIGtleXMgb3JkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmYXVsdHNQdXJlKCkge1xuICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNvdXJjZXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGFjYywgc291cmNlKSB7XG4gICAgT2JqZWN0LmtleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGlmIGFscmVhZHkgYWRkZWQsIHNvIHRoYXQgd2UgY2FuIGFkZCBpdCBpbiBjb3JyZWN0IG9yZGVyXG4gICAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICAgIH1cbiAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdHNQdXJlIiwic291cmNlcyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwicmVkdWNlUmlnaHQiLCJhY2MiLCJzb3VyY2UiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */ function escapeFacetValue(value) {\n    if (typeof value !== \"string\") return value;\n    return String(value).replace(/^-/, \"\\\\-\");\n}\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */ function unescapeFacetValue(value) {\n    if (typeof value !== \"string\") return value;\n    return value.replace(/^\\\\-/, \"-\");\n}\nmodule.exports = {\n    escapeFacetValue: escapeFacetValue,\n    unescapeFacetValue: unescapeFacetValue\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9lc2NhcGVGYWNldFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTQSxpQkFBaUJDLEtBQUs7SUFDN0IsSUFBSSxPQUFPQSxVQUFVLFVBQVUsT0FBT0E7SUFFdEMsT0FBT0MsT0FBT0QsT0FBT0UsT0FBTyxDQUFDLE1BQU07QUFDckM7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNDLG1CQUFtQkgsS0FBSztJQUMvQixJQUFJLE9BQU9BLFVBQVUsVUFBVSxPQUFPQTtJQUV0QyxPQUFPQSxNQUFNRSxPQUFPLENBQUMsUUFBUTtBQUMvQjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDZk4sa0JBQWtCQTtJQUNsQkksb0JBQW9CQTtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZXNjYXBlRmFjZXRWYWx1ZS5qcz82ODFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXBsYWNlcyBhIGxlYWRpbmcgLSB3aXRoIFxcLVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSB0aGUgZmFjZXQgdmFsdWUgdG8gcmVwbGFjZVxuICogQHJldHVybnMge2FueX0gdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZXNjYXBlRmFjZXRWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL14tLywgJ1xcXFwtJyk7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgYSBsZWFkaW5nIFxcLSB3aXRoIC1cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWVcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB1bmVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGVGYWNldFZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15cXFxcLS8sICctJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlc2NhcGVGYWNldFZhbHVlOiBlc2NhcGVGYWNldFZhbHVlLFxuICB1bmVzY2FwZUZhY2V0VmFsdWU6IHVuZXNjYXBlRmFjZXRWYWx1ZSxcbn07XG4iXSwibmFtZXMiOlsiZXNjYXBlRmFjZXRWYWx1ZSIsInZhbHVlIiwiU3RyaW5nIiwicmVwbGFjZSIsInVuZXNjYXBlRmFjZXRWYWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

eval("\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n    if (!Array.isArray(array)) {\n        return undefined;\n    }\n    for(var i = 0; i < array.length; i++){\n        if (comparator(array[i])) {\n            return array[i];\n        }\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEscUVBQXFFO0FBQ3JFQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsS0FBSyxFQUFFQyxVQUFVO0lBQzlDLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSCxRQUFRO1FBQ3pCLE9BQU9JO0lBQ1Q7SUFFQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlKLFdBQVdELEtBQUssQ0FBQ0ssRUFBRSxHQUFHO1lBQ3hCLE9BQU9MLEtBQUssQ0FBQ0ssRUFBRTtRQUNqQjtJQUNGO0lBRUEsT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZmluZC5qcz83NzUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gQE1BSk9SIGNhbiBiZSByZXBsYWNlZCBieSBuYXRpdmUgQXJyYXkjZmluZCB3aGVuIHdlIGNoYW5nZSBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmQoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZpbmQiLCJhcnJheSIsImNvbXBhcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/findIndex.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/findIndex.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

eval("\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n    if (!Array.isArray(array)) {\n        return -1;\n    }\n    for(var i = 0; i < array.length; i++){\n        if (comparator(array[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSwwRUFBMEU7QUFDMUVBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLFVBQVU7SUFDOUMsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNILFFBQVE7UUFDekIsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosTUFBTUssTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlILFdBQVdELEtBQUssQ0FBQ0ksRUFBRSxHQUFHO1lBQ3hCLE9BQU9BO1FBQ1Q7SUFDRjtJQUNBLE9BQU8sQ0FBQztBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanM/MDM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEBNQUpPUiBjYW4gYmUgcmVwbGFjZWQgYnkgbmF0aXZlIEFycmF5I2ZpbmRJbmRleCB3aGVuIHdlIGNoYW5nZSBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmQoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmaW5kIiwiYXJyYXkiLCJjb21wYXJhdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/findIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/formatSort.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/formatSort.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar find = __webpack_require__(/*! ./find */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/find.js\");\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */ module.exports = function formatSort(sortBy, defaults) {\n    var defaultInstructions = (defaults || []).map(function(sort) {\n        return sort.split(\":\");\n    });\n    return sortBy.reduce(function preparePredicate(out, sort) {\n        var sortInstruction = sort.split(\":\");\n        var matchingDefault = find(defaultInstructions, function(defaultInstruction) {\n            return defaultInstruction[0] === sortInstruction[0];\n        });\n        if (sortInstruction.length > 1 || !matchingDefault) {\n            out[0].push(sortInstruction[0]);\n            out[1].push(sortInstruction[1]);\n            return out;\n        }\n        out[0].push(matchingDefault[0]);\n        out[1].push(matchingDefault[1]);\n        return out;\n    }, [\n        [],\n        []\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mb3JtYXRTb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkI7Ozs7O0NBS0MsR0FDREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdDLE1BQU0sRUFBRUMsUUFBUTtJQUNuRCxJQUFJQyxzQkFBc0IsQ0FBQ0QsWUFBWSxFQUFFLEVBQUVFLEdBQUcsQ0FBQyxTQUFVQyxJQUFJO1FBQzNELE9BQU9BLEtBQUtDLEtBQUssQ0FBQztJQUNwQjtJQUVBLE9BQU9MLE9BQU9NLE1BQU0sQ0FDbEIsU0FBU0MsaUJBQWlCQyxHQUFHLEVBQUVKLElBQUk7UUFDakMsSUFBSUssa0JBQWtCTCxLQUFLQyxLQUFLLENBQUM7UUFFakMsSUFBSUssa0JBQWtCZixLQUNwQk8scUJBQ0EsU0FBVVMsa0JBQWtCO1lBQzFCLE9BQU9BLGtCQUFrQixDQUFDLEVBQUUsS0FBS0YsZUFBZSxDQUFDLEVBQUU7UUFDckQ7UUFHRixJQUFJQSxnQkFBZ0JHLE1BQU0sR0FBRyxLQUFLLENBQUNGLGlCQUFpQjtZQUNsREYsR0FBRyxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxDQUFDSixlQUFlLENBQUMsRUFBRTtZQUM5QkQsR0FBRyxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxDQUFDSixlQUFlLENBQUMsRUFBRTtZQUM5QixPQUFPRDtRQUNUO1FBRUFBLEdBQUcsQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0gsZUFBZSxDQUFDLEVBQUU7UUFDOUJGLEdBQUcsQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0gsZUFBZSxDQUFDLEVBQUU7UUFDOUIsT0FBT0Y7SUFDVCxHQUNBO1FBQUMsRUFBRTtRQUFFLEVBQUU7S0FBQztBQUVaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mb3JtYXRTb3J0LmpzPzZiZDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmluZCA9IHJlcXVpcmUoJy4vZmluZCcpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSBzb3J0IGZvcm1hdCBmcm9tIHVzZXIgZnJpZW5kbHkgbm90YXRpb24gdG8gbG9kYXNoIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc29ydEJ5IGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbZGVmYXVsdHNdIGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcmV0dXJuIHthcnJheS48c3RyaW5nW10+fSBhcnJheSBjb250YWluaW5nIDIgZWxlbWVudHMgOiBhdHRyaWJ1dGVzLCBvcmRlcnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnRCeSwgZGVmYXVsdHMpIHtcbiAgdmFyIGRlZmF1bHRJbnN0cnVjdGlvbnMgPSAoZGVmYXVsdHMgfHwgW10pLm1hcChmdW5jdGlvbiAoc29ydCkge1xuICAgIHJldHVybiBzb3J0LnNwbGl0KCc6Jyk7XG4gIH0pO1xuXG4gIHJldHVybiBzb3J0QnkucmVkdWNlKFxuICAgIGZ1bmN0aW9uIHByZXBhcmVQcmVkaWNhdGUob3V0LCBzb3J0KSB7XG4gICAgICB2YXIgc29ydEluc3RydWN0aW9uID0gc29ydC5zcGxpdCgnOicpO1xuXG4gICAgICB2YXIgbWF0Y2hpbmdEZWZhdWx0ID0gZmluZChcbiAgICAgICAgZGVmYXVsdEluc3RydWN0aW9ucyxcbiAgICAgICAgZnVuY3Rpb24gKGRlZmF1bHRJbnN0cnVjdGlvbikge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0SW5zdHJ1Y3Rpb25bMF0gPT09IHNvcnRJbnN0cnVjdGlvblswXTtcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKHNvcnRJbnN0cnVjdGlvbi5sZW5ndGggPiAxIHx8ICFtYXRjaGluZ0RlZmF1bHQpIHtcbiAgICAgICAgb3V0WzBdLnB1c2goc29ydEluc3RydWN0aW9uWzBdKTtcbiAgICAgICAgb3V0WzFdLnB1c2goc29ydEluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cblxuICAgICAgb3V0WzBdLnB1c2gobWF0Y2hpbmdEZWZhdWx0WzBdKTtcbiAgICAgIG91dFsxXS5wdXNoKG1hdGNoaW5nRGVmYXVsdFsxXSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgW1tdLCBbXV1cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiZmluZCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0U29ydCIsInNvcnRCeSIsImRlZmF1bHRzIiwiZGVmYXVsdEluc3RydWN0aW9ucyIsIm1hcCIsInNvcnQiLCJzcGxpdCIsInJlZHVjZSIsInByZXBhcmVQcmVkaWNhdGUiLCJvdXQiLCJzb3J0SW5zdHJ1Y3Rpb24iLCJtYXRjaGluZ0RlZmF1bHQiLCJkZWZhdWx0SW5zdHJ1Y3Rpb24iLCJsZW5ndGgiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/formatSort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/inherits.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/inherits.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

eval("\nfunction inherits(ctor, superCtor) {\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}\nmodule.exports = inherits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbmhlcml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLFNBQVNDLElBQUksRUFBRUMsU0FBUztJQUMvQkQsS0FBS0UsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNILFVBQVVDLFNBQVMsRUFBRTtRQUNsREcsYUFBYTtZQUNYQyxPQUFPTjtZQUNQTyxZQUFZO1lBQ1pDLFVBQVU7WUFDVkMsY0FBYztRQUNoQjtJQUNGO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvaW5oZXJpdHMuanM/MTVlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogY3RvcixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSxcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5oZXJpdHM7XG4iXSwibmFtZXMiOlsiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/inherits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/intersection.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/intersection.js ***!
  \*******************************************************************************************************/
/***/ ((module) => {

eval("\nfunction intersection(arr1, arr2) {\n    return arr1.filter(function(value, index) {\n        return arr2.indexOf(value) > -1 && arr1.indexOf(value) === index /* skips duplicates */ ;\n    });\n}\nmodule.exports = intersection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbnRlcnNlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFTQSxhQUFhQyxJQUFJLEVBQUVDLElBQUk7SUFDOUIsT0FBT0QsS0FBS0UsTUFBTSxDQUFDLFNBQVVDLEtBQUssRUFBRUMsS0FBSztRQUN2QyxPQUNFSCxLQUFLSSxPQUFPLENBQUNGLFNBQVMsQ0FBQyxLQUN2QkgsS0FBS0ssT0FBTyxDQUFDRixXQUFXQyxNQUFNLG9CQUFvQjtJQUV0RDtBQUNGO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ludGVyc2VjdGlvbi5qcz80ZDBlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW50ZXJzZWN0aW9uKGFycjEsIGFycjIpIHtcbiAgcmV0dXJuIGFycjEuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYXJyMi5pbmRleE9mKHZhbHVlKSA+IC0xICYmXG4gICAgICBhcnIxLmluZGV4T2YodmFsdWUpID09PSBpbmRleCAvKiBza2lwcyBkdXBsaWNhdGVzICovXG4gICAgKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0aW9uO1xuIl0sIm5hbWVzIjpbImludGVyc2VjdGlvbiIsImFycjEiLCJhcnIyIiwiZmlsdGVyIiwidmFsdWUiLCJpbmRleCIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/intersection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js ***!
  \************************************************************************************************/
/***/ ((module) => {

eval("\nfunction clone(value) {\n    if (typeof value === \"object\" && value !== null) {\n        return _merge(Array.isArray(value) ? [] : {}, value);\n    }\n    return value;\n}\nfunction isObjectOrArrayOrFunction(value) {\n    return typeof value === \"function\" || Array.isArray(value) || Object.prototype.toString.call(value) === \"[object Object]\";\n}\nfunction _merge(target, source) {\n    if (target === source) {\n        return target;\n    }\n    // eslint-disable-next-line no-restricted-syntax\n    for(var key in source){\n        if (!Object.prototype.hasOwnProperty.call(source, key) || key === \"__proto__\" || key === \"constructor\") {\n            continue;\n        }\n        var sourceVal = source[key];\n        var targetVal = target[key];\n        if (typeof targetVal !== \"undefined\" && typeof sourceVal === \"undefined\") {\n            continue;\n        }\n        if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {\n            target[key] = _merge(targetVal, sourceVal);\n        } else {\n            target[key] = clone(sourceVal);\n        }\n    }\n    return target;\n}\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */ function merge(target) {\n    if (!isObjectOrArrayOrFunction(target)) {\n        target = {};\n    }\n    for(var i = 1, l = arguments.length; i < l; i++){\n        var source = arguments[i];\n        if (isObjectOrArrayOrFunction(source)) {\n            _merge(target, source);\n        }\n    }\n    return target;\n}\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLE1BQU1DLEtBQUs7SUFDbEIsSUFBSSxPQUFPQSxVQUFVLFlBQVlBLFVBQVUsTUFBTTtRQUMvQyxPQUFPQyxPQUFPQyxNQUFNQyxPQUFPLENBQUNILFNBQVMsRUFBRSxHQUFHLENBQUMsR0FBR0E7SUFDaEQ7SUFDQSxPQUFPQTtBQUNUO0FBRUEsU0FBU0ksMEJBQTBCSixLQUFLO0lBQ3RDLE9BQ0UsT0FBT0EsVUFBVSxjQUNqQkUsTUFBTUMsT0FBTyxDQUFDSCxVQUNkSyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDUixXQUFXO0FBRTlDO0FBRUEsU0FBU0MsT0FBT1EsTUFBTSxFQUFFQyxNQUFNO0lBQzVCLElBQUlELFdBQVdDLFFBQVE7UUFDckIsT0FBT0Q7SUFDVDtJQUVBLGdEQUFnRDtJQUNoRCxJQUFLLElBQUlFLE9BQU9ELE9BQVE7UUFDdEIsSUFDRSxDQUFDTCxPQUFPQyxTQUFTLENBQUNNLGNBQWMsQ0FBQ0osSUFBSSxDQUFDRSxRQUFRQyxRQUM5Q0EsUUFBUSxlQUNSQSxRQUFRLGVBQ1I7WUFFQTtRQUNGO1FBRUEsSUFBSUUsWUFBWUgsTUFBTSxDQUFDQyxJQUFJO1FBQzNCLElBQUlHLFlBQVlMLE1BQU0sQ0FBQ0UsSUFBSTtRQUUzQixJQUFJLE9BQU9HLGNBQWMsZUFBZSxPQUFPRCxjQUFjLGFBQWE7WUFFeEU7UUFDRjtRQUVBLElBQ0VULDBCQUEwQlUsY0FDMUJWLDBCQUEwQlMsWUFDMUI7WUFDQUosTUFBTSxDQUFDRSxJQUFJLEdBQUdWLE9BQU9hLFdBQVdEO1FBQ2xDLE9BQU87WUFDTEosTUFBTSxDQUFDRSxJQUFJLEdBQUdaLE1BQU1jO1FBQ3RCO0lBQ0Y7SUFDQSxPQUFPSjtBQUNUO0FBRUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRCxTQUFTTSxNQUFNTixNQUFNO0lBQ25CLElBQUksQ0FBQ0wsMEJBQTBCSyxTQUFTO1FBQ3RDQSxTQUFTLENBQUM7SUFDWjtJQUVBLElBQUssSUFBSU8sSUFBSSxHQUFHQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVILElBQUlDLEdBQUdELElBQUs7UUFDaEQsSUFBSU4sU0FBU1EsU0FBUyxDQUFDRixFQUFFO1FBRXpCLElBQUlaLDBCQUEwQk0sU0FBUztZQUNyQ1QsT0FBT1EsUUFBUUM7UUFDakI7SUFDRjtJQUNBLE9BQU9EO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvbWVyZ2UuanM/NmE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIF9tZXJnZShBcnJheS5pc0FycmF5KHZhbHVlKSA/IFtdIDoge30sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICBBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICk7XG59XG5cbmZ1bmN0aW9uIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoXG4gICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSB8fFxuICAgICAga2V5ID09PSAnX19wcm90b19fJyB8fFxuICAgICAga2V5ID09PSAnY29uc3RydWN0b3InXG4gICAgKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VWYWwgPSBzb3VyY2Vba2V5XTtcbiAgICB2YXIgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV07XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldFZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNvdXJjZVZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbih0YXJnZXRWYWwpICYmXG4gICAgICBpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHNvdXJjZVZhbClcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gX21lcmdlKHRhcmdldFZhbCwgc291cmNlVmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZShzb3VyY2VWYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgT2JqZWN0LmFzc2lnbiwgYnV0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kIGluaGVyaXRlZFxuICogZW51bWVyYWJsZSBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqXG4gKiBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvbWVyZ2UsIGJ1dDpcbiAqIC0gZG9lcyBtdXRhdGUgZnVuY3Rpb25zIGlmIHRoZXkgYXJlIGEgc291cmNlXG4gKiAtIHRyZWF0cyBub24tcGxhaW4gb2JqZWN0cyBhcyBwbGFpblxuICogLSBkb2VzIG5vdCB3b3JrIGZvciBjaXJjdWxhciBvYmplY3RzXG4gKiAtIHRyZWF0cyBzcGFyc2UgYXJyYXlzIGFzIHNwYXJzZVxuICogLSBkb2VzIG5vdCBjb252ZXJ0IEFycmF5LWxpa2Ugb2JqZWN0cyAoQXJndW1lbnRzLCBOb2RlTGlzdHMsIGV0Yy4pIHRvIGFycmF5c1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0KSB7XG4gIGlmICghaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cblxuICBmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgaWYgKGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24oc291cmNlKSkge1xuICAgICAgX21lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiJdLCJuYW1lcyI6WyJjbG9uZSIsInZhbHVlIiwiX21lcmdlIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInRhcmdldCIsInNvdXJjZSIsImtleSIsImhhc093blByb3BlcnR5Iiwic291cmNlVmFsIiwidGFyZ2V0VmFsIiwibWVyZ2UiLCJpIiwibCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\nfunction objectHasKeys(obj) {\n    return obj && Object.keys(obj).length > 0;\n}\nmodule.exports = objectHasKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsY0FBY0MsR0FBRztJQUN4QixPQUFPQSxPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQUtHLE1BQU0sR0FBRztBQUMxQztBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzP2I3MzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RIYXNLZXlzKG9iaikge1xuICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RIYXNLZXlzO1xuIl0sIm5hbWVzIjpbIm9iamVjdEhhc0tleXMiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

eval("\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source === null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key;\n    var i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        // eslint-disable-next-line no-continue\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vbWl0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsK0hBQStIO0FBQy9ILFNBQVNBLDhCQUE4QkMsTUFBTSxFQUFFQyxRQUFRO0lBQ3JELElBQUlELFdBQVcsTUFBTSxPQUFPLENBQUM7SUFDN0IsSUFBSUUsU0FBUyxDQUFDO0lBQ2QsSUFBSUMsYUFBYUMsT0FBT0MsSUFBSSxDQUFDTDtJQUM3QixJQUFJTTtJQUNKLElBQUlDO0lBQ0osSUFBS0EsSUFBSSxHQUFHQSxJQUFJSixXQUFXSyxNQUFNLEVBQUVELElBQUs7UUFDdENELE1BQU1ILFVBQVUsQ0FBQ0ksRUFBRTtRQUNuQix1Q0FBdUM7UUFDdkMsSUFBSU4sU0FBU1EsT0FBTyxDQUFDSCxRQUFRLEdBQUc7UUFDaENKLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHTixNQUFNLENBQUNNLElBQUk7SUFDM0I7SUFDQSxPQUFPSjtBQUNUO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL29taXQuanM/MDNkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9ibG9iLzNhYWFmYWUwNTNmYTc1ZmViYjNhYTQ1ZDQ1YjZmMDA2NDZlMzBiYTQvcGFja2FnZXMvYmFiZWwtaGVscGVycy9zcmMvaGVscGVycy5qcyNMNjA0LUw2MjBcbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleTtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTtcbiJdLCJuYW1lcyI6WyJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZSIsImV4Y2x1ZGVkIiwidGFyZ2V0Iiwic291cmNlS2V5cyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/omit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/orderBy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/orderBy.js ***!
  \**************************************************************************************************/
/***/ ((module) => {

eval("\nfunction compareAscending(value, other) {\n    if (value !== other) {\n        var valIsDefined = value !== undefined;\n        var valIsNull = value === null;\n        var othIsDefined = other !== undefined;\n        var othIsNull = other === null;\n        if (!othIsNull && value > other || valIsNull && othIsDefined || !valIsDefined) {\n            return 1;\n        }\n        if (!valIsNull && value < other || othIsNull && valIsDefined || !othIsDefined) {\n            return -1;\n        }\n    }\n    return 0;\n}\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */ function orderBy(collection, iteratees, orders) {\n    if (!Array.isArray(collection)) {\n        return [];\n    }\n    if (!Array.isArray(orders)) {\n        orders = [];\n    }\n    var result = collection.map(function(value, index) {\n        return {\n            criteria: iteratees.map(function(iteratee) {\n                return value[iteratee];\n            }),\n            index: index,\n            value: value\n        };\n    });\n    result.sort(function comparer(object, other) {\n        var index = -1;\n        while(++index < object.criteria.length){\n            var res = compareAscending(object.criteria[index], other.criteria[index]);\n            if (res) {\n                if (index >= orders.length) {\n                    return res;\n                }\n                if (orders[index] === \"desc\") {\n                    return -res;\n                }\n                return res;\n            }\n        }\n        // This ensures a stable sort in V8 and other engines.\n        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n        return object.index - other.index;\n    });\n    return result.map(function(res) {\n        return res.value;\n    });\n}\nmodule.exports = orderBy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vcmRlckJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsaUJBQWlCQyxLQUFLLEVBQUVDLEtBQUs7SUFDcEMsSUFBSUQsVUFBVUMsT0FBTztRQUNuQixJQUFJQyxlQUFlRixVQUFVRztRQUM3QixJQUFJQyxZQUFZSixVQUFVO1FBRTFCLElBQUlLLGVBQWVKLFVBQVVFO1FBQzdCLElBQUlHLFlBQVlMLFVBQVU7UUFFMUIsSUFDRSxDQUFFSyxhQUFhTixRQUFRQyxTQUN0QkcsYUFBYUMsZ0JBQ2QsQ0FBQ0gsY0FDRDtZQUNBLE9BQU87UUFDVDtRQUNBLElBQ0UsQ0FBRUUsYUFBYUosUUFBUUMsU0FDdEJLLGFBQWFKLGdCQUNkLENBQUNHLGNBQ0Q7WUFDQSxPQUFPLENBQUM7UUFDVjtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTRSxRQUFRQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsTUFBTTtJQUM1QyxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osYUFBYTtRQUM5QixPQUFPLEVBQUU7SUFDWDtJQUVBLElBQUksQ0FBQ0csTUFBTUMsT0FBTyxDQUFDRixTQUFTO1FBQzFCQSxTQUFTLEVBQUU7SUFDYjtJQUVBLElBQUlHLFNBQVNMLFdBQVdNLEdBQUcsQ0FBQyxTQUFVZCxLQUFLLEVBQUVlLEtBQUs7UUFDaEQsT0FBTztZQUNMQyxVQUFVUCxVQUFVSyxHQUFHLENBQUMsU0FBVUcsUUFBUTtnQkFDeEMsT0FBT2pCLEtBQUssQ0FBQ2lCLFNBQVM7WUFDeEI7WUFDQUYsT0FBT0E7WUFDUGYsT0FBT0E7UUFDVDtJQUNGO0lBRUFhLE9BQU9LLElBQUksQ0FBQyxTQUFTQyxTQUFTQyxNQUFNLEVBQUVuQixLQUFLO1FBQ3pDLElBQUljLFFBQVEsQ0FBQztRQUViLE1BQU8sRUFBRUEsUUFBUUssT0FBT0osUUFBUSxDQUFDSyxNQUFNLENBQUU7WUFDdkMsSUFBSUMsTUFBTXZCLGlCQUFpQnFCLE9BQU9KLFFBQVEsQ0FBQ0QsTUFBTSxFQUFFZCxNQUFNZSxRQUFRLENBQUNELE1BQU07WUFDeEUsSUFBSU8sS0FBSztnQkFDUCxJQUFJUCxTQUFTTCxPQUFPVyxNQUFNLEVBQUU7b0JBQzFCLE9BQU9DO2dCQUNUO2dCQUNBLElBQUlaLE1BQU0sQ0FBQ0ssTUFBTSxLQUFLLFFBQVE7b0JBQzVCLE9BQU8sQ0FBQ087Z0JBQ1Y7Z0JBQ0EsT0FBT0E7WUFDVDtRQUNGO1FBRUEsc0RBQXNEO1FBQ3RELDJFQUEyRTtRQUMzRSxPQUFPRixPQUFPTCxLQUFLLEdBQUdkLE1BQU1jLEtBQUs7SUFDbkM7SUFFQSxPQUFPRixPQUFPQyxHQUFHLENBQUMsU0FBVVEsR0FBRztRQUM3QixPQUFPQSxJQUFJdEIsS0FBSztJQUNsQjtBQUNGO0FBRUF1QixPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvb3JkZXJCeS5qcz8wYWE1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbDtcblxuICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbDtcblxuICAgIGlmIChcbiAgICAgICghb3RoSXNOdWxsICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCkgfHxcbiAgICAgICF2YWxJc0RlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAoIXZhbElzTnVsbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQpIHx8XG4gICAgICAhb3RoSXNEZWZpbmVkXG4gICAgKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8b2JqZWN0Pn0gY29sbGVjdGlvbiBvYmplY3Qgd2l0aCBrZXlzIGluIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gaXRlcmF0ZWVzIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3JkZXJzIGFzYyB8IGRlc2NcbiAqIEByZXR1cm4ge0FycmF5PG9iamVjdD59IHNvcnRlZCBjb2xsZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KG9yZGVycykpIHtcbiAgICBvcmRlcnMgPSBbXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBjb2xsZWN0aW9uLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZXMubWFwKGZ1bmN0aW9uIChpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbaXRlcmF0ZWVdO1xuICAgICAgfSksXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgfTtcbiAgfSk7XG5cbiAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gY29tcGFyZXIob2JqZWN0LCBvdGhlcikge1xuICAgIHZhciBpbmRleCA9IC0xO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBvYmplY3QuY3JpdGVyaWEubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzID0gY29tcGFyZUFzY2VuZGluZyhvYmplY3QuY3JpdGVyaWFbaW5kZXhdLCBvdGhlci5jcml0ZXJpYVtpbmRleF0pO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyc1tpbmRleF0gPT09ICdkZXNjJykge1xuICAgICAgICAgIHJldHVybiAtcmVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0Lm1hcChmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIHJlcy52YWx1ZTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3JkZXJCeTtcbiJdLCJuYW1lcyI6WyJjb21wYXJlQXNjZW5kaW5nIiwidmFsdWUiLCJvdGhlciIsInZhbElzRGVmaW5lZCIsInVuZGVmaW5lZCIsInZhbElzTnVsbCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm9yZGVyQnkiLCJjb2xsZWN0aW9uIiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwicmVzdWx0IiwibWFwIiwiaW5kZXgiLCJjcml0ZXJpYSIsIml0ZXJhdGVlIiwic29ydCIsImNvbXBhcmVyIiwib2JqZWN0IiwibGVuZ3RoIiwicmVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/orderBy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/valToNumber.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/valToNumber.js ***!
  \******************************************************************************************************/
/***/ ((module) => {

eval("\nfunction valToNumber(v) {\n    if (typeof v === \"number\") {\n        return v;\n    } else if (typeof v === \"string\") {\n        return parseFloat(v);\n    } else if (Array.isArray(v)) {\n        return v.map(valToNumber);\n    }\n    throw new Error(\"The value should be a number, a parsable string or an array of those.\");\n}\nmodule.exports = valToNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy92YWxUb051bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLFlBQVlDLENBQUM7SUFDcEIsSUFBSSxPQUFPQSxNQUFNLFVBQVU7UUFDekIsT0FBT0E7SUFDVCxPQUFPLElBQUksT0FBT0EsTUFBTSxVQUFVO1FBQ2hDLE9BQU9DLFdBQVdEO0lBQ3BCLE9BQU8sSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxJQUFJO1FBQzNCLE9BQU9BLEVBQUVJLEdBQUcsQ0FBQ0w7SUFDZjtJQUVBLE1BQU0sSUFBSU0sTUFDUjtBQUVKO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL3ZhbFRvTnVtYmVyLmpzPzA1NzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiB2YWxUb051bWJlcih2KSB7XG4gIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgcmV0dXJuIHYubWFwKHZhbFRvTnVtYmVyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnVGhlIHZhbHVlIHNob3VsZCBiZSBhIG51bWJlciwgYSBwYXJzYWJsZSBzdHJpbmcgb3IgYW4gYXJyYXkgb2YgdGhvc2UuJ1xuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbFRvTnVtYmVyO1xuIl0sIm5hbWVzIjpbInZhbFRvTnVtYmVyIiwidiIsInBhcnNlRmxvYXQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/valToNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/requestBuilder.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/requestBuilder.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/functions/merge.js\");\nfunction sortObject(obj) {\n    return Object.keys(obj).sort().reduce(function(acc, curr) {\n        acc[curr] = obj[curr];\n        return acc;\n    }, {});\n}\nvar requestBuilder = {\n    /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */ _getQueries: function getQueries(index, state) {\n        var queries = [];\n        // One query for the hits\n        queries.push({\n            indexName: index,\n            params: requestBuilder._getHitsSearchParams(state)\n        });\n        // One for each disjunctive facets\n        state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n            queries.push({\n                indexName: index,\n                params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n            });\n        });\n        // More to get the parent levels of the hierarchical facets when refined\n        state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n            var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n            var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            // If we are deeper than level 0 (starting from `beer > IPA`)\n            // we want to get all parent values\n            if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n                // We generate a map of the filters we will use for our facet values queries\n                var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(function createFiltersMap(map, segment, level) {\n                    return map.concat({\n                        attribute: hierarchicalFacet.attributes[level],\n                        value: level === 0 ? segment : [\n                            map[map.length - 1].value,\n                            segment\n                        ].join(separator)\n                    });\n                }, []);\n                filtersMap.forEach(function(filter, level) {\n                    var params = requestBuilder._getDisjunctiveFacetSearchParams(state, filter.attribute, level === 0);\n                    // Keep facet filters unrelated to current hierarchical attributes\n                    function hasHierarchicalFacetFilter(value) {\n                        return hierarchicalFacet.attributes.some(function(attribute) {\n                            return attribute === value.split(\":\")[0];\n                        });\n                    }\n                    var filteredFacetFilters = (params.facetFilters || []).reduce(function(acc, facetFilter) {\n                        if (Array.isArray(facetFilter)) {\n                            var filtered = facetFilter.filter(function(filterValue) {\n                                return !hasHierarchicalFacetFilter(filterValue);\n                            });\n                            if (filtered.length > 0) {\n                                acc.push(filtered);\n                            }\n                        }\n                        if (typeof facetFilter === \"string\" && !hasHierarchicalFacetFilter(facetFilter)) {\n                            acc.push(facetFilter);\n                        }\n                        return acc;\n                    }, []);\n                    var parent = filtersMap[level - 1];\n                    if (level > 0) {\n                        params.facetFilters = filteredFacetFilters.concat(parent.attribute + \":\" + parent.value);\n                    } else {\n                        params.facetFilters = filteredFacetFilters.length > 0 ? filteredFacetFilters : undefined;\n                    }\n                    queries.push({\n                        indexName: index,\n                        params: params\n                    });\n                });\n            }\n        });\n        return queries;\n    },\n    /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */ _getHitsSearchParams: function(state) {\n        var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state)).sort();\n        var facetFilters = requestBuilder._getFacetFilters(state);\n        var numericFilters = requestBuilder._getNumericFilters(state);\n        var tagFilters = requestBuilder._getTagFilters(state);\n        var additionalParams = {\n            facets: facets.indexOf(\"*\") > -1 ? [\n                \"*\"\n            ] : facets,\n            tagFilters: tagFilters\n        };\n        if (facetFilters.length > 0) {\n            additionalParams.facetFilters = facetFilters;\n        }\n        if (numericFilters.length > 0) {\n            additionalParams.numericFilters = numericFilters;\n        }\n        return sortObject(merge({}, state.getQueryParams(), additionalParams));\n    },\n    /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */ _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n        var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n        var numericFilters = requestBuilder._getNumericFilters(state, facet);\n        var tagFilters = requestBuilder._getTagFilters(state);\n        var additionalParams = {\n            hitsPerPage: 0,\n            page: 0,\n            analytics: false,\n            clickAnalytics: false\n        };\n        if (tagFilters.length > 0) {\n            additionalParams.tagFilters = tagFilters;\n        }\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n        if (hierarchicalFacet) {\n            additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n        } else {\n            additionalParams.facets = facet;\n        }\n        if (numericFilters.length > 0) {\n            additionalParams.numericFilters = numericFilters;\n        }\n        if (facetFilters.length > 0) {\n            additionalParams.facetFilters = facetFilters;\n        }\n        return sortObject(merge({}, state.getQueryParams(), additionalParams));\n    },\n    /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */ _getNumericFilters: function(state, facetName) {\n        if (state.numericFilters) {\n            return state.numericFilters;\n        }\n        var numericFilters = [];\n        Object.keys(state.numericRefinements).forEach(function(attribute) {\n            var operators = state.numericRefinements[attribute] || {};\n            Object.keys(operators).forEach(function(operator) {\n                var values = operators[operator] || [];\n                if (facetName !== attribute) {\n                    values.forEach(function(value) {\n                        if (Array.isArray(value)) {\n                            var vs = value.map(function(v) {\n                                return attribute + operator + v;\n                            });\n                            numericFilters.push(vs);\n                        } else {\n                            numericFilters.push(attribute + operator + value);\n                        }\n                    });\n                }\n            });\n        });\n        return numericFilters;\n    },\n    /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */ _getTagFilters: function(state) {\n        if (state.tagFilters) {\n            return state.tagFilters;\n        }\n        return state.tagRefinements.join(\",\");\n    },\n    /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */ _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n        var facetFilters = [];\n        var facetsRefinements = state.facetsRefinements || {};\n        Object.keys(facetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = facetsRefinements[facetName] || [];\n            facetValues.sort().forEach(function(facetValue) {\n                facetFilters.push(facetName + \":\" + facetValue);\n            });\n        });\n        var facetsExcludes = state.facetsExcludes || {};\n        Object.keys(facetsExcludes).sort().forEach(function(facetName) {\n            var facetValues = facetsExcludes[facetName] || [];\n            facetValues.sort().forEach(function(facetValue) {\n                facetFilters.push(facetName + \":-\" + facetValue);\n            });\n        });\n        var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n        Object.keys(disjunctiveFacetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n            if (facetName === facet || !facetValues || facetValues.length === 0) {\n                return;\n            }\n            var orFilters = [];\n            facetValues.sort().forEach(function(facetValue) {\n                orFilters.push(facetName + \":\" + facetValue);\n            });\n            facetFilters.push(orFilters);\n        });\n        var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n        Object.keys(hierarchicalFacetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n            var facetValue = facetValues[0];\n            if (facetValue === undefined) {\n                return;\n            }\n            var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n            var attributeToRefine;\n            var attributesIndex;\n            // we ask for parent facet values only when the `facet` is the current hierarchical facet\n            if (facet === facetName) {\n                // if we are at the root level already, no need to ask for facet values, we get them from\n                // the hits query\n                if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n                    return;\n                }\n                if (!rootPath) {\n                    attributesIndex = facetValue.split(separator).length - 2;\n                    facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n                } else {\n                    attributesIndex = rootPath.split(separator).length - 1;\n                    facetValue = rootPath;\n                }\n                attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n            } else {\n                attributesIndex = facetValue.split(separator).length - 1;\n                attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n            }\n            if (attributeToRefine) {\n                facetFilters.push([\n                    attributeToRefine + \":\" + facetValue\n                ]);\n            }\n        });\n        return facetFilters;\n    },\n    _getHitsHierarchicalFacetsAttributes: function(state) {\n        var out = [];\n        return state.hierarchicalFacets.reduce(// ask for as much levels as there's hierarchical refinements\n        function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n            var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n            // if no refinement, ask for root level\n            if (!hierarchicalRefinement) {\n                allAttributes.push(hierarchicalFacet.attributes[0]);\n                return allAttributes;\n            }\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            var level = hierarchicalRefinement.split(separator).length;\n            var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n            return allAttributes.concat(newAttributes);\n        }, out);\n    },\n    _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        if (rootLevel === true) {\n            var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n            var attributeIndex = 0;\n            if (rootPath) {\n                attributeIndex = rootPath.split(separator).length;\n            }\n            return [\n                hierarchicalFacet.attributes[attributeIndex]\n            ];\n        }\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || \"\";\n        // if refinement is 'beers > IPA > Flying dog',\n        // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n        var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n        return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n    },\n    getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n        var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n        var searchForFacetSearchParameters = {\n            facetQuery: query,\n            facetName: facetName\n        };\n        if (typeof maxFacetHits === \"number\") {\n            searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n        }\n        return sortObject(merge({}, requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters));\n    }\n};\nmodule.exports = requestBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/requestBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js ***!
  \*******************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function isValidUserToken(userToken) {\n    if (userToken === null) {\n        return false;\n    }\n    return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3V0aWxzL2lzVmFsaWRVc2VyVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGlCQUFpQkMsU0FBUztJQUNsRCxJQUFJQSxjQUFjLE1BQU07UUFDdEIsT0FBTztJQUNUO0lBQ0EsT0FBTyx3QkFBd0JDLElBQUksQ0FBQ0Q7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvaXNWYWxpZFVzZXJUb2tlbi5qcz8zMzI3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ZhbGlkVXNlclRva2VuKHVzZXJUb2tlbikge1xuICBpZiAodXNlclRva2VuID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAvXlthLXpBLVowLTlfLV17MSw2NH0kLy50ZXN0KHVzZXJUb2tlbik7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc1ZhbGlkVXNlclRva2VuIiwidXNlclRva2VuIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/version.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/version.js ***!
  \****************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = \"3.14.0\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3ZlcnNpb24uanM/MThhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzMuMTQuMCc7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/src/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/formats.js":
/*!**********************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/qs/lib/formats.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\nvar Format = {\n    RFC1738: \"RFC1738\",\n    RFC3986: \"RFC3986\"\n};\nmodule.exports = {\n    \"default\": Format.RFC3986,\n    formatters: {\n        RFC1738: function(value) {\n            return replace.call(value, percentTwenties, \"+\");\n        },\n        RFC3986: function(value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxPQUFPQyxTQUFTLENBQUNGLE9BQU87QUFDdEMsSUFBSUcsa0JBQWtCO0FBRXRCLElBQUlDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxTQUFTO0FBQ2I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2IsV0FBV0osT0FBT0UsT0FBTztJQUN6QkcsWUFBWTtRQUNSSixTQUFTLFNBQVVLLEtBQUs7WUFDcEIsT0FBT1YsUUFBUVcsSUFBSSxDQUFDRCxPQUFPUCxpQkFBaUI7UUFDaEQ7UUFDQUcsU0FBUyxTQUFVSSxLQUFLO1lBQ3BCLE9BQU9ULE9BQU9TO1FBQ2xCO0lBQ0o7SUFDQUwsU0FBU0QsT0FBT0MsT0FBTztJQUN2QkMsU0FBU0YsT0FBT0UsT0FBTztBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzPzQ0NGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiJdLCJuYW1lcyI6WyJyZXBsYWNlIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicGVyY2VudFR3ZW50aWVzIiwiRm9ybWF0IiwiUkZDMTczOCIsIlJGQzM5ODYiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0dGVycyIsInZhbHVlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/formats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/qs/lib/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/stringify.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/parse.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/formats.js\");\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUM7QUFFdEJHLE9BQU9DLE9BQU8sR0FBRztJQUNiRixTQUFTQTtJQUNURCxPQUFPQTtJQUNQRixXQUFXQTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzP2Q0MTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIl0sIm5hbWVzIjpbInN0cmluZ2lmeSIsInJlcXVpcmUiLCJwYXJzZSIsImZvcm1hdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/parse.js":
/*!********************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/qs/lib/parse.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/utils.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    arrayLimit: 20,\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: \"&\",\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\nvar interpretNumericEntities = function(str) {\n    return str.replace(/&#(\\d+);/g, function($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\nvar parseArrayValue = function(val, options) {\n    if (val && typeof val === \"string\" && options.comma && val.indexOf(\",\") > -1) {\n        return val.split(\",\");\n    }\n    return val;\n};\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = \"utf8=%26%2310003%3B\"; // encodeURIComponent('&#10003;')\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = \"utf8=%E2%9C%93\"; // encodeURIComponent('✓')\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, \"\") : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for(i = 0; i < parts.length; ++i){\n            if (parts[i].indexOf(\"utf8=\") === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = \"utf-8\";\n                } else if (parts[i] === isoSentinel) {\n                    charset = \"iso-8859-1\";\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n    for(i = 0; i < parts.length; ++i){\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n        var bracketEqualsPos = part.indexOf(\"]=\");\n        var pos = bracketEqualsPos === -1 ? part.indexOf(\"=\") : bracketEqualsPos + 1;\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, \"key\");\n            val = options.strictNullHandling ? null : \"\";\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, \"key\");\n            val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {\n                return options.decoder(encodedVal, defaults.decoder, charset, \"value\");\n            });\n        }\n        if (val && options.interpretNumericEntities && charset === \"iso-8859-1\") {\n            val = interpretNumericEntities(val);\n        }\n        if (part.indexOf(\"[]=\") > -1) {\n            val = isArray(val) ? [\n                val\n            ] : val;\n        }\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n    return obj;\n};\nvar parseObject = function(chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n    for(var i = chain.length - 1; i >= 0; --i){\n        var obj;\n        var root = chain[i];\n        if (root === \"[]\" && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === \"[\" && root.charAt(root.length - 1) === \"]\" ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === \"\") {\n                obj = {\n                    0: leaf\n                };\n            } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== \"__proto__\") {\n                obj[cleanRoot] = leaf;\n            }\n        }\n        leaf = obj;\n    }\n    return leaf;\n};\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, \"[$1]\") : givenKey;\n    // The regex chunks\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n    // Get the parent\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n    // Stash the parent if it exists\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(parent);\n    }\n    // Loop through children appending to the array until we hit depth\n    var i = 0;\n    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n    // If there's a remainder, just add whatever is left\n    if (segment) {\n        keys.push(\"[\" + key.slice(segment.index) + \"]\");\n    }\n    return parseObject(keys, val, options, valuesParsed);\n};\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== \"function\") {\n        throw new TypeError(\"Decoder has to be a function.\");\n    }\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    var charset = typeof opts.charset === \"undefined\" ? defaults.charset : opts.charset;\n    return {\n        allowDots: typeof opts.allowDots === \"undefined\" ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === \"boolean\" ? opts.allowPrototypes : defaults.allowPrototypes,\n        arrayLimit: typeof opts.arrayLimit === \"number\" ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === \"boolean\" ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === \"function\" ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === \"string\" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: typeof opts.depth === \"number\" || opts.depth === false ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === \"boolean\" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === \"number\" ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === \"boolean\" ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\nmodule.exports = function(str, opts) {\n    var options = normalizeParseOptions(opts);\n    if (str === \"\" || str === null || typeof str === \"undefined\") {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n    var tempObj = typeof str === \"string\" ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n    // Iterate over the keys and setup the new object\n    var keys = Object.keys(tempObj);\n    for(var i = 0; i < keys.length; ++i){\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === \"string\");\n        obj = utils.merge(obj, newObj, options);\n    }\n    return utils.compact(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/stringify.js":
/*!************************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/qs/lib/stringify.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/utils.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + \"[]\";\n    },\n    comma: \"comma\",\n    indices: function indices(prefix, key) {\n        return prefix + \"[\" + key + \"]\";\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\nvar isArray = Array.isArray;\nvar split = String.prototype.split;\nvar push = Array.prototype.push;\nvar pushToArray = function(arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [\n        valueOrArray\n    ]);\n};\nvar toISO = Date.prototype.toISOString;\nvar defaultFormat = formats[\"default\"];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    delimiter: \"&\",\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || typeof v === \"symbol\" || typeof v === \"bigint\";\n};\nvar stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset) {\n    var obj = object;\n    if (typeof filter === \"function\") {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        obj = utils.maybeMap(obj, function(value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, \"key\", format) : prefix;\n        }\n        obj = \"\";\n    }\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, \"key\", format);\n            if (generateArrayPrefix === \"comma\" && encodeValuesOnly) {\n                var valuesArray = split.call(String(obj), \",\");\n                var valuesJoined = \"\";\n                for(var i = 0; i < valuesArray.length; ++i){\n                    valuesJoined += (i === 0 ? \"\" : \",\") + formatter(encoder(valuesArray[i], defaults.encoder, charset, \"value\", format));\n                }\n                return [\n                    formatter(keyValue) + \"=\" + valuesJoined\n                ];\n            }\n            return [\n                formatter(keyValue) + \"=\" + formatter(encoder(obj, defaults.encoder, charset, \"value\", format))\n            ];\n        }\n        return [\n            formatter(prefix) + \"=\" + formatter(String(obj))\n        ];\n    }\n    var values = [];\n    if (typeof obj === \"undefined\") {\n        return values;\n    }\n    var objKeys;\n    if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        // we need to join elements in\n        objKeys = [\n            {\n                value: obj.length > 0 ? obj.join(\",\") || null : void undefined\n            }\n        ];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n    for(var j = 0; j < objKeys.length; ++j){\n        var key = objKeys[j];\n        var value = typeof key === \"object\" && typeof key.value !== \"undefined\" ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === \"function\" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? \".\" + key : \"[\" + key + \"]\");\n        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset));\n    }\n    return values;\n};\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== \"undefined\" && typeof opts.encoder !== \"function\") {\n        throw new TypeError(\"Encoder has to be a function.\");\n    }\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    var format = formats[\"default\"];\n    if (typeof opts.format !== \"undefined\") {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError(\"Unknown format option provided.\");\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n    var filter = defaults.filter;\n    if (typeof opts.filter === \"function\" || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === \"boolean\" ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === \"undefined\" ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === \"undefined\" ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === \"boolean\" ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === \"function\" ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === \"boolean\" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === \"function\" ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === \"boolean\" ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === \"function\" ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\nmodule.exports = function(object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n    var objKeys;\n    var filter;\n    if (typeof options.filter === \"function\") {\n        filter = options.filter;\n        obj = filter(\"\", obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n    var keys = [];\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && \"indices\" in opts) {\n        arrayFormat = opts.indices ? \"indices\" : \"repeat\";\n    } else {\n        arrayFormat = \"indices\";\n    }\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n    for(var i = 0; i < objKeys.length; ++i){\n        var key = objKeys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset));\n    }\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? \"?\" : \"\";\n    if (options.charsetSentinel) {\n        if (options.charset === \"iso-8859-1\") {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += \"utf8=%26%2310003%3B&\";\n        } else {\n            // encodeURIComponent('✓')\n            prefix += \"utf8=%E2%9C%93&\";\n        }\n    }\n    return joined.length > 0 ? prefix + joined : \"\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/instantsearch.js/node_modules/qs/lib/utils.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar formats = __webpack_require__(/*! ./formats */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar hexTable = function() {\n    var array = [];\n    for(var i = 0; i < 256; ++i){\n        array.push(\"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase());\n    }\n    return array;\n}();\nvar compactQueue = function compactQueue(queue) {\n    while(queue.length > 1){\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n        if (isArray(obj)) {\n            var compacted = [];\n            for(var j = 0; j < obj.length; ++j){\n                if (typeof obj[j] !== \"undefined\") {\n                    compacted.push(obj[j]);\n                }\n            }\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for(var i = 0; i < source.length; ++i){\n        if (typeof source[i] !== \"undefined\") {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n};\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */ if (!source) {\n        return target;\n    }\n    if (typeof source !== \"object\") {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === \"object\") {\n            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [\n                target,\n                source\n            ];\n        }\n        return target;\n    }\n    if (!target || typeof target !== \"object\") {\n        return [\n            target\n        ].concat(source);\n    }\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function(item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === \"object\" && item && typeof item === \"object\") {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function(acc, key) {\n        var value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function(acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\nvar decode = function(str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, \" \");\n    if (charset === \"iso-8859-1\") {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    var string = str;\n    if (typeof str === \"symbol\") {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== \"string\") {\n        string = String(str);\n    }\n    if (charset === \"iso-8859-1\") {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n            return \"%26%23\" + parseInt($0.slice(2), 16) + \"%3B\";\n        });\n    }\n    var out = \"\";\n    for(var i = 0; i < string.length; ++i){\n        var c = string.charCodeAt(i);\n        if (c === 0x2D // -\n         || c === 0x2E // .\n         || c === 0x5F // _\n         || c === 0x7E // ~\n         || c >= 0x30 && c <= 0x39 // 0-9\n         || c >= 0x41 && c <= 0x5A // a-z\n         || c >= 0x61 && c <= 0x7A // A-Z\n         || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);\n            continue;\n        }\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);\n            continue;\n        }\n        i += 1;\n        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);\n        /* eslint operator-linebreak: [2, \"before\"] */ out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n    }\n    return out;\n};\nvar compact = function compact(value) {\n    var queue = [\n        {\n            obj: {\n                o: value\n            },\n            prop: \"o\"\n        }\n    ];\n    var refs = [];\n    for(var i = 0; i < queue.length; ++i){\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n        var keys = Object.keys(obj);\n        for(var j = 0; j < keys.length; ++j){\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === \"object\" && val !== null && refs.indexOf(val) === -1) {\n                queue.push({\n                    obj: obj,\n                    prop: key\n                });\n                refs.push(val);\n            }\n        }\n    }\n    compactQueue(queue);\n    return value;\n};\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n};\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for(var i = 0; i < val.length; i += 1){\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/connectors/hits/connectHits.js":
/*!*************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/connectors/hits/connectHits.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkRendering.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-query-id.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nvar withUsage = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.createDocumentationMessageGenerator)({\n    name: \"hits\",\n    connector: true\n});\nvar connectHits = function connectHits(renderFn) {\n    var unmountFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.noop;\n    (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkRendering)(renderFn, withUsage());\n    return function(widgetParams) {\n        var _ref = widgetParams || {}, _ref$escapeHTML = _ref.escapeHTML, escapeHTML = _ref$escapeHTML === void 0 ? true : _ref$escapeHTML, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {\n            return items;\n        } : _ref$transformItems;\n        var sendEvent;\n        var bindEvent;\n        return {\n            $$type: \"ais.hits\",\n            init: function init(initOptions) {\n                renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(initOptions)), {}, {\n                    instantSearchInstance: initOptions.instantSearchInstance\n                }), true);\n            },\n            render: function render(renderOptions) {\n                var renderState = this.getWidgetRenderState(renderOptions);\n                renderFn(_objectSpread(_objectSpread({}, renderState), {}, {\n                    instantSearchInstance: renderOptions.instantSearchInstance\n                }), false);\n                renderState.sendEvent(\"view:internal\", renderState.hits);\n            },\n            getRenderState: function getRenderState(renderState, renderOptions) {\n                return _objectSpread(_objectSpread({}, renderState), {}, {\n                    hits: this.getWidgetRenderState(renderOptions)\n                });\n            },\n            getWidgetRenderState: function getWidgetRenderState(_ref2) {\n                var results = _ref2.results, helper = _ref2.helper, instantSearchInstance = _ref2.instantSearchInstance;\n                if (!sendEvent) {\n                    sendEvent = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createSendEventForHits)({\n                        instantSearchInstance: instantSearchInstance,\n                        index: helper.getIndex(),\n                        widgetType: this.$$type\n                    });\n                }\n                if (!bindEvent) {\n                    bindEvent = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createBindEventForHits)({\n                        index: helper.getIndex(),\n                        widgetType: this.$$type,\n                        instantSearchInstance: instantSearchInstance\n                    });\n                }\n                if (!results) {\n                    return {\n                        hits: [],\n                        results: undefined,\n                        sendEvent: sendEvent,\n                        bindEvent: bindEvent,\n                        widgetParams: widgetParams\n                    };\n                }\n                if (escapeHTML && results.hits.length > 0) {\n                    results.hits = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.escapeHits)(results.hits);\n                }\n                var hitsWithAbsolutePosition = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.addAbsolutePosition)(results.hits, results.page, results.hitsPerPage);\n                var hitsWithAbsolutePositionAndQueryID = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.addQueryID)(hitsWithAbsolutePosition, results.queryID);\n                var transformedHits = transformItems(hitsWithAbsolutePositionAndQueryID, {\n                    results: results\n                });\n                return {\n                    hits: transformedHits,\n                    results: results,\n                    sendEvent: sendEvent,\n                    bindEvent: bindEvent,\n                    widgetParams: widgetParams\n                };\n            },\n            dispose: function dispose(_ref3) {\n                var state = _ref3.state;\n                unmountFn();\n                if (!escapeHTML) {\n                    return state;\n                }\n                return state.setQueryParameters(Object.keys(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.TAG_PLACEHOLDER).reduce(function(acc, key) {\n                    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, undefined));\n                }, {}));\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(state) {\n                if (!escapeHTML) {\n                    return state;\n                }\n                return state.setQueryParameters(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.TAG_PLACEHOLDER);\n            }\n        };\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (connectHits);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/connectors/hits/connectHits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js":
/*!************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkRendering.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nvar withUsage = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.createDocumentationMessageGenerator)({\n    name: \"search-box\",\n    connector: true\n});\nvar defaultQueryHook = function defaultQueryHook(query, hook) {\n    return hook(query);\n};\n/**\n * **SearchBox** connector provides the logic to build a widget that will let the user search for a query.\n *\n * The connector provides to the rendering: `refine()` to set the query. The behaviour of this function\n * may be impacted by the `queryHook` widget parameter.\n */ var connectSearchBox = function connectSearchBox(renderFn) {\n    var unmountFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.noop;\n    (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkRendering)(renderFn, withUsage());\n    return function(widgetParams) {\n        var _ref = widgetParams || {}, _ref$queryHook = _ref.queryHook, queryHook = _ref$queryHook === void 0 ? defaultQueryHook : _ref$queryHook;\n        var _refine;\n        var _clear;\n        return {\n            $$type: \"ais.searchBox\",\n            init: function init(initOptions) {\n                var instantSearchInstance = initOptions.instantSearchInstance;\n                renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(initOptions)), {}, {\n                    instantSearchInstance: instantSearchInstance\n                }), true);\n            },\n            render: function render(renderOptions) {\n                var instantSearchInstance = renderOptions.instantSearchInstance;\n                renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(renderOptions)), {}, {\n                    instantSearchInstance: instantSearchInstance\n                }), false);\n            },\n            dispose: function dispose(_ref2) {\n                var state = _ref2.state;\n                unmountFn();\n                return state.setQueryParameter(\"query\", undefined);\n            },\n            getRenderState: function getRenderState(renderState, renderOptions) {\n                return _objectSpread(_objectSpread({}, renderState), {}, {\n                    searchBox: this.getWidgetRenderState(renderOptions)\n                });\n            },\n            getWidgetRenderState: function getWidgetRenderState(_ref3) {\n                var helper = _ref3.helper, searchMetadata = _ref3.searchMetadata, state = _ref3.state;\n                if (!_refine) {\n                    _refine = function _refine(query) {\n                        queryHook(query, function(q) {\n                            return helper.setQuery(q).search();\n                        });\n                    };\n                    _clear = function _clear() {\n                        helper.setQuery(\"\").search();\n                    };\n                }\n                return {\n                    query: state.query || \"\",\n                    refine: _refine,\n                    clear: _clear,\n                    widgetParams: widgetParams,\n                    isSearchStalled: searchMetadata.isSearchStalled\n                };\n            },\n            getWidgetUiState: function getWidgetUiState(uiState, _ref4) {\n                var searchParameters = _ref4.searchParameters;\n                var query = searchParameters.query || \"\";\n                if (query === \"\" || uiState && uiState.query === query) {\n                    return uiState;\n                }\n                return _objectSpread(_objectSpread({}, uiState), {}, {\n                    query: query\n                });\n            },\n            getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n                var uiState = _ref5.uiState;\n                return searchParameters.setQueryParameter(\"query\", uiState.query || \"\");\n            }\n        };\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (connectSearchBox);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ANONYMOUS_TOKEN_COOKIE_KEY: () => (/* binding */ ANONYMOUS_TOKEN_COOKIE_KEY),\n/* harmony export */   \"default\": () => (/* binding */ getInsightsAnonymousUserToken),\n/* harmony export */   getInsightsAnonymousUserTokenInternal: () => (/* binding */ getInsightsAnonymousUserTokenInternal)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n\nvar ANONYMOUS_TOKEN_COOKIE_KEY = \"_ALGOLIA\";\nfunction getCookie(name) {\n    if ((typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) !== \"object\" || typeof document.cookie !== \"string\") {\n        return undefined;\n    }\n    var prefix = \"\".concat(name, \"=\");\n    var cookies = document.cookie.split(\";\");\n    for(var i = 0; i < cookies.length; i++){\n        var cookie = cookies[i];\n        while(cookie.charAt(0) === \" \"){\n            cookie = cookie.substring(1);\n        }\n        if (cookie.indexOf(prefix) === 0) {\n            return cookie.substring(prefix.length, cookie.length);\n        }\n    }\n    return undefined;\n}\nfunction getInsightsAnonymousUserTokenInternal() {\n    return getCookie(ANONYMOUS_TOKEN_COOKIE_KEY);\n}\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n */ function getInsightsAnonymousUserToken() {\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.warning)(false, \"`getInsightsAnonymousUserToken` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : 0;\n    return getInsightsAnonymousUserTokenInternal();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL2dldC1pbnNpZ2h0cy1hbm9ueW1vdXMtdXNlci10b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFBSSxPQUFPLE9BQU9BO0lBQUssSUFBSSxTQUFVQSxHQUFHO1FBQUksT0FBT0EsT0FBTyxjQUFjLE9BQU9DLFVBQVVELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBSyxHQUFHRCxRQUFRQztBQUFNO0FBQy9SO0FBQ3pDLElBQUlNLDZCQUE2QixXQUFXO0FBQ25ELFNBQVNDLFVBQVVDLElBQUk7SUFDckIsSUFBSSxDQUFDLE9BQU9DLGFBQWEsY0FBYyxjQUFjVixRQUFRVSxTQUFRLE1BQU8sWUFBWSxPQUFPQSxTQUFTQyxNQUFNLEtBQUssVUFBVTtRQUMzSCxPQUFPQztJQUNUO0lBQ0EsSUFBSUMsU0FBUyxHQUFHQyxNQUFNLENBQUNMLE1BQU07SUFDN0IsSUFBSU0sVUFBVUwsU0FBU0MsTUFBTSxDQUFDSyxLQUFLLENBQUM7SUFDcEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFFBQVFHLE1BQU0sRUFBRUQsSUFBSztRQUN2QyxJQUFJTixTQUFTSSxPQUFPLENBQUNFLEVBQUU7UUFDdkIsTUFBT04sT0FBT1EsTUFBTSxDQUFDLE9BQU8sSUFBSztZQUMvQlIsU0FBU0EsT0FBT1MsU0FBUyxDQUFDO1FBQzVCO1FBQ0EsSUFBSVQsT0FBT1UsT0FBTyxDQUFDUixZQUFZLEdBQUc7WUFDaEMsT0FBT0YsT0FBT1MsU0FBUyxDQUFDUCxPQUFPSyxNQUFNLEVBQUVQLE9BQU9PLE1BQU07UUFDdEQ7SUFDRjtJQUNBLE9BQU9OO0FBQ1Q7QUFDTyxTQUFTVTtJQUNkLE9BQU9kLFVBQVVEO0FBQ25CO0FBRUE7O0NBRUMsR0FDYyxTQUFTZ0I7SUEzQnhCLEtBNEIyQixHQUFnQmpCLDREQUFPQSxDQUFDLE9BQU8sdVhBQXVYLENBQU07SUFDcmIsT0FBT2dCO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2hlbHBlcnMvZ2V0LWluc2lnaHRzLWFub255bW91cy11c2VyLXRva2VuLmpzPzY3NDAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gXCIuLi9saWIvdXRpbHMvaW5kZXguanNcIjtcbmV4cG9ydCB2YXIgQU5PTllNT1VTX1RPS0VOX0NPT0tJRV9LRVkgPSAnX0FMR09MSUEnO1xuZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHtcbiAgaWYgKCh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgZG9jdW1lbnQuY29va2llICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KG5hbWUsIFwiPVwiKTtcbiAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNvb2tpZSA9IGNvb2tpZXNbaV07XG4gICAgd2hpbGUgKGNvb2tpZS5jaGFyQXQoMCkgPT09ICcgJykge1xuICAgICAgY29va2llID0gY29va2llLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgaWYgKGNvb2tpZS5pbmRleE9mKHByZWZpeCkgPT09IDApIHtcbiAgICAgIHJldHVybiBjb29raWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgsIGNvb2tpZS5sZW5ndGgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEluc2lnaHRzQW5vbnltb3VzVXNlclRva2VuSW50ZXJuYWwoKSB7XG4gIHJldHVybiBnZXRDb29raWUoQU5PTllNT1VTX1RPS0VOX0NPT0tJRV9LRVkpO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBzdGlsbCBzdXBwb3J0ZWQgaW4gNC54IHJlbGVhc2VzLCBidXQgbm90IGZ1cnRoZXIuIEl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBgaW5zaWdodHNgIG1pZGRsZXdhcmUuIEZvciBtb3JlIGluZm9ybWF0aW9uLCB2aXNpdCBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvZ3VpZGVzL2dldHRpbmctaW5zaWdodHMtYW5kLWFuYWx5dGljcy9zZWFyY2gtYW5hbHl0aWNzL2NsaWNrLXRocm91Z2gtYW5kLWNvbnZlcnNpb25zL2hvdy10by9zZW5kLWNsaWNrLWFuZC1jb252ZXJzaW9uLWV2ZW50cy13aXRoLWluc3RhbnRzZWFyY2gvanMvXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEluc2lnaHRzQW5vbnltb3VzVXNlclRva2VuKCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHdhcm5pbmcoZmFsc2UsIFwiYGdldEluc2lnaHRzQW5vbnltb3VzVXNlclRva2VuYCBmdW5jdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBJdCBpcyBzdGlsbCBzdXBwb3J0ZWQgaW4gNC54IHJlbGVhc2VzLCBidXQgbm90IGZ1cnRoZXIuIEl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBgaW5zaWdodHNgIG1pZGRsZXdhcmUuXFxuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHZpc2l0IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9ndWlkZXMvZ2V0dGluZy1pbnNpZ2h0cy1hbmQtYW5hbHl0aWNzL3NlYXJjaC1hbmFseXRpY3MvY2xpY2stdGhyb3VnaC1hbmQtY29udmVyc2lvbnMvaG93LXRvL3NlbmQtY2xpY2stYW5kLWNvbnZlcnNpb24tZXZlbnRzLXdpdGgtaW5zdGFudHNlYXJjaC9qcy9cIikgOiB2b2lkIDA7XG4gIHJldHVybiBnZXRJbnNpZ2h0c0Fub255bW91c1VzZXJUb2tlbkludGVybmFsKCk7XG59Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwid2FybmluZyIsIkFOT05ZTU9VU19UT0tFTl9DT09LSUVfS0VZIiwiZ2V0Q29va2llIiwibmFtZSIsImRvY3VtZW50IiwiY29va2llIiwidW5kZWZpbmVkIiwicHJlZml4IiwiY29uY2F0IiwiY29va2llcyIsInNwbGl0IiwiaSIsImxlbmd0aCIsImNoYXJBdCIsInN1YnN0cmluZyIsImluZGV4T2YiLCJnZXRJbnNpZ2h0c0Fub255bW91c1VzZXJUb2tlbkludGVybmFsIiwiZ2V0SW5zaWdodHNBbm9ueW1vdXNVc2VyVG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/highlight.js":
/*!***************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/highlight.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ highlight)\n/* harmony export */ });\n/* harmony import */ var _lib_suit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/suit.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/suit.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\n\nvar suit = (0,_lib_suit_js__WEBPACK_IMPORTED_MODULE_0__.component)(\"Highlight\");\n/**\n * @deprecated use html tagged templates and the Highlight component instead\n */ function highlight(_ref) {\n    var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? \"mark\" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(false, \"`instantsearch.highlight` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `Highlight` component.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/building-search-ui/upgrade-guides/js/?client=html+tagged+templates#upgrade-templates\") : 0;\n    var highlightAttributeResult = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getPropertyByPath)(hit._highlightResult, attribute);\n    // @MAJOR fallback to attribute value if highlight is not found\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(highlightAttributeResult, 'Could not enable highlight for \"'.concat(attribute, '\", will display an empty string.\\nPlease check whether this attribute exists and is either searchable or specified in `attributesToHighlight`.\\n\\nSee: https://alg.li/highlighting\\n')) : 0;\n    var _ref2 = highlightAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? \"\" : _ref2$value;\n    // cx is not used, since it would be bundled as a dependency for Vue & Angular\n    var className = suit({\n        descendantName: \"highlighted\"\n    }) + (cssClasses.highlighted ? \" \".concat(cssClasses.highlighted) : \"\");\n    return attributeValue.replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.TAG_REPLACEMENT.highlightPreTag, \"g\"), \"<\".concat(highlightedTagName, ' class=\"').concat(className, '\">')).replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.TAG_REPLACEMENT.highlightPostTag, \"g\"), \"</\".concat(highlightedTagName, \">\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL2hpZ2hsaWdodC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyQztBQUN5QztBQUNwRixJQUFJSSxPQUFPSix1REFBU0EsQ0FBQztBQUVyQjs7Q0FFQyxHQUNjLFNBQVNLLFVBQVVDLElBQUk7SUFDcEMsSUFBSUMsWUFBWUQsS0FBS0MsU0FBUyxFQUM1QkMsd0JBQXdCRixLQUFLRyxrQkFBa0IsRUFDL0NBLHFCQUFxQkQsMEJBQTBCLEtBQUssSUFBSSxTQUFTQSx1QkFDakVFLE1BQU1KLEtBQUtJLEdBQUcsRUFDZEMsa0JBQWtCTCxLQUFLTSxVQUFVLEVBQ2pDQSxhQUFhRCxvQkFBb0IsS0FBSyxJQUFJLENBQUMsSUFBSUE7SUFibkQsS0FjMkIsR0FBZ0JSLDREQUFPQSxDQUFDLE9BQU8seVRBQXlULENBQU07SUFDdlgsSUFBSVUsMkJBQTJCWixzRUFBaUJBLENBQUNTLElBQUlJLGdCQUFnQixFQUFFUDtJQUV2RSwrREFBK0Q7SUFqQmpFLEtBa0IyQixHQUFnQkosNERBQU9BLENBQUNVLDBCQUEwQixtQ0FBb0NFLE1BQU0sQ0FBQ1IsV0FBVywyTEFBNEwsQ0FBTTtJQUNuVSxJQUFJUyxRQUFRSCw0QkFBNEIsQ0FBQyxHQUN2Q0ksY0FBY0QsTUFBTUUsS0FBSyxFQUN6QkMsaUJBQWlCRixnQkFBZ0IsS0FBSyxJQUFJLEtBQUtBO0lBRWpELDhFQUE4RTtJQUM5RSxJQUFJRyxZQUFZaEIsS0FBSztRQUNuQmlCLGdCQUFnQjtJQUNsQixLQUFNVCxDQUFBQSxXQUFXVSxXQUFXLEdBQUcsSUFBSVAsTUFBTSxDQUFDSCxXQUFXVSxXQUFXLElBQUksRUFBQztJQUNyRSxPQUFPSCxlQUFlSSxPQUFPLENBQUMsSUFBSUMsT0FBT3RCLGdFQUFlQSxDQUFDdUIsZUFBZSxFQUFFLE1BQU0sSUFBSVYsTUFBTSxDQUFDTixvQkFBb0IsWUFBYU0sTUFBTSxDQUFDSyxXQUFXLE9BQVFHLE9BQU8sQ0FBQyxJQUFJQyxPQUFPdEIsZ0VBQWVBLENBQUN3QixnQkFBZ0IsRUFBRSxNQUFNLEtBQUtYLE1BQU0sQ0FBQ04sb0JBQW9CO0FBQ25QIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL2hpZ2hsaWdodC5qcz8yYWQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBvbmVudCB9IGZyb20gXCIuLi9saWIvc3VpdC5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvcGVydHlCeVBhdGgsIFRBR19SRVBMQUNFTUVOVCwgd2FybmluZyB9IGZyb20gXCIuLi9saWIvdXRpbHMvaW5kZXguanNcIjtcbnZhciBzdWl0ID0gY29tcG9uZW50KCdIaWdobGlnaHQnKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgaHRtbCB0YWdnZWQgdGVtcGxhdGVzIGFuZCB0aGUgSGlnaGxpZ2h0IGNvbXBvbmVudCBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZ2hsaWdodChfcmVmKSB7XG4gIHZhciBhdHRyaWJ1dGUgPSBfcmVmLmF0dHJpYnV0ZSxcbiAgICBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPSBfcmVmLmhpZ2hsaWdodGVkVGFnTmFtZSxcbiAgICBoaWdobGlnaHRlZFRhZ05hbWUgPSBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPT09IHZvaWQgMCA/ICdtYXJrJyA6IF9yZWYkaGlnaGxpZ2h0ZWRUYWdOYSxcbiAgICBoaXQgPSBfcmVmLmhpdCxcbiAgICBfcmVmJGNzc0NsYXNzZXMgPSBfcmVmLmNzc0NsYXNzZXMsXG4gICAgY3NzQ2xhc3NlcyA9IF9yZWYkY3NzQ2xhc3NlcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGNzc0NsYXNzZXM7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybmluZyhmYWxzZSwgXCJgaW5zdGFudHNlYXJjaC5oaWdobGlnaHRgIGZ1bmN0aW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIEl0IGlzIHN0aWxsIHN1cHBvcnRlZCBpbiA0LnggcmVsZWFzZXMsIGJ1dCBub3QgZnVydGhlci4gSXQgaXMgcmVwbGFjZWQgYnkgdGhlIGBIaWdobGlnaHRgIGNvbXBvbmVudC5cXG5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgdmlzaXQgaHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vZG9jL2d1aWRlcy9idWlsZGluZy1zZWFyY2gtdWkvdXBncmFkZS1ndWlkZXMvanMvP2NsaWVudD1odG1sK3RhZ2dlZCt0ZW1wbGF0ZXMjdXBncmFkZS10ZW1wbGF0ZXNcIikgOiB2b2lkIDA7XG4gIHZhciBoaWdobGlnaHRBdHRyaWJ1dGVSZXN1bHQgPSBnZXRQcm9wZXJ0eUJ5UGF0aChoaXQuX2hpZ2hsaWdodFJlc3VsdCwgYXR0cmlidXRlKTtcblxuICAvLyBATUFKT1IgZmFsbGJhY2sgdG8gYXR0cmlidXRlIHZhbHVlIGlmIGhpZ2hsaWdodCBpcyBub3QgZm91bmRcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyB3YXJuaW5nKGhpZ2hsaWdodEF0dHJpYnV0ZVJlc3VsdCwgXCJDb3VsZCBub3QgZW5hYmxlIGhpZ2hsaWdodCBmb3IgXFxcIlwiLmNvbmNhdChhdHRyaWJ1dGUsIFwiXFxcIiwgd2lsbCBkaXNwbGF5IGFuIGVtcHR5IHN0cmluZy5cXG5QbGVhc2UgY2hlY2sgd2hldGhlciB0aGlzIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIGVpdGhlciBzZWFyY2hhYmxlIG9yIHNwZWNpZmllZCBpbiBgYXR0cmlidXRlc1RvSGlnaGxpZ2h0YC5cXG5cXG5TZWU6IGh0dHBzOi8vYWxnLmxpL2hpZ2hsaWdodGluZ1xcblwiKSkgOiB2b2lkIDA7XG4gIHZhciBfcmVmMiA9IGhpZ2hsaWdodEF0dHJpYnV0ZVJlc3VsdCB8fCB7fSxcbiAgICBfcmVmMiR2YWx1ZSA9IF9yZWYyLnZhbHVlLFxuICAgIGF0dHJpYnV0ZVZhbHVlID0gX3JlZjIkdmFsdWUgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkdmFsdWU7XG5cbiAgLy8gY3ggaXMgbm90IHVzZWQsIHNpbmNlIGl0IHdvdWxkIGJlIGJ1bmRsZWQgYXMgYSBkZXBlbmRlbmN5IGZvciBWdWUgJiBBbmd1bGFyXG4gIHZhciBjbGFzc05hbWUgPSBzdWl0KHtcbiAgICBkZXNjZW5kYW50TmFtZTogJ2hpZ2hsaWdodGVkJ1xuICB9KSArIChjc3NDbGFzc2VzLmhpZ2hsaWdodGVkID8gXCIgXCIuY29uY2F0KGNzc0NsYXNzZXMuaGlnaGxpZ2h0ZWQpIDogJycpO1xuICByZXR1cm4gYXR0cmlidXRlVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQcmVUYWcsICdnJyksIFwiPFwiLmNvbmNhdChoaWdobGlnaHRlZFRhZ05hbWUsIFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KGNsYXNzTmFtZSwgXCJcXFwiPlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQb3N0VGFnLCAnZycpLCBcIjwvXCIuY29uY2F0KGhpZ2hsaWdodGVkVGFnTmFtZSwgXCI+XCIpKTtcbn0iXSwibmFtZXMiOlsiY29tcG9uZW50IiwiZ2V0UHJvcGVydHlCeVBhdGgiLCJUQUdfUkVQTEFDRU1FTlQiLCJ3YXJuaW5nIiwic3VpdCIsImhpZ2hsaWdodCIsIl9yZWYiLCJhdHRyaWJ1dGUiLCJfcmVmJGhpZ2hsaWdodGVkVGFnTmEiLCJoaWdobGlnaHRlZFRhZ05hbWUiLCJoaXQiLCJfcmVmJGNzc0NsYXNzZXMiLCJjc3NDbGFzc2VzIiwiaGlnaGxpZ2h0QXR0cmlidXRlUmVzdWx0IiwiX2hpZ2hsaWdodFJlc3VsdCIsImNvbmNhdCIsIl9yZWYyIiwiX3JlZjIkdmFsdWUiLCJ2YWx1ZSIsImF0dHJpYnV0ZVZhbHVlIiwiY2xhc3NOYW1lIiwiZGVzY2VuZGFudE5hbWUiLCJoaWdobGlnaHRlZCIsInJlcGxhY2UiLCJSZWdFeHAiLCJoaWdobGlnaHRQcmVUYWciLCJoaWdobGlnaHRQb3N0VGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/insights.js":
/*!**************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/insights.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ insights),\n/* harmony export */   readDataAttributes: () => (/* binding */ readDataAttributes),\n/* harmony export */   writeDataAttributes: () => (/* binding */ writeDataAttributes)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/serializer.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n\n/** @deprecated use bindEvent instead */ function readDataAttributes(domElement) {\n    var method = domElement.getAttribute(\"data-insights-method\");\n    var serializedPayload = domElement.getAttribute(\"data-insights-payload\");\n    if (typeof serializedPayload !== \"string\") {\n        throw new Error(\"The insights helper expects `data-insights-payload` to be a base64-encoded JSON string.\");\n    }\n    try {\n        var payload = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.deserializePayload)(serializedPayload);\n        return {\n            method: method,\n            payload: payload\n        };\n    } catch (error) {\n        throw new Error(\"The insights helper was unable to parse `data-insights-payload`.\");\n    }\n}\n/** @deprecated use bindEvent instead */ function writeDataAttributes(_ref) {\n    var method = _ref.method, payload = _ref.payload;\n    if (_typeof(payload) !== \"object\") {\n        throw new Error(\"The insights helper expects the payload to be an object.\");\n    }\n    var serializedPayload;\n    try {\n        serializedPayload = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.serializePayload)(payload);\n    } catch (error) {\n        throw new Error(\"Could not JSON serialize the payload object.\");\n    }\n    return 'data-insights-method=\"'.concat(method, '\" data-insights-payload=\"').concat(serializedPayload, '\"');\n}\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n */ function insights(method, payload) {\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(false, \"`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : 0;\n    return writeDataAttributes({\n        method: method,\n        payload: payload\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL2luc2lnaHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFBSSxPQUFPLE9BQU9BO0lBQUssSUFBSSxTQUFVQSxHQUFHO1FBQUksT0FBT0EsT0FBTyxjQUFjLE9BQU9DLFVBQVVELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBSyxHQUFHRCxRQUFRQztBQUFNO0FBQ3pQO0FBQ3RGLHNDQUFzQyxHQUMvQixTQUFTUSxtQkFBbUJDLFVBQVU7SUFDM0MsSUFBSUMsU0FBU0QsV0FBV0UsWUFBWSxDQUFDO0lBQ3JDLElBQUlDLG9CQUFvQkgsV0FBV0UsWUFBWSxDQUFDO0lBQ2hELElBQUksT0FBT0Msc0JBQXNCLFVBQVU7UUFDekMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsSUFBSTtRQUNGLElBQUlDLFVBQVVQLHVFQUFrQkEsQ0FBQ0s7UUFDakMsT0FBTztZQUNMRixRQUFRQTtZQUNSSSxTQUFTQTtRQUNYO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsTUFBTSxJQUFJRixNQUFNO0lBQ2xCO0FBQ0Y7QUFFQSxzQ0FBc0MsR0FDL0IsU0FBU0csb0JBQW9CQyxJQUFJO0lBQ3RDLElBQUlQLFNBQVNPLEtBQUtQLE1BQU0sRUFDdEJJLFVBQVVHLEtBQUtILE9BQU87SUFDeEIsSUFBSWYsUUFBUWUsYUFBYSxVQUFVO1FBQ2pDLE1BQU0sSUFBSUQsTUFBTTtJQUNsQjtJQUNBLElBQUlEO0lBQ0osSUFBSTtRQUNGQSxvQkFBb0JOLHFFQUFnQkEsQ0FBQ1E7SUFDdkMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsTUFBTSxJQUFJRixNQUFNO0lBQ2xCO0lBQ0EsT0FBTyx5QkFBMEJLLE1BQU0sQ0FBQ1IsUUFBUSw2QkFBK0JRLE1BQU0sQ0FBQ04sbUJBQW1CO0FBQzNHO0FBRUE7O0NBRUMsR0FDYyxTQUFTTyxTQUFTVCxNQUFNLEVBQUVJLE9BQU87SUF2Q2hELEtBd0MyQixHQUFnQlQsNERBQU9BLENBQUMsT0FBTyxrV0FBa1csQ0FBTTtJQUNoYSxPQUFPVyxvQkFBb0I7UUFDekJOLFFBQVFBO1FBQ1JJLFNBQVNBO0lBQ1g7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvaGVscGVycy9pbnNpZ2h0cy5qcz80YTExIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmltcG9ydCB7IHdhcm5pbmcsIHNlcmlhbGl6ZVBheWxvYWQsIGRlc2VyaWFsaXplUGF5bG9hZCB9IGZyb20gXCIuLi9saWIvdXRpbHMvaW5kZXguanNcIjtcbi8qKiBAZGVwcmVjYXRlZCB1c2UgYmluZEV2ZW50IGluc3RlYWQgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGF0YUF0dHJpYnV0ZXMoZG9tRWxlbWVudCkge1xuICB2YXIgbWV0aG9kID0gZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5zaWdodHMtbWV0aG9kJyk7XG4gIHZhciBzZXJpYWxpemVkUGF5bG9hZCA9IGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluc2lnaHRzLXBheWxvYWQnKTtcbiAgaWYgKHR5cGVvZiBzZXJpYWxpemVkUGF5bG9hZCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBpbnNpZ2h0cyBoZWxwZXIgZXhwZWN0cyBgZGF0YS1pbnNpZ2h0cy1wYXlsb2FkYCB0byBiZSBhIGJhc2U2NC1lbmNvZGVkIEpTT04gc3RyaW5nLicpO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIHBheWxvYWQgPSBkZXNlcmlhbGl6ZVBheWxvYWQoc2VyaWFsaXplZFBheWxvYWQpO1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWRcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGluc2lnaHRzIGhlbHBlciB3YXMgdW5hYmxlIHRvIHBhcnNlIGBkYXRhLWluc2lnaHRzLXBheWxvYWRgLicpO1xuICB9XG59XG5cbi8qKiBAZGVwcmVjYXRlZCB1c2UgYmluZEV2ZW50IGluc3RlYWQgKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZURhdGFBdHRyaWJ1dGVzKF9yZWYpIHtcbiAgdmFyIG1ldGhvZCA9IF9yZWYubWV0aG9kLFxuICAgIHBheWxvYWQgPSBfcmVmLnBheWxvYWQ7XG4gIGlmIChfdHlwZW9mKHBheWxvYWQpICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnNpZ2h0cyBoZWxwZXIgZXhwZWN0cyB0aGUgcGF5bG9hZCB0byBiZSBhbiBvYmplY3QuXCIpO1xuICB9XG4gIHZhciBzZXJpYWxpemVkUGF5bG9hZDtcbiAgdHJ5IHtcbiAgICBzZXJpYWxpemVkUGF5bG9hZCA9IHNlcmlhbGl6ZVBheWxvYWQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IEpTT04gc2VyaWFsaXplIHRoZSBwYXlsb2FkIG9iamVjdC5cIik7XG4gIH1cbiAgcmV0dXJuIFwiZGF0YS1pbnNpZ2h0cy1tZXRob2Q9XFxcIlwiLmNvbmNhdChtZXRob2QsIFwiXFxcIiBkYXRhLWluc2lnaHRzLXBheWxvYWQ9XFxcIlwiKS5jb25jYXQoc2VyaWFsaXplZFBheWxvYWQsIFwiXFxcIlwiKTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgc3RpbGwgc3VwcG9ydGVkIGluIDQueCByZWxlYXNlcywgYnV0IG5vdCBmdXJ0aGVyLiBJdCBpcyByZXBsYWNlZCBieSB0aGUgYGluc2lnaHRzYCBtaWRkbGV3YXJlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgdmlzaXQgaHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vZG9jL2d1aWRlcy9nZXR0aW5nLWluc2lnaHRzLWFuZC1hbmFseXRpY3Mvc2VhcmNoLWFuYWx5dGljcy9jbGljay10aHJvdWdoLWFuZC1jb252ZXJzaW9ucy9ob3ctdG8vc2VuZC1jbGljay1hbmQtY29udmVyc2lvbi1ldmVudHMtd2l0aC1pbnN0YW50c2VhcmNoL2pzL1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnNpZ2h0cyhtZXRob2QsIHBheWxvYWQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyB3YXJuaW5nKGZhbHNlLCBcImBpbnNpZ2h0c2AgZnVuY3Rpb24gaGFzIGJlZW4gZGVwcmVjYXRlZC4gSXQgaXMgc3RpbGwgc3VwcG9ydGVkIGluIDQueCByZWxlYXNlcywgYnV0IG5vdCBmdXJ0aGVyLiBJdCBpcyByZXBsYWNlZCBieSB0aGUgYGluc2lnaHRzYCBtaWRkbGV3YXJlLlxcblxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCB2aXNpdCBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvZ3VpZGVzL2dldHRpbmctaW5zaWdodHMtYW5kLWFuYWx5dGljcy9zZWFyY2gtYW5hbHl0aWNzL2NsaWNrLXRocm91Z2gtYW5kLWNvbnZlcnNpb25zL2hvdy10by9zZW5kLWNsaWNrLWFuZC1jb252ZXJzaW9uLWV2ZW50cy13aXRoLWluc3RhbnRzZWFyY2gvanMvXCIpIDogdm9pZCAwO1xuICByZXR1cm4gd3JpdGVEYXRhQXR0cmlidXRlcyh7XG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgcGF5bG9hZDogcGF5bG9hZFxuICB9KTtcbn0iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJ3YXJuaW5nIiwic2VyaWFsaXplUGF5bG9hZCIsImRlc2VyaWFsaXplUGF5bG9hZCIsInJlYWREYXRhQXR0cmlidXRlcyIsImRvbUVsZW1lbnQiLCJtZXRob2QiLCJnZXRBdHRyaWJ1dGUiLCJzZXJpYWxpemVkUGF5bG9hZCIsIkVycm9yIiwicGF5bG9hZCIsImVycm9yIiwid3JpdGVEYXRhQXR0cmlidXRlcyIsIl9yZWYiLCJjb25jYXQiLCJpbnNpZ2h0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/insights.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/reverseHighlight.js":
/*!**********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/reverseHighlight.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ reverseHighlight)\n/* harmony export */ });\n/* harmony import */ var _lib_suit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/suit.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/suit.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\n\nvar suit = (0,_lib_suit_js__WEBPACK_IMPORTED_MODULE_0__.component)(\"ReverseHighlight\");\n/**\n * @deprecated use html tagged templates and the ReverseHighlight component instead\n */ function reverseHighlight(_ref) {\n    var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? \"mark\" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(false, \"`instantsearch.reverseHighlight` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `ReverseHighlight` component.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/building-search-ui/upgrade-guides/js/?client=html+tagged+templates#upgrade-templates\") : 0;\n    var highlightAttributeResult = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getPropertyByPath)(hit._highlightResult, attribute);\n    // @MAJOR fallback to attribute value if highlight is not found\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(highlightAttributeResult, 'Could not enable reverse highlight for \"'.concat(attribute, '\", will display an empty string.\\nPlease check whether this attribute exists and is either searchable or specified in `attributesToHighlight`.\\n\\nSee: https://alg.li/highlighting\\n')) : 0;\n    var _ref2 = highlightAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? \"\" : _ref2$value;\n    // cx is not used, since it would be bundled as a dependency for Vue & Angular\n    var className = suit({\n        descendantName: \"highlighted\"\n    }) + (cssClasses.highlighted ? \" \".concat(cssClasses.highlighted) : \"\");\n    var reverseHighlightedValue = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.concatHighlightedParts)((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.reverseHighlightedParts)((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getHighlightedParts)(attributeValue)));\n    return reverseHighlightedValue.replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.TAG_REPLACEMENT.highlightPreTag, \"g\"), \"<\".concat(highlightedTagName, ' class=\"').concat(className, '\">')).replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.TAG_REPLACEMENT.highlightPostTag, \"g\"), \"</\".concat(highlightedTagName, \">\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL3JldmVyc2VIaWdobGlnaHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBMkM7QUFDK0c7QUFDMUosSUFBSU8sT0FBT1AsdURBQVNBLENBQUM7QUFFckI7O0NBRUMsR0FDYyxTQUFTUSxpQkFBaUJDLElBQUk7SUFDM0MsSUFBSUMsWUFBWUQsS0FBS0MsU0FBUyxFQUM1QkMsd0JBQXdCRixLQUFLRyxrQkFBa0IsRUFDL0NBLHFCQUFxQkQsMEJBQTBCLEtBQUssSUFBSSxTQUFTQSx1QkFDakVFLE1BQU1KLEtBQUtJLEdBQUcsRUFDZEMsa0JBQWtCTCxLQUFLTSxVQUFVLEVBQ2pDQSxhQUFhRCxvQkFBb0IsS0FBSyxJQUFJLENBQUMsSUFBSUE7SUFibkQsS0FjMkIsR0FBZ0JSLDREQUFPQSxDQUFDLE9BQU8sdVVBQXVVLENBQU07SUFDclksSUFBSVUsMkJBQTJCZCxzRUFBaUJBLENBQUNXLElBQUlJLGdCQUFnQixFQUFFUDtJQUV2RSwrREFBK0Q7SUFqQmpFLEtBa0IyQixHQUFnQkosNERBQU9BLENBQUNVLDBCQUEwQiwyQ0FBNENFLE1BQU0sQ0FBQ1IsV0FBVywyTEFBNEwsQ0FBTTtJQUMzVSxJQUFJUyxRQUFRSCw0QkFBNEIsQ0FBQyxHQUN2Q0ksY0FBY0QsTUFBTUUsS0FBSyxFQUN6QkMsaUJBQWlCRixnQkFBZ0IsS0FBSyxJQUFJLEtBQUtBO0lBRWpELDhFQUE4RTtJQUM5RSxJQUFJRyxZQUFZaEIsS0FBSztRQUNuQmlCLGdCQUFnQjtJQUNsQixLQUFNVCxDQUFBQSxXQUFXVSxXQUFXLEdBQUcsSUFBSVAsTUFBTSxDQUFDSCxXQUFXVSxXQUFXLElBQUksRUFBQztJQUNyRSxJQUFJQywwQkFBMEJyQiwyRUFBc0JBLENBQUNELDRFQUF1QkEsQ0FBQ0Qsd0VBQW1CQSxDQUFDbUI7SUFDakcsT0FBT0ksd0JBQXdCQyxPQUFPLENBQUMsSUFBSUMsT0FBTzNCLGdFQUFlQSxDQUFDNEIsZUFBZSxFQUFFLE1BQU0sSUFBSVgsTUFBTSxDQUFDTixvQkFBb0IsWUFBYU0sTUFBTSxDQUFDSyxXQUFXLE9BQVFJLE9BQU8sQ0FBQyxJQUFJQyxPQUFPM0IsZ0VBQWVBLENBQUM2QixnQkFBZ0IsRUFBRSxNQUFNLEtBQUtaLE1BQU0sQ0FBQ04sb0JBQW9CO0FBQzVQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL3JldmVyc2VIaWdobGlnaHQuanM/N2U0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wb25lbnQgfSBmcm9tIFwiLi4vbGliL3N1aXQuanNcIjtcbmltcG9ydCB7IFRBR19SRVBMQUNFTUVOVCwgZ2V0UHJvcGVydHlCeVBhdGgsIGdldEhpZ2hsaWdodGVkUGFydHMsIHJldmVyc2VIaWdobGlnaHRlZFBhcnRzLCBjb25jYXRIaWdobGlnaHRlZFBhcnRzLCB3YXJuaW5nIH0gZnJvbSBcIi4uL2xpYi91dGlscy9pbmRleC5qc1wiO1xudmFyIHN1aXQgPSBjb21wb25lbnQoJ1JldmVyc2VIaWdobGlnaHQnKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgaHRtbCB0YWdnZWQgdGVtcGxhdGVzIGFuZCB0aGUgUmV2ZXJzZUhpZ2hsaWdodCBjb21wb25lbnQgaW5zdGVhZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXZlcnNlSGlnaGxpZ2h0KF9yZWYpIHtcbiAgdmFyIGF0dHJpYnV0ZSA9IF9yZWYuYXR0cmlidXRlLFxuICAgIF9yZWYkaGlnaGxpZ2h0ZWRUYWdOYSA9IF9yZWYuaGlnaGxpZ2h0ZWRUYWdOYW1lLFxuICAgIGhpZ2hsaWdodGVkVGFnTmFtZSA9IF9yZWYkaGlnaGxpZ2h0ZWRUYWdOYSA9PT0gdm9pZCAwID8gJ21hcmsnIDogX3JlZiRoaWdobGlnaHRlZFRhZ05hLFxuICAgIGhpdCA9IF9yZWYuaGl0LFxuICAgIF9yZWYkY3NzQ2xhc3NlcyA9IF9yZWYuY3NzQ2xhc3NlcyxcbiAgICBjc3NDbGFzc2VzID0gX3JlZiRjc3NDbGFzc2VzID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkY3NzQ2xhc3NlcztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyB3YXJuaW5nKGZhbHNlLCBcImBpbnN0YW50c2VhcmNoLnJldmVyc2VIaWdobGlnaHRgIGZ1bmN0aW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIEl0IGlzIHN0aWxsIHN1cHBvcnRlZCBpbiA0LnggcmVsZWFzZXMsIGJ1dCBub3QgZnVydGhlci4gSXQgaXMgcmVwbGFjZWQgYnkgdGhlIGBSZXZlcnNlSGlnaGxpZ2h0YCBjb21wb25lbnQuXFxuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHZpc2l0IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9ndWlkZXMvYnVpbGRpbmctc2VhcmNoLXVpL3VwZ3JhZGUtZ3VpZGVzL2pzLz9jbGllbnQ9aHRtbCt0YWdnZWQrdGVtcGxhdGVzI3VwZ3JhZGUtdGVtcGxhdGVzXCIpIDogdm9pZCAwO1xuICB2YXIgaGlnaGxpZ2h0QXR0cmlidXRlUmVzdWx0ID0gZ2V0UHJvcGVydHlCeVBhdGgoaGl0Ll9oaWdobGlnaHRSZXN1bHQsIGF0dHJpYnV0ZSk7XG5cbiAgLy8gQE1BSk9SIGZhbGxiYWNrIHRvIGF0dHJpYnV0ZSB2YWx1ZSBpZiBoaWdobGlnaHQgaXMgbm90IGZvdW5kXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybmluZyhoaWdobGlnaHRBdHRyaWJ1dGVSZXN1bHQsIFwiQ291bGQgbm90IGVuYWJsZSByZXZlcnNlIGhpZ2hsaWdodCBmb3IgXFxcIlwiLmNvbmNhdChhdHRyaWJ1dGUsIFwiXFxcIiwgd2lsbCBkaXNwbGF5IGFuIGVtcHR5IHN0cmluZy5cXG5QbGVhc2UgY2hlY2sgd2hldGhlciB0aGlzIGF0dHJpYnV0ZSBleGlzdHMgYW5kIGlzIGVpdGhlciBzZWFyY2hhYmxlIG9yIHNwZWNpZmllZCBpbiBgYXR0cmlidXRlc1RvSGlnaGxpZ2h0YC5cXG5cXG5TZWU6IGh0dHBzOi8vYWxnLmxpL2hpZ2hsaWdodGluZ1xcblwiKSkgOiB2b2lkIDA7XG4gIHZhciBfcmVmMiA9IGhpZ2hsaWdodEF0dHJpYnV0ZVJlc3VsdCB8fCB7fSxcbiAgICBfcmVmMiR2YWx1ZSA9IF9yZWYyLnZhbHVlLFxuICAgIGF0dHJpYnV0ZVZhbHVlID0gX3JlZjIkdmFsdWUgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkdmFsdWU7XG5cbiAgLy8gY3ggaXMgbm90IHVzZWQsIHNpbmNlIGl0IHdvdWxkIGJlIGJ1bmRsZWQgYXMgYSBkZXBlbmRlbmN5IGZvciBWdWUgJiBBbmd1bGFyXG4gIHZhciBjbGFzc05hbWUgPSBzdWl0KHtcbiAgICBkZXNjZW5kYW50TmFtZTogJ2hpZ2hsaWdodGVkJ1xuICB9KSArIChjc3NDbGFzc2VzLmhpZ2hsaWdodGVkID8gXCIgXCIuY29uY2F0KGNzc0NsYXNzZXMuaGlnaGxpZ2h0ZWQpIDogJycpO1xuICB2YXIgcmV2ZXJzZUhpZ2hsaWdodGVkVmFsdWUgPSBjb25jYXRIaWdobGlnaHRlZFBhcnRzKHJldmVyc2VIaWdobGlnaHRlZFBhcnRzKGdldEhpZ2hsaWdodGVkUGFydHMoYXR0cmlidXRlVmFsdWUpKSk7XG4gIHJldHVybiByZXZlcnNlSGlnaGxpZ2h0ZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoVEFHX1JFUExBQ0VNRU5ULmhpZ2hsaWdodFByZVRhZywgJ2cnKSwgXCI8XCIuY29uY2F0KGhpZ2hsaWdodGVkVGFnTmFtZSwgXCIgY2xhc3M9XFxcIlwiKS5jb25jYXQoY2xhc3NOYW1lLCBcIlxcXCI+XCIpKS5yZXBsYWNlKG5ldyBSZWdFeHAoVEFHX1JFUExBQ0VNRU5ULmhpZ2hsaWdodFBvc3RUYWcsICdnJyksIFwiPC9cIi5jb25jYXQoaGlnaGxpZ2h0ZWRUYWdOYW1lLCBcIj5cIikpO1xufSJdLCJuYW1lcyI6WyJjb21wb25lbnQiLCJUQUdfUkVQTEFDRU1FTlQiLCJnZXRQcm9wZXJ0eUJ5UGF0aCIsImdldEhpZ2hsaWdodGVkUGFydHMiLCJyZXZlcnNlSGlnaGxpZ2h0ZWRQYXJ0cyIsImNvbmNhdEhpZ2hsaWdodGVkUGFydHMiLCJ3YXJuaW5nIiwic3VpdCIsInJldmVyc2VIaWdobGlnaHQiLCJfcmVmIiwiYXR0cmlidXRlIiwiX3JlZiRoaWdobGlnaHRlZFRhZ05hIiwiaGlnaGxpZ2h0ZWRUYWdOYW1lIiwiaGl0IiwiX3JlZiRjc3NDbGFzc2VzIiwiY3NzQ2xhc3NlcyIsImhpZ2hsaWdodEF0dHJpYnV0ZVJlc3VsdCIsIl9oaWdobGlnaHRSZXN1bHQiLCJjb25jYXQiLCJfcmVmMiIsIl9yZWYyJHZhbHVlIiwidmFsdWUiLCJhdHRyaWJ1dGVWYWx1ZSIsImNsYXNzTmFtZSIsImRlc2NlbmRhbnROYW1lIiwiaGlnaGxpZ2h0ZWQiLCJyZXZlcnNlSGlnaGxpZ2h0ZWRWYWx1ZSIsInJlcGxhY2UiLCJSZWdFeHAiLCJoaWdobGlnaHRQcmVUYWciLCJoaWdobGlnaHRQb3N0VGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/reverseHighlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/reverseSnippet.js":
/*!********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/reverseSnippet.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ reverseSnippet)\n/* harmony export */ });\n/* harmony import */ var _lib_suit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/suit.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/suit.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\n\nvar suit = (0,_lib_suit_js__WEBPACK_IMPORTED_MODULE_0__.component)(\"ReverseSnippet\");\n/**\n * @deprecated use html tagged templates and the ReverseSnippet component instead\n */ function reverseSnippet(_ref) {\n    var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? \"mark\" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(false, \"`instantsearch.reverseSnippet` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `ReverseSnippet` component.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/building-search-ui/upgrade-guides/js/?client=html+tagged+templates#upgrade-templates\") : 0;\n    var snippetAttributeResult = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getPropertyByPath)(hit._snippetResult, attribute);\n    // @MAJOR fallback to attribute value if snippet is not found\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(snippetAttributeResult, 'Could not enable reverse snippet for \"'.concat(attribute, '\", will display an empty string.\\nPlease check whether this attribute exists and is specified in `attributesToSnippet`.\\n\\nSee: https://alg.li/highlighting\\n')) : 0;\n    var _ref2 = snippetAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? \"\" : _ref2$value;\n    // cx is not used, since it would be bundled as a dependency for Vue & Angular\n    var className = suit({\n        descendantName: \"highlighted\"\n    }) + (cssClasses.highlighted ? \" \".concat(cssClasses.highlighted) : \"\");\n    var reverseHighlightedValue = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.concatHighlightedParts)((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.reverseHighlightedParts)((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getHighlightedParts)(attributeValue)));\n    return reverseHighlightedValue.replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.TAG_REPLACEMENT.highlightPreTag, \"g\"), \"<\".concat(highlightedTagName, ' class=\"').concat(className, '\">')).replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.TAG_REPLACEMENT.highlightPostTag, \"g\"), \"</\".concat(highlightedTagName, \">\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL3JldmVyc2VTbmlwcGV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTJDO0FBQytHO0FBQzFKLElBQUlPLE9BQU9QLHVEQUFTQSxDQUFDO0FBRXJCOztDQUVDLEdBQ2MsU0FBU1EsZUFBZUMsSUFBSTtJQUN6QyxJQUFJQyxZQUFZRCxLQUFLQyxTQUFTLEVBQzVCQyx3QkFBd0JGLEtBQUtHLGtCQUFrQixFQUMvQ0EscUJBQXFCRCwwQkFBMEIsS0FBSyxJQUFJLFNBQVNBLHVCQUNqRUUsTUFBTUosS0FBS0ksR0FBRyxFQUNkQyxrQkFBa0JMLEtBQUtNLFVBQVUsRUFDakNBLGFBQWFELG9CQUFvQixLQUFLLElBQUksQ0FBQyxJQUFJQTtJQWJuRCxLQWMyQixHQUFnQlIsNERBQU9BLENBQUMsT0FBTyxtVUFBbVUsQ0FBTTtJQUNqWSxJQUFJVSx5QkFBeUJkLHNFQUFpQkEsQ0FBQ1csSUFBSUksY0FBYyxFQUFFUDtJQUVuRSw2REFBNkQ7SUFqQi9ELEtBa0IyQixHQUFnQkosNERBQU9BLENBQUNVLHdCQUF3Qix5Q0FBMENFLE1BQU0sQ0FBQ1IsV0FBVyxvS0FBcUssQ0FBTTtJQUNoVCxJQUFJUyxRQUFRSCwwQkFBMEIsQ0FBQyxHQUNyQ0ksY0FBY0QsTUFBTUUsS0FBSyxFQUN6QkMsaUJBQWlCRixnQkFBZ0IsS0FBSyxJQUFJLEtBQUtBO0lBRWpELDhFQUE4RTtJQUM5RSxJQUFJRyxZQUFZaEIsS0FBSztRQUNuQmlCLGdCQUFnQjtJQUNsQixLQUFNVCxDQUFBQSxXQUFXVSxXQUFXLEdBQUcsSUFBSVAsTUFBTSxDQUFDSCxXQUFXVSxXQUFXLElBQUksRUFBQztJQUNyRSxJQUFJQywwQkFBMEJyQiwyRUFBc0JBLENBQUNELDRFQUF1QkEsQ0FBQ0Qsd0VBQW1CQSxDQUFDbUI7SUFDakcsT0FBT0ksd0JBQXdCQyxPQUFPLENBQUMsSUFBSUMsT0FBTzNCLGdFQUFlQSxDQUFDNEIsZUFBZSxFQUFFLE1BQU0sSUFBSVgsTUFBTSxDQUFDTixvQkFBb0IsWUFBYU0sTUFBTSxDQUFDSyxXQUFXLE9BQVFJLE9BQU8sQ0FBQyxJQUFJQyxPQUFPM0IsZ0VBQWVBLENBQUM2QixnQkFBZ0IsRUFBRSxNQUFNLEtBQUtaLE1BQU0sQ0FBQ04sb0JBQW9CO0FBQzVQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL3JldmVyc2VTbmlwcGV0LmpzPzAzNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcG9uZW50IH0gZnJvbSBcIi4uL2xpYi9zdWl0LmpzXCI7XG5pbXBvcnQgeyBUQUdfUkVQTEFDRU1FTlQsIGdldFByb3BlcnR5QnlQYXRoLCBnZXRIaWdobGlnaHRlZFBhcnRzLCByZXZlcnNlSGlnaGxpZ2h0ZWRQYXJ0cywgY29uY2F0SGlnaGxpZ2h0ZWRQYXJ0cywgd2FybmluZyB9IGZyb20gXCIuLi9saWIvdXRpbHMvaW5kZXguanNcIjtcbnZhciBzdWl0ID0gY29tcG9uZW50KCdSZXZlcnNlU25pcHBldCcpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBodG1sIHRhZ2dlZCB0ZW1wbGF0ZXMgYW5kIHRoZSBSZXZlcnNlU25pcHBldCBjb21wb25lbnQgaW5zdGVhZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXZlcnNlU25pcHBldChfcmVmKSB7XG4gIHZhciBhdHRyaWJ1dGUgPSBfcmVmLmF0dHJpYnV0ZSxcbiAgICBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPSBfcmVmLmhpZ2hsaWdodGVkVGFnTmFtZSxcbiAgICBoaWdobGlnaHRlZFRhZ05hbWUgPSBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPT09IHZvaWQgMCA/ICdtYXJrJyA6IF9yZWYkaGlnaGxpZ2h0ZWRUYWdOYSxcbiAgICBoaXQgPSBfcmVmLmhpdCxcbiAgICBfcmVmJGNzc0NsYXNzZXMgPSBfcmVmLmNzc0NsYXNzZXMsXG4gICAgY3NzQ2xhc3NlcyA9IF9yZWYkY3NzQ2xhc3NlcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGNzc0NsYXNzZXM7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybmluZyhmYWxzZSwgXCJgaW5zdGFudHNlYXJjaC5yZXZlcnNlU25pcHBldGAgZnVuY3Rpb24gaGFzIGJlZW4gZGVwcmVjYXRlZC4gSXQgaXMgc3RpbGwgc3VwcG9ydGVkIGluIDQueCByZWxlYXNlcywgYnV0IG5vdCBmdXJ0aGVyLiBJdCBpcyByZXBsYWNlZCBieSB0aGUgYFJldmVyc2VTbmlwcGV0YCBjb21wb25lbnQuXFxuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHZpc2l0IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9ndWlkZXMvYnVpbGRpbmctc2VhcmNoLXVpL3VwZ3JhZGUtZ3VpZGVzL2pzLz9jbGllbnQ9aHRtbCt0YWdnZWQrdGVtcGxhdGVzI3VwZ3JhZGUtdGVtcGxhdGVzXCIpIDogdm9pZCAwO1xuICB2YXIgc25pcHBldEF0dHJpYnV0ZVJlc3VsdCA9IGdldFByb3BlcnR5QnlQYXRoKGhpdC5fc25pcHBldFJlc3VsdCwgYXR0cmlidXRlKTtcblxuICAvLyBATUFKT1IgZmFsbGJhY2sgdG8gYXR0cmlidXRlIHZhbHVlIGlmIHNuaXBwZXQgaXMgbm90IGZvdW5kXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybmluZyhzbmlwcGV0QXR0cmlidXRlUmVzdWx0LCBcIkNvdWxkIG5vdCBlbmFibGUgcmV2ZXJzZSBzbmlwcGV0IGZvciBcXFwiXCIuY29uY2F0KGF0dHJpYnV0ZSwgXCJcXFwiLCB3aWxsIGRpc3BsYXkgYW4gZW1wdHkgc3RyaW5nLlxcblBsZWFzZSBjaGVjayB3aGV0aGVyIHRoaXMgYXR0cmlidXRlIGV4aXN0cyBhbmQgaXMgc3BlY2lmaWVkIGluIGBhdHRyaWJ1dGVzVG9TbmlwcGV0YC5cXG5cXG5TZWU6IGh0dHBzOi8vYWxnLmxpL2hpZ2hsaWdodGluZ1xcblwiKSkgOiB2b2lkIDA7XG4gIHZhciBfcmVmMiA9IHNuaXBwZXRBdHRyaWJ1dGVSZXN1bHQgfHwge30sXG4gICAgX3JlZjIkdmFsdWUgPSBfcmVmMi52YWx1ZSxcbiAgICBhdHRyaWJ1dGVWYWx1ZSA9IF9yZWYyJHZhbHVlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYyJHZhbHVlO1xuXG4gIC8vIGN4IGlzIG5vdCB1c2VkLCBzaW5jZSBpdCB3b3VsZCBiZSBidW5kbGVkIGFzIGEgZGVwZW5kZW5jeSBmb3IgVnVlICYgQW5ndWxhclxuICB2YXIgY2xhc3NOYW1lID0gc3VpdCh7XG4gICAgZGVzY2VuZGFudE5hbWU6ICdoaWdobGlnaHRlZCdcbiAgfSkgKyAoY3NzQ2xhc3Nlcy5oaWdobGlnaHRlZCA/IFwiIFwiLmNvbmNhdChjc3NDbGFzc2VzLmhpZ2hsaWdodGVkKSA6ICcnKTtcbiAgdmFyIHJldmVyc2VIaWdobGlnaHRlZFZhbHVlID0gY29uY2F0SGlnaGxpZ2h0ZWRQYXJ0cyhyZXZlcnNlSGlnaGxpZ2h0ZWRQYXJ0cyhnZXRIaWdobGlnaHRlZFBhcnRzKGF0dHJpYnV0ZVZhbHVlKSkpO1xuICByZXR1cm4gcmV2ZXJzZUhpZ2hsaWdodGVkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQcmVUYWcsICdnJyksIFwiPFwiLmNvbmNhdChoaWdobGlnaHRlZFRhZ05hbWUsIFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KGNsYXNzTmFtZSwgXCJcXFwiPlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQb3N0VGFnLCAnZycpLCBcIjwvXCIuY29uY2F0KGhpZ2hsaWdodGVkVGFnTmFtZSwgXCI+XCIpKTtcbn0iXSwibmFtZXMiOlsiY29tcG9uZW50IiwiVEFHX1JFUExBQ0VNRU5UIiwiZ2V0UHJvcGVydHlCeVBhdGgiLCJnZXRIaWdobGlnaHRlZFBhcnRzIiwicmV2ZXJzZUhpZ2hsaWdodGVkUGFydHMiLCJjb25jYXRIaWdobGlnaHRlZFBhcnRzIiwid2FybmluZyIsInN1aXQiLCJyZXZlcnNlU25pcHBldCIsIl9yZWYiLCJhdHRyaWJ1dGUiLCJfcmVmJGhpZ2hsaWdodGVkVGFnTmEiLCJoaWdobGlnaHRlZFRhZ05hbWUiLCJoaXQiLCJfcmVmJGNzc0NsYXNzZXMiLCJjc3NDbGFzc2VzIiwic25pcHBldEF0dHJpYnV0ZVJlc3VsdCIsIl9zbmlwcGV0UmVzdWx0IiwiY29uY2F0IiwiX3JlZjIiLCJfcmVmMiR2YWx1ZSIsInZhbHVlIiwiYXR0cmlidXRlVmFsdWUiLCJjbGFzc05hbWUiLCJkZXNjZW5kYW50TmFtZSIsImhpZ2hsaWdodGVkIiwicmV2ZXJzZUhpZ2hsaWdodGVkVmFsdWUiLCJyZXBsYWNlIiwiUmVnRXhwIiwiaGlnaGxpZ2h0UHJlVGFnIiwiaGlnaGxpZ2h0UG9zdFRhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/reverseSnippet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/helpers/snippet.js":
/*!*************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/helpers/snippet.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ snippet)\n/* harmony export */ });\n/* harmony import */ var _lib_suit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/suit.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/suit.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\n\nvar suit = (0,_lib_suit_js__WEBPACK_IMPORTED_MODULE_0__.component)(\"Snippet\");\n/**\n * @deprecated use html tagged templates and the Snippet component instead\n */ function snippet(_ref) {\n    var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? \"mark\" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(false, \"`instantsearch.snippet` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `Snippet` component.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/building-search-ui/upgrade-guides/js/?client=html+tagged+templates#upgrade-templates\") : 0;\n    var snippetAttributeResult = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getPropertyByPath)(hit._snippetResult, attribute);\n    // @MAJOR fallback to attribute value if snippet is not found\n     true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.warning)(snippetAttributeResult, 'Could not enable snippet for \"'.concat(attribute, '\", will display an empty string.\\nPlease check whether this attribute exists and is specified in `attributesToSnippet`.\\n\\nSee: https://alg.li/highlighting\\n')) : 0;\n    var _ref2 = snippetAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? \"\" : _ref2$value;\n    // cx is not used, since it would be bundled as a dependency for Vue & Angular\n    var className = suit({\n        descendantName: \"highlighted\"\n    }) + (cssClasses.highlighted ? \" \".concat(cssClasses.highlighted) : \"\");\n    return attributeValue.replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.TAG_REPLACEMENT.highlightPreTag, \"g\"), \"<\".concat(highlightedTagName, ' class=\"').concat(className, '\">')).replace(new RegExp(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.TAG_REPLACEMENT.highlightPostTag, \"g\"), \"</\".concat(highlightedTagName, \">\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9oZWxwZXJzL3NuaXBwZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkM7QUFDeUM7QUFDcEYsSUFBSUksT0FBT0osdURBQVNBLENBQUM7QUFFckI7O0NBRUMsR0FDYyxTQUFTSyxRQUFRQyxJQUFJO0lBQ2xDLElBQUlDLFlBQVlELEtBQUtDLFNBQVMsRUFDNUJDLHdCQUF3QkYsS0FBS0csa0JBQWtCLEVBQy9DQSxxQkFBcUJELDBCQUEwQixLQUFLLElBQUksU0FBU0EsdUJBQ2pFRSxNQUFNSixLQUFLSSxHQUFHLEVBQ2RDLGtCQUFrQkwsS0FBS00sVUFBVSxFQUNqQ0EsYUFBYUQsb0JBQW9CLEtBQUssSUFBSSxDQUFDLElBQUlBO0lBYm5ELEtBYzJCLEdBQWdCUiw0REFBT0EsQ0FBQyxPQUFPLHFUQUFxVCxDQUFNO0lBQ25YLElBQUlVLHlCQUF5Qlgsc0VBQWlCQSxDQUFDUSxJQUFJSSxjQUFjLEVBQUVQO0lBRW5FLDZEQUE2RDtJQWpCL0QsS0FrQjJCLEdBQWdCSiw0REFBT0EsQ0FBQ1Usd0JBQXdCLGlDQUFrQ0UsTUFBTSxDQUFDUixXQUFXLG9LQUFxSyxDQUFNO0lBQ3hTLElBQUlTLFFBQVFILDBCQUEwQixDQUFDLEdBQ3JDSSxjQUFjRCxNQUFNRSxLQUFLLEVBQ3pCQyxpQkFBaUJGLGdCQUFnQixLQUFLLElBQUksS0FBS0E7SUFFakQsOEVBQThFO0lBQzlFLElBQUlHLFlBQVloQixLQUFLO1FBQ25CaUIsZ0JBQWdCO0lBQ2xCLEtBQU1ULENBQUFBLFdBQVdVLFdBQVcsR0FBRyxJQUFJUCxNQUFNLENBQUNILFdBQVdVLFdBQVcsSUFBSSxFQUFDO0lBQ3JFLE9BQU9ILGVBQWVJLE9BQU8sQ0FBQyxJQUFJQyxPQUFPdkIsZ0VBQWVBLENBQUN3QixlQUFlLEVBQUUsTUFBTSxJQUFJVixNQUFNLENBQUNOLG9CQUFvQixZQUFhTSxNQUFNLENBQUNLLFdBQVcsT0FBUUcsT0FBTyxDQUFDLElBQUlDLE9BQU92QixnRUFBZUEsQ0FBQ3lCLGdCQUFnQixFQUFFLE1BQU0sS0FBS1gsTUFBTSxDQUFDTixvQkFBb0I7QUFDblAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2hlbHBlcnMvc25pcHBldC5qcz85Y2Y4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBvbmVudCB9IGZyb20gXCIuLi9saWIvc3VpdC5qc1wiO1xuaW1wb3J0IHsgVEFHX1JFUExBQ0VNRU5ULCBnZXRQcm9wZXJ0eUJ5UGF0aCwgd2FybmluZyB9IGZyb20gXCIuLi9saWIvdXRpbHMvaW5kZXguanNcIjtcbnZhciBzdWl0ID0gY29tcG9uZW50KCdTbmlwcGV0Jyk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGh0bWwgdGFnZ2VkIHRlbXBsYXRlcyBhbmQgdGhlIFNuaXBwZXQgY29tcG9uZW50IGluc3RlYWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc25pcHBldChfcmVmKSB7XG4gIHZhciBhdHRyaWJ1dGUgPSBfcmVmLmF0dHJpYnV0ZSxcbiAgICBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPSBfcmVmLmhpZ2hsaWdodGVkVGFnTmFtZSxcbiAgICBoaWdobGlnaHRlZFRhZ05hbWUgPSBfcmVmJGhpZ2hsaWdodGVkVGFnTmEgPT09IHZvaWQgMCA/ICdtYXJrJyA6IF9yZWYkaGlnaGxpZ2h0ZWRUYWdOYSxcbiAgICBoaXQgPSBfcmVmLmhpdCxcbiAgICBfcmVmJGNzc0NsYXNzZXMgPSBfcmVmLmNzc0NsYXNzZXMsXG4gICAgY3NzQ2xhc3NlcyA9IF9yZWYkY3NzQ2xhc3NlcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGNzc0NsYXNzZXM7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybmluZyhmYWxzZSwgXCJgaW5zdGFudHNlYXJjaC5zbmlwcGV0YCBmdW5jdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBJdCBpcyBzdGlsbCBzdXBwb3J0ZWQgaW4gNC54IHJlbGVhc2VzLCBidXQgbm90IGZ1cnRoZXIuIEl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBgU25pcHBldGAgY29tcG9uZW50LlxcblxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCB2aXNpdCBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvZ3VpZGVzL2J1aWxkaW5nLXNlYXJjaC11aS91cGdyYWRlLWd1aWRlcy9qcy8/Y2xpZW50PWh0bWwrdGFnZ2VkK3RlbXBsYXRlcyN1cGdyYWRlLXRlbXBsYXRlc1wiKSA6IHZvaWQgMDtcbiAgdmFyIHNuaXBwZXRBdHRyaWJ1dGVSZXN1bHQgPSBnZXRQcm9wZXJ0eUJ5UGF0aChoaXQuX3NuaXBwZXRSZXN1bHQsIGF0dHJpYnV0ZSk7XG5cbiAgLy8gQE1BSk9SIGZhbGxiYWNrIHRvIGF0dHJpYnV0ZSB2YWx1ZSBpZiBzbmlwcGV0IGlzIG5vdCBmb3VuZFxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHdhcm5pbmcoc25pcHBldEF0dHJpYnV0ZVJlc3VsdCwgXCJDb3VsZCBub3QgZW5hYmxlIHNuaXBwZXQgZm9yIFxcXCJcIi5jb25jYXQoYXR0cmlidXRlLCBcIlxcXCIsIHdpbGwgZGlzcGxheSBhbiBlbXB0eSBzdHJpbmcuXFxuUGxlYXNlIGNoZWNrIHdoZXRoZXIgdGhpcyBhdHRyaWJ1dGUgZXhpc3RzIGFuZCBpcyBzcGVjaWZpZWQgaW4gYGF0dHJpYnV0ZXNUb1NuaXBwZXRgLlxcblxcblNlZTogaHR0cHM6Ly9hbGcubGkvaGlnaGxpZ2h0aW5nXFxuXCIpKSA6IHZvaWQgMDtcbiAgdmFyIF9yZWYyID0gc25pcHBldEF0dHJpYnV0ZVJlc3VsdCB8fCB7fSxcbiAgICBfcmVmMiR2YWx1ZSA9IF9yZWYyLnZhbHVlLFxuICAgIGF0dHJpYnV0ZVZhbHVlID0gX3JlZjIkdmFsdWUgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkdmFsdWU7XG5cbiAgLy8gY3ggaXMgbm90IHVzZWQsIHNpbmNlIGl0IHdvdWxkIGJlIGJ1bmRsZWQgYXMgYSBkZXBlbmRlbmN5IGZvciBWdWUgJiBBbmd1bGFyXG4gIHZhciBjbGFzc05hbWUgPSBzdWl0KHtcbiAgICBkZXNjZW5kYW50TmFtZTogJ2hpZ2hsaWdodGVkJ1xuICB9KSArIChjc3NDbGFzc2VzLmhpZ2hsaWdodGVkID8gXCIgXCIuY29uY2F0KGNzc0NsYXNzZXMuaGlnaGxpZ2h0ZWQpIDogJycpO1xuICByZXR1cm4gYXR0cmlidXRlVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQcmVUYWcsICdnJyksIFwiPFwiLmNvbmNhdChoaWdobGlnaHRlZFRhZ05hbWUsIFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KGNsYXNzTmFtZSwgXCJcXFwiPlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKFRBR19SRVBMQUNFTUVOVC5oaWdobGlnaHRQb3N0VGFnLCAnZycpLCBcIjwvXCIuY29uY2F0KGhpZ2hsaWdodGVkVGFnTmFtZSwgXCI+XCIpKTtcbn0iXSwibmFtZXMiOlsiY29tcG9uZW50IiwiVEFHX1JFUExBQ0VNRU5UIiwiZ2V0UHJvcGVydHlCeVBhdGgiLCJ3YXJuaW5nIiwic3VpdCIsInNuaXBwZXQiLCJfcmVmIiwiYXR0cmlidXRlIiwiX3JlZiRoaWdobGlnaHRlZFRhZ05hIiwiaGlnaGxpZ2h0ZWRUYWdOYW1lIiwiaGl0IiwiX3JlZiRjc3NDbGFzc2VzIiwiY3NzQ2xhc3NlcyIsInNuaXBwZXRBdHRyaWJ1dGVSZXN1bHQiLCJfc25pcHBldFJlc3VsdCIsImNvbmNhdCIsIl9yZWYyIiwiX3JlZjIkdmFsdWUiLCJ2YWx1ZSIsImF0dHJpYnV0ZVZhbHVlIiwiY2xhc3NOYW1lIiwiZGVzY2VuZGFudE5hbWUiLCJoaWdobGlnaHRlZCIsInJlcGxhY2UiLCJSZWdFeHAiLCJoaWdobGlnaHRQcmVUYWciLCJoaWdobGlnaHRQb3N0VGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/helpers/snippet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/InstantSearch.js":
/*!***************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/InstantSearch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _algolia_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/@algolia/events/events.js\");\n/* harmony import */ var algoliasearch_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! algoliasearch-helper */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/index.js\");\n/* harmony import */ var _middlewares_createInsightsMiddleware_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../middlewares/createInsightsMiddleware.js */ \"(ssr)/./node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js\");\n/* harmony import */ var _middlewares_createMetadataMiddleware_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../middlewares/createMetadataMiddleware.js */ \"(ssr)/./node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js\");\n/* harmony import */ var _middlewares_createRouterMiddleware_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../middlewares/createRouterMiddleware.js */ \"(ssr)/./node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js\");\n/* harmony import */ var _widgets_index_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../widgets/index/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/widgets/index/index.js\");\n/* harmony import */ var _createHelpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./createHelpers.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/createHelpers.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/defer.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/setIndexHelperState.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/version.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\n\n\n\n\n\n\nvar withUsage = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createDocumentationMessageGenerator)({\n    name: \"instantsearch\"\n});\nfunction defaultCreateURL() {\n    return \"#\";\n}\n// this purposely breaks typescript's type inference to ensure it's not used\n// as it's used for a default parameter for example\n// source: https://github.com/Microsoft/TypeScript/issues/14829#issuecomment-504042546\n/**\n * The actual implementation of the InstantSearch. This is\n * created using the `instantsearch` factory function.\n * It emits the 'render' event every time a search is done\n */ var InstantSearch = /*#__PURE__*/ function(_EventEmitter) {\n    _inherits(InstantSearch, _EventEmitter);\n    var _super = _createSuper(InstantSearch);\n    function InstantSearch(options) {\n        var _this;\n        _classCallCheck(this, InstantSearch);\n        _this = _super.call(this);\n        // prevent `render` event listening from causing a warning\n        _defineProperty(_assertThisInitialized(_this), \"client\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"indexName\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"insightsClient\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"onStateChange\", null);\n        _defineProperty(_assertThisInitialized(_this), \"helper\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"mainHelper\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"mainIndex\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"started\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"templatesConfig\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"renderState\", {});\n        _defineProperty(_assertThisInitialized(_this), \"_stalledSearchDelay\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_searchStalledTimer\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_initialUiState\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_initialResults\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_createURL\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_searchFunction\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_mainHelperSearch\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"middleware\", []);\n        _defineProperty(_assertThisInitialized(_this), \"sendEventToInsights\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"status\", \"idle\");\n        _defineProperty(_assertThisInitialized(_this), \"error\", undefined);\n        _defineProperty(_assertThisInitialized(_this), \"scheduleSearch\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defer)(function() {\n            if (_this.started) {\n                _this.mainHelper.search();\n            }\n        }));\n        _defineProperty(_assertThisInitialized(_this), \"scheduleRender\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defer)(function() {\n            var _this$mainHelper;\n            var shouldResetStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n            if (!((_this$mainHelper = _this.mainHelper) !== null && _this$mainHelper !== void 0 && _this$mainHelper.hasPendingRequests())) {\n                clearTimeout(_this._searchStalledTimer);\n                _this._searchStalledTimer = null;\n                if (shouldResetStatus) {\n                    _this.status = \"idle\";\n                    _this.error = undefined;\n                }\n            }\n            _this.mainIndex.render({\n                instantSearchInstance: _assertThisInitialized(_this)\n            });\n            _this.emit(\"render\");\n        }));\n        _defineProperty(_assertThisInitialized(_this), \"onInternalStateChange\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defer)(function() {\n            var nextUiState = _this.mainIndex.getWidgetUiState({});\n            _this.middleware.forEach(function(_ref) {\n                var instance = _ref.instance;\n                instance.onStateChange({\n                    uiState: nextUiState\n                });\n            });\n        }));\n        _this.setMaxListeners(100);\n        var _options$indexName = options.indexName, indexName = _options$indexName === void 0 ? \"\" : _options$indexName, numberLocale = options.numberLocale, _options$initialUiSta = options.initialUiState, initialUiState = _options$initialUiSta === void 0 ? {} : _options$initialUiSta, _options$routing = options.routing, routing = _options$routing === void 0 ? null : _options$routing, _options$insights = options.insights, insights = _options$insights === void 0 ? false : _options$insights, searchFunction = options.searchFunction, _options$stalledSearc = options.stalledSearchDelay, stalledSearchDelay = _options$stalledSearc === void 0 ? 200 : _options$stalledSearc, _options$searchClient = options.searchClient, searchClient = _options$searchClient === void 0 ? null : _options$searchClient, _options$insightsClie = options.insightsClient, insightsClient = _options$insightsClie === void 0 ? null : _options$insightsClie, _options$onStateChang = options.onStateChange, onStateChange = _options$onStateChang === void 0 ? null : _options$onStateChang;\n        if (searchClient === null) {\n            throw new Error(withUsage(\"The `searchClient` option is required.\"));\n        }\n        if (typeof searchClient.search !== \"function\") {\n            throw new Error(\"The `searchClient` must implement a `search` method.\\n\\nSee: https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/backend-instantsearch/js/\");\n        }\n        if (typeof searchClient.addAlgoliaAgent === \"function\") {\n            searchClient.addAlgoliaAgent(\"instantsearch.js (\".concat(_version_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \")\"));\n        }\n         true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(insightsClient === null, \"`insightsClient` property has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : 0;\n        if (insightsClient && typeof insightsClient !== \"function\") {\n            throw new Error(withUsage(\"The `insightsClient` option should be a function.\"));\n        }\n         true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(!options.searchParameters, \"The `searchParameters` option is deprecated and will not be supported in InstantSearch.js 4.x.\\n\\nYou can replace it with the `configure` widget:\\n\\n```\\nsearch.addWidgets([\\n  configure(\".concat(JSON.stringify(options.searchParameters, null, 2), \")\\n]);\\n```\\n\\nSee \").concat((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createDocumentationLink)({\n            name: \"configure\"\n        }))) : 0;\n        _this.client = searchClient;\n        _this.insightsClient = insightsClient;\n        _this.indexName = indexName;\n        _this.helper = null;\n        _this.mainHelper = null;\n        _this.mainIndex = (0,_widgets_index_index_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({\n            indexName: indexName\n        });\n        _this.onStateChange = onStateChange;\n        _this.started = false;\n        _this.templatesConfig = {\n            helpers: (0,_createHelpers_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({\n                numberLocale: numberLocale\n            }),\n            compileOptions: {}\n        };\n        _this._stalledSearchDelay = stalledSearchDelay;\n        _this._searchStalledTimer = null;\n        _this._createURL = defaultCreateURL;\n        _this._initialUiState = initialUiState;\n        _this._initialResults = null;\n        if (searchFunction) {\n             true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(false, \"The `searchFunction` option is deprecated. Use `onStateChange` instead.\") : 0;\n            _this._searchFunction = searchFunction;\n        }\n        _this.sendEventToInsights = _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop;\n        if (routing) {\n            var routerOptions = typeof routing === \"boolean\" ? {} : routing;\n            routerOptions.$$internal = true;\n            _this.use((0,_middlewares_createRouterMiddleware_js__WEBPACK_IMPORTED_MODULE_9__.createRouterMiddleware)(routerOptions));\n        }\n        // This is the default middleware,\n        // any user-provided middleware will be added later and override this one.\n        if (insights) {\n            var insightsOptions = typeof insights === \"boolean\" ? {} : insights;\n            insightsOptions.$$internal = true;\n            _this.use((0,_middlewares_createInsightsMiddleware_js__WEBPACK_IMPORTED_MODULE_10__.createInsightsMiddleware)(insightsOptions));\n        }\n        if ((0,_middlewares_createMetadataMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.isMetadataEnabled)()) {\n            _this.use((0,_middlewares_createMetadataMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.createMetadataMiddleware)({\n                $$internal: true\n            }));\n        }\n        return _this;\n    }\n    /**\n   * Hooks a middleware into the InstantSearch lifecycle.\n   */ _createClass(InstantSearch, [\n        {\n            key: \"_isSearchStalled\",\n            get: /**\n     * The status of the search. Can be \"idle\", \"loading\", \"stalled\", or \"error\".\n     */ /**\n     * The last returned error from the Search API.\n     * The error gets cleared when the next valid search response is rendered.\n     */ /**\n     * @deprecated use `status === 'stalled'` instead\n     */ function get() {\n                 true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(false, '`InstantSearch._isSearchStalled` is deprecated and will be removed in InstantSearch.js 5.0.\\n\\nUse `InstantSearch.status === \"stalled\"` instead.') : 0;\n                return this.status === \"stalled\";\n            }\n        },\n        {\n            key: \"use\",\n            value: function use() {\n                var _this2 = this;\n                for(var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++){\n                    middleware[_key] = arguments[_key];\n                }\n                var newMiddlewareList = middleware.map(function(fn) {\n                    var newMiddleware = _objectSpread({\n                        $$type: \"__unknown__\",\n                        $$internal: false,\n                        subscribe: _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop,\n                        started: _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop,\n                        unsubscribe: _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop,\n                        onStateChange: _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop\n                    }, fn({\n                        instantSearchInstance: _this2\n                    }));\n                    _this2.middleware.push({\n                        creator: fn,\n                        instance: newMiddleware\n                    });\n                    return newMiddleware;\n                });\n                // If the instance has already started, we directly subscribe the\n                // middleware so they're notified of changes.\n                if (this.started) {\n                    newMiddlewareList.forEach(function(m) {\n                        m.subscribe();\n                        m.started();\n                    });\n                }\n                return this;\n            }\n        },\n        {\n            key: \"unuse\",\n            value: function unuse() {\n                for(var _len2 = arguments.length, middlewareToUnuse = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                    middlewareToUnuse[_key2] = arguments[_key2];\n                }\n                this.middleware.filter(function(m) {\n                    return middlewareToUnuse.includes(m.creator);\n                }).forEach(function(m) {\n                    return m.instance.unsubscribe();\n                });\n                this.middleware = this.middleware.filter(function(m) {\n                    return !middlewareToUnuse.includes(m.creator);\n                });\n                return this;\n            }\n        },\n        {\n            key: \"EXPERIMENTAL_use\",\n            value: function EXPERIMENTAL_use() {\n                 true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(false, \"The middleware API is now considered stable, so we recommend replacing `EXPERIMENTAL_use` with `use` before upgrading to the next major version.\") : 0;\n                return this.use.apply(this, arguments);\n            }\n        },\n        {\n            key: \"addWidget\",\n            value: function addWidget(widget) {\n                 true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(false, \"addWidget will still be supported in 4.x releases, but not further. It is replaced by `addWidgets([widget])`\") : 0;\n                return this.addWidgets([\n                    widget\n                ]);\n            }\n        },\n        {\n            key: \"addWidgets\",\n            value: function addWidgets(widgets) {\n                if (!Array.isArray(widgets)) {\n                    throw new Error(withUsage(\"The `addWidgets` method expects an array of widgets. Please use `addWidget`.\"));\n                }\n                if (widgets.some(function(widget) {\n                    return typeof widget.init !== \"function\" && typeof widget.render !== \"function\";\n                })) {\n                    throw new Error(withUsage(\"The widget definition expects a `render` and/or an `init` method.\"));\n                }\n                this.mainIndex.addWidgets(widgets);\n                return this;\n            }\n        },\n        {\n            key: \"removeWidget\",\n            value: function removeWidget(widget) {\n                 true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(false, \"removeWidget will still be supported in 4.x releases, but not further. It is replaced by `removeWidgets([widget])`\") : 0;\n                return this.removeWidgets([\n                    widget\n                ]);\n            }\n        },\n        {\n            key: \"removeWidgets\",\n            value: function removeWidgets(widgets) {\n                if (!Array.isArray(widgets)) {\n                    throw new Error(withUsage(\"The `removeWidgets` method expects an array of widgets. Please use `removeWidget`.\"));\n                }\n                if (widgets.some(function(widget) {\n                    return typeof widget.dispose !== \"function\";\n                })) {\n                    throw new Error(withUsage(\"The widget definition expects a `dispose` method.\"));\n                }\n                this.mainIndex.removeWidgets(widgets);\n                return this;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                var _this3 = this;\n                if (this.started) {\n                    throw new Error(withUsage(\"The `start` method has already been called once.\"));\n                }\n                // This Helper is used for the queries, we don't care about its state. The\n                // states are managed at the `index` level. We use this Helper to create\n                // DerivedHelper scoped into the `index` widgets.\n                // In Vue InstantSearch' hydrate, a main helper gets set before start, so\n                // we need to respect this helper as a way to keep all listeners correct.\n                var mainHelper = this.mainHelper || algoliasearch_helper__WEBPACK_IMPORTED_MODULE_1__(this.client, this.indexName);\n                mainHelper.search = function() {\n                    _this3.status = \"loading\";\n                    _this3.scheduleRender(false);\n                     true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.warning)(Boolean(_this3.indexName) || _this3.mainIndex.getWidgets().some(_utils_index_js__WEBPACK_IMPORTED_MODULE_12__.isIndexWidget), \"No indexName provided, nor an explicit index widget in the widgets tree. This is required to be able to display results.\") : 0;\n                    // This solution allows us to keep the exact same API for the users but\n                    // under the hood, we have a different implementation. It should be\n                    // completely transparent for the rest of the codebase. Only this module\n                    // is impacted.\n                    return mainHelper.searchOnlyWithDerivedHelpers();\n                };\n                if (this._searchFunction) {\n                    // this client isn't used to actually search, but required for the helper\n                    // to not throw errors\n                    var fakeClient = {\n                        search: function search() {\n                            return new Promise(_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop);\n                        }\n                    };\n                    this._mainHelperSearch = mainHelper.search.bind(mainHelper);\n                    mainHelper.search = function() {\n                        var mainIndexHelper = _this3.mainIndex.getHelper();\n                        var searchFunctionHelper = algoliasearch_helper__WEBPACK_IMPORTED_MODULE_1__(fakeClient, mainIndexHelper.state.index, mainIndexHelper.state);\n                        searchFunctionHelper.once(\"search\", function(_ref2) {\n                            var state = _ref2.state;\n                            mainIndexHelper.overrideStateWithoutTriggeringChangeEvent(state);\n                            _this3._mainHelperSearch();\n                        });\n                        // Forward state changes from `searchFunctionHelper` to `mainIndexHelper`\n                        searchFunctionHelper.on(\"change\", function(_ref3) {\n                            var state = _ref3.state;\n                            mainIndexHelper.setState(state);\n                        });\n                        _this3._searchFunction(searchFunctionHelper);\n                        return mainHelper;\n                    };\n                }\n                // Only the \"main\" Helper emits the `error` event vs the one for `search`\n                // and `results` that are also emitted on the derived one.\n                mainHelper.on(\"error\", function(_ref4) {\n                    var error = _ref4.error;\n                    if (!(error instanceof Error)) {\n                        // typescript lies here, error is in some cases { name: string, message: string }\n                        var err = error;\n                        error = Object.keys(err).reduce(function(acc, key) {\n                            acc[key] = err[key];\n                            return acc;\n                        }, new Error(err.message));\n                    }\n                    // If an error is emitted, it is re-thrown by events. In previous versions\n                    // we emitted {error}, which is thrown as:\n                    // \"Uncaught, unspecified \\\"error\\\" event. ([object Object])\"\n                    // To avoid breaking changes, we make the error available in both\n                    // `error` and `error.error`\n                    // @MAJOR emit only error\n                    error.error = error;\n                    _this3.error = error;\n                    _this3.status = \"error\";\n                    _this3.scheduleRender(false);\n                    // This needs to execute last because it throws the error.\n                    _this3.emit(\"error\", error);\n                });\n                this.mainHelper = mainHelper;\n                this.middleware.forEach(function(_ref5) {\n                    var instance = _ref5.instance;\n                    instance.subscribe();\n                });\n                this.mainIndex.init({\n                    instantSearchInstance: this,\n                    parent: null,\n                    uiState: this._initialUiState\n                });\n                if (this._initialResults) {\n                    var originalScheduleSearch = this.scheduleSearch;\n                    // We don't schedule a first search when initial results are provided\n                    // because we already have the results to render. This skips the initial\n                    // network request on the browser on `start`.\n                    this.scheduleSearch = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defer)(_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.noop);\n                    // We also skip the initial network request when widgets are dynamically\n                    // added in the first tick (that's the case in all the framework-based flavors).\n                    // When we add a widget to `index`, it calls `scheduleSearch`. We can rely\n                    // on our `defer` util to restore the original `scheduleSearch` value once\n                    // widgets are added to hook back to the regular lifecycle.\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defer)(function() {\n                        _this3.scheduleSearch = originalScheduleSearch;\n                    })();\n                } else if (this.mainIndex.getWidgets().length > 0) {\n                    this.scheduleSearch();\n                }\n                // Keep the previous reference for legacy purpose, some pattern use\n                // the direct Helper access `search.helper` (e.g multi-index).\n                this.helper = this.mainIndex.getHelper();\n                // track we started the search if we add more widgets,\n                // to init them directly after add\n                this.started = true;\n                this.middleware.forEach(function(_ref6) {\n                    var instance = _ref6.instance;\n                    instance.started();\n                });\n            }\n        },\n        {\n            key: \"dispose\",\n            value: function dispose() {\n                var _this$mainHelper2;\n                this.scheduleSearch.cancel();\n                this.scheduleRender.cancel();\n                clearTimeout(this._searchStalledTimer);\n                this.removeWidgets(this.mainIndex.getWidgets());\n                this.mainIndex.dispose();\n                // You can not start an instance two times, therefore a disposed instance\n                // needs to set started as false otherwise this can not be restarted at a\n                // later point.\n                this.started = false;\n                // The helper needs to be reset to perform the next search from a fresh state.\n                // If not reset, it would use the state stored before calling `dispose()`.\n                this.removeAllListeners();\n                (_this$mainHelper2 = this.mainHelper) === null || _this$mainHelper2 === void 0 ? void 0 : _this$mainHelper2.removeAllListeners();\n                this.mainHelper = null;\n                this.helper = null;\n                this.middleware.forEach(function(_ref7) {\n                    var instance = _ref7.instance;\n                    instance.unsubscribe();\n                });\n            }\n        },\n        {\n            key: \"scheduleStalledRender\",\n            value: function scheduleStalledRender() {\n                var _this4 = this;\n                if (!this._searchStalledTimer) {\n                    this._searchStalledTimer = setTimeout(function() {\n                        _this4.status = \"stalled\";\n                        _this4.scheduleRender();\n                    }, this._stalledSearchDelay);\n                }\n            }\n        },\n        {\n            key: \"setUiState\",\n            value: function setUiState(uiState) {\n                var _this5 = this;\n                var callOnStateChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                if (!this.mainHelper) {\n                    throw new Error(withUsage(\"The `start` method needs to be called before `setUiState`.\"));\n                }\n                // We refresh the index UI state to update the local UI state that the\n                // main index passes to the function form of `setUiState`.\n                this.mainIndex.refreshUiState();\n                var nextUiState = typeof uiState === \"function\" ? uiState(this.mainIndex.getWidgetUiState({})) : uiState;\n                if (this.onStateChange && callOnStateChange) {\n                    this.onStateChange({\n                        uiState: nextUiState,\n                        setUiState: function setUiState(finalUiState) {\n                            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_13__.setIndexHelperState)(typeof finalUiState === \"function\" ? finalUiState(nextUiState) : finalUiState, _this5.mainIndex);\n                            _this5.scheduleSearch();\n                            _this5.onInternalStateChange();\n                        }\n                    });\n                } else {\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_13__.setIndexHelperState)(nextUiState, this.mainIndex);\n                    this.scheduleSearch();\n                    this.onInternalStateChange();\n                }\n            }\n        },\n        {\n            key: \"getUiState\",\n            value: function getUiState() {\n                if (this.started) {\n                    // We refresh the index UI state to make sure changes from `refine` are taken in account\n                    this.mainIndex.refreshUiState();\n                }\n                return this.mainIndex.getWidgetUiState({});\n            }\n        },\n        {\n            key: \"createURL\",\n            value: function createURL() {\n                var nextState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                if (!this.started) {\n                    throw new Error(withUsage(\"The `start` method needs to be called before `createURL`.\"));\n                }\n                return this._createURL(nextState);\n            }\n        },\n        {\n            key: \"refresh\",\n            value: function refresh() {\n                if (!this.mainHelper) {\n                    throw new Error(withUsage(\"The `start` method needs to be called before `refresh`.\"));\n                }\n                this.mainHelper.clearCache().search();\n            }\n        }\n    ]);\n    return InstantSearch;\n}(_algolia_events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InstantSearch);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/InstantSearch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/createHelpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/createHelpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ hoganHelpers)\n/* harmony export */ });\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/highlight.js\");\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/reverseHighlight.js\");\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/snippet.js\");\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/reverseSnippet.js\");\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/insights.js\");\n/* harmony import */ var _formatNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatNumber.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/formatNumber.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\nfunction hoganHelpers(_ref) {\n    var numberLocale = _ref.numberLocale;\n    return {\n        formatNumber: function formatNumber(value, render) {\n            return (0,_formatNumber_js__WEBPACK_IMPORTED_MODULE_0__.formatNumber)(Number(render(value)), numberLocale);\n        },\n        highlight: function highlight(options, render) {\n            try {\n                var highlightOptions = JSON.parse(options);\n                return render((0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_objectSpread(_objectSpread({}, highlightOptions), {}, {\n                    hit: this\n                })));\n            } catch (error) {\n                throw new Error('\\nThe highlight helper expects a JSON object of the format:\\n{ \"attribute\": \"name\", \"highlightedTagName\": \"mark\" }');\n            }\n        },\n        reverseHighlight: function reverseHighlight(options, render) {\n            try {\n                var reverseHighlightOptions = JSON.parse(options);\n                return render((0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_objectSpread(_objectSpread({}, reverseHighlightOptions), {}, {\n                    hit: this\n                })));\n            } catch (error) {\n                throw new Error('\\n  The reverseHighlight helper expects a JSON object of the format:\\n  { \"attribute\": \"name\", \"highlightedTagName\": \"mark\" }');\n            }\n        },\n        snippet: function snippet(options, render) {\n            try {\n                var snippetOptions = JSON.parse(options);\n                return render((0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_objectSpread(_objectSpread({}, snippetOptions), {}, {\n                    hit: this\n                })));\n            } catch (error) {\n                throw new Error('\\nThe snippet helper expects a JSON object of the format:\\n{ \"attribute\": \"name\", \"highlightedTagName\": \"mark\" }');\n            }\n        },\n        reverseSnippet: function reverseSnippet(options, render) {\n            try {\n                var reverseSnippetOptions = JSON.parse(options);\n                return render((0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_objectSpread(_objectSpread({}, reverseSnippetOptions), {}, {\n                    hit: this\n                })));\n            } catch (error) {\n                throw new Error('\\n  The reverseSnippet helper expects a JSON object of the format:\\n  { \"attribute\": \"name\", \"highlightedTagName\": \"mark\" }');\n            }\n        },\n        insights: function insights(options, render) {\n            try {\n                var _JSON$parse = JSON.parse(options), method = _JSON$parse.method, payload = _JSON$parse.payload;\n                return render((0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(method, _objectSpread({\n                    objectIDs: [\n                        this.objectID\n                    ]\n                }, payload)));\n            } catch (error) {\n                throw new Error('\\nThe insights helper expects a JSON object of the format:\\n{ \"method\": \"method-name\", \"payload\": { \"eventName\": \"name of the event\" } }');\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/createHelpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/formatNumber.js":
/*!**************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/formatNumber.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatNumber: () => (/* binding */ formatNumber)\n/* harmony export */ });\nfunction formatNumber(value, numberLocale) {\n    return value.toLocaleString(numberLocale);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvZm9ybWF0TnVtYmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxhQUFhQyxLQUFLLEVBQUVDLFlBQVk7SUFDOUMsT0FBT0QsTUFBTUUsY0FBYyxDQUFDRDtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL2Zvcm1hdE51bWJlci5qcz9iN2U3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXIodmFsdWUsIG51bWJlckxvY2FsZSkge1xuICByZXR1cm4gdmFsdWUudG9Mb2NhbGVTdHJpbmcobnVtYmVyTG9jYWxlKTtcbn0iXSwibmFtZXMiOlsiZm9ybWF0TnVtYmVyIiwidmFsdWUiLCJudW1iZXJMb2NhbGUiLCJ0b0xvY2FsZVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/formatNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/routers/history.js":
/*!*****************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/routers/history.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ historyRouter)\n/* harmony export */ });\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/instantsearch.js/node_modules/qs/lib/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\nvar setWindowTitle = function setWindowTitle(title) {\n    if (title) {\n        // This function is only executed on browsers so we can disable this check.\n        // eslint-disable-next-line no-restricted-globals\n        window.document.title = title;\n    }\n};\nvar BrowserHistory = /*#__PURE__*/ function() {\n    /**\n   * Transforms a UI state into a title for the page.\n   */ /**\n   * Time in milliseconds before performing a write in the history.\n   * It prevents from adding too many entries in the history and\n   * makes the back button more usable.\n   *\n   * @default 400\n   */ /**\n   * Creates a full URL based on the route state.\n   * The storage adaptor maps all syncable keys to the query string of the URL.\n   */ /**\n   * Parses the URL into a route state.\n   * It should be symmetrical to `createURL`.\n   */ /**\n   * Returns the location to store in the history.\n   * @default () => window.location\n   */ /**\n   * Indicates if last action was back/forward in the browser.\n   */ /**\n   * Indicates whether the history router is disposed or not.\n   */ /**\n   * Indicates the window.history.length before the last call to\n   * window.history.pushState (called in `write`).\n   * It allows to determine if a `pushState` has been triggered elsewhere,\n   * and thus to prevent the `write` method from calling `pushState`.\n   */ /**\n   * Initializes a new storage provider that syncs the search state to the URL\n   * using web APIs (`window.location.pushState` and `onpopstate` event).\n   */ function BrowserHistory(_ref) {\n        var _this = this;\n        var windowTitle = _ref.windowTitle, _ref$writeDelay = _ref.writeDelay, writeDelay = _ref$writeDelay === void 0 ? 400 : _ref$writeDelay, createURL = _ref.createURL, parseURL = _ref.parseURL, getLocation = _ref.getLocation, start = _ref.start, dispose = _ref.dispose, push = _ref.push;\n        _classCallCheck(this, BrowserHistory);\n        _defineProperty(this, \"$$type\", \"ais.browser\");\n        _defineProperty(this, \"windowTitle\", void 0);\n        _defineProperty(this, \"writeDelay\", void 0);\n        _defineProperty(this, \"_createURL\", void 0);\n        _defineProperty(this, \"parseURL\", void 0);\n        _defineProperty(this, \"getLocation\", void 0);\n        _defineProperty(this, \"writeTimer\", void 0);\n        _defineProperty(this, \"_onPopState\", void 0);\n        _defineProperty(this, \"inPopState\", false);\n        _defineProperty(this, \"isDisposed\", false);\n        _defineProperty(this, \"latestAcknowledgedHistory\", 0);\n        _defineProperty(this, \"_start\", void 0);\n        _defineProperty(this, \"_dispose\", void 0);\n        _defineProperty(this, \"_push\", void 0);\n        this.windowTitle = windowTitle;\n        this.writeTimer = undefined;\n        this.writeDelay = writeDelay;\n        this._createURL = createURL;\n        this.parseURL = parseURL;\n        this.getLocation = getLocation;\n        this._start = start;\n        this._dispose = dispose;\n        this._push = push;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref2) {\n            var window1 = _ref2.window;\n            var title = _this.windowTitle && _this.windowTitle(_this.read());\n            setWindowTitle(title);\n            _this.latestAcknowledgedHistory = window1.history.length;\n        });\n    }\n    /**\n   * Reads the URL and returns a syncable UI search state.\n   */ _createClass(BrowserHistory, [\n        {\n            key: \"read\",\n            value: function read() {\n                return this.parseURL({\n                    qsModule: qs__WEBPACK_IMPORTED_MODULE_0__,\n                    location: this.getLocation()\n                });\n            }\n        },\n        {\n            key: \"write\",\n            value: function write(routeState) {\n                var _this2 = this;\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref3) {\n                    var window1 = _ref3.window;\n                    var url = _this2.createURL(routeState);\n                    var title = _this2.windowTitle && _this2.windowTitle(routeState);\n                    if (_this2.writeTimer) {\n                        clearTimeout(_this2.writeTimer);\n                    }\n                    _this2.writeTimer = setTimeout(function() {\n                        setWindowTitle(title);\n                        if (_this2.shouldWrite(url)) {\n                            if (_this2._push) {\n                                _this2._push(url);\n                            } else {\n                                window1.history.pushState(routeState, title || \"\", url);\n                            }\n                            _this2.latestAcknowledgedHistory = window1.history.length;\n                        }\n                        _this2.inPopState = false;\n                        _this2.writeTimer = undefined;\n                    }, _this2.writeDelay);\n                });\n            }\n        },\n        {\n            key: \"onUpdate\",\n            value: function onUpdate(callback) {\n                var _this3 = this;\n                if (this._start) {\n                    this._start(function() {\n                        callback(_this3.read());\n                    });\n                }\n                this._onPopState = function() {\n                    if (_this3.writeTimer) {\n                        clearTimeout(_this3.writeTimer);\n                        _this3.writeTimer = undefined;\n                    }\n                    _this3.inPopState = true;\n                    // We always read the state from the URL because the state of the history\n                    // can be incorect in some cases (e.g. using React Router).\n                    callback(_this3.read());\n                };\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref4) {\n                    var window1 = _ref4.window;\n                    window1.addEventListener(\"popstate\", _this3._onPopState);\n                });\n            }\n        },\n        {\n            key: \"createURL\",\n            value: function createURL(routeState) {\n                var url = this._createURL({\n                    qsModule: qs__WEBPACK_IMPORTED_MODULE_0__,\n                    routeState: routeState,\n                    location: this.getLocation()\n                });\n                if (true) {\n                    try {\n                        // We just want to check if the URL is valid.\n                        // eslint-disable-next-line no-new\n                        new URL(url);\n                    } catch (e) {\n                         true ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.warning)(false, \"The URL returned by the `createURL` function is invalid.\\nPlease make sure it returns an absolute URL to avoid issues, e.g: `https://algolia.com/search?query=iphone`.\") : 0;\n                    }\n                }\n                return url;\n            }\n        },\n        {\n            key: \"dispose\",\n            value: function dispose() {\n                var _this4 = this;\n                if (this._dispose) {\n                    this._dispose();\n                }\n                this.isDisposed = true;\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref5) {\n                    var window1 = _ref5.window;\n                    if (_this4._onPopState) {\n                        window1.removeEventListener(\"popstate\", _this4._onPopState);\n                    }\n                });\n                if (this.writeTimer) {\n                    clearTimeout(this.writeTimer);\n                }\n                this.write({});\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.isDisposed = false;\n            }\n        },\n        {\n            key: \"shouldWrite\",\n            value: function shouldWrite(url) {\n                var _this5 = this;\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref6) {\n                    var window1 = _ref6.window;\n                    // We do want to `pushState` if:\n                    // - the router is not disposed, IS.js needs to update the URL\n                    // OR\n                    // - the last write was from InstantSearch.js\n                    // (unlike a SPA, where it would have last written)\n                    var lastPushWasByISAfterDispose = !(_this5.isDisposed && _this5.latestAcknowledgedHistory !== window1.history.length);\n                    return(// When the last state change was through popstate, the IS.js state changes,\n                    // but that should not write the URL.\n                    !_this5.inPopState && // When the previous pushState after dispose was by IS.js, we want to write the URL.\n                    lastPushWasByISAfterDispose && // When the URL is the same as the current one, we do not want to write it.\n                    url !== window1.location.href);\n                });\n            }\n        }\n    ]);\n    return BrowserHistory;\n}();\nfunction historyRouter() {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref7$createURL = _ref7.createURL, createURL = _ref7$createURL === void 0 ? function(_ref8) {\n        var qsModule = _ref8.qsModule, routeState = _ref8.routeState, location = _ref8.location;\n        var protocol = location.protocol, hostname = location.hostname, _location$port = location.port, port = _location$port === void 0 ? \"\" : _location$port, pathname = location.pathname, hash = location.hash;\n        var queryString = qsModule.stringify(routeState);\n        var portWithPrefix = port === \"\" ? \"\" : \":\".concat(port);\n        // IE <= 11 has no proper `location.origin` so we cannot rely on it.\n        if (!queryString) {\n            return \"\".concat(protocol, \"//\").concat(hostname).concat(portWithPrefix).concat(pathname).concat(hash);\n        }\n        return \"\".concat(protocol, \"//\").concat(hostname).concat(portWithPrefix).concat(pathname, \"?\").concat(queryString).concat(hash);\n    } : _ref7$createURL, _ref7$parseURL = _ref7.parseURL, parseURL = _ref7$parseURL === void 0 ? function(_ref9) {\n        var qsModule = _ref9.qsModule, location = _ref9.location;\n        // `qs` by default converts arrays with more than 20 items to an object.\n        // We want to avoid this because the data structure manipulated can therefore vary.\n        // Setting the limit to `100` seems a good number because the engine's default is 100\n        // (it can go up to 1000 but it is very unlikely to select more than 100 items in the UI).\n        //\n        // Using an `arrayLimit` of `n` allows `n + 1` items.\n        //\n        // See:\n        //   - https://github.com/ljharb/qs#parsing-arrays\n        //   - https://www.algolia.com/doc/api-reference/api-parameters/maxValuesPerFacet/\n        return qsModule.parse(location.search.slice(1), {\n            arrayLimit: 99\n        });\n    } : _ref7$parseURL, _ref7$writeDelay = _ref7.writeDelay, writeDelay = _ref7$writeDelay === void 0 ? 400 : _ref7$writeDelay, windowTitle = _ref7.windowTitle, _ref7$getLocation = _ref7.getLocation, getLocation = _ref7$getLocation === void 0 ? function() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref10) {\n            var window1 = _ref10.window;\n            return window1.location;\n        }, {\n            fallback: function fallback() {\n                throw new Error(\"You need to provide `getLocation` to the `history` router in environments where `window` does not exist.\");\n            }\n        });\n    } : _ref7$getLocation, start = _ref7.start, dispose = _ref7.dispose, push = _ref7.push;\n    return new BrowserHistory({\n        createURL: createURL,\n        parseURL: parseURL,\n        writeDelay: writeDelay,\n        windowTitle: windowTitle,\n        getLocation: getLocation,\n        start: start,\n        dispose: dispose,\n        push: push\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/routers/history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/stateMappings/simple.js":
/*!**********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/stateMappings/simple.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ simpleStateMapping)\n/* harmony export */ });\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"configure\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction getIndexStateWithoutConfigure(uiState) {\n    var configure = uiState.configure, trackedUiState = _objectWithoutProperties(uiState, _excluded);\n    return trackedUiState;\n}\n// technically a URL could contain any key, since users provide it,\n// which is why the input to this function is UiState, not something\n// which excludes \"configure\" as this function does.\nfunction simpleStateMapping() {\n    return {\n        $$type: \"ais.simple\",\n        stateToRoute: function stateToRoute(uiState) {\n            return Object.keys(uiState).reduce(function(state, indexId) {\n                return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, indexId, getIndexStateWithoutConfigure(uiState[indexId])));\n            }, {});\n        },\n        routeToState: function routeToState() {\n            var routeState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return Object.keys(routeState).reduce(function(state, indexId) {\n                return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, indexId, getIndexStateWithoutConfigure(routeState[indexId])));\n            }, {});\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvc3RhdGVNYXBwaW5ncy9zaW1wbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFFBQVFDLEdBQUc7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixHQUFHO1FBQUksT0FBTyxPQUFPQTtJQUFLLElBQUksU0FBVUEsR0FBRztRQUFJLE9BQU9BLE9BQU8sY0FBYyxPQUFPQyxVQUFVRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUssR0FBR0QsUUFBUUM7QUFBTTtBQUMvVSxJQUFJSyxZQUFZO0lBQUM7Q0FBWTtBQUM3QixTQUFTQyxRQUFRQyxNQUFNLEVBQUVDLGNBQWM7SUFBSSxJQUFJQyxPQUFPQyxPQUFPRCxJQUFJLENBQUNGO0lBQVMsSUFBSUcsT0FBT0MscUJBQXFCLEVBQUU7UUFBRSxJQUFJQyxVQUFVRixPQUFPQyxxQkFBcUIsQ0FBQ0o7UUFBU0Msa0JBQW1CSSxDQUFBQSxVQUFVQSxRQUFRQyxNQUFNLENBQUMsU0FBVUMsR0FBRztZQUFJLE9BQU9KLE9BQU9LLHdCQUF3QixDQUFDUixRQUFRTyxLQUFLRSxVQUFVO1FBQUUsRUFBQyxHQUFJUCxLQUFLUSxJQUFJLENBQUNDLEtBQUssQ0FBQ1QsTUFBTUc7SUFBVTtJQUFFLE9BQU9IO0FBQU07QUFDcFYsU0FBU1UsY0FBY0MsTUFBTTtJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7UUFBRSxJQUFJRyxTQUFTLFFBQVFGLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHQyxTQUFTLENBQUNELEVBQUUsR0FBRyxDQUFDO1FBQUdBLElBQUksSUFBSWYsUUFBUUksT0FBT2MsU0FBUyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUlDLGdCQUFnQlAsUUFBUU0sS0FBS0YsTUFBTSxDQUFDRSxJQUFJO1FBQUcsS0FBS2hCLE9BQU9rQix5QkFBeUIsR0FBR2xCLE9BQU9tQixnQkFBZ0IsQ0FBQ1QsUUFBUVYsT0FBT2tCLHlCQUF5QixDQUFDSixXQUFXbEIsUUFBUUksT0FBT2MsU0FBU0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSWhCLE9BQU9vQixjQUFjLENBQUNWLFFBQVFNLEtBQUtoQixPQUFPSyx3QkFBd0IsQ0FBQ1MsUUFBUUU7UUFBTztJQUFJO0lBQUUsT0FBT047QUFBUTtBQUN6ZixTQUFTTyxnQkFBZ0IzQixHQUFHLEVBQUUwQixHQUFHLEVBQUVLLEtBQUs7SUFBSUwsTUFBTU0sZUFBZU47SUFBTSxJQUFJQSxPQUFPMUIsS0FBSztRQUFFVSxPQUFPb0IsY0FBYyxDQUFDOUIsS0FBSzBCLEtBQUs7WUFBRUssT0FBT0E7WUFBT2YsWUFBWTtZQUFNaUIsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVsQyxHQUFHLENBQUMwQixJQUFJLEdBQUdLO0lBQU87SUFBRSxPQUFPL0I7QUFBSztBQUMzTyxTQUFTZ0MsZUFBZUcsR0FBRztJQUFJLElBQUlULE1BQU1VLGFBQWFELEtBQUs7SUFBVyxPQUFPcEMsUUFBUTJCLFNBQVMsV0FBV0EsTUFBTVcsT0FBT1g7QUFBTTtBQUM1SCxTQUFTVSxhQUFhRSxLQUFLLEVBQUVDLElBQUk7SUFBSSxJQUFJeEMsUUFBUXVDLFdBQVcsWUFBWUEsVUFBVSxNQUFNLE9BQU9BO0lBQU8sSUFBSUUsT0FBT0YsS0FBSyxDQUFDckMsT0FBT3dDLFdBQVcsQ0FBQztJQUFFLElBQUlELFNBQVNFLFdBQVc7UUFBRSxJQUFJQyxNQUFNSCxLQUFLSSxJQUFJLENBQUNOLE9BQU9DLFFBQVE7UUFBWSxJQUFJeEMsUUFBUTRDLFNBQVMsVUFBVSxPQUFPQTtRQUFLLE1BQU0sSUFBSUUsVUFBVTtJQUFpRDtJQUFFLE9BQU8sQ0FBQ04sU0FBUyxXQUFXRixTQUFTUyxNQUFLLEVBQUdSO0FBQVE7QUFDNVgsU0FBU1MseUJBQXlCdkIsTUFBTSxFQUFFd0IsUUFBUTtJQUFJLElBQUl4QixVQUFVLE1BQU0sT0FBTyxDQUFDO0lBQUcsSUFBSUosU0FBUzZCLDhCQUE4QnpCLFFBQVF3QjtJQUFXLElBQUl0QixLQUFLTDtJQUFHLElBQUlYLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSXVDLG1CQUFtQnhDLE9BQU9DLHFCQUFxQixDQUFDYTtRQUFTLElBQUtILElBQUksR0FBR0EsSUFBSTZCLGlCQUFpQjNCLE1BQU0sRUFBRUYsSUFBSztZQUFFSyxNQUFNd0IsZ0JBQWdCLENBQUM3QixFQUFFO1lBQUUsSUFBSTJCLFNBQVNHLE9BQU8sQ0FBQ3pCLFFBQVEsR0FBRztZQUFVLElBQUksQ0FBQ2hCLE9BQU9OLFNBQVMsQ0FBQ2dELG9CQUFvQixDQUFDUixJQUFJLENBQUNwQixRQUFRRSxNQUFNO1lBQVVOLE1BQU0sQ0FBQ00sSUFBSSxHQUFHRixNQUFNLENBQUNFLElBQUk7UUFBRTtJQUFFO0lBQUUsT0FBT047QUFBUTtBQUMzZSxTQUFTNkIsOEJBQThCekIsTUFBTSxFQUFFd0IsUUFBUTtJQUFJLElBQUl4QixVQUFVLE1BQU0sT0FBTyxDQUFDO0lBQUcsSUFBSUosU0FBUyxDQUFDO0lBQUcsSUFBSWlDLGFBQWEzQyxPQUFPRCxJQUFJLENBQUNlO0lBQVMsSUFBSUUsS0FBS0w7SUFBRyxJQUFLQSxJQUFJLEdBQUdBLElBQUlnQyxXQUFXOUIsTUFBTSxFQUFFRixJQUFLO1FBQUVLLE1BQU0yQixVQUFVLENBQUNoQyxFQUFFO1FBQUUsSUFBSTJCLFNBQVNHLE9BQU8sQ0FBQ3pCLFFBQVEsR0FBRztRQUFVTixNQUFNLENBQUNNLElBQUksR0FBR0YsTUFBTSxDQUFDRSxJQUFJO0lBQUU7SUFBRSxPQUFPTjtBQUFRO0FBQ2xULFNBQVNrQyw4QkFBOEJDLE9BQU87SUFDNUMsSUFBSUMsWUFBWUQsUUFBUUMsU0FBUyxFQUMvQkMsaUJBQWlCVix5QkFBeUJRLFNBQVNsRDtJQUNyRCxPQUFPb0Q7QUFDVDtBQUVBLG1FQUFtRTtBQUNuRSxvRUFBb0U7QUFDcEUsb0RBQW9EO0FBQ3JDLFNBQVNDO0lBQ3RCLE9BQU87UUFDTEMsUUFBUTtRQUNSQyxjQUFjLFNBQVNBLGFBQWFMLE9BQU87WUFDekMsT0FBTzdDLE9BQU9ELElBQUksQ0FBQzhDLFNBQVNNLE1BQU0sQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLE9BQU87Z0JBQ3pELE9BQU81QyxjQUFjQSxjQUFjLENBQUMsR0FBRzJDLFFBQVEsQ0FBQyxHQUFHbkMsZ0JBQWdCLENBQUMsR0FBR29DLFNBQVNULDhCQUE4QkMsT0FBTyxDQUFDUSxRQUFRO1lBQ2hJLEdBQUcsQ0FBQztRQUNOO1FBQ0FDLGNBQWMsU0FBU0E7WUFDckIsSUFBSUMsYUFBYTNDLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLb0IsWUFBWXBCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUN0RixPQUFPWixPQUFPRCxJQUFJLENBQUN3RCxZQUFZSixNQUFNLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxPQUFPO2dCQUM1RCxPQUFPNUMsY0FBY0EsY0FBYyxDQUFDLEdBQUcyQyxRQUFRLENBQUMsR0FBR25DLGdCQUFnQixDQUFDLEdBQUdvQyxTQUFTVCw4QkFBOEJXLFVBQVUsQ0FBQ0YsUUFBUTtZQUNuSSxHQUFHLENBQUM7UUFDTjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi9zdGF0ZU1hcHBpbmdzL3NpbXBsZS5qcz8zYzkzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbnZhciBfZXhjbHVkZWQgPSBbXCJjb25maWd1cmVcIl07XG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gZ2V0SW5kZXhTdGF0ZVdpdGhvdXRDb25maWd1cmUodWlTdGF0ZSkge1xuICB2YXIgY29uZmlndXJlID0gdWlTdGF0ZS5jb25maWd1cmUsXG4gICAgdHJhY2tlZFVpU3RhdGUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXModWlTdGF0ZSwgX2V4Y2x1ZGVkKTtcbiAgcmV0dXJuIHRyYWNrZWRVaVN0YXRlO1xufVxuXG4vLyB0ZWNobmljYWxseSBhIFVSTCBjb3VsZCBjb250YWluIGFueSBrZXksIHNpbmNlIHVzZXJzIHByb3ZpZGUgaXQsXG4vLyB3aGljaCBpcyB3aHkgdGhlIGlucHV0IHRvIHRoaXMgZnVuY3Rpb24gaXMgVWlTdGF0ZSwgbm90IHNvbWV0aGluZ1xuLy8gd2hpY2ggZXhjbHVkZXMgXCJjb25maWd1cmVcIiBhcyB0aGlzIGZ1bmN0aW9uIGRvZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaW1wbGVTdGF0ZU1hcHBpbmcoKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlOiAnYWlzLnNpbXBsZScsXG4gICAgc3RhdGVUb1JvdXRlOiBmdW5jdGlvbiBzdGF0ZVRvUm91dGUodWlTdGF0ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHVpU3RhdGUpLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGluZGV4SWQpIHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RhdGUpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBpbmRleElkLCBnZXRJbmRleFN0YXRlV2l0aG91dENvbmZpZ3VyZSh1aVN0YXRlW2luZGV4SWRdKSkpO1xuICAgICAgfSwge30pO1xuICAgIH0sXG4gICAgcm91dGVUb1N0YXRlOiBmdW5jdGlvbiByb3V0ZVRvU3RhdGUoKSB7XG4gICAgICB2YXIgcm91dGVTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMocm91dGVTdGF0ZSkucmVkdWNlKGZ1bmN0aW9uIChzdGF0ZSwgaW5kZXhJZCkge1xuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSksIHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIGluZGV4SWQsIGdldEluZGV4U3RhdGVXaXRob3V0Q29uZmlndXJlKHJvdXRlU3RhdGVbaW5kZXhJZF0pKSk7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICB9O1xufSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9leGNsdWRlZCIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwiZ2V0SW5kZXhTdGF0ZVdpdGhvdXRDb25maWd1cmUiLCJ1aVN0YXRlIiwiY29uZmlndXJlIiwidHJhY2tlZFVpU3RhdGUiLCJzaW1wbGVTdGF0ZU1hcHBpbmciLCIkJHR5cGUiLCJzdGF0ZVRvUm91dGUiLCJyZWR1Y2UiLCJzdGF0ZSIsImluZGV4SWQiLCJyb3V0ZVRvU3RhdGUiLCJyb3V0ZVN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/stateMappings/simple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/suit.js":
/*!******************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/suit.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   component: () => (/* binding */ component)\n/* harmony export */ });\nvar NAMESPACE = \"ais\";\nvar component = function component(componentName) {\n    return function() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, descendantName = _ref.descendantName, modifierName = _ref.modifierName;\n        var descendent = descendantName ? \"-\".concat(descendantName) : \"\";\n        var modifier = modifierName ? \"--\".concat(modifierName) : \"\";\n        return \"\".concat(NAMESPACE, \"-\").concat(componentName).concat(descendent).concat(modifier);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvc3VpdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsWUFBWTtBQUNULElBQUlDLFlBQVksU0FBU0EsVUFBVUMsYUFBYTtJQUNyRCxPQUFPO1FBQ0wsSUFBSUMsT0FBT0MsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUtFLFlBQVlGLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUM5RUcsaUJBQWlCSixLQUFLSSxjQUFjLEVBQ3BDQyxlQUFlTCxLQUFLSyxZQUFZO1FBQ2xDLElBQUlDLGFBQWFGLGlCQUFpQixJQUFJRyxNQUFNLENBQUNILGtCQUFrQjtRQUMvRCxJQUFJSSxXQUFXSCxlQUFlLEtBQUtFLE1BQU0sQ0FBQ0YsZ0JBQWdCO1FBQzFELE9BQU8sR0FBR0UsTUFBTSxDQUFDVixXQUFXLEtBQUtVLE1BQU0sQ0FBQ1IsZUFBZVEsTUFBTSxDQUFDRCxZQUFZQyxNQUFNLENBQUNDO0lBQ25GO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3N1aXQuanM/MzdjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTkFNRVNQQUNFID0gJ2Fpcyc7XG5leHBvcnQgdmFyIGNvbXBvbmVudCA9IGZ1bmN0aW9uIGNvbXBvbmVudChjb21wb25lbnROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgZGVzY2VuZGFudE5hbWUgPSBfcmVmLmRlc2NlbmRhbnROYW1lLFxuICAgICAgbW9kaWZpZXJOYW1lID0gX3JlZi5tb2RpZmllck5hbWU7XG4gICAgdmFyIGRlc2NlbmRlbnQgPSBkZXNjZW5kYW50TmFtZSA/IFwiLVwiLmNvbmNhdChkZXNjZW5kYW50TmFtZSkgOiAnJztcbiAgICB2YXIgbW9kaWZpZXIgPSBtb2RpZmllck5hbWUgPyBcIi0tXCIuY29uY2F0KG1vZGlmaWVyTmFtZSkgOiAnJztcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1cIikuY29uY2F0KGNvbXBvbmVudE5hbWUpLmNvbmNhdChkZXNjZW5kZW50KS5jb25jYXQobW9kaWZpZXIpO1xuICB9O1xufTsiXSwibmFtZXMiOlsiTkFNRVNQQUNFIiwiY29tcG9uZW50IiwiY29tcG9uZW50TmFtZSIsIl9yZWYiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkZXNjZW5kYW50TmFtZSIsIm1vZGlmaWVyTmFtZSIsImRlc2NlbmRlbnQiLCJjb25jYXQiLCJtb2RpZmllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/suit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/capitalize.js":
/*!******************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/capitalize.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalize: () => (/* binding */ capitalize)\n/* harmony export */ });\nfunction capitalize(text) {\n    return text.toString().charAt(0).toUpperCase() + text.toString().slice(1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsV0FBV0MsSUFBSTtJQUM3QixPQUFPQSxLQUFLQyxRQUFRLEdBQUdDLE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtILEtBQUtDLFFBQVEsR0FBR0csS0FBSyxDQUFDO0FBQ3pFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvY2FwaXRhbGl6ZS5qcz8zYjEyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHRleHQpIHtcbiAgcmV0dXJuIHRleHQudG9TdHJpbmcoKS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRleHQudG9TdHJpbmcoKS5zbGljZSgxKTtcbn0iXSwibmFtZXMiOlsiY2FwaXRhbGl6ZSIsInRleHQiLCJ0b1N0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/capitalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js":
/*!*************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkIndexUiState: () => (/* binding */ checkIndexUiState)\n/* harmony export */ });\n/* harmony import */ var _capitalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./capitalize.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/capitalize.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _typedObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typedObject.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/typedObject.js\");\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\n\n// Some connectors are responsible for multiple widgets so we need\n// to map them.\nfunction getWidgetNames(connectorName) {\n    switch(connectorName){\n        case \"range\":\n            return [];\n        case \"menu\":\n            return [\n                \"menu\",\n                \"menuSelect\"\n            ];\n        default:\n            return [\n                connectorName\n            ];\n    }\n}\nvar stateToWidgetsMap = {\n    query: {\n        connectors: [\n            \"connectSearchBox\"\n        ],\n        widgets: [\n            \"ais.searchBox\",\n            \"ais.autocomplete\",\n            \"ais.voiceSearch\"\n        ]\n    },\n    refinementList: {\n        connectors: [\n            \"connectRefinementList\"\n        ],\n        widgets: [\n            \"ais.refinementList\"\n        ]\n    },\n    menu: {\n        connectors: [\n            \"connectMenu\"\n        ],\n        widgets: [\n            \"ais.menu\"\n        ]\n    },\n    hierarchicalMenu: {\n        connectors: [\n            \"connectHierarchicalMenu\"\n        ],\n        widgets: [\n            \"ais.hierarchicalMenu\"\n        ]\n    },\n    numericMenu: {\n        connectors: [\n            \"connectNumericMenu\"\n        ],\n        widgets: [\n            \"ais.numericMenu\"\n        ]\n    },\n    ratingMenu: {\n        connectors: [\n            \"connectRatingMenu\"\n        ],\n        widgets: [\n            \"ais.ratingMenu\"\n        ]\n    },\n    range: {\n        connectors: [\n            \"connectRange\"\n        ],\n        widgets: [\n            \"ais.rangeInput\",\n            \"ais.rangeSlider\",\n            \"ais.range\"\n        ]\n    },\n    toggle: {\n        connectors: [\n            \"connectToggleRefinement\"\n        ],\n        widgets: [\n            \"ais.toggleRefinement\"\n        ]\n    },\n    geoSearch: {\n        connectors: [\n            \"connectGeoSearch\"\n        ],\n        widgets: [\n            \"ais.geoSearch\"\n        ]\n    },\n    sortBy: {\n        connectors: [\n            \"connectSortBy\"\n        ],\n        widgets: [\n            \"ais.sortBy\"\n        ]\n    },\n    page: {\n        connectors: [\n            \"connectPagination\"\n        ],\n        widgets: [\n            \"ais.pagination\",\n            \"ais.infiniteHits\"\n        ]\n    },\n    hitsPerPage: {\n        connectors: [\n            \"connectHitsPerPage\"\n        ],\n        widgets: [\n            \"ais.hitsPerPage\"\n        ]\n    },\n    configure: {\n        connectors: [\n            \"connectConfigure\"\n        ],\n        widgets: [\n            \"ais.configure\"\n        ]\n    },\n    places: {\n        connectors: [],\n        widgets: [\n            \"ais.places\"\n        ]\n    }\n};\nfunction checkIndexUiState(_ref) {\n    var index = _ref.index, indexUiState = _ref.indexUiState;\n    var mountedWidgets = index.getWidgets().map(function(widget) {\n        return widget.$$type;\n    }).filter(Boolean);\n    var missingWidgets = (0,_typedObject_js__WEBPACK_IMPORTED_MODULE_0__.keys)(indexUiState).reduce(function(acc, parameter) {\n        var widgetUiState = stateToWidgetsMap[parameter];\n        if (!widgetUiState) {\n            return acc;\n        }\n        var requiredWidgets = widgetUiState.widgets;\n        if (requiredWidgets && !requiredWidgets.some(function(requiredWidget) {\n            return mountedWidgets.includes(requiredWidget);\n        })) {\n            acc.push([\n                parameter,\n                {\n                    connectors: widgetUiState.connectors,\n                    widgets: widgetUiState.widgets.map(function(widgetIdentifier) {\n                        return widgetIdentifier.split(\"ais.\")[1];\n                    })\n                }\n            ]);\n        }\n        return acc;\n    }, []);\n     true ? (0,_logger_js__WEBPACK_IMPORTED_MODULE_1__.warning)(missingWidgets.length === 0, 'The UI state for the index \"'.concat(index.getIndexId(), '\" is not consistent with the widgets mounted.\\n\\nThis can happen when the UI state is specified via `initialUiState`, `routing` or `setUiState` but that the widgets responsible for this state were not added. This results in those query parameters not being sent to the API.\\n\\nTo fully reflect the state, some widgets need to be added to the index \"').concat(index.getIndexId(), '\":\\n\\n').concat(missingWidgets.map(function(_ref2) {\n        var _ref4;\n        var _ref3 = _slicedToArray(_ref2, 2), stateParameter = _ref3[0], widgets = _ref3[1].widgets;\n        return \"- `\".concat(stateParameter, \"` needs one of these widgets: \").concat((_ref4 = []).concat.apply(_ref4, _toConsumableArray(widgets.map(function(name) {\n            return getWidgetNames(name);\n        }))).map(function(name) {\n            return '\"'.concat(name, '\"');\n        }).join(\", \"));\n    }).join(\"\\n\"), '\\n\\nIf you do not wish to display widgets but still want to support their search parameters, you can mount \"virtual widgets\" that don\\'t render anything:\\n\\n```\\n').concat(missingWidgets.filter(function(_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2), _stateParameter = _ref6[0], connectors = _ref6[1].connectors;\n        return connectors.length > 0;\n    }).map(function(_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2), _stateParameter = _ref8[0], _ref8$ = _ref8[1], connectors = _ref8$.connectors, widgets = _ref8$.widgets;\n        var capitalizedWidget = (0,_capitalize_js__WEBPACK_IMPORTED_MODULE_2__.capitalize)(widgets[0]);\n        var connectorName = connectors[0];\n        return \"const virtual\".concat(capitalizedWidget, \" = \").concat(connectorName, \"(() => null);\");\n    }).join(\"\\n\"), \"\\n\\nsearch.addWidgets([\\n  \").concat(missingWidgets.filter(function(_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2), _stateParameter = _ref10[0], connectors = _ref10[1].connectors;\n        return connectors.length > 0;\n    }).map(function(_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2), _stateParameter = _ref12[0], widgets = _ref12[1].widgets;\n        var capitalizedWidget = (0,_capitalize_js__WEBPACK_IMPORTED_MODULE_2__.capitalize)(widgets[0]);\n        return \"virtual\".concat(capitalizedWidget, \"({ /* ... */ })\");\n    }).join(\",\\n  \"), \"\\n]);\\n```\\n\\nIf you're using custom widgets that do set these query parameters, we recommend using connectors instead.\\n\\nSee https://www.algolia.com/doc/guides/building-search-ui/widgets/customize-an-existing-widget/js/#customize-the-complete-ui-of-the-widgets\")) : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkRendering.js":
/*!**********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/checkRendering.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkRendering: () => (/* binding */ checkRendering)\n/* harmony export */ });\n/* harmony import */ var _getObjectType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getObjectType.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getObjectType.js\");\n\nfunction checkRendering(rendering, usage) {\n    if (rendering === undefined || typeof rendering !== \"function\") {\n        throw new Error(\"The render function is not valid (received type \".concat((0,_getObjectType_js__WEBPACK_IMPORTED_MODULE_0__.getObjectType)(rendering), \").\\n\\n\").concat(usage));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvY2hlY2tSZW5kZXJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUQ7QUFDNUMsU0FBU0MsZUFBZUMsU0FBUyxFQUFFQyxLQUFLO0lBQzdDLElBQUlELGNBQWNFLGFBQWEsT0FBT0YsY0FBYyxZQUFZO1FBQzlELE1BQU0sSUFBSUcsTUFBTSxtREFBbURDLE1BQU0sQ0FBQ04sZ0VBQWFBLENBQUNFLFlBQVksVUFBVUksTUFBTSxDQUFDSDtJQUN2SDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvY2hlY2tSZW5kZXJpbmcuanM/ZTJmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPYmplY3RUeXBlIH0gZnJvbSBcIi4vZ2V0T2JqZWN0VHlwZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVuZGVyaW5nKHJlbmRlcmluZywgdXNhZ2UpIHtcbiAgaWYgKHJlbmRlcmluZyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiByZW5kZXJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVuZGVyIGZ1bmN0aW9uIGlzIG5vdCB2YWxpZCAocmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQoZ2V0T2JqZWN0VHlwZShyZW5kZXJpbmcpLCBcIikuXFxuXFxuXCIpLmNvbmNhdCh1c2FnZSkpO1xuICB9XG59Il0sIm5hbWVzIjpbImdldE9iamVjdFR5cGUiLCJjaGVja1JlbmRlcmluZyIsInJlbmRlcmluZyIsInVzYWdlIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkRendering.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js":
/*!******************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatHighlightedParts: () => (/* binding */ concatHighlightedParts)\n/* harmony export */ });\n/* harmony import */ var _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-highlight.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\nfunction concatHighlightedParts(parts) {\n    var highlightPreTag = _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__.TAG_REPLACEMENT.highlightPreTag, highlightPostTag = _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__.TAG_REPLACEMENT.highlightPostTag;\n    return parts.map(function(part) {\n        return part.isHighlighted ? highlightPreTag + part.value + highlightPostTag : part.value;\n    }).join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvY29uY2F0SGlnaGxpZ2h0ZWRQYXJ0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUNqRCxTQUFTQyx1QkFBdUJDLEtBQUs7SUFDMUMsSUFBSUMsa0JBQWtCSCxpRUFBZUEsQ0FBQ0csZUFBZSxFQUNuREMsbUJBQW1CSixpRUFBZUEsQ0FBQ0ksZ0JBQWdCO0lBQ3JELE9BQU9GLE1BQU1HLEdBQUcsQ0FBQyxTQUFVQyxJQUFJO1FBQzdCLE9BQU9BLEtBQUtDLGFBQWEsR0FBR0osa0JBQWtCRyxLQUFLRSxLQUFLLEdBQUdKLG1CQUFtQkUsS0FBS0UsS0FBSztJQUMxRixHQUFHQyxJQUFJLENBQUM7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL2NvbmNhdEhpZ2hsaWdodGVkUGFydHMuanM/ZDI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUQUdfUkVQTEFDRU1FTlQgfSBmcm9tIFwiLi9lc2NhcGUtaGlnaGxpZ2h0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0SGlnaGxpZ2h0ZWRQYXJ0cyhwYXJ0cykge1xuICB2YXIgaGlnaGxpZ2h0UHJlVGFnID0gVEFHX1JFUExBQ0VNRU5ULmhpZ2hsaWdodFByZVRhZyxcbiAgICBoaWdobGlnaHRQb3N0VGFnID0gVEFHX1JFUExBQ0VNRU5ULmhpZ2hsaWdodFBvc3RUYWc7XG4gIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcGFydC5pc0hpZ2hsaWdodGVkID8gaGlnaGxpZ2h0UHJlVGFnICsgcGFydC52YWx1ZSArIGhpZ2hsaWdodFBvc3RUYWcgOiBwYXJ0LnZhbHVlO1xuICB9KS5qb2luKCcnKTtcbn0iXSwibmFtZXMiOlsiVEFHX1JFUExBQ0VNRU5UIiwiY29uY2F0SGlnaGxpZ2h0ZWRQYXJ0cyIsInBhcnRzIiwiaGlnaGxpZ2h0UHJlVGFnIiwiaGlnaGxpZ2h0UG9zdFRhZyIsIm1hcCIsInBhcnQiLCJpc0hpZ2hsaWdodGVkIiwidmFsdWUiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js":
/*!******************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _buildEventPayloadsForHits: () => (/* binding */ _buildEventPayloadsForHits),\n/* harmony export */   createBindEventForHits: () => (/* binding */ createBindEventForHits),\n/* harmony export */   createSendEventForHits: () => (/* binding */ createSendEventForHits)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/serializer.js\");\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n\nfunction chunk(arr) {\n    var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    var chunks = [];\n    for(var i = 0; i < Math.ceil(arr.length / chunkSize); i++){\n        chunks.push(arr.slice(i * chunkSize, (i + 1) * chunkSize));\n    }\n    return chunks;\n}\nfunction _buildEventPayloadsForHits(_ref) {\n    var index = _ref.index, widgetType = _ref.widgetType, methodName = _ref.methodName, args = _ref.args, instantSearchInstance = _ref.instantSearchInstance;\n    // when there's only one argument, that means it's custom\n    if (args.length === 1 && _typeof(args[0]) === \"object\") {\n        return [\n            args[0]\n        ];\n    }\n    var _args$0$split = args[0].split(\":\"), _args$0$split2 = _slicedToArray(_args$0$split, 2), eventType = _args$0$split2[0], eventModifier = _args$0$split2[1];\n    var hits = args[1];\n    var eventName = args[2];\n    if (!hits) {\n        if (true) {\n            throw new Error(\"You need to pass hit or hits as the second argument like:\\n  \".concat(methodName, \"(eventType, hit);\\n  \"));\n        } else {}\n    }\n    if ((eventType === \"click\" || eventType === \"conversion\") && !eventName) {\n        if (true) {\n            throw new Error(\"You need to pass eventName as the third argument for 'click' or 'conversion' events like:\\n  \".concat(methodName, \"('click', hit, 'Product Purchased');\\n\\n  To learn more about event naming: https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/in-depth/clicks-conversions-best-practices/\\n  \"));\n        } else {}\n    }\n    var hitsArray = Array.isArray(hits) ? hits : [\n        hits\n    ];\n    if (hitsArray.length === 0) {\n        return [];\n    }\n    var queryID = hitsArray[0].__queryID;\n    var hitsChunks = chunk(hitsArray);\n    var objectIDsByChunk = hitsChunks.map(function(batch) {\n        return batch.map(function(hit) {\n            return hit.objectID;\n        });\n    });\n    var positionsByChunk = hitsChunks.map(function(batch) {\n        return batch.map(function(hit) {\n            return hit.__position;\n        });\n    });\n    if (eventType === \"view\") {\n        if (instantSearchInstance.status !== \"idle\") {\n            return [];\n        }\n        return hitsChunks.map(function(batch, i) {\n            return {\n                insightsMethod: \"viewedObjectIDs\",\n                widgetType: widgetType,\n                eventType: eventType,\n                payload: {\n                    eventName: eventName || \"Hits Viewed\",\n                    index: index,\n                    objectIDs: objectIDsByChunk[i]\n                },\n                hits: batch,\n                eventModifier: eventModifier\n            };\n        });\n    } else if (eventType === \"click\") {\n        return hitsChunks.map(function(batch, i) {\n            return {\n                insightsMethod: \"clickedObjectIDsAfterSearch\",\n                widgetType: widgetType,\n                eventType: eventType,\n                payload: {\n                    eventName: eventName || \"Hit Clicked\",\n                    index: index,\n                    queryID: queryID,\n                    objectIDs: objectIDsByChunk[i],\n                    positions: positionsByChunk[i]\n                },\n                hits: batch,\n                eventModifier: eventModifier\n            };\n        });\n    } else if (eventType === \"conversion\") {\n        return hitsChunks.map(function(batch, i) {\n            return {\n                insightsMethod: \"convertedObjectIDsAfterSearch\",\n                widgetType: widgetType,\n                eventType: eventType,\n                payload: {\n                    eventName: eventName || \"Hit Converted\",\n                    index: index,\n                    queryID: queryID,\n                    objectIDs: objectIDsByChunk[i]\n                },\n                hits: batch,\n                eventModifier: eventModifier\n            };\n        });\n    } else if (true) {\n        throw new Error('eventType(\"'.concat(eventType, '\") is not supported.\\n    If you want to send a custom payload, you can pass one object: ').concat(methodName, \"(customPayload);\\n    \"));\n    } else {}\n}\nfunction createSendEventForHits(_ref2) {\n    var instantSearchInstance = _ref2.instantSearchInstance, index = _ref2.index, widgetType = _ref2.widgetType;\n    var sentEvents = {};\n    var timer = undefined;\n    var sendEventForHits = function sendEventForHits() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var payloads = _buildEventPayloadsForHits({\n            widgetType: widgetType,\n            index: index,\n            methodName: \"sendEvent\",\n            args: args,\n            instantSearchInstance: instantSearchInstance\n        });\n        payloads.forEach(function(payload) {\n            if (payload.eventType === \"click\" && payload.eventModifier === \"internal\" && sentEvents[payload.eventType]) {\n                return;\n            }\n            sentEvents[payload.eventType] = true;\n            instantSearchInstance.sendEventToInsights(payload);\n        });\n        clearTimeout(timer);\n        timer = setTimeout(function() {\n            sentEvents = {};\n        }, 0);\n    };\n    return sendEventForHits;\n}\nfunction createBindEventForHits(_ref3) {\n    var index = _ref3.index, widgetType = _ref3.widgetType, instantSearchInstance = _ref3.instantSearchInstance;\n    var bindEventForHits = function bindEventForHits() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        var payloads = _buildEventPayloadsForHits({\n            widgetType: widgetType,\n            index: index,\n            methodName: \"bindEvent\",\n            args: args,\n            instantSearchInstance: instantSearchInstance\n        });\n        return payloads.length ? \"data-insights-event=\".concat((0,_serializer_js__WEBPACK_IMPORTED_MODULE_0__.serializePayload)(payloads)) : \"\";\n    };\n    return bindEventForHits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/defer.js":
/*!*************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/defer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defer: () => (/* binding */ defer)\n/* harmony export */ });\nvar nextMicroTask = Promise.resolve();\nfunction defer(callback) {\n    var progress = null;\n    var cancelled = false;\n    var fn = function fn() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (progress !== null) {\n            return;\n        }\n        progress = nextMicroTask.then(function() {\n            progress = null;\n            if (cancelled) {\n                cancelled = false;\n                return;\n            }\n            callback.apply(void 0, args);\n        });\n    };\n    fn.wait = function() {\n        if (progress === null) {\n            throw new Error(\"The deferred function should be called before calling `wait()`\");\n        }\n        return progress;\n    };\n    fn.cancel = function() {\n        if (progress === null) {\n            return;\n        }\n        cancelled = true;\n    };\n    return fn;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZGVmZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGdCQUFnQkMsUUFBUUMsT0FBTztBQUM1QixTQUFTQyxNQUFNQyxRQUFRO0lBQzVCLElBQUlDLFdBQVc7SUFDZixJQUFJQyxZQUFZO0lBQ2hCLElBQUlDLEtBQUssU0FBU0E7UUFDaEIsSUFBSyxJQUFJQyxPQUFPQyxVQUFVQyxNQUFNLEVBQUVDLE9BQU8sSUFBSUMsTUFBTUosT0FBT0ssT0FBTyxHQUFHQSxPQUFPTCxNQUFNSyxPQUFRO1lBQ3ZGRixJQUFJLENBQUNFLEtBQUssR0FBR0osU0FBUyxDQUFDSSxLQUFLO1FBQzlCO1FBQ0EsSUFBSVIsYUFBYSxNQUFNO1lBQ3JCO1FBQ0Y7UUFDQUEsV0FBV0wsY0FBY2MsSUFBSSxDQUFDO1lBQzVCVCxXQUFXO1lBQ1gsSUFBSUMsV0FBVztnQkFDYkEsWUFBWTtnQkFDWjtZQUNGO1lBQ0FGLFNBQVNXLEtBQUssQ0FBQyxLQUFLLEdBQUdKO1FBQ3pCO0lBQ0Y7SUFDQUosR0FBR1MsSUFBSSxHQUFHO1FBQ1IsSUFBSVgsYUFBYSxNQUFNO1lBQ3JCLE1BQU0sSUFBSVksTUFBTTtRQUNsQjtRQUNBLE9BQU9aO0lBQ1Q7SUFDQUUsR0FBR1csTUFBTSxHQUFHO1FBQ1YsSUFBSWIsYUFBYSxNQUFNO1lBQ3JCO1FBQ0Y7UUFDQUMsWUFBWTtJQUNkO0lBQ0EsT0FBT0M7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL2RlZmVyLmpzP2Y4ZTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG5leHRNaWNyb1Rhc2sgPSBQcm9taXNlLnJlc29sdmUoKTtcbmV4cG9ydCBmdW5jdGlvbiBkZWZlcihjYWxsYmFjaykge1xuICB2YXIgcHJvZ3Jlc3MgPSBudWxsO1xuICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7XG4gIHZhciBmbiA9IGZ1bmN0aW9uIGZuKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKHByb2dyZXNzICE9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2dyZXNzID0gbmV4dE1pY3JvVGFzay50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2dyZXNzID0gbnVsbDtcbiAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG4gIGZuLndhaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2dyZXNzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkZWZlcnJlZCBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGB3YWl0KClgJyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9ncmVzcztcbiAgfTtcbiAgZm4uY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9ncmVzcyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICB9O1xuICByZXR1cm4gZm47XG59Il0sIm5hbWVzIjpbIm5leHRNaWNyb1Rhc2siLCJQcm9taXNlIiwicmVzb2x2ZSIsImRlZmVyIiwiY2FsbGJhY2siLCJwcm9ncmVzcyIsImNhbmNlbGxlZCIsImZuIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJ0aGVuIiwiYXBwbHkiLCJ3YWl0IiwiRXJyb3IiLCJjYW5jZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/defer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/documentation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDocumentationLink: () => (/* binding */ createDocumentationLink),\n/* harmony export */   createDocumentationMessageGenerator: () => (/* binding */ createDocumentationMessageGenerator)\n/* harmony export */ });\nfunction createDocumentationLink(_ref) {\n    var name = _ref.name, _ref$connector = _ref.connector, connector = _ref$connector === void 0 ? false : _ref$connector;\n    return [\n        \"https://www.algolia.com/doc/api-reference/widgets/\",\n        name,\n        \"/js/\",\n        connector ? \"#connector\" : \"\"\n    ].join(\"\");\n}\nfunction createDocumentationMessageGenerator() {\n    for(var _len = arguments.length, widgets = new Array(_len), _key = 0; _key < _len; _key++){\n        widgets[_key] = arguments[_key];\n    }\n    var links = widgets.map(function(widget) {\n        return createDocumentationLink(widget);\n    }).join(\", \");\n    return function(message) {\n        return [\n            message,\n            \"See documentation: \".concat(links)\n        ].filter(Boolean).join(\"\\n\\n\");\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZG9jdW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLHdCQUF3QkMsSUFBSTtJQUMxQyxJQUFJQyxPQUFPRCxLQUFLQyxJQUFJLEVBQ2xCQyxpQkFBaUJGLEtBQUtHLFNBQVMsRUFDL0JBLFlBQVlELG1CQUFtQixLQUFLLElBQUksUUFBUUE7SUFDbEQsT0FBTztRQUFDO1FBQXNERDtRQUFNO1FBQVFFLFlBQVksZUFBZTtLQUFHLENBQUNDLElBQUksQ0FBQztBQUNsSDtBQUNPLFNBQVNDO0lBQ2QsSUFBSyxJQUFJQyxPQUFPQyxVQUFVQyxNQUFNLEVBQUVDLFVBQVUsSUFBSUMsTUFBTUosT0FBT0ssT0FBTyxHQUFHQSxPQUFPTCxNQUFNSyxPQUFRO1FBQzFGRixPQUFPLENBQUNFLEtBQUssR0FBR0osU0FBUyxDQUFDSSxLQUFLO0lBQ2pDO0lBQ0EsSUFBSUMsUUFBUUgsUUFBUUksR0FBRyxDQUFDLFNBQVVDLE1BQU07UUFDdEMsT0FBT2Ysd0JBQXdCZTtJQUNqQyxHQUFHVixJQUFJLENBQUM7SUFDUixPQUFPLFNBQVVXLE9BQU87UUFDdEIsT0FBTztZQUFDQTtZQUFTLHNCQUFzQkMsTUFBTSxDQUFDSjtTQUFPLENBQUNLLE1BQU0sQ0FBQ0MsU0FBU2QsSUFBSSxDQUFDO0lBQzdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9kb2N1bWVudGF0aW9uLmpzP2U2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50YXRpb25MaW5rKF9yZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgX3JlZiRjb25uZWN0b3IgPSBfcmVmLmNvbm5lY3RvcixcbiAgICBjb25uZWN0b3IgPSBfcmVmJGNvbm5lY3RvciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGNvbm5lY3RvcjtcbiAgcmV0dXJuIFsnaHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vZG9jL2FwaS1yZWZlcmVuY2Uvd2lkZ2V0cy8nLCBuYW1lLCAnL2pzLycsIGNvbm5lY3RvciA/ICcjY29ubmVjdG9yJyA6ICcnXS5qb2luKCcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudGF0aW9uTWVzc2FnZUdlbmVyYXRvcigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHdpZGdldHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgd2lkZ2V0c1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICB2YXIgbGlua3MgPSB3aWRnZXRzLm1hcChmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZURvY3VtZW50YXRpb25MaW5rKHdpZGdldCk7XG4gIH0pLmpvaW4oJywgJyk7XG4gIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHJldHVybiBbbWVzc2FnZSwgXCJTZWUgZG9jdW1lbnRhdGlvbjogXCIuY29uY2F0KGxpbmtzKV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcblxcbicpO1xuICB9O1xufSJdLCJuYW1lcyI6WyJjcmVhdGVEb2N1bWVudGF0aW9uTGluayIsIl9yZWYiLCJuYW1lIiwiX3JlZiRjb25uZWN0b3IiLCJjb25uZWN0b3IiLCJqb2luIiwiY3JlYXRlRG9jdW1lbnRhdGlvbk1lc3NhZ2VHZW5lcmF0b3IiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwid2lkZ2V0cyIsIkFycmF5IiwiX2tleSIsImxpbmtzIiwibWFwIiwid2lkZ2V0IiwibWVzc2FnZSIsImNvbmNhdCIsImZpbHRlciIsIkJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js":
/*!************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TAG_PLACEHOLDER: () => (/* binding */ TAG_PLACEHOLDER),\n/* harmony export */   TAG_REPLACEMENT: () => (/* binding */ TAG_REPLACEMENT),\n/* harmony export */   escapeFacets: () => (/* binding */ escapeFacets),\n/* harmony export */   escapeHits: () => (/* binding */ escapeHits)\n/* harmony export */ });\n/* harmony import */ var _escape_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-html.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-html.js\");\n/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isPlainObject.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/isPlainObject.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _objectDestructuringEmpty(obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\nvar TAG_PLACEHOLDER = {\n    highlightPreTag: \"__ais-highlight__\",\n    highlightPostTag: \"__/ais-highlight__\"\n};\nvar TAG_REPLACEMENT = {\n    highlightPreTag: \"<mark>\",\n    highlightPostTag: \"</mark>\"\n};\n// @MAJOR: in the future, this should only escape, not replace\nfunction replaceTagsAndEscape(value) {\n    return (0,_escape_html_js__WEBPACK_IMPORTED_MODULE_0__.escape)(value).replace(new RegExp(TAG_PLACEHOLDER.highlightPreTag, \"g\"), TAG_REPLACEMENT.highlightPreTag).replace(new RegExp(TAG_PLACEHOLDER.highlightPostTag, \"g\"), TAG_REPLACEMENT.highlightPostTag);\n}\nfunction recursiveEscape(input) {\n    if ((0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(input) && typeof input.value !== \"string\") {\n        return Object.keys(input).reduce(function(acc, key) {\n            return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, recursiveEscape(input[key])));\n        }, {});\n    }\n    if (Array.isArray(input)) {\n        return input.map(recursiveEscape);\n    }\n    return _objectSpread(_objectSpread({}, input), {}, {\n        value: replaceTagsAndEscape(input.value)\n    });\n}\nfunction escapeHits(hits) {\n    if (hits.__escaped === undefined) {\n        // We don't override the value on hit because it will mutate the raw results\n        // instead we make a shallow copy and we assign the escaped values on it.\n        hits = hits.map(function(_ref) {\n            var hit = _extends({}, (_objectDestructuringEmpty(_ref), _ref));\n            if (hit._highlightResult) {\n                hit._highlightResult = recursiveEscape(hit._highlightResult);\n            }\n            if (hit._snippetResult) {\n                hit._snippetResult = recursiveEscape(hit._snippetResult);\n            }\n            return hit;\n        });\n        hits.__escaped = true;\n    }\n    return hits;\n}\nfunction escapeFacets(facetHits) {\n    return facetHits.map(function(h) {\n        return _objectSpread(_objectSpread({}, h), {}, {\n            highlighted: replaceTagsAndEscape(h.highlighted)\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-html.js":
/*!*******************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/escape-html.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   unescape: () => (/* binding */ unescape)\n/* harmony export */ });\n/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/4.17.11-npm/escape.js\n */ // Used to map characters to HTML entities.\nvar htmlEntities = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n};\n// Used to match HTML entities and HTML characters.\nvar regexUnescapedHtml = /[&<>\"']/g;\nvar regexHasUnescapedHtml = RegExp(regexUnescapedHtml.source);\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n */ function escape(value) {\n    return value && regexHasUnescapedHtml.test(value) ? value.replace(regexUnescapedHtml, function(character) {\n        return htmlEntities[character];\n    }) : value;\n}\n/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/4.17.11-npm/unescape.js\n */ // Used to map HTML entities to characters.\nvar htmlCharacters = {\n    \"&amp;\": \"&\",\n    \"&lt;\": \"<\",\n    \"&gt;\": \">\",\n    \"&quot;\": '\"',\n    \"&#39;\": \"'\"\n};\n// Used to match HTML entities and HTML characters.\nvar regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nvar regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n/**\n * Converts the HTML entities \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * characters.\n */ function unescape(value) {\n    return value && regexHasEscapedHtml.test(value) ? value.replace(regexEscapedHtml, function(character) {\n        return htmlCharacters[character];\n    }) : value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZXNjYXBlLWh0bWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FFRCwyQ0FBMkM7QUFDM0MsSUFBSUEsZUFBZTtJQUNqQixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztBQUNQO0FBRUEsbURBQW1EO0FBQ25ELElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyx3QkFBd0JDLE9BQU9GLG1CQUFtQkcsTUFBTTtBQUU1RDs7O0NBR0MsR0FDTSxTQUFTQyxPQUFPQyxLQUFLO0lBQzFCLE9BQU9BLFNBQVNKLHNCQUFzQkssSUFBSSxDQUFDRCxTQUFTQSxNQUFNRSxPQUFPLENBQUNQLG9CQUFvQixTQUFVUSxTQUFTO1FBQ3ZHLE9BQU9ULFlBQVksQ0FBQ1MsVUFBVTtJQUNoQyxLQUFLSDtBQUNQO0FBRUE7OztDQUdDLEdBRUQsMkNBQTJDO0FBQzNDLElBQUlJLGlCQUFpQjtJQUNuQixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztBQUNYO0FBRUEsbURBQW1EO0FBQ25ELElBQUlDLG1CQUFtQjtBQUN2QixJQUFJQyxzQkFBc0JULE9BQU9RLGlCQUFpQlAsTUFBTTtBQUV4RDs7O0NBR0MsR0FDTSxTQUFTUyxTQUFTUCxLQUFLO0lBQzVCLE9BQU9BLFNBQVNNLG9CQUFvQkwsSUFBSSxDQUFDRCxTQUFTQSxNQUFNRSxPQUFPLENBQUNHLGtCQUFrQixTQUFVRixTQUFTO1FBQ25HLE9BQU9DLGNBQWMsQ0FBQ0QsVUFBVTtJQUNsQyxLQUFLSDtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZXNjYXBlLWh0bWwuanM/NmFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgdGFrZW4gZnJvbSBMb2Rhc2ggaW1wbGVtZW50YXRpb24uXG4gKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xMS1ucG0vZXNjYXBlLmpzXG4gKi9cblxuLy8gVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxudmFyIGh0bWxFbnRpdGllcyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7J1xufTtcblxuLy8gVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuXG52YXIgcmVnZXhVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2c7XG52YXIgcmVnZXhIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlZ2V4VW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiByZWdleEhhc1VuZXNjYXBlZEh0bWwudGVzdCh2YWx1ZSkgPyB2YWx1ZS5yZXBsYWNlKHJlZ2V4VW5lc2NhcGVkSHRtbCwgZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBodG1sRW50aXRpZXNbY2hhcmFjdGVyXTtcbiAgfSkgOiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIHRha2VuIGZyb20gTG9kYXNoIGltcGxlbWVudGF0aW9uLlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTEtbnBtL3VuZXNjYXBlLmpzXG4gKi9cblxuLy8gVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxudmFyIGh0bWxDaGFyYWN0ZXJzID0ge1xuICAnJmFtcDsnOiAnJicsXG4gICcmbHQ7JzogJzwnLFxuICAnJmd0Oyc6ICc+JyxcbiAgJyZxdW90Oyc6ICdcIicsXG4gICcmIzM5Oyc6IFwiJ1wiXG59O1xuXG4vLyBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy5cbnZhciByZWdleEVzY2FwZWRIdG1sID0gLyYoYW1wfHF1b3R8bHR8Z3R8IzM5KTsvZztcbnZhciByZWdleEhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlZ2V4RXNjYXBlZEh0bWwuc291cmNlKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllcyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAqIGNoYXJhY3RlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmVzY2FwZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgcmVnZXhIYXNFc2NhcGVkSHRtbC50ZXN0KHZhbHVlKSA/IHZhbHVlLnJlcGxhY2UocmVnZXhFc2NhcGVkSHRtbCwgZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBodG1sQ2hhcmFjdGVyc1tjaGFyYWN0ZXJdO1xuICB9KSA6IHZhbHVlO1xufSJdLCJuYW1lcyI6WyJodG1sRW50aXRpZXMiLCJyZWdleFVuZXNjYXBlZEh0bWwiLCJyZWdleEhhc1VuZXNjYXBlZEh0bWwiLCJSZWdFeHAiLCJzb3VyY2UiLCJlc2NhcGUiLCJ2YWx1ZSIsInRlc3QiLCJyZXBsYWNlIiwiY2hhcmFjdGVyIiwiaHRtbENoYXJhY3RlcnMiLCJyZWdleEVzY2FwZWRIdG1sIiwicmVnZXhIYXNFc2NhcGVkSHRtbCIsInVuZXNjYXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-html.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/find.js":
/*!************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/find.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   find: () => (/* binding */ find)\n/* harmony export */ });\n// We aren't using the native `Array.prototype.find` because the refactor away from Lodash is not\n// published as a major version.\n// Relying on the `find` polyfill on user-land, which before was only required for niche use-cases,\n// was decided as too risky.\n// @MAJOR Replace with the native `Array.prototype.find` method\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\nfunction find(items, predicate) {\n    var value;\n    for(var i = 0; i < items.length; i++){\n        value = items[i];\n        // inlined for performance: if (Call(predicate, thisArg, [value, i, list])) {\n        if (predicate(value, i, items)) {\n            return value;\n        }\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZmluZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUdBQWlHO0FBQ2pHLGdDQUFnQztBQUNoQyxtR0FBbUc7QUFDbkcsNEJBQTRCO0FBQzVCLCtEQUErRDtBQUMvRCw4RkFBOEY7QUFDdkYsU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxTQUFTO0lBQ25DLElBQUlDO0lBQ0osSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE1BQU1JLE1BQU0sRUFBRUQsSUFBSztRQUNyQ0QsUUFBUUYsS0FBSyxDQUFDRyxFQUFFO1FBQ2hCLDZFQUE2RTtRQUM3RSxJQUFJRixVQUFVQyxPQUFPQyxHQUFHSCxRQUFRO1lBQzlCLE9BQU9FO1FBQ1Q7SUFDRjtJQUNBLE9BQU9HO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9maW5kLmpzPzdjMjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgYXJlbid0IHVzaW5nIHRoZSBuYXRpdmUgYEFycmF5LnByb3RvdHlwZS5maW5kYCBiZWNhdXNlIHRoZSByZWZhY3RvciBhd2F5IGZyb20gTG9kYXNoIGlzIG5vdFxuLy8gcHVibGlzaGVkIGFzIGEgbWFqb3IgdmVyc2lvbi5cbi8vIFJlbHlpbmcgb24gdGhlIGBmaW5kYCBwb2x5ZmlsbCBvbiB1c2VyLWxhbmQsIHdoaWNoIGJlZm9yZSB3YXMgb25seSByZXF1aXJlZCBmb3IgbmljaGUgdXNlLWNhc2VzLFxuLy8gd2FzIGRlY2lkZWQgYXMgdG9vIHJpc2t5LlxuLy8gQE1BSk9SIFJlcGxhY2Ugd2l0aCB0aGUgbmF0aXZlIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kXG5leHBvcnQgZnVuY3Rpb24gZmluZChpdGVtcywgcHJlZGljYXRlKSB7XG4gIHZhciB2YWx1ZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlID0gaXRlbXNbaV07XG4gICAgLy8gaW5saW5lZCBmb3IgcGVyZm9ybWFuY2U6IGlmIChDYWxsKHByZWRpY2F0ZSwgdGhpc0FyZywgW3ZhbHVlLCBpLCBsaXN0XSkpIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpLCBpdGVtcykpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iXSwibmFtZXMiOlsiZmluZCIsIml0ZW1zIiwicHJlZGljYXRlIiwidmFsdWUiLCJpIiwibGVuZ3RoIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/findIndex.js":
/*!*****************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/findIndex.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findIndex: () => (/* binding */ findIndex)\n/* harmony export */ });\n// We aren't using the native `Array.prototype.findIndex` because the refactor away from Lodash is not\n// published as a major version.\n// Relying on the `findIndex` polyfill on user-land, which before was only required for niche use-cases,\n// was decided as too risky.\n// @MAJOR Replace with the native `Array.prototype.findIndex` method\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\nfunction findIndex(array, comparator) {\n    if (!Array.isArray(array)) {\n        return -1;\n    }\n    for(var i = 0; i < array.length; i++){\n        if (comparator(array[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZmluZEluZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzR0FBc0c7QUFDdEcsZ0NBQWdDO0FBQ2hDLHdHQUF3RztBQUN4Ryw0QkFBNEI7QUFDNUIsb0VBQW9FO0FBQ3BFLG1HQUFtRztBQUM1RixTQUFTQSxVQUFVQyxLQUFLLEVBQUVDLFVBQVU7SUFDekMsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNILFFBQVE7UUFDekIsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosTUFBTUssTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlILFdBQVdELEtBQUssQ0FBQ0ksRUFBRSxHQUFHO1lBQ3hCLE9BQU9BO1FBQ1Q7SUFDRjtJQUNBLE9BQU8sQ0FBQztBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZmluZEluZGV4LmpzP2NiZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgYXJlbid0IHVzaW5nIHRoZSBuYXRpdmUgYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIGJlY2F1c2UgdGhlIHJlZmFjdG9yIGF3YXkgZnJvbSBMb2Rhc2ggaXMgbm90XG4vLyBwdWJsaXNoZWQgYXMgYSBtYWpvciB2ZXJzaW9uLlxuLy8gUmVseWluZyBvbiB0aGUgYGZpbmRJbmRleGAgcG9seWZpbGwgb24gdXNlci1sYW5kLCB3aGljaCBiZWZvcmUgd2FzIG9ubHkgcmVxdWlyZWQgZm9yIG5pY2hlIHVzZS1jYXNlcyxcbi8vIHdhcyBkZWNpZGVkIGFzIHRvbyByaXNreS5cbi8vIEBNQUpPUiBSZXBsYWNlIHdpdGggdGhlIG5hdGl2ZSBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kSW5kZXhcbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufSJdLCJuYW1lcyI6WyJmaW5kSW5kZXgiLCJhcnJheSIsImNvbXBhcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/findIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/getAppIdAndApiKey.js":
/*!*************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/getAppIdAndApiKey.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAppIdAndApiKey: () => (/* binding */ getAppIdAndApiKey)\n/* harmony export */ });\n// typed as any, since it accepts the _real_ js clients, not the interface we otherwise expect\nfunction getAppIdAndApiKey(searchClient) {\n    if (searchClient.transporter) {\n        // searchClient v4\n        var _searchClient$transpo = searchClient.transporter, headers = _searchClient$transpo.headers, queryParameters = _searchClient$transpo.queryParameters;\n        var APP_ID = \"x-algolia-application-id\";\n        var API_KEY = \"x-algolia-api-key\";\n        var appId = headers[APP_ID] || queryParameters[APP_ID];\n        var apiKey = headers[API_KEY] || queryParameters[API_KEY];\n        return [\n            appId,\n            apiKey\n        ];\n    } else {\n        // searchClient v3\n        return [\n            searchClient.applicationID,\n            searchClient.apiKey\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0QXBwSWRBbmRBcGlLZXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDhGQUE4RjtBQUN2RixTQUFTQSxrQkFBa0JDLFlBQVk7SUFDNUMsSUFBSUEsYUFBYUMsV0FBVyxFQUFFO1FBQzVCLGtCQUFrQjtRQUNsQixJQUFJQyx3QkFBd0JGLGFBQWFDLFdBQVcsRUFDbERFLFVBQVVELHNCQUFzQkMsT0FBTyxFQUN2Q0Msa0JBQWtCRixzQkFBc0JFLGVBQWU7UUFDekQsSUFBSUMsU0FBUztRQUNiLElBQUlDLFVBQVU7UUFDZCxJQUFJQyxRQUFRSixPQUFPLENBQUNFLE9BQU8sSUFBSUQsZUFBZSxDQUFDQyxPQUFPO1FBQ3RELElBQUlHLFNBQVNMLE9BQU8sQ0FBQ0csUUFBUSxJQUFJRixlQUFlLENBQUNFLFFBQVE7UUFDekQsT0FBTztZQUFDQztZQUFPQztTQUFPO0lBQ3hCLE9BQU87UUFDTCxrQkFBa0I7UUFDbEIsT0FBTztZQUFDUixhQUFhUyxhQUFhO1lBQUVULGFBQWFRLE1BQU07U0FBQztJQUMxRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0QXBwSWRBbmRBcGlLZXkuanM/ZTg4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0eXBlZCBhcyBhbnksIHNpbmNlIGl0IGFjY2VwdHMgdGhlIF9yZWFsXyBqcyBjbGllbnRzLCBub3QgdGhlIGludGVyZmFjZSB3ZSBvdGhlcndpc2UgZXhwZWN0XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwSWRBbmRBcGlLZXkoc2VhcmNoQ2xpZW50KSB7XG4gIGlmIChzZWFyY2hDbGllbnQudHJhbnNwb3J0ZXIpIHtcbiAgICAvLyBzZWFyY2hDbGllbnQgdjRcbiAgICB2YXIgX3NlYXJjaENsaWVudCR0cmFuc3BvID0gc2VhcmNoQ2xpZW50LnRyYW5zcG9ydGVyLFxuICAgICAgaGVhZGVycyA9IF9zZWFyY2hDbGllbnQkdHJhbnNwby5oZWFkZXJzLFxuICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gX3NlYXJjaENsaWVudCR0cmFuc3BvLnF1ZXJ5UGFyYW1ldGVycztcbiAgICB2YXIgQVBQX0lEID0gJ3gtYWxnb2xpYS1hcHBsaWNhdGlvbi1pZCc7XG4gICAgdmFyIEFQSV9LRVkgPSAneC1hbGdvbGlhLWFwaS1rZXknO1xuICAgIHZhciBhcHBJZCA9IGhlYWRlcnNbQVBQX0lEXSB8fCBxdWVyeVBhcmFtZXRlcnNbQVBQX0lEXTtcbiAgICB2YXIgYXBpS2V5ID0gaGVhZGVyc1tBUElfS0VZXSB8fCBxdWVyeVBhcmFtZXRlcnNbQVBJX0tFWV07XG4gICAgcmV0dXJuIFthcHBJZCwgYXBpS2V5XTtcbiAgfSBlbHNlIHtcbiAgICAvLyBzZWFyY2hDbGllbnQgdjNcbiAgICByZXR1cm4gW3NlYXJjaENsaWVudC5hcHBsaWNhdGlvbklELCBzZWFyY2hDbGllbnQuYXBpS2V5XTtcbiAgfVxufSJdLCJuYW1lcyI6WyJnZXRBcHBJZEFuZEFwaUtleSIsInNlYXJjaENsaWVudCIsInRyYW5zcG9ydGVyIiwiX3NlYXJjaENsaWVudCR0cmFuc3BvIiwiaGVhZGVycyIsInF1ZXJ5UGFyYW1ldGVycyIsIkFQUF9JRCIsIkFQSV9LRVkiLCJhcHBJZCIsImFwaUtleSIsImFwcGxpY2F0aW9uSUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/getAppIdAndApiKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js":
/*!********************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHighlightFromSiblings: () => (/* binding */ getHighlightFromSiblings)\n/* harmony export */ });\n/* harmony import */ var _escape_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-html.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-html.js\");\n\nvar hasAlphanumeric = new RegExp(/\\w/i);\nfunction getHighlightFromSiblings(parts, i) {\n    var _parts, _parts2;\n    var current = parts[i];\n    var isNextHighlighted = ((_parts = parts[i + 1]) === null || _parts === void 0 ? void 0 : _parts.isHighlighted) || true;\n    var isPreviousHighlighted = ((_parts2 = parts[i - 1]) === null || _parts2 === void 0 ? void 0 : _parts2.isHighlighted) || true;\n    if (!hasAlphanumeric.test((0,_escape_html_js__WEBPACK_IMPORTED_MODULE_0__.unescape)(current.value)) && isPreviousHighlighted === isNextHighlighted) {\n        return isPreviousHighlighted;\n    }\n    return current.isHighlighted;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0SGlnaGxpZ2h0RnJvbVNpYmxpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDLElBQUlDLGtCQUFrQixJQUFJQyxPQUFPO0FBQzFCLFNBQVNDLHlCQUF5QkMsS0FBSyxFQUFFQyxDQUFDO0lBQy9DLElBQUlDLFFBQVFDO0lBQ1osSUFBSUMsVUFBVUosS0FBSyxDQUFDQyxFQUFFO0lBQ3RCLElBQUlJLG9CQUFvQixDQUFDLENBQUNILFNBQVNGLEtBQUssQ0FBQ0MsSUFBSSxFQUFFLE1BQU0sUUFBUUMsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPSSxhQUFhLEtBQUs7SUFDbkgsSUFBSUMsd0JBQXdCLENBQUMsQ0FBQ0osVUFBVUgsS0FBSyxDQUFDQyxJQUFJLEVBQUUsTUFBTSxRQUFRRSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFHLGFBQWEsS0FBSztJQUMxSCxJQUFJLENBQUNULGdCQUFnQlcsSUFBSSxDQUFDWix5REFBUUEsQ0FBQ1EsUUFBUUssS0FBSyxNQUFNRiwwQkFBMEJGLG1CQUFtQjtRQUNqRyxPQUFPRTtJQUNUO0lBQ0EsT0FBT0gsUUFBUUUsYUFBYTtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL2dldEhpZ2hsaWdodEZyb21TaWJsaW5ncy5qcz8xNWI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuZXNjYXBlIH0gZnJvbSBcIi4vZXNjYXBlLWh0bWwuanNcIjtcbnZhciBoYXNBbHBoYW51bWVyaWMgPSBuZXcgUmVnRXhwKC9cXHcvaSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SGlnaGxpZ2h0RnJvbVNpYmxpbmdzKHBhcnRzLCBpKSB7XG4gIHZhciBfcGFydHMsIF9wYXJ0czI7XG4gIHZhciBjdXJyZW50ID0gcGFydHNbaV07XG4gIHZhciBpc05leHRIaWdobGlnaHRlZCA9ICgoX3BhcnRzID0gcGFydHNbaSArIDFdKSA9PT0gbnVsbCB8fCBfcGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wYXJ0cy5pc0hpZ2hsaWdodGVkKSB8fCB0cnVlO1xuICB2YXIgaXNQcmV2aW91c0hpZ2hsaWdodGVkID0gKChfcGFydHMyID0gcGFydHNbaSAtIDFdKSA9PT0gbnVsbCB8fCBfcGFydHMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGFydHMyLmlzSGlnaGxpZ2h0ZWQpIHx8IHRydWU7XG4gIGlmICghaGFzQWxwaGFudW1lcmljLnRlc3QodW5lc2NhcGUoY3VycmVudC52YWx1ZSkpICYmIGlzUHJldmlvdXNIaWdobGlnaHRlZCA9PT0gaXNOZXh0SGlnaGxpZ2h0ZWQpIHtcbiAgICByZXR1cm4gaXNQcmV2aW91c0hpZ2hsaWdodGVkO1xuICB9XG4gIHJldHVybiBjdXJyZW50LmlzSGlnaGxpZ2h0ZWQ7XG59Il0sIm5hbWVzIjpbInVuZXNjYXBlIiwiaGFzQWxwaGFudW1lcmljIiwiUmVnRXhwIiwiZ2V0SGlnaGxpZ2h0RnJvbVNpYmxpbmdzIiwicGFydHMiLCJpIiwiX3BhcnRzIiwiX3BhcnRzMiIsImN1cnJlbnQiLCJpc05leHRIaWdobGlnaHRlZCIsImlzSGlnaGxpZ2h0ZWQiLCJpc1ByZXZpb3VzSGlnaGxpZ2h0ZWQiLCJ0ZXN0IiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js":
/*!***************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHighlightedParts: () => (/* binding */ getHighlightedParts)\n/* harmony export */ });\n/* harmony import */ var _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-highlight.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/escape-highlight.js\");\n\nfunction getHighlightedParts(highlightedValue) {\n    // @MAJOR: this should use TAG_PLACEHOLDER\n    var highlightPostTag = _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__.TAG_REPLACEMENT.highlightPostTag, highlightPreTag = _escape_highlight_js__WEBPACK_IMPORTED_MODULE_0__.TAG_REPLACEMENT.highlightPreTag;\n    var splitByPreTag = highlightedValue.split(highlightPreTag);\n    var firstValue = splitByPreTag.shift();\n    var elements = !firstValue ? [] : [\n        {\n            value: firstValue,\n            isHighlighted: false\n        }\n    ];\n    splitByPreTag.forEach(function(split) {\n        var splitByPostTag = split.split(highlightPostTag);\n        elements.push({\n            value: splitByPostTag[0],\n            isHighlighted: true\n        });\n        if (splitByPostTag[1] !== \"\") {\n            elements.push({\n                value: splitByPostTag[1],\n                isHighlighted: false\n            });\n        }\n    });\n    return elements;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0SGlnaGxpZ2h0ZWRQYXJ0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUNqRCxTQUFTQyxvQkFBb0JDLGdCQUFnQjtJQUNsRCwwQ0FBMEM7SUFDMUMsSUFBSUMsbUJBQW1CSCxpRUFBZUEsQ0FBQ0csZ0JBQWdCLEVBQ3JEQyxrQkFBa0JKLGlFQUFlQSxDQUFDSSxlQUFlO0lBQ25ELElBQUlDLGdCQUFnQkgsaUJBQWlCSSxLQUFLLENBQUNGO0lBQzNDLElBQUlHLGFBQWFGLGNBQWNHLEtBQUs7SUFDcEMsSUFBSUMsV0FBVyxDQUFDRixhQUFhLEVBQUUsR0FBRztRQUFDO1lBQ2pDRyxPQUFPSDtZQUNQSSxlQUFlO1FBQ2pCO0tBQUU7SUFDRk4sY0FBY08sT0FBTyxDQUFDLFNBQVVOLEtBQUs7UUFDbkMsSUFBSU8saUJBQWlCUCxNQUFNQSxLQUFLLENBQUNIO1FBQ2pDTSxTQUFTSyxJQUFJLENBQUM7WUFDWkosT0FBT0csY0FBYyxDQUFDLEVBQUU7WUFDeEJGLGVBQWU7UUFDakI7UUFDQSxJQUFJRSxjQUFjLENBQUMsRUFBRSxLQUFLLElBQUk7WUFDNUJKLFNBQVNLLElBQUksQ0FBQztnQkFDWkosT0FBT0csY0FBYyxDQUFDLEVBQUU7Z0JBQ3hCRixlQUFlO1lBQ2pCO1FBQ0Y7SUFDRjtJQUNBLE9BQU9GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9nZXRIaWdobGlnaHRlZFBhcnRzLmpzPzNlOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEFHX1JFUExBQ0VNRU5UIH0gZnJvbSBcIi4vZXNjYXBlLWhpZ2hsaWdodC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhpZ2hsaWdodGVkUGFydHMoaGlnaGxpZ2h0ZWRWYWx1ZSkge1xuICAvLyBATUFKT1I6IHRoaXMgc2hvdWxkIHVzZSBUQUdfUExBQ0VIT0xERVJcbiAgdmFyIGhpZ2hsaWdodFBvc3RUYWcgPSBUQUdfUkVQTEFDRU1FTlQuaGlnaGxpZ2h0UG9zdFRhZyxcbiAgICBoaWdobGlnaHRQcmVUYWcgPSBUQUdfUkVQTEFDRU1FTlQuaGlnaGxpZ2h0UHJlVGFnO1xuICB2YXIgc3BsaXRCeVByZVRhZyA9IGhpZ2hsaWdodGVkVmFsdWUuc3BsaXQoaGlnaGxpZ2h0UHJlVGFnKTtcbiAgdmFyIGZpcnN0VmFsdWUgPSBzcGxpdEJ5UHJlVGFnLnNoaWZ0KCk7XG4gIHZhciBlbGVtZW50cyA9ICFmaXJzdFZhbHVlID8gW10gOiBbe1xuICAgIHZhbHVlOiBmaXJzdFZhbHVlLFxuICAgIGlzSGlnaGxpZ2h0ZWQ6IGZhbHNlXG4gIH1dO1xuICBzcGxpdEJ5UHJlVGFnLmZvckVhY2goZnVuY3Rpb24gKHNwbGl0KSB7XG4gICAgdmFyIHNwbGl0QnlQb3N0VGFnID0gc3BsaXQuc3BsaXQoaGlnaGxpZ2h0UG9zdFRhZyk7XG4gICAgZWxlbWVudHMucHVzaCh7XG4gICAgICB2YWx1ZTogc3BsaXRCeVBvc3RUYWdbMF0sXG4gICAgICBpc0hpZ2hsaWdodGVkOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHNwbGl0QnlQb3N0VGFnWzFdICE9PSAnJykge1xuICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgIHZhbHVlOiBzcGxpdEJ5UG9zdFRhZ1sxXSxcbiAgICAgICAgaXNIaWdobGlnaHRlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBlbGVtZW50cztcbn0iXSwibmFtZXMiOlsiVEFHX1JFUExBQ0VNRU5UIiwiZ2V0SGlnaGxpZ2h0ZWRQYXJ0cyIsImhpZ2hsaWdodGVkVmFsdWUiLCJoaWdobGlnaHRQb3N0VGFnIiwiaGlnaGxpZ2h0UHJlVGFnIiwic3BsaXRCeVByZVRhZyIsInNwbGl0IiwiZmlyc3RWYWx1ZSIsInNoaWZ0IiwiZWxlbWVudHMiLCJ2YWx1ZSIsImlzSGlnaGxpZ2h0ZWQiLCJmb3JFYWNoIiwic3BsaXRCeVBvc3RUYWciLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/getObjectType.js":
/*!*********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/getObjectType.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getObjectType: () => (/* binding */ getObjectType)\n/* harmony export */ });\nfunction getObjectType(object) {\n    return Object.prototype.toString.call(object).slice(8, -1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0T2JqZWN0VHlwZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsY0FBY0MsTUFBTTtJQUNsQyxPQUFPQyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSixRQUFRSyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQzFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0T2JqZWN0VHlwZS5qcz9mZWM2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRPYmplY3RUeXBlKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkuc2xpY2UoOCwgLTEpO1xufSJdLCJuYW1lcyI6WyJnZXRPYmplY3RUeXBlIiwib2JqZWN0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/getObjectType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js":
/*!*************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPropertyByPath: () => (/* binding */ getPropertyByPath)\n/* harmony export */ });\nfunction getPropertyByPath(object, path) {\n    var parts = Array.isArray(path) ? path : path.split(\".\");\n    return parts.reduce(function(current, key) {\n        return current && current[key];\n    }, object);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvZ2V0UHJvcGVydHlCeVBhdGguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGtCQUFrQkMsTUFBTSxFQUFFQyxJQUFJO0lBQzVDLElBQUlDLFFBQVFDLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUUEsT0FBT0EsS0FBS0ksS0FBSyxDQUFDO0lBQ3BELE9BQU9ILE1BQU1JLE1BQU0sQ0FBQyxTQUFVQyxPQUFPLEVBQUVDLEdBQUc7UUFDeEMsT0FBT0QsV0FBV0EsT0FBTyxDQUFDQyxJQUFJO0lBQ2hDLEdBQUdSO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9nZXRQcm9wZXJ0eUJ5UGF0aC5qcz82MmQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wZXJ0eUJ5UGF0aChvYmplY3QsIHBhdGgpIHtcbiAgdmFyIHBhcnRzID0gQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGggOiBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0cy5yZWR1Y2UoZnVuY3Rpb24gKGN1cnJlbnQsIGtleSkge1xuICAgIHJldHVybiBjdXJyZW50ICYmIGN1cnJlbnRba2V5XTtcbiAgfSwgb2JqZWN0KTtcbn0iXSwibmFtZXMiOlsiZ2V0UHJvcGVydHlCeVBhdGgiLCJvYmplY3QiLCJwYXRoIiwicGFydHMiLCJBcnJheSIsImlzQXJyYXkiLCJzcGxpdCIsInJlZHVjZSIsImN1cnJlbnQiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.js":
/*!******************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAbsolutePosition: () => (/* binding */ addAbsolutePosition)\n/* harmony export */ });\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction addAbsolutePosition(hits, page, hitsPerPage) {\n    return hits.map(function(hit, idx) {\n        return _objectSpread(_objectSpread({}, hit), {}, {\n            __position: hitsPerPage * page + idx + 1\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaGl0cy1hYnNvbHV0ZS1wb3NpdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFBSSxPQUFPLE9BQU9BO0lBQUssSUFBSSxTQUFVQSxHQUFHO1FBQUksT0FBT0EsT0FBTyxjQUFjLE9BQU9DLFVBQVVELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBSyxHQUFHRCxRQUFRQztBQUFNO0FBQy9VLFNBQVNLLFFBQVFDLE1BQU0sRUFBRUMsY0FBYztJQUFJLElBQUlDLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFBUyxJQUFJRyxPQUFPQyxxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVVGLE9BQU9DLHFCQUFxQixDQUFDSjtRQUFTQyxrQkFBbUJJLENBQUFBLFVBQVVBLFFBQVFDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO1lBQUksT0FBT0osT0FBT0ssd0JBQXdCLENBQUNSLFFBQVFPLEtBQUtFLFVBQVU7UUFBRSxFQUFDLEdBQUlQLEtBQUtRLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxNQUFNRztJQUFVO0lBQUUsT0FBT0g7QUFBTTtBQUNwVixTQUFTVSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVMsUUFBUUYsU0FBUyxDQUFDRCxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBR0EsSUFBSSxJQUFJZixRQUFRSSxPQUFPYyxTQUFTLENBQUMsR0FBR0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSUMsZ0JBQWdCUCxRQUFRTSxLQUFLRixNQUFNLENBQUNFLElBQUk7UUFBRyxLQUFLaEIsT0FBT2tCLHlCQUF5QixHQUFHbEIsT0FBT21CLGdCQUFnQixDQUFDVCxRQUFRVixPQUFPa0IseUJBQXlCLENBQUNKLFdBQVdsQixRQUFRSSxPQUFPYyxTQUFTQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJaEIsT0FBT29CLGNBQWMsQ0FBQ1YsUUFBUU0sS0FBS2hCLE9BQU9LLHdCQUF3QixDQUFDUyxRQUFRRTtRQUFPO0lBQUk7SUFBRSxPQUFPTjtBQUFRO0FBQ3pmLFNBQVNPLGdCQUFnQjFCLEdBQUcsRUFBRXlCLEdBQUcsRUFBRUssS0FBSztJQUFJTCxNQUFNTSxlQUFlTjtJQUFNLElBQUlBLE9BQU96QixLQUFLO1FBQUVTLE9BQU9vQixjQUFjLENBQUM3QixLQUFLeUIsS0FBSztZQUFFSyxPQUFPQTtZQUFPZixZQUFZO1lBQU1pQixjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRWpDLEdBQUcsQ0FBQ3lCLElBQUksR0FBR0s7SUFBTztJQUFFLE9BQU85QjtBQUFLO0FBQzNPLFNBQVMrQixlQUFlRyxHQUFHO0lBQUksSUFBSVQsTUFBTVUsYUFBYUQsS0FBSztJQUFXLE9BQU9uQyxRQUFRMEIsU0FBUyxXQUFXQSxNQUFNVyxPQUFPWDtBQUFNO0FBQzVILFNBQVNVLGFBQWFFLEtBQUssRUFBRUMsSUFBSTtJQUFJLElBQUl2QyxRQUFRc0MsV0FBVyxZQUFZQSxVQUFVLE1BQU0sT0FBT0E7SUFBTyxJQUFJRSxPQUFPRixLQUFLLENBQUNwQyxPQUFPdUMsV0FBVyxDQUFDO0lBQUUsSUFBSUQsU0FBU0UsV0FBVztRQUFFLElBQUlDLE1BQU1ILEtBQUtJLElBQUksQ0FBQ04sT0FBT0MsUUFBUTtRQUFZLElBQUl2QyxRQUFRMkMsU0FBUyxVQUFVLE9BQU9BO1FBQUssTUFBTSxJQUFJRSxVQUFVO0lBQWlEO0lBQUUsT0FBTyxDQUFDTixTQUFTLFdBQVdGLFNBQVNTLE1BQUssRUFBR1I7QUFBUTtBQUNyWCxTQUFTUyxvQkFBb0JDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxXQUFXO0lBQ3pELE9BQU9GLEtBQUtHLEdBQUcsQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLEdBQUc7UUFDaEMsT0FBT2xDLGNBQWNBLGNBQWMsQ0FBQyxHQUFHaUMsTUFBTSxDQUFDLEdBQUc7WUFDL0NFLFlBQVlKLGNBQWNELE9BQU9JLE1BQU07UUFDekM7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaGl0cy1hYnNvbHV0ZS1wb3NpdGlvbi5qcz85M2RiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFic29sdXRlUG9zaXRpb24oaGl0cywgcGFnZSwgaGl0c1BlclBhZ2UpIHtcbiAgcmV0dXJuIGhpdHMubWFwKGZ1bmN0aW9uIChoaXQsIGlkeCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGhpdCksIHt9LCB7XG4gICAgICBfX3Bvc2l0aW9uOiBoaXRzUGVyUGFnZSAqIHBhZ2UgKyBpZHggKyAxXG4gICAgfSk7XG4gIH0pO1xufSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiYWRkQWJzb2x1dGVQb3NpdGlvbiIsImhpdHMiLCJwYWdlIiwiaGl0c1BlclBhZ2UiLCJtYXAiLCJoaXQiLCJpZHgiLCJfX3Bvc2l0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-query-id.js":
/*!*********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/hits-query-id.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addQueryID: () => (/* binding */ addQueryID)\n/* harmony export */ });\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction addQueryID(hits, queryID) {\n    if (!queryID) {\n        return hits;\n    }\n    return hits.map(function(hit) {\n        return _objectSpread(_objectSpread({}, hit), {}, {\n            __queryID: queryID\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaGl0cy1xdWVyeS1pZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFBSSxPQUFPLE9BQU9BO0lBQUssSUFBSSxTQUFVQSxHQUFHO1FBQUksT0FBT0EsT0FBTyxjQUFjLE9BQU9DLFVBQVVELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBSyxHQUFHRCxRQUFRQztBQUFNO0FBQy9VLFNBQVNLLFFBQVFDLE1BQU0sRUFBRUMsY0FBYztJQUFJLElBQUlDLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFBUyxJQUFJRyxPQUFPQyxxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVVGLE9BQU9DLHFCQUFxQixDQUFDSjtRQUFTQyxrQkFBbUJJLENBQUFBLFVBQVVBLFFBQVFDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO1lBQUksT0FBT0osT0FBT0ssd0JBQXdCLENBQUNSLFFBQVFPLEtBQUtFLFVBQVU7UUFBRSxFQUFDLEdBQUlQLEtBQUtRLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxNQUFNRztJQUFVO0lBQUUsT0FBT0g7QUFBTTtBQUNwVixTQUFTVSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVMsUUFBUUYsU0FBUyxDQUFDRCxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBR0EsSUFBSSxJQUFJZixRQUFRSSxPQUFPYyxTQUFTLENBQUMsR0FBR0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSUMsZ0JBQWdCUCxRQUFRTSxLQUFLRixNQUFNLENBQUNFLElBQUk7UUFBRyxLQUFLaEIsT0FBT2tCLHlCQUF5QixHQUFHbEIsT0FBT21CLGdCQUFnQixDQUFDVCxRQUFRVixPQUFPa0IseUJBQXlCLENBQUNKLFdBQVdsQixRQUFRSSxPQUFPYyxTQUFTQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJaEIsT0FBT29CLGNBQWMsQ0FBQ1YsUUFBUU0sS0FBS2hCLE9BQU9LLHdCQUF3QixDQUFDUyxRQUFRRTtRQUFPO0lBQUk7SUFBRSxPQUFPTjtBQUFRO0FBQ3pmLFNBQVNPLGdCQUFnQjFCLEdBQUcsRUFBRXlCLEdBQUcsRUFBRUssS0FBSztJQUFJTCxNQUFNTSxlQUFlTjtJQUFNLElBQUlBLE9BQU96QixLQUFLO1FBQUVTLE9BQU9vQixjQUFjLENBQUM3QixLQUFLeUIsS0FBSztZQUFFSyxPQUFPQTtZQUFPZixZQUFZO1lBQU1pQixjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRWpDLEdBQUcsQ0FBQ3lCLElBQUksR0FBR0s7SUFBTztJQUFFLE9BQU85QjtBQUFLO0FBQzNPLFNBQVMrQixlQUFlRyxHQUFHO0lBQUksSUFBSVQsTUFBTVUsYUFBYUQsS0FBSztJQUFXLE9BQU9uQyxRQUFRMEIsU0FBUyxXQUFXQSxNQUFNVyxPQUFPWDtBQUFNO0FBQzVILFNBQVNVLGFBQWFFLEtBQUssRUFBRUMsSUFBSTtJQUFJLElBQUl2QyxRQUFRc0MsV0FBVyxZQUFZQSxVQUFVLE1BQU0sT0FBT0E7SUFBTyxJQUFJRSxPQUFPRixLQUFLLENBQUNwQyxPQUFPdUMsV0FBVyxDQUFDO0lBQUUsSUFBSUQsU0FBU0UsV0FBVztRQUFFLElBQUlDLE1BQU1ILEtBQUtJLElBQUksQ0FBQ04sT0FBT0MsUUFBUTtRQUFZLElBQUl2QyxRQUFRMkMsU0FBUyxVQUFVLE9BQU9BO1FBQUssTUFBTSxJQUFJRSxVQUFVO0lBQWlEO0lBQUUsT0FBTyxDQUFDTixTQUFTLFdBQVdGLFNBQVNTLE1BQUssRUFBR1I7QUFBUTtBQUNyWCxTQUFTUyxXQUFXQyxJQUFJLEVBQUVDLE9BQU87SUFDdEMsSUFBSSxDQUFDQSxTQUFTO1FBQ1osT0FBT0Q7SUFDVDtJQUNBLE9BQU9BLEtBQUtFLEdBQUcsQ0FBQyxTQUFVQyxHQUFHO1FBQzNCLE9BQU9oQyxjQUFjQSxjQUFjLENBQUMsR0FBR2dDLE1BQU0sQ0FBQyxHQUFHO1lBQy9DQyxXQUFXSDtRQUNiO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL2hpdHMtcXVlcnktaWQuanM/NWI5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbmV4cG9ydCBmdW5jdGlvbiBhZGRRdWVyeUlEKGhpdHMsIHF1ZXJ5SUQpIHtcbiAgaWYgKCFxdWVyeUlEKSB7XG4gICAgcmV0dXJuIGhpdHM7XG4gIH1cbiAgcmV0dXJuIGhpdHMubWFwKGZ1bmN0aW9uIChoaXQpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBoaXQpLCB7fSwge1xuICAgICAgX19xdWVyeUlEOiBxdWVyeUlEXG4gICAgfSk7XG4gIH0pO1xufSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiYWRkUXVlcnlJRCIsImhpdHMiLCJxdWVyeUlEIiwibWFwIiwiaGl0IiwiX19xdWVyeUlEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/hits-query-id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/isEqual.js":
/*!***************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/isEqual.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEqual: () => (/* binding */ isEqual)\n/* harmony export */ });\nfunction isPrimitive(obj) {\n    return obj !== Object(obj);\n}\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (isPrimitive(first) || isPrimitive(second) || typeof first === \"function\" || typeof second === \"function\") {\n        return first === second;\n    }\n    if (Object.keys(first).length !== Object.keys(second).length) {\n        return false;\n    }\n    // @TODO avoid for..of because of the large polyfill\n    // eslint-disable-next-line no-restricted-syntax\n    for(var _i = 0, _Object$keys = Object.keys(first); _i < _Object$keys.length; _i++){\n        var key = _Object$keys[_i];\n        if (!(key in second)) {\n            return false;\n        }\n        if (!isEqual(first[key], second[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaXNFcXVhbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsWUFBWUMsR0FBRztJQUN0QixPQUFPQSxRQUFRQyxPQUFPRDtBQUN4QjtBQUNPLFNBQVNFLFFBQVFDLEtBQUssRUFBRUMsTUFBTTtJQUNuQyxJQUFJRCxVQUFVQyxRQUFRO1FBQ3BCLE9BQU87SUFDVDtJQUNBLElBQUlMLFlBQVlJLFVBQVVKLFlBQVlLLFdBQVcsT0FBT0QsVUFBVSxjQUFjLE9BQU9DLFdBQVcsWUFBWTtRQUM1RyxPQUFPRCxVQUFVQztJQUNuQjtJQUNBLElBQUlILE9BQU9JLElBQUksQ0FBQ0YsT0FBT0csTUFBTSxLQUFLTCxPQUFPSSxJQUFJLENBQUNELFFBQVFFLE1BQU0sRUFBRTtRQUM1RCxPQUFPO0lBQ1Q7SUFFQSxvREFBb0Q7SUFDcEQsZ0RBQWdEO0lBQ2hELElBQUssSUFBSUMsS0FBSyxHQUFHQyxlQUFlUCxPQUFPSSxJQUFJLENBQUNGLFFBQVFJLEtBQUtDLGFBQWFGLE1BQU0sRUFBRUMsS0FBTTtRQUNsRixJQUFJRSxNQUFNRCxZQUFZLENBQUNELEdBQUc7UUFDMUIsSUFBSSxDQUFFRSxDQUFBQSxPQUFPTCxNQUFLLEdBQUk7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSSxDQUFDRixRQUFRQyxLQUFLLENBQUNNLElBQUksRUFBRUwsTUFBTSxDQUFDSyxJQUFJLEdBQUc7WUFDckMsT0FBTztRQUNUO0lBQ0Y7SUFDQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9pc0VxdWFsLmpzPzA4ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNQcmltaXRpdmUob2JqKSB7XG4gIHJldHVybiBvYmogIT09IE9iamVjdChvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc1ByaW1pdGl2ZShmaXJzdCkgfHwgaXNQcmltaXRpdmUoc2Vjb25kKSB8fCB0eXBlb2YgZmlyc3QgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHNlY29uZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmaXJzdCA9PT0gc2Vjb25kO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhmaXJzdCkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzZWNvbmQpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEBUT0RPIGF2b2lkIGZvci4ub2YgYmVjYXVzZSBvZiB0aGUgbGFyZ2UgcG9seWZpbGxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMoZmlyc3QpOyBfaSA8IF9PYmplY3Qka2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pXTtcbiAgICBpZiAoIShrZXkgaW4gc2Vjb25kKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzRXF1YWwoZmlyc3Rba2V5XSwgc2Vjb25kW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSJdLCJuYW1lcyI6WyJpc1ByaW1pdGl2ZSIsIm9iaiIsIk9iamVjdCIsImlzRXF1YWwiLCJmaXJzdCIsInNlY29uZCIsImtleXMiLCJsZW5ndGgiLCJfaSIsIl9PYmplY3Qka2V5cyIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/isEqual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js":
/*!*********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isIndexWidget: () => (/* binding */ isIndexWidget)\n/* harmony export */ });\nfunction isIndexWidget(widget) {\n    return widget.$$type === \"ais.index\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaXNJbmRleFdpZGdldC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsY0FBY0MsTUFBTTtJQUNsQyxPQUFPQSxPQUFPQyxNQUFNLEtBQUs7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9pbnN0YW50c2VhcmNoLmpzL2VzL2xpYi91dGlscy9pc0luZGV4V2lkZ2V0LmpzPzU2ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSW5kZXhXaWRnZXQod2lkZ2V0KSB7XG4gIHJldHVybiB3aWRnZXQuJCR0eXBlID09PSAnYWlzLmluZGV4Jztcbn0iXSwibmFtZXMiOlsiaXNJbmRleFdpZGdldCIsIndpZGdldCIsIiQkdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/isPlainObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/isPlainObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/master/isPlainObject.js\n */ function getTag(value) {\n    if (value === null) {\n        return value === undefined ? \"[object Undefined]\" : \"[object Null]\";\n    }\n    return Object.prototype.toString.call(value);\n}\nfunction isObjectLike(value) {\n    return _typeof(value) === \"object\" && value !== null;\n}\n/**\n * Checks if `value` is a plain object.\n *\n * A plain object is an object created by the `Object`\n * constructor or with a `[[Prototype]]` of `null`.\n */ function isPlainObject(value) {\n    if (!isObjectLike(value) || getTag(value) !== \"[object Object]\") {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    var proto = value;\n    while(Object.getPrototypeOf(proto) !== null){\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaXNQbGFpbk9iamVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLEdBQUc7UUFBSSxPQUFPLE9BQU9BO0lBQUssSUFBSSxTQUFVQSxHQUFHO1FBQUksT0FBT0EsT0FBTyxjQUFjLE9BQU9DLFVBQVVELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBSyxHQUFHRCxRQUFRQztBQUFNO0FBQy9VOzs7Q0FHQyxHQUVELFNBQVNLLE9BQU9DLEtBQUs7SUFDbkIsSUFBSUEsVUFBVSxNQUFNO1FBQ2xCLE9BQU9BLFVBQVVDLFlBQVksdUJBQXVCO0lBQ3REO0lBQ0EsT0FBT0MsT0FBT0osU0FBUyxDQUFDSyxRQUFRLENBQUNDLElBQUksQ0FBQ0o7QUFDeEM7QUFDQSxTQUFTSyxhQUFhTCxLQUFLO0lBQ3pCLE9BQU9QLFFBQVFPLFdBQVcsWUFBWUEsVUFBVTtBQUNsRDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU00sY0FBY04sS0FBSztJQUNqQyxJQUFJLENBQUNLLGFBQWFMLFVBQVVELE9BQU9DLFdBQVcsbUJBQW1CO1FBQy9ELE9BQU87SUFDVDtJQUNBLElBQUlFLE9BQU9LLGNBQWMsQ0FBQ1AsV0FBVyxNQUFNO1FBQ3pDLE9BQU87SUFDVDtJQUNBLElBQUlRLFFBQVFSO0lBQ1osTUFBT0UsT0FBT0ssY0FBYyxDQUFDQyxXQUFXLEtBQU07UUFDNUNBLFFBQVFOLE9BQU9LLGNBQWMsQ0FBQ0M7SUFDaEM7SUFDQSxPQUFPTixPQUFPSyxjQUFjLENBQUNQLFdBQVdRO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvaXNQbGFpbk9iamVjdC5qcz82MGYxIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbi8qKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyB0YWtlbiBmcm9tIExvZGFzaCBpbXBsZW1lbnRhdGlvbi5cbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi9tYXN0ZXIvaXNQbGFpbk9iamVjdC5qc1xuICovXG5cbmZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/ICdbb2JqZWN0IFVuZGVmaW5lZF0nIDogJ1tvYmplY3QgTnVsbF0nO1xuICB9XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QuXG4gKlxuICogQSBwbGFpbiBvYmplY3QgaXMgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgXG4gKiBjb25zdHJ1Y3RvciBvciB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGdldFRhZyh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHByb3RvID0gdmFsdWU7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBwcm90bztcbn0iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJnZXRUYWciLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIk9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsImlzT2JqZWN0TGlrZSIsImlzUGxhaW5PYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInByb3RvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/isPlainObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js":
/*!**************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/logger.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   warn: () => (/* binding */ warn),\n/* harmony export */   warning: () => (/* binding */ _warning)\n/* harmony export */ });\n/* harmony import */ var _noop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\");\n\n/**\n * Logs a warning when this function is called, in development environment only.\n */ var deprecate = function deprecate(fn, message) {\n    return fn;\n};\n/**\n * Logs a warning\n * This is used to log issues in development environment only.\n */ var warn = _noop_js__WEBPACK_IMPORTED_MODULE_0__.noop;\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */ var _warning = _noop_js__WEBPACK_IMPORTED_MODULE_0__.noop;\nif (true) {\n    warn = function warn(message) {\n        // eslint-disable-next-line no-console\n        console.warn(\"[InstantSearch.js]: \".concat(message.trim()));\n    };\n    deprecate = function deprecate(fn, message) {\n        var hasAlreadyPrinted = false;\n        return function() {\n            if (!hasAlreadyPrinted) {\n                hasAlreadyPrinted = true;\n                 true ? warn(message) : 0;\n            }\n            return fn.apply(void 0, arguments);\n        };\n    };\n    _warning = function warning(condition, message) {\n        if (condition) {\n            return;\n        }\n        var hasAlreadyPrinted = _warning.cache[message];\n        if (!hasAlreadyPrinted) {\n            _warning.cache[message] = true;\n             true ? warn(message) : 0;\n        }\n    };\n    _warning.cache = {};\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDakM7O0NBRUMsR0FDRCxJQUFJQyxZQUFZLFNBQVNBLFVBQVVDLEVBQUUsRUFBRUMsT0FBTztJQUM1QyxPQUFPRDtBQUNUO0FBRUE7OztDQUdDLEdBQ0QsSUFBSUUsT0FBT0osMENBQUlBO0FBRWY7OztDQUdDLEdBQ0QsSUFBSUssV0FBV0wsMENBQUlBO0FBQ25CLElBQUlNLElBQXlCLEVBQWU7SUFDMUNGLE9BQU8sU0FBU0EsS0FBS0QsT0FBTztRQUMxQixzQ0FBc0M7UUFDdENJLFFBQVFILElBQUksQ0FBQyx1QkFBdUJJLE1BQU0sQ0FBQ0wsUUFBUU0sSUFBSTtJQUN6RDtJQUNBUixZQUFZLFNBQVNBLFVBQVVDLEVBQUUsRUFBRUMsT0FBTztRQUN4QyxJQUFJTyxvQkFBb0I7UUFDeEIsT0FBTztZQUNMLElBQUksQ0FBQ0EsbUJBQW1CO2dCQUN0QkEsb0JBQW9CO2dCQTVCNUIsS0E2QmlDLEdBQWdCTixLQUFLRCxXQUFXLENBQU07WUFDakU7WUFDQSxPQUFPRCxHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHQztRQUMxQjtJQUNGO0lBQ0FQLFdBQVcsU0FBU1EsUUFBUUMsU0FBUyxFQUFFWCxPQUFPO1FBQzVDLElBQUlXLFdBQVc7WUFDYjtRQUNGO1FBQ0EsSUFBSUosb0JBQW9CTCxTQUFTVSxLQUFLLENBQUNaLFFBQVE7UUFDL0MsSUFBSSxDQUFDTyxtQkFBbUI7WUFDdEJMLFNBQVNVLEtBQUssQ0FBQ1osUUFBUSxHQUFHO1lBeENoQyxLQXlDK0IsR0FBZ0JDLEtBQUtELFdBQVcsQ0FBTTtRQUNqRTtJQUNGO0lBQ0FFLFNBQVNVLEtBQUssR0FBRyxDQUFDO0FBQ3BCO0FBQ2dEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvbG9nZ2VyLmpzP2IzMzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9vcCB9IGZyb20gXCIuL25vb3AuanNcIjtcbi8qKlxuICogTG9ncyBhIHdhcm5pbmcgd2hlbiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgb25seS5cbiAqL1xudmFyIGRlcHJlY2F0ZSA9IGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbWVzc2FnZSkge1xuICByZXR1cm4gZm47XG59O1xuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nXG4gKiBUaGlzIGlzIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBvbmx5LlxuICovXG52YXIgd2FybiA9IG5vb3A7XG5cbi8qKlxuICogTG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBpcyB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgb25seS5cbiAqL1xudmFyIF93YXJuaW5nID0gbm9vcDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICB3YXJuID0gZnVuY3Rpb24gd2FybihtZXNzYWdlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXCJbSW5zdGFudFNlYXJjaC5qc106IFwiLmNvbmNhdChtZXNzYWdlLnRyaW0oKSkpO1xuICB9O1xuICBkZXByZWNhdGUgPSBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIG1lc3NhZ2UpIHtcbiAgICB2YXIgaGFzQWxyZWFkeVByaW50ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFoYXNBbHJlYWR5UHJpbnRlZCkge1xuICAgICAgICBoYXNBbHJlYWR5UHJpbnRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gd2FybihtZXNzYWdlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcbiAgX3dhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGhhc0FscmVhZHlQcmludGVkID0gX3dhcm5pbmcuY2FjaGVbbWVzc2FnZV07XG4gICAgaWYgKCFoYXNBbHJlYWR5UHJpbnRlZCkge1xuICAgICAgX3dhcm5pbmcuY2FjaGVbbWVzc2FnZV0gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyB3YXJuKG1lc3NhZ2UpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcbiAgX3dhcm5pbmcuY2FjaGUgPSB7fTtcbn1cbmV4cG9ydCB7IHdhcm4sIGRlcHJlY2F0ZSwgX3dhcm5pbmcgYXMgd2FybmluZyB9OyJdLCJuYW1lcyI6WyJub29wIiwiZGVwcmVjYXRlIiwiZm4iLCJtZXNzYWdlIiwid2FybiIsIl93YXJuaW5nIiwicHJvY2VzcyIsImNvbnNvbGUiLCJjb25jYXQiLCJ0cmltIiwiaGFzQWxyZWFkeVByaW50ZWQiLCJhcHBseSIsImFyZ3VtZW50cyIsIndhcm5pbmciLCJjb25kaXRpb24iLCJjYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeSearchParameters: () => (/* binding */ mergeSearchParameters)\n/* harmony export */ });\n/* harmony import */ var _findIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./findIndex.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/findIndex.js\");\n/* harmony import */ var _uniq_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uniq.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/uniq.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"facets\",\n    \"disjunctiveFacets\",\n    \"facetsRefinements\",\n    \"facetsExcludes\",\n    \"disjunctiveFacetsRefinements\",\n    \"numericRefinements\",\n    \"tagRefinements\",\n    \"hierarchicalFacets\",\n    \"hierarchicalFacetsRefinements\",\n    \"ruleContexts\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\nvar mergeWithRest = function mergeWithRest(left, right) {\n    var facets = right.facets, disjunctiveFacets = right.disjunctiveFacets, facetsRefinements = right.facetsRefinements, facetsExcludes = right.facetsExcludes, disjunctiveFacetsRefinements = right.disjunctiveFacetsRefinements, numericRefinements = right.numericRefinements, tagRefinements = right.tagRefinements, hierarchicalFacets = right.hierarchicalFacets, hierarchicalFacetsRefinements = right.hierarchicalFacetsRefinements, ruleContexts = right.ruleContexts, rest = _objectWithoutProperties(right, _excluded);\n    return left.setQueryParameters(rest);\n};\n// Merge facets\nvar mergeFacets = function mergeFacets(left, right) {\n    return right.facets.reduce(function(_, name) {\n        return _.addFacet(name);\n    }, left);\n};\nvar mergeDisjunctiveFacets = function mergeDisjunctiveFacets(left, right) {\n    return right.disjunctiveFacets.reduce(function(_, name) {\n        return _.addDisjunctiveFacet(name);\n    }, left);\n};\nvar mergeHierarchicalFacets = function mergeHierarchicalFacets(left, right) {\n    return left.setQueryParameters({\n        hierarchicalFacets: right.hierarchicalFacets.reduce(function(facets, facet) {\n            var index = (0,_findIndex_js__WEBPACK_IMPORTED_MODULE_0__.findIndex)(facets, function(_) {\n                return _.name === facet.name;\n            });\n            if (index === -1) {\n                return facets.concat(facet);\n            }\n            var nextFacets = facets.slice();\n            nextFacets.splice(index, 1, facet);\n            return nextFacets;\n        }, left.hierarchicalFacets)\n    });\n};\n// Merge facet refinements\nvar mergeTagRefinements = function mergeTagRefinements(left, right) {\n    return right.tagRefinements.reduce(function(_, value) {\n        return _.addTagRefinement(value);\n    }, left);\n};\nvar mergeFacetRefinements = function mergeFacetRefinements(left, right) {\n    return left.setQueryParameters({\n        facetsRefinements: _objectSpread(_objectSpread({}, left.facetsRefinements), right.facetsRefinements)\n    });\n};\nvar mergeFacetsExcludes = function mergeFacetsExcludes(left, right) {\n    return left.setQueryParameters({\n        facetsExcludes: _objectSpread(_objectSpread({}, left.facetsExcludes), right.facetsExcludes)\n    });\n};\nvar mergeDisjunctiveFacetsRefinements = function mergeDisjunctiveFacetsRefinements(left, right) {\n    return left.setQueryParameters({\n        disjunctiveFacetsRefinements: _objectSpread(_objectSpread({}, left.disjunctiveFacetsRefinements), right.disjunctiveFacetsRefinements)\n    });\n};\nvar mergeNumericRefinements = function mergeNumericRefinements(left, right) {\n    return left.setQueryParameters({\n        numericRefinements: _objectSpread(_objectSpread({}, left.numericRefinements), right.numericRefinements)\n    });\n};\nvar mergeHierarchicalFacetsRefinements = function mergeHierarchicalFacetsRefinements(left, right) {\n    return left.setQueryParameters({\n        hierarchicalFacetsRefinements: _objectSpread(_objectSpread({}, left.hierarchicalFacetsRefinements), right.hierarchicalFacetsRefinements)\n    });\n};\nvar mergeRuleContexts = function mergeRuleContexts(left, right) {\n    var ruleContexts = (0,_uniq_js__WEBPACK_IMPORTED_MODULE_1__.uniq)([].concat(left.ruleContexts).concat(right.ruleContexts).filter(Boolean));\n    if (ruleContexts.length > 0) {\n        return left.setQueryParameters({\n            ruleContexts: ruleContexts\n        });\n    }\n    return left;\n};\nvar mergeSearchParameters = function mergeSearchParameters() {\n    for(var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++){\n        parameters[_key] = arguments[_key];\n    }\n    return parameters.reduce(function(left, right) {\n        var hierarchicalFacetsRefinementsMerged = mergeHierarchicalFacetsRefinements(left, right);\n        var hierarchicalFacetsMerged = mergeHierarchicalFacets(hierarchicalFacetsRefinementsMerged, right);\n        var tagRefinementsMerged = mergeTagRefinements(hierarchicalFacetsMerged, right);\n        var numericRefinementsMerged = mergeNumericRefinements(tagRefinementsMerged, right);\n        var disjunctiveFacetsRefinementsMerged = mergeDisjunctiveFacetsRefinements(numericRefinementsMerged, right);\n        var facetsExcludesMerged = mergeFacetsExcludes(disjunctiveFacetsRefinementsMerged, right);\n        var facetRefinementsMerged = mergeFacetRefinements(facetsExcludesMerged, right);\n        var disjunctiveFacetsMerged = mergeDisjunctiveFacets(facetRefinementsMerged, right);\n        var ruleContextsMerged = mergeRuleContexts(disjunctiveFacetsMerged, right);\n        var facetsMerged = mergeFacets(ruleContextsMerged, right);\n        return mergeWithRest(facetsMerged, right);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js":
/*!************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/noop.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noop: () => (/* binding */ noop)\n/* harmony export */ });\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvbm9vcC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL25vb3AuanM/MWM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9Il0sIm5hbWVzIjpbIm5vb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/render-args.js":
/*!*******************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/render-args.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInitArgs: () => (/* binding */ createInitArgs),\n/* harmony export */   createRenderArgs: () => (/* binding */ createRenderArgs)\n/* harmony export */ });\nfunction createInitArgs(instantSearchInstance, parent, uiState) {\n    var helper = parent.getHelper();\n    return {\n        uiState: uiState,\n        helper: helper,\n        parent: parent,\n        instantSearchInstance: instantSearchInstance,\n        state: helper.state,\n        renderState: instantSearchInstance.renderState,\n        templatesConfig: instantSearchInstance.templatesConfig,\n        createURL: parent.createURL,\n        scopedResults: [],\n        searchMetadata: {\n            isSearchStalled: instantSearchInstance.status === \"stalled\"\n        },\n        status: instantSearchInstance.status,\n        error: instantSearchInstance.error\n    };\n}\nfunction createRenderArgs(instantSearchInstance, parent) {\n    var results = parent.getResults();\n    var helper = parent.getHelper();\n    return {\n        helper: helper,\n        parent: parent,\n        instantSearchInstance: instantSearchInstance,\n        results: results,\n        scopedResults: parent.getScopedResults(),\n        state: results ? results._state : helper.state,\n        renderState: instantSearchInstance.renderState,\n        templatesConfig: instantSearchInstance.templatesConfig,\n        createURL: parent.createURL,\n        searchMetadata: {\n            isSearchStalled: instantSearchInstance.status === \"stalled\"\n        },\n        status: instantSearchInstance.status,\n        error: instantSearchInstance.error\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvcmVuZGVyLWFyZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxlQUFlQyxxQkFBcUIsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ25FLElBQUlDLFNBQVNGLE9BQU9HLFNBQVM7SUFDN0IsT0FBTztRQUNMRixTQUFTQTtRQUNUQyxRQUFRQTtRQUNSRixRQUFRQTtRQUNSRCx1QkFBdUJBO1FBQ3ZCSyxPQUFPRixPQUFPRSxLQUFLO1FBQ25CQyxhQUFhTixzQkFBc0JNLFdBQVc7UUFDOUNDLGlCQUFpQlAsc0JBQXNCTyxlQUFlO1FBQ3REQyxXQUFXUCxPQUFPTyxTQUFTO1FBQzNCQyxlQUFlLEVBQUU7UUFDakJDLGdCQUFnQjtZQUNkQyxpQkFBaUJYLHNCQUFzQlksTUFBTSxLQUFLO1FBQ3BEO1FBQ0FBLFFBQVFaLHNCQUFzQlksTUFBTTtRQUNwQ0MsT0FBT2Isc0JBQXNCYSxLQUFLO0lBQ3BDO0FBQ0Y7QUFDTyxTQUFTQyxpQkFBaUJkLHFCQUFxQixFQUFFQyxNQUFNO0lBQzVELElBQUljLFVBQVVkLE9BQU9lLFVBQVU7SUFDL0IsSUFBSWIsU0FBU0YsT0FBT0csU0FBUztJQUM3QixPQUFPO1FBQ0xELFFBQVFBO1FBQ1JGLFFBQVFBO1FBQ1JELHVCQUF1QkE7UUFDdkJlLFNBQVNBO1FBQ1ROLGVBQWVSLE9BQU9nQixnQkFBZ0I7UUFDdENaLE9BQU9VLFVBQVVBLFFBQVFHLE1BQU0sR0FBR2YsT0FBT0UsS0FBSztRQUM5Q0MsYUFBYU4sc0JBQXNCTSxXQUFXO1FBQzlDQyxpQkFBaUJQLHNCQUFzQk8sZUFBZTtRQUN0REMsV0FBV1AsT0FBT08sU0FBUztRQUMzQkUsZ0JBQWdCO1lBQ2RDLGlCQUFpQlgsc0JBQXNCWSxNQUFNLEtBQUs7UUFDcEQ7UUFDQUEsUUFBUVosc0JBQXNCWSxNQUFNO1FBQ3BDQyxPQUFPYixzQkFBc0JhLEtBQUs7SUFDcEM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL3JlbmRlci1hcmdzLmpzP2ZhZmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluaXRBcmdzKGluc3RhbnRTZWFyY2hJbnN0YW5jZSwgcGFyZW50LCB1aVN0YXRlKSB7XG4gIHZhciBoZWxwZXIgPSBwYXJlbnQuZ2V0SGVscGVyKCk7XG4gIHJldHVybiB7XG4gICAgdWlTdGF0ZTogdWlTdGF0ZSxcbiAgICBoZWxwZXI6IGhlbHBlcixcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IGluc3RhbnRTZWFyY2hJbnN0YW5jZSxcbiAgICBzdGF0ZTogaGVscGVyLnN0YXRlLFxuICAgIHJlbmRlclN0YXRlOiBpbnN0YW50U2VhcmNoSW5zdGFuY2UucmVuZGVyU3RhdGUsXG4gICAgdGVtcGxhdGVzQ29uZmlnOiBpbnN0YW50U2VhcmNoSW5zdGFuY2UudGVtcGxhdGVzQ29uZmlnLFxuICAgIGNyZWF0ZVVSTDogcGFyZW50LmNyZWF0ZVVSTCxcbiAgICBzY29wZWRSZXN1bHRzOiBbXSxcbiAgICBzZWFyY2hNZXRhZGF0YToge1xuICAgICAgaXNTZWFyY2hTdGFsbGVkOiBpbnN0YW50U2VhcmNoSW5zdGFuY2Uuc3RhdHVzID09PSAnc3RhbGxlZCdcbiAgICB9LFxuICAgIHN0YXR1czogaW5zdGFudFNlYXJjaEluc3RhbmNlLnN0YXR1cyxcbiAgICBlcnJvcjogaW5zdGFudFNlYXJjaEluc3RhbmNlLmVycm9yXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVuZGVyQXJncyhpbnN0YW50U2VhcmNoSW5zdGFuY2UsIHBhcmVudCkge1xuICB2YXIgcmVzdWx0cyA9IHBhcmVudC5nZXRSZXN1bHRzKCk7XG4gIHZhciBoZWxwZXIgPSBwYXJlbnQuZ2V0SGVscGVyKCk7XG4gIHJldHVybiB7XG4gICAgaGVscGVyOiBoZWxwZXIsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgaW5zdGFudFNlYXJjaEluc3RhbmNlOiBpbnN0YW50U2VhcmNoSW5zdGFuY2UsXG4gICAgcmVzdWx0czogcmVzdWx0cyxcbiAgICBzY29wZWRSZXN1bHRzOiBwYXJlbnQuZ2V0U2NvcGVkUmVzdWx0cygpLFxuICAgIHN0YXRlOiByZXN1bHRzID8gcmVzdWx0cy5fc3RhdGUgOiBoZWxwZXIuc3RhdGUsXG4gICAgcmVuZGVyU3RhdGU6IGluc3RhbnRTZWFyY2hJbnN0YW5jZS5yZW5kZXJTdGF0ZSxcbiAgICB0ZW1wbGF0ZXNDb25maWc6IGluc3RhbnRTZWFyY2hJbnN0YW5jZS50ZW1wbGF0ZXNDb25maWcsXG4gICAgY3JlYXRlVVJMOiBwYXJlbnQuY3JlYXRlVVJMLFxuICAgIHNlYXJjaE1ldGFkYXRhOiB7XG4gICAgICBpc1NlYXJjaFN0YWxsZWQ6IGluc3RhbnRTZWFyY2hJbnN0YW5jZS5zdGF0dXMgPT09ICdzdGFsbGVkJ1xuICAgIH0sXG4gICAgc3RhdHVzOiBpbnN0YW50U2VhcmNoSW5zdGFuY2Uuc3RhdHVzLFxuICAgIGVycm9yOiBpbnN0YW50U2VhcmNoSW5zdGFuY2UuZXJyb3JcbiAgfTtcbn0iXSwibmFtZXMiOlsiY3JlYXRlSW5pdEFyZ3MiLCJpbnN0YW50U2VhcmNoSW5zdGFuY2UiLCJwYXJlbnQiLCJ1aVN0YXRlIiwiaGVscGVyIiwiZ2V0SGVscGVyIiwic3RhdGUiLCJyZW5kZXJTdGF0ZSIsInRlbXBsYXRlc0NvbmZpZyIsImNyZWF0ZVVSTCIsInNjb3BlZFJlc3VsdHMiLCJzZWFyY2hNZXRhZGF0YSIsImlzU2VhcmNoU3RhbGxlZCIsInN0YXR1cyIsImVycm9yIiwiY3JlYXRlUmVuZGVyQXJncyIsInJlc3VsdHMiLCJnZXRSZXN1bHRzIiwiZ2V0U2NvcGVkUmVzdWx0cyIsIl9zdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/render-args.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveSearchParameters: () => (/* binding */ resolveSearchParameters)\n/* harmony export */ });\nfunction resolveSearchParameters(current) {\n    var parent = current.getParent();\n    var states = [\n        current.getHelper().state\n    ];\n    while(parent !== null){\n        states = [\n            parent.getHelper().state\n        ].concat(states);\n        parent = parent.getParent();\n    }\n    return states;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvcmVzb2x2ZVNlYXJjaFBhcmFtZXRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLHdCQUF3QkMsT0FBTztJQUM3QyxJQUFJQyxTQUFTRCxRQUFRRSxTQUFTO0lBQzlCLElBQUlDLFNBQVM7UUFBQ0gsUUFBUUksU0FBUyxHQUFHQyxLQUFLO0tBQUM7SUFDeEMsTUFBT0osV0FBVyxLQUFNO1FBQ3RCRSxTQUFTO1lBQUNGLE9BQU9HLFNBQVMsR0FBR0MsS0FBSztTQUFDLENBQUNDLE1BQU0sQ0FBQ0g7UUFDM0NGLFNBQVNBLE9BQU9DLFNBQVM7SUFDM0I7SUFDQSxPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvcmVzb2x2ZVNlYXJjaFBhcmFtZXRlcnMuanM/ODhkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVNlYXJjaFBhcmFtZXRlcnMoY3VycmVudCkge1xuICB2YXIgcGFyZW50ID0gY3VycmVudC5nZXRQYXJlbnQoKTtcbiAgdmFyIHN0YXRlcyA9IFtjdXJyZW50LmdldEhlbHBlcigpLnN0YXRlXTtcbiAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgIHN0YXRlcyA9IFtwYXJlbnQuZ2V0SGVscGVyKCkuc3RhdGVdLmNvbmNhdChzdGF0ZXMpO1xuICAgIHBhcmVudCA9IHBhcmVudC5nZXRQYXJlbnQoKTtcbiAgfVxuICByZXR1cm4gc3RhdGVzO1xufSJdLCJuYW1lcyI6WyJyZXNvbHZlU2VhcmNoUGFyYW1ldGVycyIsImN1cnJlbnQiLCJwYXJlbnQiLCJnZXRQYXJlbnQiLCJzdGF0ZXMiLCJnZXRIZWxwZXIiLCJzdGF0ZSIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reverseHighlightedParts: () => (/* binding */ reverseHighlightedParts)\n/* harmony export */ });\n/* harmony import */ var _getHighlightFromSiblings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getHighlightFromSiblings.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction reverseHighlightedParts(parts) {\n    if (!parts.some(function(part) {\n        return part.isHighlighted;\n    })) {\n        return parts.map(function(part) {\n            return _objectSpread(_objectSpread({}, part), {}, {\n                isHighlighted: false\n            });\n        });\n    }\n    return parts.map(function(part, i) {\n        return _objectSpread(_objectSpread({}, part), {}, {\n            isHighlighted: !(0,_getHighlightFromSiblings_js__WEBPACK_IMPORTED_MODULE_0__.getHighlightFromSiblings)(parts, i)\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvcmV2ZXJzZUhpZ2hsaWdodGVkUGFydHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxRQUFRQyxHQUFHO0lBQUk7SUFBMkIsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsR0FBRztRQUFJLE9BQU8sT0FBT0E7SUFBSyxJQUFJLFNBQVVBLEdBQUc7UUFBSSxPQUFPQSxPQUFPLGNBQWMsT0FBT0MsVUFBVUQsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUFLLEdBQUdELFFBQVFDO0FBQU07QUFDL1UsU0FBU0ssUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRjtJQUFTLElBQUlHLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSUMsVUFBVUYsT0FBT0MscUJBQXFCLENBQUNKO1FBQVNDLGtCQUFtQkksQ0FBQUEsVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFBSSxPQUFPSixPQUFPSyx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtRQUFFLEVBQUMsR0FBSVAsS0FBS1EsSUFBSSxDQUFDQyxLQUFLLENBQUNULE1BQU1HO0lBQVU7SUFBRSxPQUFPSDtBQUFNO0FBQ3BWLFNBQVNVLGNBQWNDLE1BQU07SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQUUsSUFBSUcsU0FBUyxRQUFRRixTQUFTLENBQUNELEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxFQUFFLEdBQUcsQ0FBQztRQUFHQSxJQUFJLElBQUlmLFFBQVFJLE9BQU9jLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtRQUFHLEtBQUtoQixPQUFPa0IseUJBQXlCLEdBQUdsQixPQUFPbUIsZ0JBQWdCLENBQUNULFFBQVFWLE9BQU9rQix5QkFBeUIsQ0FBQ0osV0FBV2xCLFFBQVFJLE9BQU9jLFNBQVNDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUloQixPQUFPb0IsY0FBYyxDQUFDVixRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1FBQU87SUFBSTtJQUFFLE9BQU9OO0FBQVE7QUFDemYsU0FBU08sZ0JBQWdCMUIsR0FBRyxFQUFFeUIsR0FBRyxFQUFFSyxLQUFLO0lBQUlMLE1BQU1NLGVBQWVOO0lBQU0sSUFBSUEsT0FBT3pCLEtBQUs7UUFBRVMsT0FBT29CLGNBQWMsQ0FBQzdCLEtBQUt5QixLQUFLO1lBQUVLLE9BQU9BO1lBQU9mLFlBQVk7WUFBTWlCLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFakMsR0FBRyxDQUFDeUIsSUFBSSxHQUFHSztJQUFPO0lBQUUsT0FBTzlCO0FBQUs7QUFDM08sU0FBUytCLGVBQWVHLEdBQUc7SUFBSSxJQUFJVCxNQUFNVSxhQUFhRCxLQUFLO0lBQVcsT0FBT25DLFFBQVEwQixTQUFTLFdBQVdBLE1BQU1XLE9BQU9YO0FBQU07QUFDNUgsU0FBU1UsYUFBYUUsS0FBSyxFQUFFQyxJQUFJO0lBQUksSUFBSXZDLFFBQVFzQyxXQUFXLFlBQVlBLFVBQVUsTUFBTSxPQUFPQTtJQUFPLElBQUlFLE9BQU9GLEtBQUssQ0FBQ3BDLE9BQU91QyxXQUFXLENBQUM7SUFBRSxJQUFJRCxTQUFTRSxXQUFXO1FBQUUsSUFBSUMsTUFBTUgsS0FBS0ksSUFBSSxDQUFDTixPQUFPQyxRQUFRO1FBQVksSUFBSXZDLFFBQVEyQyxTQUFTLFVBQVUsT0FBT0E7UUFBSyxNQUFNLElBQUlFLFVBQVU7SUFBaUQ7SUFBRSxPQUFPLENBQUNOLFNBQVMsV0FBV0YsU0FBU1MsTUFBSyxFQUFHUjtBQUFRO0FBQ25UO0FBQ2xFLFNBQVNVLHdCQUF3QkMsS0FBSztJQUMzQyxJQUFJLENBQUNBLE1BQU1DLElBQUksQ0FBQyxTQUFVQyxJQUFJO1FBQzVCLE9BQU9BLEtBQUtDLGFBQWE7SUFDM0IsSUFBSTtRQUNGLE9BQU9ILE1BQU1JLEdBQUcsQ0FBQyxTQUFVRixJQUFJO1lBQzdCLE9BQU9oQyxjQUFjQSxjQUFjLENBQUMsR0FBR2dDLE9BQU8sQ0FBQyxHQUFHO2dCQUNoREMsZUFBZTtZQUNqQjtRQUNGO0lBQ0Y7SUFDQSxPQUFPSCxNQUFNSSxHQUFHLENBQUMsU0FBVUYsSUFBSSxFQUFFOUIsQ0FBQztRQUNoQyxPQUFPRixjQUFjQSxjQUFjLENBQUMsR0FBR2dDLE9BQU8sQ0FBQyxHQUFHO1lBQ2hEQyxlQUFlLENBQUNMLHNGQUF3QkEsQ0FBQ0UsT0FBTzVCO1FBQ2xEO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL3JldmVyc2VIaWdobGlnaHRlZFBhcnRzLmpzPzFjY2YiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5pbXBvcnQgeyBnZXRIaWdobGlnaHRGcm9tU2libGluZ3MgfSBmcm9tIFwiLi9nZXRIaWdobGlnaHRGcm9tU2libGluZ3MuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlSGlnaGxpZ2h0ZWRQYXJ0cyhwYXJ0cykge1xuICBpZiAoIXBhcnRzLnNvbWUoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcGFydC5pc0hpZ2hsaWdodGVkO1xuICB9KSkge1xuICAgIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBhcnQpLCB7fSwge1xuICAgICAgICBpc0hpZ2hsaWdodGVkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbiAocGFydCwgaSkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBhcnQpLCB7fSwge1xuICAgICAgaXNIaWdobGlnaHRlZDogIWdldEhpZ2hsaWdodEZyb21TaWJsaW5ncyhwYXJ0cywgaSlcbiAgICB9KTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJnZXRIaWdobGlnaHRGcm9tU2libGluZ3MiLCJyZXZlcnNlSGlnaGxpZ2h0ZWRQYXJ0cyIsInBhcnRzIiwic29tZSIsInBhcnQiLCJpc0hpZ2hsaWdodGVkIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safelyRunOnBrowser: () => (/* binding */ safelyRunOnBrowser)\n/* harmony export */ });\n// eslint-disable-next-line no-restricted-globals\n/**\n * Runs code on browser environments safely.\n */ function safelyRunOnBrowser(callback) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        fallback: function fallback() {\n            return undefined;\n        }\n    }, fallback = _ref.fallback;\n    // eslint-disable-next-line no-restricted-globals\n    if (true) {\n        return fallback();\n    }\n    // eslint-disable-next-line no-restricted-globals\n    return callback({\n        window: window\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2FmZWx5UnVuT25Ccm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpREFBaUQ7QUFFakQ7O0NBRUMsR0FDTSxTQUFTQSxtQkFBbUJDLFFBQVE7SUFDekMsSUFBSUMsT0FBT0MsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUtFLFlBQVlGLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDM0VHLFVBQVUsU0FBU0E7WUFDakIsT0FBT0Q7UUFDVDtJQUNGLEdBQ0FDLFdBQVdKLEtBQUtJLFFBQVE7SUFDMUIsaURBQWlEO0lBQ2pELElBQUksSUFBa0IsRUFBYTtRQUNqQyxPQUFPQTtJQUNUO0lBRUEsaURBQWlEO0lBQ2pELE9BQU9MLFNBQVM7UUFDZE0sUUFBUUE7SUFDVjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2FmZWx5UnVuT25Ccm93c2VyLmpzPzNjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4vKipcbiAqIFJ1bnMgY29kZSBvbiBicm93c2VyIGVudmlyb25tZW50cyBzYWZlbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlbHlSdW5PbkJyb3dzZXIoY2FsbGJhY2spIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIGZhbGxiYWNrOiBmdW5jdGlvbiBmYWxsYmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZhbGxiYWNrID0gX3JlZi5mYWxsYmFjaztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsbGJhY2soKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICB3aW5kb3c6IHdpbmRvd1xuICB9KTtcbn0iXSwibmFtZXMiOlsic2FmZWx5UnVuT25Ccm93c2VyIiwiY2FsbGJhY2siLCJfcmVmIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmFsbGJhY2siLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/serializer.js":
/*!******************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/serializer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializePayload: () => (/* binding */ deserializePayload),\n/* harmony export */   serializePayload: () => (/* binding */ serializePayload)\n/* harmony export */ });\nfunction serializePayload(payload) {\n    return btoa(encodeURIComponent(JSON.stringify(payload)));\n}\nfunction deserializePayload(serialized) {\n    return JSON.parse(decodeURIComponent(atob(serialized)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2VyaWFsaXplci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLGlCQUFpQkMsT0FBTztJQUN0QyxPQUFPQyxLQUFLQyxtQkFBbUJDLEtBQUtDLFNBQVMsQ0FBQ0o7QUFDaEQ7QUFDTyxTQUFTSyxtQkFBbUJDLFVBQVU7SUFDM0MsT0FBT0gsS0FBS0ksS0FBSyxDQUFDQyxtQkFBbUJDLEtBQUtIO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2VyaWFsaXplci5qcz8wZTVkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVQYXlsb2FkKHBheWxvYWQpIHtcbiAgcmV0dXJuIGJ0b2EoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVQYXlsb2FkKHNlcmlhbGl6ZWQpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KGF0b2Ioc2VyaWFsaXplZCkpKTtcbn0iXSwibmFtZXMiOlsic2VyaWFsaXplUGF5bG9hZCIsInBheWxvYWQiLCJidG9hIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplUGF5bG9hZCIsInNlcmlhbGl6ZWQiLCJwYXJzZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImF0b2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/serializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/setIndexHelperState.js":
/*!***************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/setIndexHelperState.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setIndexHelperState: () => (/* binding */ setIndexHelperState)\n/* harmony export */ });\n/* harmony import */ var _checkIndexUiState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkIndexUiState.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js\");\n/* harmony import */ var _isIndexWidget_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isIndexWidget.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js\");\n\n\nfunction setIndexHelperState(finalUiState, indexWidget) {\n    var nextIndexUiState = finalUiState[indexWidget.getIndexId()] || {};\n    if (true) {\n        (0,_checkIndexUiState_js__WEBPACK_IMPORTED_MODULE_0__.checkIndexUiState)({\n            index: indexWidget,\n            indexUiState: nextIndexUiState\n        });\n    }\n    indexWidget.getHelper().setState(indexWidget.getWidgetSearchParameters(indexWidget.getHelper().state, {\n        uiState: nextIndexUiState\n    }));\n    indexWidget.getWidgets().filter(_isIndexWidget_js__WEBPACK_IMPORTED_MODULE_1__.isIndexWidget).forEach(function(widget) {\n        return setIndexHelperState(finalUiState, widget);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2V0SW5kZXhIZWxwZXJTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDUjtBQUM1QyxTQUFTRSxvQkFBb0JDLFlBQVksRUFBRUMsV0FBVztJQUMzRCxJQUFJQyxtQkFBbUJGLFlBQVksQ0FBQ0MsWUFBWUUsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNsRSxJQUFJQyxJQUF5QixFQUFlO1FBQzFDUCx3RUFBaUJBLENBQUM7WUFDaEJRLE9BQU9KO1lBQ1BLLGNBQWNKO1FBQ2hCO0lBQ0Y7SUFDQUQsWUFBWU0sU0FBUyxHQUFHQyxRQUFRLENBQUNQLFlBQVlRLHlCQUF5QixDQUFDUixZQUFZTSxTQUFTLEdBQUdHLEtBQUssRUFBRTtRQUNwR0MsU0FBU1Q7SUFDWDtJQUNBRCxZQUFZVyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ2YsNERBQWFBLEVBQUVnQixPQUFPLENBQUMsU0FBVUMsTUFBTTtRQUNyRSxPQUFPaEIsb0JBQW9CQyxjQUFjZTtJQUMzQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvc2V0SW5kZXhIZWxwZXJTdGF0ZS5qcz9hYTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNoZWNrSW5kZXhVaVN0YXRlIH0gZnJvbSBcIi4vY2hlY2tJbmRleFVpU3RhdGUuanNcIjtcbmltcG9ydCB7IGlzSW5kZXhXaWRnZXQgfSBmcm9tIFwiLi9pc0luZGV4V2lkZ2V0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gc2V0SW5kZXhIZWxwZXJTdGF0ZShmaW5hbFVpU3RhdGUsIGluZGV4V2lkZ2V0KSB7XG4gIHZhciBuZXh0SW5kZXhVaVN0YXRlID0gZmluYWxVaVN0YXRlW2luZGV4V2lkZ2V0LmdldEluZGV4SWQoKV0gfHwge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIGNoZWNrSW5kZXhVaVN0YXRlKHtcbiAgICAgIGluZGV4OiBpbmRleFdpZGdldCxcbiAgICAgIGluZGV4VWlTdGF0ZTogbmV4dEluZGV4VWlTdGF0ZVxuICAgIH0pO1xuICB9XG4gIGluZGV4V2lkZ2V0LmdldEhlbHBlcigpLnNldFN0YXRlKGluZGV4V2lkZ2V0LmdldFdpZGdldFNlYXJjaFBhcmFtZXRlcnMoaW5kZXhXaWRnZXQuZ2V0SGVscGVyKCkuc3RhdGUsIHtcbiAgICB1aVN0YXRlOiBuZXh0SW5kZXhVaVN0YXRlXG4gIH0pKTtcbiAgaW5kZXhXaWRnZXQuZ2V0V2lkZ2V0cygpLmZpbHRlcihpc0luZGV4V2lkZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICByZXR1cm4gc2V0SW5kZXhIZWxwZXJTdGF0ZShmaW5hbFVpU3RhdGUsIHdpZGdldCk7XG4gIH0pO1xufSJdLCJuYW1lcyI6WyJjaGVja0luZGV4VWlTdGF0ZSIsImlzSW5kZXhXaWRnZXQiLCJzZXRJbmRleEhlbHBlclN0YXRlIiwiZmluYWxVaVN0YXRlIiwiaW5kZXhXaWRnZXQiLCJuZXh0SW5kZXhVaVN0YXRlIiwiZ2V0SW5kZXhJZCIsInByb2Nlc3MiLCJpbmRleCIsImluZGV4VWlTdGF0ZSIsImdldEhlbHBlciIsInNldFN0YXRlIiwiZ2V0V2lkZ2V0U2VhcmNoUGFyYW1ldGVycyIsInN0YXRlIiwidWlTdGF0ZSIsImdldFdpZGdldHMiLCJmaWx0ZXIiLCJmb3JFYWNoIiwid2lkZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/setIndexHelperState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/typedObject.js":
/*!*******************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/typedObject.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keys: () => (/* binding */ keys)\n/* harmony export */ });\n/**\n * A typed version of Object.keys, to use when looping over a static object\n * inspired from https://stackoverflow.com/a/65117465/3185307\n */ var keys = Object.keys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvdHlwZWRPYmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLElBQUlBLE9BQU9DLE9BQU9ELElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3V0aWxzL3R5cGVkT2JqZWN0LmpzPzkwYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHR5cGVkIHZlcnNpb24gb2YgT2JqZWN0LmtleXMsIHRvIHVzZSB3aGVuIGxvb3Bpbmcgb3ZlciBhIHN0YXRpYyBvYmplY3RcbiAqIGluc3BpcmVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY1MTE3NDY1LzMxODUzMDdcbiAqL1xuZXhwb3J0IHZhciBrZXlzID0gT2JqZWN0LmtleXM7Il0sIm5hbWVzIjpbImtleXMiLCJPYmplY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/typedObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/utils/uniq.js":
/*!************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/utils/uniq.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uniq: () => (/* binding */ uniq)\n/* harmony export */ });\nfunction uniq(array) {\n    return array.filter(function(value, index, self) {\n        return self.indexOf(value) === index;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvdW5pcS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsS0FBS0MsS0FBSztJQUN4QixPQUFPQSxNQUFNQyxNQUFNLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUk7UUFDOUMsT0FBT0EsS0FBS0MsT0FBTyxDQUFDSCxXQUFXQztJQUNqQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdXRpbHMvdW5pcS5qcz83NzY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbiAgfSk7XG59Il0sIm5hbWVzIjpbInVuaXEiLCJhcnJheSIsImZpbHRlciIsInZhbHVlIiwiaW5kZXgiLCJzZWxmIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/utils/uniq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/lib/version.js":
/*!*********************************************************!*\
  !*** ./node_modules/instantsearch.js/es/lib/version.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"4.56.8\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW5zdGFudHNlYXJjaC5qcy9lcy9saWIvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsVUFBUyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2luc3RhbnRzZWFyY2guanMvZXMvbGliL3ZlcnNpb24uanM/NjZhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnNC41Ni44JzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/lib/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInsightsMiddleware: () => (/* binding */ createInsightsMiddleware)\n/* harmony export */ });\n/* harmony import */ var _helpers_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/noop.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/getAppIdAndApiKey.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/find.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nvar ALGOLIA_INSIGHTS_VERSION = \"2.6.0\";\nvar ALGOLIA_INSIGHTS_SRC = \"https://cdn.jsdelivr.net/npm/search-insights@\".concat(ALGOLIA_INSIGHTS_VERSION, \"/dist/search-insights.min.js\");\nfunction createInsightsMiddleware() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _insightsClient = props.insightsClient, insightsInitParams = props.insightsInitParams, onEvent = props.onEvent, _props$$$internal = props.$$internal, $$internal = _props$$$internal === void 0 ? false : _props$$$internal;\n    var potentialInsightsClient = _insightsClient;\n    if (!_insightsClient && _insightsClient !== null) {\n        (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.safelyRunOnBrowser)(function(_ref) {\n            var window = _ref.window;\n            var pointer = window.AlgoliaAnalyticsObject || \"aa\";\n            if (typeof pointer === \"string\") {\n                potentialInsightsClient = window[pointer];\n            }\n            if (!potentialInsightsClient) {\n                window.AlgoliaAnalyticsObject = pointer;\n                if (!window[pointer]) {\n                    window[pointer] = function() {\n                        if (!window[pointer].queue) {\n                            window[pointer].queue = [];\n                        }\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        window[pointer].queue.push(args);\n                    };\n                    window[pointer].version = ALGOLIA_INSIGHTS_VERSION;\n                    window[pointer].shouldAddScript = true;\n                }\n                potentialInsightsClient = window[pointer];\n            }\n        });\n    }\n    // if still no insightsClient was found, we use a noop\n    var insightsClient = potentialInsightsClient || _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.noop;\n    return function(_ref2) {\n        var instantSearchInstance = _ref2.instantSearchInstance;\n        // remove existing default insights middleware\n        // user-provided insights middleware takes precedence\n        var existingInsightsMiddlewares = instantSearchInstance.middleware.filter(function(m) {\n            return m.instance.$$type === \"ais.insights\" && m.instance.$$internal;\n        }).map(function(m) {\n            return m.creator;\n        });\n        instantSearchInstance.unuse.apply(instantSearchInstance, _toConsumableArray(existingInsightsMiddlewares));\n        var _getAppIdAndApiKey = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getAppIdAndApiKey)(instantSearchInstance.client), _getAppIdAndApiKey2 = _slicedToArray(_getAppIdAndApiKey, 2), appId = _getAppIdAndApiKey2[0], apiKey = _getAppIdAndApiKey2[1];\n        // search-insights.js also throws an error so dev-only clarification is sufficient\n         true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.warning)(Boolean(appId && apiKey), \"could not extract Algolia credentials from searchClient in insights middleware.\") : 0;\n        var queuedUserToken = undefined;\n        var userTokenBeforeInit = undefined;\n        if (Array.isArray(insightsClient.queue)) {\n            // Context: The umd build of search-insights is asynchronously loaded by the snippet.\n            //\n            // When user calls `aa('setUserToken', 'my-user-token')` before `search-insights` is loaded,\n            // ['setUserToken', 'my-user-token'] gets stored in `aa.queue`.\n            // Whenever `search-insights` is finally loaded, it will process the queue.\n            //\n            // But here's the reason why we handle it here:\n            // At this point, even though `search-insights` is not loaded yet,\n            // we still want to read the token from the queue.\n            // Otherwise, the first search call will be fired without the token.\n            var _ref3 = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.find)(insightsClient.queue.slice().reverse(), function(_ref5) {\n                var _ref6 = _slicedToArray(_ref5, 1), method = _ref6[0];\n                return method === \"setUserToken\";\n            }) || [];\n            var _ref4 = _slicedToArray(_ref3, 2);\n            queuedUserToken = _ref4[1];\n        }\n        insightsClient(\"getUserToken\", null, function(_error, userToken) {\n            // If user has called `aa('setUserToken', 'my-user-token')` before creating\n            // the `insights` middleware, we store them temporarily and\n            // set it later on.\n            //\n            // Otherwise, the `init` call might override it with anonymous user token.\n            userTokenBeforeInit = userToken;\n        });\n        // Only `init` if the `insightsInitParams` option is passed or\n        // if the `insightsClient` version doesn't supports optional `init` calling.\n        if (insightsInitParams || !isModernInsightsClient(insightsClient)) {\n            insightsClient(\"init\", _objectSpread({\n                appId: appId,\n                apiKey: apiKey,\n                partial: true\n            }, insightsInitParams));\n        }\n        var initialParameters;\n        var helper;\n        return {\n            $$type: \"ais.insights\",\n            $$internal: $$internal,\n            onStateChange: function onStateChange() {},\n            subscribe: function subscribe() {\n                if (!insightsClient.shouldAddScript) return;\n                var errorMessage = \"[insights middleware]: could not load search-insights.js. Please load it manually following https://alg.li/insights-init\";\n                try {\n                    var script = document.createElement(\"script\");\n                    script.async = true;\n                    script.src = ALGOLIA_INSIGHTS_SRC;\n                    script.onerror = function() {\n                        instantSearchInstance.emit(\"error\", new Error(errorMessage));\n                    };\n                    document.body.appendChild(script);\n                    insightsClient.shouldAddScript = false;\n                } catch (cause) {\n                    insightsClient.shouldAddScript = false;\n                    instantSearchInstance.emit(\"error\", new Error(errorMessage));\n                }\n            },\n            started: function started() {\n                insightsClient(\"addAlgoliaAgent\", \"insights-middleware\");\n                helper = instantSearchInstance.helper;\n                initialParameters = {\n                    userToken: helper.state.userToken,\n                    clickAnalytics: helper.state.clickAnalytics\n                };\n                helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {\n                    clickAnalytics: true\n                }));\n                if (!$$internal) {\n                    instantSearchInstance.scheduleSearch();\n                }\n                var setUserTokenToSearch = function setUserTokenToSearch(userToken) {\n                    var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                    if (!userToken) {\n                        return;\n                    }\n                    var existingToken = helper.state.userToken;\n                    function applyToken() {\n                        helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {\n                            userToken: userToken\n                        }));\n                        if (existingToken && existingToken !== userToken) {\n                            instantSearchInstance.scheduleSearch();\n                        }\n                    }\n                    // Delay the token application to the next render cycle\n                    if (!immediate) {\n                        setTimeout(applyToken, 0);\n                    } else {\n                        applyToken();\n                    }\n                };\n                var anonymousUserToken = (0,_helpers_index_js__WEBPACK_IMPORTED_MODULE_5__.getInsightsAnonymousUserTokenInternal)();\n                if (anonymousUserToken) {\n                    // When `aa('init', { ... })` is called, it creates an anonymous user token in cookie.\n                    // We can set it as userToken.\n                    setUserTokenToSearch(anonymousUserToken, true);\n                }\n                // We consider the `userToken` coming from a `init` call to have a higher\n                // importance than the one coming from the queue.\n                if (userTokenBeforeInit) {\n                    setUserTokenToSearch(userTokenBeforeInit, true);\n                    insightsClient(\"setUserToken\", userTokenBeforeInit);\n                } else if (queuedUserToken) {\n                    setUserTokenToSearch(queuedUserToken, true);\n                    insightsClient(\"setUserToken\", queuedUserToken);\n                }\n                // This updates userToken which is set explicitly by `aa('setUserToken', userToken)`\n                insightsClient(\"onUserTokenChange\", setUserTokenToSearch, {\n                    immediate: true\n                });\n                var insightsClientWithLocalCredentials = insightsClient;\n                if (isModernInsightsClient(insightsClient)) {\n                    insightsClientWithLocalCredentials = function insightsClientWithLocalCredentials(method, payload) {\n                        var extraParams = {\n                            headers: {\n                                \"X-Algolia-Application-Id\": appId,\n                                \"X-Algolia-API-Key\": apiKey\n                            }\n                        };\n                        // @ts-ignore we are calling this only when we know that the client actually is correct\n                        return insightsClient(method, payload, extraParams);\n                    };\n                }\n                instantSearchInstance.sendEventToInsights = function(event) {\n                    if (onEvent) {\n                        onEvent(event, insightsClientWithLocalCredentials);\n                    } else if (event.insightsMethod) {\n                        // Source is used to differentiate events sent by instantsearch from those sent manually.\n                        event.payload.algoliaSource = [\n                            \"instantsearch\"\n                        ];\n                        if (event.eventModifier === \"internal\") {\n                            event.payload.algoliaSource.push(\"instantsearch-internal\");\n                        }\n                        insightsClientWithLocalCredentials(event.insightsMethod, event.payload);\n                         true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.warning)(Boolean(helper.state.userToken), \"\\nCannot send event to Algolia Insights because `userToken` is not set.\\n\\nSee documentation: https://www.algolia.com/doc/guides/building-search-ui/going-further/send-insights-events/js/#setting-the-usertoken\\n\") : 0;\n                    } else {\n                         true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.warning)(false, \"Cannot send event to Algolia Insights because `insightsMethod` option is missing.\") : 0;\n                    }\n                };\n            },\n            unsubscribe: function unsubscribe() {\n                insightsClient(\"onUserTokenChange\", undefined);\n                instantSearchInstance.sendEventToInsights = _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.noop;\n                if (helper && initialParameters) {\n                    helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), initialParameters));\n                    instantSearchInstance.scheduleSearch();\n                }\n            }\n        };\n    };\n}\n/**\n * Determines if a given insights `client` supports the optional call to `init`\n * and the ability to set credentials via extra parameters when sending events.\n */ function isModernInsightsClient(client) {\n    var _split$map = (client.version || \"\").split(\".\").map(Number), _split$map2 = _slicedToArray(_split$map, 2), major = _split$map2[0], minor = _split$map2[1];\n    /* eslint-disable @typescript-eslint/naming-convention */ var v3 = major >= 3;\n    var v2_6 = major === 2 && minor >= 6;\n    var v1_10 = major === 1 && minor >= 10;\n    /* eslint-enable @typescript-eslint/naming-convention */ return v3 || v2_6 || v1_10;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMetadataMiddleware: () => (/* binding */ createMetadataMiddleware),\n/* harmony export */   isMetadataEnabled: () => (/* binding */ isMetadataEnabled)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/render-args.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js\");\n\nfunction extractWidgetPayload(widgets, instantSearchInstance, payload) {\n    var initOptions = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.createInitArgs)(instantSearchInstance, instantSearchInstance.mainIndex, instantSearchInstance._initialUiState);\n    widgets.forEach(function(widget) {\n        var widgetParams = {};\n        if (widget.getWidgetRenderState) {\n            var renderState = widget.getWidgetRenderState(initOptions);\n            if (renderState && renderState.widgetParams) {\n                // casting, as we just earlier checked widgetParams exists, and thus an object\n                widgetParams = renderState.widgetParams;\n            }\n        }\n        // since we destructure in all widgets, the parameters with defaults are set to \"undefined\"\n        var params = Object.keys(widgetParams).filter(function(key) {\n            return widgetParams[key] !== undefined;\n        });\n        payload.widgets.push({\n            type: widget.$$type,\n            widgetType: widget.$$widgetType,\n            params: params\n        });\n        if (widget.$$type === \"ais.index\") {\n            extractWidgetPayload(widget.getWidgets(), instantSearchInstance, payload);\n        }\n    });\n}\nfunction isMetadataEnabled() {\n    return (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.safelyRunOnBrowser)(function(_ref) {\n        var _window$navigator, _window$navigator$use;\n        var window = _ref.window;\n        return ((_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$use = _window$navigator.userAgent) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.indexOf(\"Algolia Crawler\")) > -1;\n    }, {\n        fallback: function fallback() {\n            return false;\n        }\n    });\n}\n/**\n * Exposes the metadata of mounted widgets in a custom\n * `<meta name=\"instantsearch:widgets\" />` tag. The metadata per widget is:\n * - applied parameters\n * - widget name\n * - connector name\n */ function createMetadataMiddleware() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref2$$$internal = _ref2.$$internal, $$internal = _ref2$$$internal === void 0 ? false : _ref2$$$internal;\n    return function(_ref3) {\n        var instantSearchInstance = _ref3.instantSearchInstance;\n        var payload = {\n            widgets: []\n        };\n        var payloadContainer = document.createElement(\"meta\");\n        var refNode = document.querySelector(\"head\");\n        payloadContainer.name = \"instantsearch:widgets\";\n        return {\n            $$type: \"ais.metadata\",\n            $$internal: $$internal,\n            onStateChange: function onStateChange() {},\n            subscribe: function subscribe() {\n                // using setTimeout here to delay extraction until widgets have been added in a tick (e.g. Vue)\n                setTimeout(function() {\n                    var client = instantSearchInstance.client;\n                    payload.ua = client.transporter && client.transporter.userAgent ? client.transporter.userAgent.value : client._ua;\n                    extractWidgetPayload(instantSearchInstance.mainIndex.getWidgets(), instantSearchInstance, payload);\n                    instantSearchInstance.middleware.forEach(function(middleware) {\n                        return payload.widgets.push({\n                            middleware: true,\n                            type: middleware.instance.$$type,\n                            internal: middleware.instance.$$internal\n                        });\n                    });\n                    payloadContainer.content = JSON.stringify(payload);\n                    refNode.appendChild(payloadContainer);\n                }, 0);\n            },\n            started: function started() {},\n            unsubscribe: function unsubscribe() {\n                payloadContainer.remove();\n            }\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js":
/*!********************************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRouterMiddleware: () => (/* binding */ createRouterMiddleware)\n/* harmony export */ });\n/* harmony import */ var _lib_routers_history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/routers/history.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/routers/history.js\");\n/* harmony import */ var _lib_stateMappings_simple_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/stateMappings/simple.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/stateMappings/simple.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/isEqual.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\nvar createRouterMiddleware = function createRouterMiddleware() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _props$router = props.router, router = _props$router === void 0 ? (0,_lib_routers_history_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])() : _props$router, _props$stateMapping = props.stateMapping, stateMapping = _props$stateMapping === void 0 ? (0,_lib_stateMappings_simple_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])() : _props$stateMapping, _props$$$internal = props.$$internal, $$internal = _props$$$internal === void 0 ? false : _props$$$internal;\n    return function(_ref) {\n        var instantSearchInstance = _ref.instantSearchInstance;\n        function topLevelCreateURL(nextState) {\n            var previousUiState = // If only the mainIndex is initialized, we don't yet know what other\n            // index widgets are used. Therefore we fall back to the initialUiState.\n            // We can't indiscriminately use the initialUiState because then we\n            // reintroduce state that was changed by the user.\n            // When there are no widgets, we are sure the user can't yet have made\n            // any changes.\n            instantSearchInstance.mainIndex.getWidgets().length === 0 ? instantSearchInstance._initialUiState : instantSearchInstance.mainIndex.getWidgetUiState({});\n            var uiState = Object.keys(nextState).reduce(function(acc, indexId) {\n                return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, indexId, nextState[indexId]));\n            }, previousUiState);\n            var route = stateMapping.stateToRoute(uiState);\n            return router.createURL(route);\n        }\n        // casting to UiState here to keep createURL unaware of custom UiState\n        // (as long as it's an object, it's ok)\n        instantSearchInstance._createURL = topLevelCreateURL;\n        var lastRouteState = undefined;\n        var initialUiState = instantSearchInstance._initialUiState;\n        return {\n            $$type: \"ais.router({router:\".concat(router.$$type || \"__unknown__\", \", stateMapping:\").concat(stateMapping.$$type || \"__unknown__\", \"})\"),\n            $$internal: $$internal,\n            onStateChange: function onStateChange(_ref2) {\n                var uiState = _ref2.uiState;\n                var routeState = stateMapping.stateToRoute(uiState);\n                if (lastRouteState === undefined || !(0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isEqual)(lastRouteState, routeState)) {\n                    router.write(routeState);\n                    lastRouteState = routeState;\n                }\n            },\n            subscribe: function subscribe() {\n                instantSearchInstance._initialUiState = _objectSpread(_objectSpread({}, initialUiState), stateMapping.routeToState(router.read()));\n                router.onUpdate(function(route) {\n                    if (instantSearchInstance.mainIndex.getWidgets().length > 0) {\n                        instantSearchInstance.setUiState(stateMapping.routeToState(route));\n                    }\n                });\n            },\n            started: function started() {\n                var _router$start;\n                (_router$start = router.start) === null || _router$start === void 0 ? void 0 : _router$start.call(router);\n            },\n            unsubscribe: function unsubscribe() {\n                router.dispose();\n            }\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/instantsearch.js/es/widgets/index/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/instantsearch.js/es/widgets/index/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! algoliasearch-helper */ \"(ssr)/./node_modules/instantsearch.js/node_modules/algoliasearch-helper/index.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/documentation.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/render-args.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js\");\n/* harmony import */ var _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/utils/index.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/utils/logger.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"initialSearchParameters\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\nvar withUsage = (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.createDocumentationMessageGenerator)({\n    name: \"index-widget\"\n});\n/**\n * This is the same content as helper._change / setState, but allowing for extra\n * UiState to be synchronized.\n * see: https://github.com/algolia/algoliasearch-helper-js/blob/6b835ffd07742f2d6b314022cce6848f5cfecd4a/src/algoliasearch.helper.js#L1311-L1324\n */ function privateHelperSetState(helper, _ref) {\n    var state = _ref.state, isPageReset = _ref.isPageReset, _uiState = _ref._uiState;\n    if (state !== helper.state) {\n        helper.state = state;\n        helper.emit(\"change\", {\n            state: helper.state,\n            results: helper.lastResults,\n            isPageReset: isPageReset,\n            _uiState: _uiState\n        });\n    }\n}\nfunction getLocalWidgetsUiState(widgets, widgetStateOptions) {\n    var initialUiState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return widgets.reduce(function(uiState, widget) {\n        if ((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget)(widget)) {\n            return uiState;\n        }\n        if (!widget.getWidgetUiState && !widget.getWidgetState) {\n            return uiState;\n        }\n        if (widget.getWidgetUiState) {\n            return widget.getWidgetUiState(uiState, widgetStateOptions);\n        }\n        return widget.getWidgetState(uiState, widgetStateOptions);\n    }, initialUiState);\n}\nfunction getLocalWidgetsSearchParameters(widgets, widgetSearchParametersOptions) {\n    var initialSearchParameters = widgetSearchParametersOptions.initialSearchParameters, rest = _objectWithoutProperties(widgetSearchParametersOptions, _excluded);\n    return widgets.filter(function(widget) {\n        return !(0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget)(widget);\n    }).reduce(function(state, widget) {\n        if (!widget.getWidgetSearchParameters) {\n            return state;\n        }\n        return widget.getWidgetSearchParameters(state, rest);\n    }, initialSearchParameters);\n}\nfunction resetPageFromWidgets(widgets) {\n    var indexWidgets = widgets.filter(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget);\n    if (indexWidgets.length === 0) {\n        return;\n    }\n    indexWidgets.forEach(function(widget) {\n        var widgetHelper = widget.getHelper();\n        privateHelperSetState(widgetHelper, {\n            state: widgetHelper.state.resetPage(),\n            isPageReset: true\n        });\n        resetPageFromWidgets(widget.getWidgets());\n    });\n}\nfunction resolveScopedResultsFromWidgets(widgets) {\n    var indexWidgets = widgets.filter(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget);\n    return indexWidgets.reduce(function(scopedResults, current) {\n        return scopedResults.concat.apply(scopedResults, [\n            {\n                indexId: current.getIndexId(),\n                results: current.getResults(),\n                helper: current.getHelper()\n            }\n        ].concat(_toConsumableArray(resolveScopedResultsFromWidgets(current.getWidgets()))));\n    }, []);\n}\nvar index = function index(widgetParams) {\n    if (widgetParams === undefined || widgetParams.indexName === undefined) {\n        throw new Error(withUsage(\"The `indexName` option is required.\"));\n    }\n    var indexName = widgetParams.indexName, _widgetParams$indexId = widgetParams.indexId, indexId = _widgetParams$indexId === void 0 ? indexName : _widgetParams$indexId;\n    var localWidgets = [];\n    var localUiState = {};\n    var localInstantSearchInstance = null;\n    var localParent = null;\n    var helper = null;\n    var derivedHelper = null;\n    var lastValidSearchParameters = null;\n    return {\n        $$type: \"ais.index\",\n        $$widgetType: \"ais.index\",\n        getIndexName: function getIndexName() {\n            return indexName;\n        },\n        getIndexId: function getIndexId() {\n            return indexId;\n        },\n        getHelper: function getHelper() {\n            return helper;\n        },\n        getResults: function getResults() {\n            var _derivedHelper;\n            if (!((_derivedHelper = derivedHelper) !== null && _derivedHelper !== void 0 && _derivedHelper.lastResults)) return null;\n            // To make the UI optimistic, we patch the state to display to the current\n            // one instead of the one associated with the latest results.\n            // This means user-driven UI changes (e.g., checked checkbox) are reflected\n            // immediately instead of waiting for Algolia to respond, regardless of\n            // the status of the network request.\n            derivedHelper.lastResults._state = helper.state;\n            return derivedHelper.lastResults;\n        },\n        getPreviousState: function getPreviousState() {\n            return lastValidSearchParameters;\n        },\n        getScopedResults: function getScopedResults() {\n            var widgetParent = this.getParent();\n            // If the widget is the root, we consider itself as the only sibling.\n            var widgetSiblings = widgetParent ? widgetParent.getWidgets() : [\n                this\n            ];\n            return resolveScopedResultsFromWidgets(widgetSiblings);\n        },\n        getParent: function getParent() {\n            return localParent;\n        },\n        createURL: function createURL(nextState) {\n            if (typeof nextState === \"function\") {\n                return localInstantSearchInstance._createURL(_defineProperty({}, indexId, nextState(localUiState)));\n            }\n            return localInstantSearchInstance._createURL(_defineProperty({}, indexId, getLocalWidgetsUiState(localWidgets, {\n                searchParameters: nextState,\n                helper: helper\n            })));\n        },\n        getWidgets: function getWidgets() {\n            return localWidgets;\n        },\n        addWidgets: function addWidgets(widgets) {\n            var _this = this;\n            if (!Array.isArray(widgets)) {\n                throw new Error(withUsage(\"The `addWidgets` method expects an array of widgets.\"));\n            }\n            if (widgets.some(function(widget) {\n                return typeof widget.init !== \"function\" && typeof widget.render !== \"function\";\n            })) {\n                throw new Error(withUsage(\"The widget definition expects a `render` and/or an `init` method.\"));\n            }\n            localWidgets = localWidgets.concat(widgets);\n            if (localInstantSearchInstance && Boolean(widgets.length)) {\n                privateHelperSetState(helper, {\n                    state: getLocalWidgetsSearchParameters(localWidgets, {\n                        uiState: localUiState,\n                        initialSearchParameters: helper.state\n                    }),\n                    _uiState: localUiState\n                });\n                // We compute the render state before calling `init` in a separate loop\n                // to construct the whole render state object that is then passed to\n                // `init`.\n                widgets.forEach(function(widget) {\n                    if (widget.getRenderState) {\n                        var renderState = widget.getRenderState(localInstantSearchInstance.renderState[_this.getIndexId()] || {}, (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createInitArgs)(localInstantSearchInstance, _this, localInstantSearchInstance._initialUiState));\n                        storeRenderState({\n                            renderState: renderState,\n                            instantSearchInstance: localInstantSearchInstance,\n                            parent: _this\n                        });\n                    }\n                });\n                widgets.forEach(function(widget) {\n                    if (widget.init) {\n                        widget.init((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createInitArgs)(localInstantSearchInstance, _this, localInstantSearchInstance._initialUiState));\n                    }\n                });\n                localInstantSearchInstance.scheduleSearch();\n            }\n            return this;\n        },\n        removeWidgets: function removeWidgets(widgets) {\n            var _this2 = this;\n            if (!Array.isArray(widgets)) {\n                throw new Error(withUsage(\"The `removeWidgets` method expects an array of widgets.\"));\n            }\n            if (widgets.some(function(widget) {\n                return typeof widget.dispose !== \"function\";\n            })) {\n                throw new Error(withUsage(\"The widget definition expects a `dispose` method.\"));\n            }\n            localWidgets = localWidgets.filter(function(widget) {\n                return widgets.indexOf(widget) === -1;\n            });\n            if (localInstantSearchInstance && Boolean(widgets.length)) {\n                var _nextState = widgets.reduce(function(state, widget) {\n                    // the `dispose` method exists at this point we already assert it\n                    var next = widget.dispose({\n                        helper: helper,\n                        state: state,\n                        parent: _this2\n                    });\n                    return next || state;\n                }, helper.state);\n                localUiState = getLocalWidgetsUiState(localWidgets, {\n                    searchParameters: _nextState,\n                    helper: helper\n                });\n                helper.setState(getLocalWidgetsSearchParameters(localWidgets, {\n                    uiState: localUiState,\n                    initialSearchParameters: _nextState\n                }));\n                if (localWidgets.length) {\n                    localInstantSearchInstance.scheduleSearch();\n                }\n            }\n            return this;\n        },\n        init: function init(_ref2) {\n            var _this3 = this, _instantSearchInstanc;\n            var instantSearchInstance = _ref2.instantSearchInstance, parent = _ref2.parent, uiState = _ref2.uiState;\n            if (helper !== null) {\n                // helper is already initialized, therefore we do not need to set up\n                // any listeners\n                return;\n            }\n            localInstantSearchInstance = instantSearchInstance;\n            localParent = parent;\n            localUiState = uiState[indexId] || {};\n            // The `mainHelper` is already defined at this point. The instance is created\n            // inside InstantSearch at the `start` method, which occurs before the `init`\n            // step.\n            var mainHelper = instantSearchInstance.mainHelper;\n            var parameters = getLocalWidgetsSearchParameters(localWidgets, {\n                uiState: localUiState,\n                initialSearchParameters: new algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__.SearchParameters({\n                    index: indexName\n                })\n            });\n            // This Helper is only used for state management we do not care about the\n            // `searchClient`. Only the \"main\" Helper created at the `InstantSearch`\n            // level is aware of the client.\n            helper = algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__({}, parameters.index, parameters);\n            // We forward the call to `search` to the \"main\" instance of the Helper\n            // which is responsible for managing the queries (it's the only one that is\n            // aware of the `searchClient`).\n            helper.search = function() {\n                if (instantSearchInstance.onStateChange) {\n                    instantSearchInstance.onStateChange({\n                        uiState: instantSearchInstance.mainIndex.getWidgetUiState({}),\n                        setUiState: function setUiState(nextState) {\n                            return instantSearchInstance.setUiState(nextState, false);\n                        }\n                    });\n                    // We don't trigger a search when controlled because it becomes the\n                    // responsibility of `setUiState`.\n                    return mainHelper;\n                }\n                return mainHelper.search();\n            };\n            helper.searchWithoutTriggeringOnStateChange = function() {\n                return mainHelper.search();\n            };\n            // We use the same pattern for the `searchForFacetValues`.\n            helper.searchForFacetValues = function(facetName, facetValue, maxFacetHits, userState) {\n                var state = helper.state.setQueryParameters(userState);\n                return mainHelper.searchForFacetValues(facetName, facetValue, maxFacetHits, state);\n            };\n            derivedHelper = mainHelper.derive(function() {\n                return _lib_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.mergeSearchParameters.apply(void 0, _toConsumableArray((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.resolveSearchParameters)(_this3)));\n            });\n            var indexInitialResults = (_instantSearchInstanc = instantSearchInstance._initialResults) === null || _instantSearchInstanc === void 0 ? void 0 : _instantSearchInstanc[this.getIndexId()];\n            if (indexInitialResults) {\n                // We restore the shape of the results provided to the instance to respect\n                // the helper's structure.\n                var results = new algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__.SearchResults(new algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__.SearchParameters(indexInitialResults.state), indexInitialResults.results);\n                derivedHelper.lastResults = results;\n                helper.lastResults = results;\n            }\n            // Subscribe to the Helper state changes for the page before widgets\n            // are initialized. This behavior mimics the original one of the Helper.\n            // It makes sense to replicate it at the `init` step. We have another\n            // listener on `change` below, once `init` is done.\n            helper.on(\"change\", function(_ref3) {\n                var isPageReset = _ref3.isPageReset;\n                if (isPageReset) {\n                    resetPageFromWidgets(localWidgets);\n                }\n            });\n            derivedHelper.on(\"search\", function() {\n                // The index does not manage the \"staleness\" of the search. This is the\n                // responsibility of the main instance. It does not make sense to manage\n                // it at the index level because it's either: all of them or none of them\n                // that are stalled. The queries are performed into a single network request.\n                instantSearchInstance.scheduleStalledRender();\n                if (true) {\n                    (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.checkIndexUiState)({\n                        index: _this3,\n                        indexUiState: localUiState\n                    });\n                }\n            });\n            derivedHelper.on(\"result\", function(_ref4) {\n                var results = _ref4.results;\n                // The index does not render the results it schedules a new render\n                // to let all the other indices emit their own results. It allows us to\n                // run the render process in one pass.\n                instantSearchInstance.scheduleRender();\n                // the derived helper is the one which actually searches, but the helper\n                // which is exposed e.g. via instance.helper, doesn't search, and thus\n                // does not have access to lastResults, which it used to in pre-federated\n                // search behavior.\n                helper.lastResults = results;\n                lastValidSearchParameters = results === null || results === void 0 ? void 0 : results._state;\n            });\n            // We compute the render state before calling `init` in a separate loop\n            // to construct the whole render state object that is then passed to\n            // `init`.\n            localWidgets.forEach(function(widget) {\n                if (widget.getRenderState) {\n                    var renderState = widget.getRenderState(instantSearchInstance.renderState[_this3.getIndexId()] || {}, (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createInitArgs)(instantSearchInstance, _this3, uiState));\n                    storeRenderState({\n                        renderState: renderState,\n                        instantSearchInstance: instantSearchInstance,\n                        parent: _this3\n                    });\n                }\n            });\n            localWidgets.forEach(function(widget) {\n                 true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.warning)(// if it has NO getWidgetState or if it has getWidgetUiState, we don't warn\n                // aka we warn if there's _only_ getWidgetState\n                !widget.getWidgetState || Boolean(widget.getWidgetUiState), \"The `getWidgetState` method is renamed `getWidgetUiState` and will no longer exist under that name in InstantSearch.js 5.x. Please use `getWidgetUiState` instead.\") : 0;\n                if (widget.init) {\n                    widget.init((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createInitArgs)(instantSearchInstance, _this3, uiState));\n                }\n            });\n            // Subscribe to the Helper state changes for the `uiState` once widgets\n            // are initialized. Until the first render, state changes are part of the\n            // configuration step. This is mainly for backward compatibility with custom\n            // widgets. When the subscription happens before the `init` step, the (static)\n            // configuration of the widget is pushed in the URL. That's what we want to avoid.\n            // https://github.com/algolia/instantsearch.js/pull/994/commits/4a672ae3fd78809e213de0368549ef12e9dc9454\n            helper.on(\"change\", function(event) {\n                var state = event.state;\n                var _uiState = event._uiState;\n                localUiState = getLocalWidgetsUiState(localWidgets, {\n                    searchParameters: state,\n                    helper: helper\n                }, _uiState || {});\n                // We don't trigger an internal change when controlled because it\n                // becomes the responsibility of `setUiState`.\n                if (!instantSearchInstance.onStateChange) {\n                    instantSearchInstance.onInternalStateChange();\n                }\n            });\n            if (indexInitialResults) {\n                // If there are initial results, we're not notified of the next results\n                // because we don't trigger an initial search. We therefore need to directly\n                // schedule a render that will render the results injected on the helper.\n                instantSearchInstance.scheduleRender();\n            }\n        },\n        render: function render(_ref5) {\n            var _this4 = this;\n            var instantSearchInstance = _ref5.instantSearchInstance;\n            // we can't attach a listener to the error event of search, as the error\n            // then would no longer be thrown for global handlers.\n            if (instantSearchInstance.status === \"error\" && !instantSearchInstance.mainHelper.hasPendingRequests() && lastValidSearchParameters) {\n                helper.setState(lastValidSearchParameters);\n            }\n            // We only render index widgets if there are no results.\n            // This makes sure `render` is never called with `results` being `null`.\n            var widgetsToRender = this.getResults() ? localWidgets : localWidgets.filter(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget);\n            widgetsToRender.forEach(function(widget) {\n                if (widget.getRenderState) {\n                    var renderState = widget.getRenderState(instantSearchInstance.renderState[_this4.getIndexId()] || {}, (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createRenderArgs)(instantSearchInstance, _this4));\n                    storeRenderState({\n                        renderState: renderState,\n                        instantSearchInstance: instantSearchInstance,\n                        parent: _this4\n                    });\n                }\n            });\n            widgetsToRender.forEach(function(widget) {\n                // At this point, all the variables used below are set. Both `helper`\n                // and `derivedHelper` have been created at the `init` step. The attribute\n                // `lastResults` might be `null` though. It's possible that a stalled render\n                // happens before the result e.g with a dynamically added index the request might\n                // be delayed. The render is triggered for the complete tree but some parts do\n                // not have results yet.\n                if (widget.render) {\n                    widget.render((0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.createRenderArgs)(instantSearchInstance, _this4));\n                }\n            });\n        },\n        dispose: function dispose() {\n            var _this5 = this, _helper, _derivedHelper2;\n            localWidgets.forEach(function(widget) {\n                if (widget.dispose) {\n                    // The dispose function is always called once the instance is started\n                    // (it's an effect of `removeWidgets`). The index is initialized and\n                    // the Helper is available. We don't care about the return value of\n                    // `dispose` because the index is removed. We can't call `removeWidgets`\n                    // because we want to keep the widgets on the instance, to allow idempotent\n                    // operations on `add` & `remove`.\n                    widget.dispose({\n                        helper: helper,\n                        state: helper.state,\n                        parent: _this5\n                    });\n                }\n            });\n            localInstantSearchInstance = null;\n            localParent = null;\n            (_helper = helper) === null || _helper === void 0 ? void 0 : _helper.removeAllListeners();\n            helper = null;\n            (_derivedHelper2 = derivedHelper) === null || _derivedHelper2 === void 0 ? void 0 : _derivedHelper2.detach();\n            derivedHelper = null;\n        },\n        getWidgetUiState: function getWidgetUiState(uiState) {\n            return localWidgets.filter(_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIndexWidget).reduce(function(previousUiState, innerIndex) {\n                return innerIndex.getWidgetUiState(previousUiState);\n            }, _objectSpread(_objectSpread({}, uiState), {}, _defineProperty({}, indexId, _objectSpread(_objectSpread({}, uiState[indexId]), localUiState))));\n        },\n        getWidgetState: function getWidgetState(uiState) {\n             true ? (0,_lib_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.warning)(false, \"The `getWidgetState` method is renamed `getWidgetUiState` and will no longer exist under that name in InstantSearch.js 5.x. Please use `getWidgetUiState` instead.\") : 0;\n            return this.getWidgetUiState(uiState);\n        },\n        getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {\n            var uiState = _ref6.uiState;\n            return getLocalWidgetsSearchParameters(localWidgets, {\n                uiState: uiState,\n                initialSearchParameters: searchParameters\n            });\n        },\n        refreshUiState: function refreshUiState() {\n            localUiState = getLocalWidgetsUiState(localWidgets, {\n                searchParameters: this.getHelper().state,\n                helper: this.getHelper()\n            }, localUiState);\n        },\n        setIndexUiState: function setIndexUiState(indexUiState) {\n            var nextIndexUiState = typeof indexUiState === \"function\" ? indexUiState(localUiState) : indexUiState;\n            localInstantSearchInstance.setUiState(function(state) {\n                return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, indexId, nextIndexUiState));\n            });\n        }\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\nfunction storeRenderState(_ref7) {\n    var renderState = _ref7.renderState, instantSearchInstance = _ref7.instantSearchInstance, parent = _ref7.parent;\n    var parentIndexName = parent ? parent.getIndexId() : instantSearchInstance.mainIndex.getIndexId();\n    instantSearchInstance.renderState = _objectSpread(_objectSpread({}, instantSearchInstance.renderState), {}, _defineProperty({}, parentIndexName, _objectSpread(_objectSpread({}, instantSearchInstance.renderState[parentIndexName]), renderState)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/instantsearch.js/es/widgets/index/index.js\n");

/***/ })

};
;