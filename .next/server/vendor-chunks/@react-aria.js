"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-aria";
exports.ids = ["vendor-chunks/@react-aria"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-aria/datepicker/dist/import.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@react-aria/datepicker/dist/import.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDateField: () => (/* binding */ $16f0b7bb276bc17e$export$5591b0b878c1a989),\n/* harmony export */   useDatePicker: () => (/* binding */ $6057a3d2a53a12fd$export$42df105a73306d51),\n/* harmony export */   useDateRangePicker: () => (/* binding */ $887cac91b7cc8801$export$12fd5f0e9f4bb192),\n/* harmony export */   useDateSegment: () => (/* binding */ $32489daedd52963e$export$1315d136e6f7581),\n/* harmony export */   useDisplayNames: () => (/* binding */ $3aeceb3a64eb8358$export$d42c60378c8168f8),\n/* harmony export */   useTimeField: () => (/* binding */ $16f0b7bb276bc17e$export$4c842f6a241dc825)\n/* harmony export */ });\n/* harmony import */ var _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-aria/focus */ \"(ssr)/./node_modules/@react-aria/focus/dist/import.mjs\");\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_aria_label__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-aria/label */ \"(ssr)/./node_modules/@react-aria/label/dist/import.mjs\");\n/* harmony import */ var _react_aria_interactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-aria/interactions */ \"(ssr)/./node_modules/@react-aria/interactions/dist/import.mjs\");\n/* harmony import */ var _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-aria/i18n */ \"(ssr)/./node_modules/@react-aria/i18n/dist/real-module.mjs\");\n/* harmony import */ var _internationalized_date__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @internationalized/date */ \"(ssr)/./node_modules/@internationalized/date/dist/import.mjs\");\n/* harmony import */ var _internationalized_number__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @internationalized/number */ \"(ssr)/./node_modules/@internationalized/number/dist/import.mjs\");\n/* harmony import */ var _react_aria_spinbutton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @react-aria/spinbutton */ \"(ssr)/./node_modules/@react-aria/spinbutton/dist/import.mjs\");\n/* harmony import */ var _internationalized_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @internationalized/string */ \"(ssr)/./node_modules/@internationalized/string/dist/import.mjs\");\n\n\n\n\n\n\n\n\n\n\nfunction $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ var $dfb4eba373ed9493$exports = {};\nvar $f23889fffbde9058$exports = {};\n$f23889fffbde9058$exports = {\n    \"calendar\": `التقويم`,\n    \"day\": `يوم`,\n    \"dayPeriod\": `ص/م`,\n    \"endDate\": `تاريخ الانتهاء`,\n    \"era\": `العصر`,\n    \"hour\": `الساعات`,\n    \"minute\": `الدقائق`,\n    \"month\": `الشهر`,\n    \"second\": `الثواني`,\n    \"selectedDateDescription\": (args)=>`تاريخ محدد: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`المدى الزمني المحدد: ${args.startDate} إلى ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`الوقت المحدد: ${args.time}`,\n    \"startDate\": `تاريخ البدء`,\n    \"timeZoneName\": `التوقيت`,\n    \"weekday\": `اليوم`,\n    \"year\": `السنة`\n};\nvar $09d9badaa8903929$exports = {};\n$09d9badaa8903929$exports = {\n    \"calendar\": `Календар`,\n    \"day\": `ден`,\n    \"dayPeriod\": `пр.об./сл.об.`,\n    \"endDate\": `Крайна дата`,\n    \"era\": `ера`,\n    \"hour\": `час`,\n    \"minute\": `минута`,\n    \"month\": `месец`,\n    \"second\": `секунда`,\n    \"selectedDateDescription\": (args)=>`Избрана дата: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Избран диапазон: ${args.startDate} до ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Избрано време: ${args.time}`,\n    \"startDate\": `Начална дата`,\n    \"timeZoneName\": `часова зона`,\n    \"weekday\": `ден от седмицата`,\n    \"year\": `година`\n};\nvar $151b77e0fd711730$exports = {};\n$151b77e0fd711730$exports = {\n    \"calendar\": `Kalendář`,\n    \"day\": `den`,\n    \"dayPeriod\": `část dne`,\n    \"endDate\": `Konečné datum`,\n    \"era\": `letopočet`,\n    \"hour\": `hodina`,\n    \"minute\": `minuta`,\n    \"month\": `měsíc`,\n    \"second\": `sekunda`,\n    \"selectedDateDescription\": (args)=>`Vybrané datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Vybrané období: ${args.startDate} až ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Vybraný čas: ${args.time}`,\n    \"startDate\": `Počáteční datum`,\n    \"timeZoneName\": `časové pásmo`,\n    \"weekday\": `den v týdnu`,\n    \"year\": `rok`\n};\nvar $61915aa8630b90a2$exports = {};\n$61915aa8630b90a2$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `dag`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Slutdato`,\n    \"era\": `æra`,\n    \"hour\": `time`,\n    \"minute\": `minut`,\n    \"month\": `måned`,\n    \"second\": `sekund`,\n    \"selectedDateDescription\": (args)=>`Valgt dato: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Valgt interval: ${args.startDate} til ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Valgt tidspunkt: ${args.time}`,\n    \"startDate\": `Startdato`,\n    \"timeZoneName\": `tidszone`,\n    \"weekday\": `ugedag`,\n    \"year\": `år`\n};\nvar $35cea00159787840$exports = {};\n$35cea00159787840$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `Tag`,\n    \"dayPeriod\": `Tageshälfte`,\n    \"endDate\": `Enddatum`,\n    \"era\": `Epoche`,\n    \"hour\": `Stunde`,\n    \"minute\": `Minute`,\n    \"month\": `Monat`,\n    \"second\": `Sekunde`,\n    \"selectedDateDescription\": (args)=>`Ausgewähltes Datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Ausgewählter Bereich: ${args.startDate} bis ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Ausgewählte Zeit: ${args.time}`,\n    \"startDate\": `Anfangsdatum`,\n    \"timeZoneName\": `Zeitzone`,\n    \"weekday\": `Wochentag`,\n    \"year\": `Jahr`\n};\nvar $518b4e82b9eacafd$exports = {};\n$518b4e82b9eacafd$exports = {\n    \"calendar\": `Ημερολόγιο`,\n    \"day\": `ημέρα`,\n    \"dayPeriod\": `π.μ./μ.μ.`,\n    \"endDate\": `Ημερομηνία λήξης`,\n    \"era\": `περίοδος`,\n    \"hour\": `ώρα`,\n    \"minute\": `λεπτό`,\n    \"month\": `μήνας`,\n    \"second\": `δευτερόλεπτο`,\n    \"selectedDateDescription\": (args)=>`Επιλεγμένη ημερομηνία: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Επιλεγμένο εύρος: ${args.startDate} έως ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Επιλεγμένη ώρα: ${args.time}`,\n    \"startDate\": `Ημερομηνία έναρξης`,\n    \"timeZoneName\": `ζώνη ώρας`,\n    \"weekday\": `καθημερινή`,\n    \"year\": `έτος`\n};\nvar $1c2b297f7e2cf474$exports = {};\n$1c2b297f7e2cf474$exports = {\n    \"era\": `era`,\n    \"year\": `year`,\n    \"month\": `month`,\n    \"day\": `day`,\n    \"hour\": `hour`,\n    \"minute\": `minute`,\n    \"second\": `second`,\n    \"dayPeriod\": `AM/PM`,\n    \"calendar\": `Calendar`,\n    \"startDate\": `Start Date`,\n    \"endDate\": `End Date`,\n    \"weekday\": `day of the week`,\n    \"timeZoneName\": `time zone`,\n    \"selectedDateDescription\": (args)=>`Selected Date: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Selected Range: ${args.startDate} to ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Selected Time: ${args.time}`\n};\nvar $07f628a707cf9b18$exports = {};\n$07f628a707cf9b18$exports = {\n    \"calendar\": `Calendario`,\n    \"day\": `día`,\n    \"dayPeriod\": `a. m./p. m.`,\n    \"endDate\": `Fecha final`,\n    \"era\": `era`,\n    \"hour\": `hora`,\n    \"minute\": `minuto`,\n    \"month\": `mes`,\n    \"second\": `segundo`,\n    \"selectedDateDescription\": (args)=>`Fecha seleccionada: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Rango seleccionado: ${args.startDate} a ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Hora seleccionada: ${args.time}`,\n    \"startDate\": `Fecha de inicio`,\n    \"timeZoneName\": `zona horaria`,\n    \"weekday\": `día de la semana`,\n    \"year\": `año`\n};\nvar $db553ffe17c7f4db$exports = {};\n$db553ffe17c7f4db$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `päev`,\n    \"dayPeriod\": `enne/pärast lõunat`,\n    \"endDate\": `Lõppkuupäev`,\n    \"era\": `ajastu`,\n    \"hour\": `tund`,\n    \"minute\": `minut`,\n    \"month\": `kuu`,\n    \"second\": `sekund`,\n    \"selectedDateDescription\": (args)=>`Valitud kuupäev: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Valitud vahemik: ${args.startDate} kuni ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Valitud aeg: ${args.time}`,\n    \"startDate\": `Alguskuupäev`,\n    \"timeZoneName\": `ajavöönd`,\n    \"weekday\": `nädalapäev`,\n    \"year\": `aasta`\n};\nvar $4afcfe00cd703f83$exports = {};\n$4afcfe00cd703f83$exports = {\n    \"calendar\": `Kalenteri`,\n    \"day\": `päivä`,\n    \"dayPeriod\": `vuorokaudenaika`,\n    \"endDate\": `Päättymispäivä`,\n    \"era\": `aikakausi`,\n    \"hour\": `tunti`,\n    \"minute\": `minuutti`,\n    \"month\": `kuukausi`,\n    \"second\": `sekunti`,\n    \"selectedDateDescription\": (args)=>`Valittu päivämäärä: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Valittu aikaväli: ${args.startDate} – ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Valittu aika: ${args.time}`,\n    \"startDate\": `Alkamispäivä`,\n    \"timeZoneName\": `aikavyöhyke`,\n    \"weekday\": `viikonpäivä`,\n    \"year\": `vuosi`\n};\nvar $1d2645d18d4c5be0$exports = {};\n$1d2645d18d4c5be0$exports = {\n    \"calendar\": `Calendrier`,\n    \"day\": `jour`,\n    \"dayPeriod\": `cadran`,\n    \"endDate\": `Date de fin`,\n    \"era\": `ère`,\n    \"hour\": `heure`,\n    \"minute\": `minute`,\n    \"month\": `mois`,\n    \"second\": `seconde`,\n    \"selectedDateDescription\": (args)=>`Date sélectionnée : ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Plage sélectionnée : ${args.startDate} au ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Heure choisie : ${args.time}`,\n    \"startDate\": `Date de début`,\n    \"timeZoneName\": `fuseau horaire`,\n    \"weekday\": `jour de la semaine`,\n    \"year\": `année`\n};\nvar $64cb6a9be1f6fa48$exports = {};\n$64cb6a9be1f6fa48$exports = {\n    \"calendar\": `לוח שנה`,\n    \"day\": `יום`,\n    \"dayPeriod\": `לפנה״צ/אחה״צ`,\n    \"endDate\": `תאריך סיום`,\n    \"era\": `תקופה`,\n    \"hour\": `שעה`,\n    \"minute\": `דקה`,\n    \"month\": `חודש`,\n    \"second\": `שנייה`,\n    \"selectedDateDescription\": (args)=>`תאריך נבחר: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`טווח נבחר: ${args.startDate} עד ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`זמן נבחר: ${args.time}`,\n    \"startDate\": `תאריך התחלה`,\n    \"timeZoneName\": `אזור זמן`,\n    \"weekday\": `יום בשבוע`,\n    \"year\": `שנה`\n};\nvar $2a1ef2e8050be27a$exports = {};\n$2a1ef2e8050be27a$exports = {\n    \"calendar\": `Kalendar`,\n    \"day\": `dan`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Datum završetka`,\n    \"era\": `era`,\n    \"hour\": `sat`,\n    \"minute\": `minuta`,\n    \"month\": `mjesec`,\n    \"second\": `sekunda`,\n    \"selectedDateDescription\": (args)=>`Odabrani datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Odabrani raspon: ${args.startDate} do ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Odabrano vrijeme: ${args.time}`,\n    \"startDate\": `Datum početka`,\n    \"timeZoneName\": `vremenska zona`,\n    \"weekday\": `dan u tjednu`,\n    \"year\": `godina`\n};\nvar $ad429dca102acd0e$exports = {};\n$ad429dca102acd0e$exports = {\n    \"calendar\": `Naptár`,\n    \"day\": `nap`,\n    \"dayPeriod\": `napszak`,\n    \"endDate\": `Befejező dátum`,\n    \"era\": `éra`,\n    \"hour\": `óra`,\n    \"minute\": `perc`,\n    \"month\": `hónap`,\n    \"second\": `másodperc`,\n    \"selectedDateDescription\": (args)=>`Kijelölt dátum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Kijelölt tartomány: ${args.startDate}–${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Kijelölt idő: ${args.time}`,\n    \"startDate\": `Kezdő dátum`,\n    \"timeZoneName\": `időzóna`,\n    \"weekday\": `hét napja`,\n    \"year\": `év`\n};\nvar $6e68cb5d1cb97bd2$exports = {};\n$6e68cb5d1cb97bd2$exports = {\n    \"calendar\": `Calendario`,\n    \"day\": `giorno`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Data finale`,\n    \"era\": `era`,\n    \"hour\": `ora`,\n    \"minute\": `minuto`,\n    \"month\": `mese`,\n    \"second\": `secondo`,\n    \"selectedDateDescription\": (args)=>`Data selezionata: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Intervallo selezionato: da ${args.startDate} a ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Ora selezionata: ${args.time}`,\n    \"startDate\": `Data iniziale`,\n    \"timeZoneName\": `fuso orario`,\n    \"weekday\": `giorno della settimana`,\n    \"year\": `anno`\n};\nvar $a82ee9af063ee069$exports = {};\n$a82ee9af063ee069$exports = {\n    \"calendar\": `カレンダー`,\n    \"day\": `日`,\n    \"dayPeriod\": `午前/午後`,\n    \"endDate\": `終了日`,\n    \"era\": `時代`,\n    \"hour\": `時`,\n    \"minute\": `分`,\n    \"month\": `月`,\n    \"second\": `秒`,\n    \"selectedDateDescription\": (args)=>`選択した日付 : ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`選択範囲 : ${args.startDate} から ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`選択した時間 : ${args.time}`,\n    \"startDate\": `開始日`,\n    \"timeZoneName\": `タイムゾーン`,\n    \"weekday\": `曜日`,\n    \"year\": `年`\n};\nvar $67e9091dbf37d4eb$exports = {};\n$67e9091dbf37d4eb$exports = {\n    \"calendar\": `달력`,\n    \"day\": `일`,\n    \"dayPeriod\": `오전/오후`,\n    \"endDate\": `종료 날짜`,\n    \"era\": `연호`,\n    \"hour\": `시`,\n    \"minute\": `분`,\n    \"month\": `월`,\n    \"second\": `초`,\n    \"selectedDateDescription\": (args)=>`선택 일자: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`선택 범위: ${args.startDate} ~ ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`선택 시간: ${args.time}`,\n    \"startDate\": `시작 날짜`,\n    \"timeZoneName\": `시간대`,\n    \"weekday\": `요일`,\n    \"year\": `년`\n};\nvar $75834f9729f653d1$exports = {};\n$75834f9729f653d1$exports = {\n    \"calendar\": `Kalendorius`,\n    \"day\": `diena`,\n    \"dayPeriod\": `iki pietų / po pietų`,\n    \"endDate\": `Pabaigos data`,\n    \"era\": `era`,\n    \"hour\": `valanda`,\n    \"minute\": `minutė`,\n    \"month\": `mėnuo`,\n    \"second\": `sekundė`,\n    \"selectedDateDescription\": (args)=>`Pasirinkta data: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Pasirinktas intervalas: nuo ${args.startDate} iki ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Pasirinktas laikas: ${args.time}`,\n    \"startDate\": `Pradžios data`,\n    \"timeZoneName\": `laiko juosta`,\n    \"weekday\": `savaitės diena`,\n    \"year\": `metai`\n};\nvar $a2df2c2520b4a7f0$exports = {};\n$a2df2c2520b4a7f0$exports = {\n    \"calendar\": `Kalendārs`,\n    \"day\": `diena`,\n    \"dayPeriod\": `priekšpusdienā/pēcpusdienā`,\n    \"endDate\": `Beigu datums`,\n    \"era\": `ēra`,\n    \"hour\": `stundas`,\n    \"minute\": `minūtes`,\n    \"month\": `mēnesis`,\n    \"second\": `sekundes`,\n    \"selectedDateDescription\": (args)=>`Atlasītais datums: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Atlasītais diapazons: no ${args.startDate} līdz ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Atlasītais laiks: ${args.time}`,\n    \"startDate\": `Sākuma datums`,\n    \"timeZoneName\": `laika josla`,\n    \"weekday\": `nedēļas diena`,\n    \"year\": `gads`\n};\nvar $aedcd71db4933ed5$exports = {};\n$aedcd71db4933ed5$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `dag`,\n    \"dayPeriod\": `a.m./p.m.`,\n    \"endDate\": `Sluttdato`,\n    \"era\": `tidsalder`,\n    \"hour\": `time`,\n    \"minute\": `minutt`,\n    \"month\": `måned`,\n    \"second\": `sekund`,\n    \"selectedDateDescription\": (args)=>`Valgt dato: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Valgt område: ${args.startDate} til ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Valgt tid: ${args.time}`,\n    \"startDate\": `Startdato`,\n    \"timeZoneName\": `tidssone`,\n    \"weekday\": `ukedag`,\n    \"year\": `år`\n};\nvar $3b2df9e54353046c$exports = {};\n$3b2df9e54353046c$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `dag`,\n    \"dayPeriod\": `a.m./p.m.`,\n    \"endDate\": `Einddatum`,\n    \"era\": `tijdperk`,\n    \"hour\": `uur`,\n    \"minute\": `minuut`,\n    \"month\": `maand`,\n    \"second\": `seconde`,\n    \"selectedDateDescription\": (args)=>`Geselecteerde datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Geselecteerd bereik: ${args.startDate} tot ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Geselecteerde tijd: ${args.time}`,\n    \"startDate\": `Startdatum`,\n    \"timeZoneName\": `tijdzone`,\n    \"weekday\": `dag van de week`,\n    \"year\": `jaar`\n};\nvar $c03fe977fcfafe93$exports = {};\n$c03fe977fcfafe93$exports = {\n    \"calendar\": `Kalendarz`,\n    \"day\": `dzień`,\n    \"dayPeriod\": `rano / po południu / wieczorem`,\n    \"endDate\": `Data końcowa`,\n    \"era\": `era`,\n    \"hour\": `godzina`,\n    \"minute\": `minuta`,\n    \"month\": `miesiąc`,\n    \"second\": `sekunda`,\n    \"selectedDateDescription\": (args)=>`Wybrana data: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Wybrany zakres: ${args.startDate} do ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Wybrany czas: ${args.time}`,\n    \"startDate\": `Data początkowa`,\n    \"timeZoneName\": `strefa czasowa`,\n    \"weekday\": `dzień tygodnia`,\n    \"year\": `rok`\n};\nvar $569f006fc292345f$exports = {};\n$569f006fc292345f$exports = {\n    \"calendar\": `Calendário`,\n    \"day\": `dia`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Data final`,\n    \"era\": `era`,\n    \"hour\": `hora`,\n    \"minute\": `minuto`,\n    \"month\": `mês`,\n    \"second\": `segundo`,\n    \"selectedDateDescription\": (args)=>`Data selecionada: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Hora selecionada: ${args.time}`,\n    \"startDate\": `Data inicial`,\n    \"timeZoneName\": `fuso horário`,\n    \"weekday\": `dia da semana`,\n    \"year\": `ano`\n};\nvar $7c2494e14452f2dd$exports = {};\n$7c2494e14452f2dd$exports = {\n    \"calendar\": `Calendário`,\n    \"day\": `dia`,\n    \"dayPeriod\": `am/pm`,\n    \"endDate\": `Data de Término`,\n    \"era\": `era`,\n    \"hour\": `hora`,\n    \"minute\": `minuto`,\n    \"month\": `mês`,\n    \"second\": `segundo`,\n    \"selectedDateDescription\": (args)=>`Data selecionada: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Hora selecionada: ${args.time}`,\n    \"startDate\": `Data de Início`,\n    \"timeZoneName\": `fuso horário`,\n    \"weekday\": `dia da semana`,\n    \"year\": `ano`\n};\nvar $eb82ef981b5592bf$exports = {};\n$eb82ef981b5592bf$exports = {\n    \"calendar\": `Calendar`,\n    \"day\": `zi`,\n    \"dayPeriod\": `a.m/p.m.`,\n    \"endDate\": `Dată final`,\n    \"era\": `eră`,\n    \"hour\": `oră`,\n    \"minute\": `minut`,\n    \"month\": `lună`,\n    \"second\": `secundă`,\n    \"selectedDateDescription\": (args)=>`Dată selectată: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Interval selectat: de la ${args.startDate} până la ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Ora selectată: ${args.time}`,\n    \"startDate\": `Dată început`,\n    \"timeZoneName\": `fus orar`,\n    \"weekday\": `ziua din săptămână`,\n    \"year\": `an`\n};\nvar $6efa0e119f396950$exports = {};\n$6efa0e119f396950$exports = {\n    \"calendar\": `Календарь`,\n    \"day\": `день`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Дата окончания`,\n    \"era\": `эра`,\n    \"hour\": `час`,\n    \"minute\": `минута`,\n    \"month\": `месяц`,\n    \"second\": `секунда`,\n    \"selectedDateDescription\": (args)=>`Выбранная дата: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Выбранный диапазон: с ${args.startDate} по ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Выбранное время: ${args.time}`,\n    \"startDate\": `Дата начала`,\n    \"timeZoneName\": `часовой пояс`,\n    \"weekday\": `день недели`,\n    \"year\": `год`\n};\nvar $7f5e57085d7f5049$exports = {};\n$7f5e57085d7f5049$exports = {\n    \"calendar\": `Kalendár`,\n    \"day\": `deň`,\n    \"dayPeriod\": `AM/PM`,\n    \"endDate\": `Dátum ukončenia`,\n    \"era\": `letopočet`,\n    \"hour\": `hodina`,\n    \"minute\": `minúta`,\n    \"month\": `mesiac`,\n    \"second\": `sekunda`,\n    \"selectedDateDescription\": (args)=>`Vybratý dátum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Vybratý rozsah: od ${args.startDate} do ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Vybratý čas: ${args.time}`,\n    \"startDate\": `Dátum začatia`,\n    \"timeZoneName\": `časové pásmo`,\n    \"weekday\": `deň týždňa`,\n    \"year\": `rok`\n};\nvar $578ee7c11dcdde7a$exports = {};\n$578ee7c11dcdde7a$exports = {\n    \"calendar\": `Koledar`,\n    \"day\": `dan`,\n    \"dayPeriod\": `dop/pop`,\n    \"endDate\": `Datum konca`,\n    \"era\": `doba`,\n    \"hour\": `ura`,\n    \"minute\": `minuta`,\n    \"month\": `mesec`,\n    \"second\": `sekunda`,\n    \"selectedDateDescription\": (args)=>`Izbrani datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Izbrano območje: ${args.startDate} do ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Izbrani čas: ${args.time}`,\n    \"startDate\": `Datum začetka`,\n    \"timeZoneName\": `časovni pas`,\n    \"weekday\": `dan v tednu`,\n    \"year\": `leto`\n};\nvar $bbc3fd6cd0bc9d50$exports = {};\n$bbc3fd6cd0bc9d50$exports = {\n    \"calendar\": `Kalendar`,\n    \"day\": `дан`,\n    \"dayPeriod\": `пре подне/по подне`,\n    \"endDate\": `Datum završetka`,\n    \"era\": `ера`,\n    \"hour\": `сат`,\n    \"minute\": `минут`,\n    \"month\": `месец`,\n    \"second\": `секунд`,\n    \"selectedDateDescription\": (args)=>`Izabrani datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Izabrani opseg: od ${args.startDate} do ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Izabrano vreme: ${args.time}`,\n    \"startDate\": `Datum početka`,\n    \"timeZoneName\": `временска зона`,\n    \"weekday\": `дан у недељи`,\n    \"year\": `година`\n};\nvar $0b04512118591d2a$exports = {};\n$0b04512118591d2a$exports = {\n    \"calendar\": `Kalender`,\n    \"day\": `dag`,\n    \"dayPeriod\": `fm/em`,\n    \"endDate\": `Slutdatum`,\n    \"era\": `era`,\n    \"hour\": `timme`,\n    \"minute\": `minut`,\n    \"month\": `månad`,\n    \"second\": `sekund`,\n    \"selectedDateDescription\": (args)=>`Valt datum: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Valt intervall: ${args.startDate} till ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Vald tid: ${args.time}`,\n    \"startDate\": `Startdatum`,\n    \"timeZoneName\": `tidszon`,\n    \"weekday\": `veckodag`,\n    \"year\": `år`\n};\nvar $3a49d121fe4c9e1d$exports = {};\n$3a49d121fe4c9e1d$exports = {\n    \"calendar\": `Takvim`,\n    \"day\": `gün`,\n    \"dayPeriod\": `ÖÖ/ÖS`,\n    \"endDate\": `Bitiş Tarihi`,\n    \"era\": `çağ`,\n    \"hour\": `saat`,\n    \"minute\": `dakika`,\n    \"month\": `ay`,\n    \"second\": `saniye`,\n    \"selectedDateDescription\": (args)=>`Seçilen Tarih: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Seçilen Aralık: ${args.startDate} - ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Seçilen Zaman: ${args.time}`,\n    \"startDate\": `Başlangıç Tarihi`,\n    \"timeZoneName\": `saat dilimi`,\n    \"weekday\": `haftanın günü`,\n    \"year\": `yıl`\n};\nvar $5ba21dbb8914919d$exports = {};\n$5ba21dbb8914919d$exports = {\n    \"calendar\": `Календар`,\n    \"day\": `день`,\n    \"dayPeriod\": `дп/пп`,\n    \"endDate\": `Дата завершення`,\n    \"era\": `ера`,\n    \"hour\": `година`,\n    \"minute\": `хвилина`,\n    \"month\": `місяць`,\n    \"second\": `секунда`,\n    \"selectedDateDescription\": (args)=>`Вибрана дата: ${args.date}`,\n    \"selectedRangeDescription\": (args)=>`Вибраний діапазон: ${args.startDate} — ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`Вибраний час: ${args.time}`,\n    \"startDate\": `Дата початку`,\n    \"timeZoneName\": `часовий пояс`,\n    \"weekday\": `день тижня`,\n    \"year\": `рік`\n};\nvar $51078838e1b16cd7$exports = {};\n$51078838e1b16cd7$exports = {\n    \"calendar\": `日历`,\n    \"day\": `日`,\n    \"dayPeriod\": `上午/下午`,\n    \"endDate\": `结束日期`,\n    \"era\": `纪元`,\n    \"hour\": `小时`,\n    \"minute\": `分钟`,\n    \"month\": `月`,\n    \"second\": `秒`,\n    \"selectedDateDescription\": (args)=>`选定的日期：${args.date}`,\n    \"selectedRangeDescription\": (args)=>`选定的范围：${args.startDate} 至 ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`选定的时间：${args.time}`,\n    \"startDate\": `开始日期`,\n    \"timeZoneName\": `时区`,\n    \"weekday\": `工作日`,\n    \"year\": `年`\n};\nvar $33fab8219207655a$exports = {};\n$33fab8219207655a$exports = {\n    \"calendar\": `日曆`,\n    \"day\": `日`,\n    \"dayPeriod\": `上午/下午`,\n    \"endDate\": `結束日期`,\n    \"era\": `纪元`,\n    \"hour\": `小时`,\n    \"minute\": `分钟`,\n    \"month\": `月`,\n    \"second\": `秒`,\n    \"selectedDateDescription\": (args)=>`選定的日期：${args.date}`,\n    \"selectedRangeDescription\": (args)=>`選定的範圍：${args.startDate} 至 ${args.endDate}`,\n    \"selectedTimeDescription\": (args)=>`選定的時間：${args.time}`,\n    \"startDate\": `開始日期`,\n    \"timeZoneName\": `时区`,\n    \"weekday\": `工作日`,\n    \"year\": `年`\n};\n$dfb4eba373ed9493$exports = {\n    \"ar-AE\": $f23889fffbde9058$exports,\n    \"bg-BG\": $09d9badaa8903929$exports,\n    \"cs-CZ\": $151b77e0fd711730$exports,\n    \"da-DK\": $61915aa8630b90a2$exports,\n    \"de-DE\": $35cea00159787840$exports,\n    \"el-GR\": $518b4e82b9eacafd$exports,\n    \"en-US\": $1c2b297f7e2cf474$exports,\n    \"es-ES\": $07f628a707cf9b18$exports,\n    \"et-EE\": $db553ffe17c7f4db$exports,\n    \"fi-FI\": $4afcfe00cd703f83$exports,\n    \"fr-FR\": $1d2645d18d4c5be0$exports,\n    \"he-IL\": $64cb6a9be1f6fa48$exports,\n    \"hr-HR\": $2a1ef2e8050be27a$exports,\n    \"hu-HU\": $ad429dca102acd0e$exports,\n    \"it-IT\": $6e68cb5d1cb97bd2$exports,\n    \"ja-JP\": $a82ee9af063ee069$exports,\n    \"ko-KR\": $67e9091dbf37d4eb$exports,\n    \"lt-LT\": $75834f9729f653d1$exports,\n    \"lv-LV\": $a2df2c2520b4a7f0$exports,\n    \"nb-NO\": $aedcd71db4933ed5$exports,\n    \"nl-NL\": $3b2df9e54353046c$exports,\n    \"pl-PL\": $c03fe977fcfafe93$exports,\n    \"pt-BR\": $569f006fc292345f$exports,\n    \"pt-PT\": $7c2494e14452f2dd$exports,\n    \"ro-RO\": $eb82ef981b5592bf$exports,\n    \"ru-RU\": $6efa0e119f396950$exports,\n    \"sk-SK\": $7f5e57085d7f5049$exports,\n    \"sl-SI\": $578ee7c11dcdde7a$exports,\n    \"sr-SP\": $bbc3fd6cd0bc9d50$exports,\n    \"sv-SE\": $0b04512118591d2a$exports,\n    \"tr-TR\": $3a49d121fe4c9e1d$exports,\n    \"uk-UA\": $5ba21dbb8914919d$exports,\n    \"zh-CN\": $51078838e1b16cd7$exports,\n    \"zh-TW\": $33fab8219207655a$exports\n};\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {\n    let { direction: direction } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocale)();\n    let focusManager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0, _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.createFocusManager)(ref), [\n        ref\n    ]);\n    // Open the popover on alt + arrow down\n    let onKeyDown = (e)=>{\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.altKey && (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") && \"setOpen\" in state) {\n            e.preventDefault();\n            e.stopPropagation();\n            state.setOpen(true);\n        }\n        if (disableArrowNavigation) return;\n        switch(e.key){\n            case \"ArrowLeft\":\n                e.preventDefault();\n                e.stopPropagation();\n                if (direction === \"rtl\") focusManager.focusNext();\n                else focusManager.focusPrevious();\n                break;\n            case \"ArrowRight\":\n                e.preventDefault();\n                e.stopPropagation();\n                if (direction === \"rtl\") focusManager.focusPrevious();\n                else focusManager.focusNext();\n                break;\n        }\n    };\n    // Focus the first placeholder segment from the end on mouse down/touch up in the field.\n    let focusLast = ()=>{\n        var _window_event;\n        // Try to find the segment prior to the element that was clicked on.\n        let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;\n        let walker = (0, _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.getFocusableTreeWalker)(ref.current, {\n            tabbable: true\n        });\n        if (target) {\n            walker.currentNode = target;\n            target = walker.previousNode();\n        }\n        // If no target found, find the last element from the end.\n        if (!target) {\n            let last;\n            do {\n                last = walker.lastChild();\n                if (last) target = last;\n            }while (last);\n        }\n        // Now go backwards until we find an element that is not a placeholder.\n        while(target === null || target === void 0 ? void 0 : target.hasAttribute(\"data-placeholder\")){\n            let prev = walker.previousNode();\n            if (prev && prev.hasAttribute(\"data-placeholder\")) target = prev;\n            else break;\n        }\n        if (target) target.focus();\n    };\n    let { pressProps: pressProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_3__.usePress)({\n        preventFocusOnPress: true,\n        allowTextSelectionOnPress: true,\n        onPressStart (e) {\n            if (e.pointerType === \"mouse\") focusLast();\n        },\n        onPress (e) {\n            if (e.pointerType !== \"mouse\") focusLast();\n        }\n    });\n    return (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(pressProps, {\n        onKeyDown: onKeyDown\n    });\n}\nconst $16f0b7bb276bc17e$export$653eddfc964b0f8a = new WeakMap();\nconst $16f0b7bb276bc17e$export$300019f83c56d282 = \"__role_\" + Date.now();\nconst $16f0b7bb276bc17e$export$7b3062cd49e80452 = \"__focusManager_\" + Date.now();\nfunction $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref) {\n    var _state_value;\n    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = (0, _react_aria_label__WEBPACK_IMPORTED_MODULE_5__.useField)({\n        ...props,\n        labelElementType: \"span\"\n    });\n    let { focusWithinProps: focusWithinProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_3__.useFocusWithin)({\n        ...props,\n        onBlurWithin: (e)=>{\n            state.confirmPlaceholder();\n            if (props.onBlur) props.onBlur(e);\n        },\n        onFocusWithin: props.onFocus,\n        onFocusWithinChange: props.onFocusChange\n    });\n    let stringFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocalizedStringFormatter)((0, /*@__PURE__*/ $parcel$interopDefault($dfb4eba373ed9493$exports)));\n    let message = state.maxGranularity === \"hour\" ? \"selectedTimeDescription\" : \"selectedDateDescription\";\n    let field = state.maxGranularity === \"hour\" ? \"time\" : \"date\";\n    let description = state.value ? stringFormatter.format(message, {\n        [field]: state.formatValue({\n            month: \"long\"\n        })\n    }) : \"\";\n    let descProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useDescription)(description);\n    // If within a date picker or date range picker, the date field will have role=\"presentation\" and an aria-describedby\n    // will be passed in that references the value (e.g. entire range). Otherwise, add the field's value description.\n    let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\" ? fieldProps[\"aria-describedby\"] : [\n        descProps[\"aria-describedby\"],\n        fieldProps[\"aria-describedby\"]\n    ].filter(Boolean).join(\" \") || undefined;\n    let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];\n    let focusManager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>propsFocusManager || (0, _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.createFocusManager)(ref), [\n        propsFocusManager,\n        ref\n    ]);\n    let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\");\n    // Pass labels and other information to segments.\n    $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state, {\n        ariaLabel: props[\"aria-label\"],\n        ariaLabelledBy: [\n            labelProps.id,\n            props[\"aria-labelledby\"]\n        ].filter(Boolean).join(\" \") || undefined,\n        ariaDescribedBy: describedBy,\n        focusManager: focusManager\n    });\n    let autoFocusRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props.autoFocus);\n    // When used within a date picker or date range picker, the field gets role=\"presentation\"\n    // rather than role=\"group\". Since the date picker/date range picker already has a role=\"group\"\n    // with a label and description, and the segments are already labeled by this as well, this\n    // avoids very verbose duplicate announcements.\n    let fieldDOMProps;\n    if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\") fieldDOMProps = {\n        role: \"presentation\"\n    };\n    else fieldDOMProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(fieldProps, {\n        role: \"group\",\n        \"aria-disabled\": props.isDisabled || undefined,\n        \"aria-describedby\": describedBy\n    });\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoFocusRef.current) focusManager.focusFirst();\n        autoFocusRef.current = false;\n    }, [\n        focusManager\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useFormReset)(props.inputRef, state.value, state.setValue);\n    let domProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.filterDOMProps)(props);\n    return {\n        labelProps: {\n            ...labelProps,\n            onClick: ()=>{\n                focusManager.focusFirst();\n            }\n        },\n        fieldProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(domProps, fieldDOMProps, groupProps, focusWithinProps, {\n            onKeyDown (e) {\n                if (props.onKeyDown) props.onKeyDown(e);\n            },\n            onKeyUp (e) {\n                if (props.onKeyUp) props.onKeyUp(e);\n            }\n        }),\n        inputProps: {\n            type: \"hidden\",\n            name: props.name,\n            value: ((_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || \"\"\n        },\n        descriptionProps: descriptionProps,\n        errorMessageProps: errorMessageProps\n    };\n}\nfunction $16f0b7bb276bc17e$export$4c842f6a241dc825(props, state, ref) {\n    var _state_timeValue;\n    let res = $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref);\n    res.inputProps.value = ((_state_timeValue = state.timeValue) === null || _state_timeValue === void 0 ? void 0 : _state_timeValue.toString()) || \"\";\n    return res;\n}\nfunction $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {\n    let buttonId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let dialogId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let fieldId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let stringFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocalizedStringFormatter)((0, /*@__PURE__*/ $parcel$interopDefault($dfb4eba373ed9493$exports)));\n    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = (0, _react_aria_label__WEBPACK_IMPORTED_MODULE_5__.useField)({\n        ...props,\n        labelElementType: \"span\"\n    });\n    let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n    let labelledBy = fieldProps[\"aria-labelledby\"] || fieldProps.id;\n    let { locale: locale } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocale)();\n    let date = state.formatValue(locale, {\n        month: \"long\"\n    });\n    let description = date ? stringFormatter.format(\"selectedDateDescription\", {\n        date: date\n    }) : \"\";\n    let descProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useDescription)(description);\n    let ariaDescribedBy = [\n        descProps[\"aria-describedby\"],\n        fieldProps[\"aria-describedby\"]\n    ].filter(Boolean).join(\" \") || undefined;\n    let domProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.filterDOMProps)(props);\n    let focusManager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0, _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.createFocusManager)(ref), [\n        ref\n    ]);\n    let { focusWithinProps: focusWithinProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_3__.useFocusWithin)({\n        ...props,\n        isDisabled: state.isOpen,\n        onBlurWithin: props.onBlur,\n        onFocusWithin: props.onFocus,\n        onFocusWithinChange: props.onFocusChange\n    });\n    return {\n        groupProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n            role: \"group\",\n            \"aria-disabled\": props.isDisabled || null,\n            \"aria-labelledby\": labelledBy,\n            \"aria-describedby\": ariaDescribedBy,\n            onKeyDown (e) {\n                if (state.isOpen) return;\n                if (props.onKeyDown) props.onKeyDown(e);\n            },\n            onKeyUp (e) {\n                if (state.isOpen) return;\n                if (props.onKeyUp) props.onKeyUp(e);\n            }\n        }),\n        labelProps: {\n            ...labelProps,\n            onClick: ()=>{\n                focusManager.focusFirst();\n            }\n        },\n        fieldProps: {\n            ...fieldProps,\n            id: fieldId,\n            [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: \"presentation\",\n            \"aria-describedby\": ariaDescribedBy,\n            value: state.value,\n            onChange: state.setValue,\n            minValue: props.minValue,\n            maxValue: props.maxValue,\n            placeholderValue: props.placeholderValue,\n            hideTimeZone: props.hideTimeZone,\n            hourCycle: props.hourCycle,\n            shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n            granularity: props.granularity,\n            isDisabled: props.isDisabled,\n            isReadOnly: props.isReadOnly,\n            isRequired: props.isRequired,\n            isInvalid: state.isInvalid,\n            autoFocus: props.autoFocus,\n            name: props.name\n        },\n        descriptionProps: descriptionProps,\n        errorMessageProps: errorMessageProps,\n        buttonProps: {\n            ...descProps,\n            id: buttonId,\n            \"aria-haspopup\": \"dialog\",\n            \"aria-label\": stringFormatter.format(\"calendar\"),\n            \"aria-labelledby\": `${buttonId} ${labelledBy}`,\n            \"aria-describedby\": ariaDescribedBy,\n            \"aria-expanded\": state.isOpen,\n            onPress: ()=>state.setOpen(true)\n        },\n        dialogProps: {\n            id: dialogId,\n            \"aria-labelledby\": `${buttonId} ${labelledBy}`\n        },\n        calendarProps: {\n            autoFocus: true,\n            value: state.dateValue,\n            onChange: state.setDateValue,\n            minValue: props.minValue,\n            maxValue: props.maxValue,\n            isDisabled: props.isDisabled,\n            isReadOnly: props.isReadOnly,\n            isDateUnavailable: props.isDateUnavailable,\n            defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,\n            isInvalid: state.isInvalid,\n            errorMessage: props.errorMessage\n        }\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // @ts-ignore\nfunction $3aeceb3a64eb8358$export$d42c60378c8168f8() {\n    let { locale: locale } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocale)();\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField\n        // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2\n        try {\n            // @ts-ignore\n            return new Intl.DisplayNames(locale, {\n                type: \"dateTimeField\"\n            });\n        } catch (err) {\n            return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale);\n        }\n    }, [\n        locale\n    ]);\n}\nclass $3aeceb3a64eb8358$var$DisplayNamesPolyfill {\n    of(field) {\n        return this.dictionary.getStringForLocale(field, this.locale);\n    }\n    constructor(locale){\n        this.locale = locale;\n        this.dictionary = new (0, _internationalized_string__WEBPACK_IMPORTED_MODULE_6__.LocalizedStringDictionary)((0, /*@__PURE__*/ $parcel$interopDefault($dfb4eba373ed9493$exports)));\n    }\n}\nfunction $32489daedd52963e$export$1315d136e6f7581(segment, state, ref) {\n    let enteredKeys = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"\");\n    let { locale: locale } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocale)();\n    let displayNames = (0, $3aeceb3a64eb8358$export$d42c60378c8168f8)();\n    let { ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy, ariaDescribedBy: ariaDescribedBy, focusManager: focusManager } = (0, $16f0b7bb276bc17e$export$653eddfc964b0f8a).get(state);\n    let textValue = segment.isPlaceholder ? \"\" : segment.text;\n    let options = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>state.dateFormatter.resolvedOptions(), [\n        state.dateFormatter\n    ]);\n    let monthDateFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useDateFormatter)({\n        month: \"long\",\n        timeZone: options.timeZone\n    });\n    let hourDateFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useDateFormatter)({\n        hour: \"numeric\",\n        hour12: options.hour12,\n        timeZone: options.timeZone\n    });\n    if (segment.type === \"month\" && !segment.isPlaceholder) {\n        let monthTextValue = monthDateFormatter.format(state.dateValue);\n        textValue = monthTextValue !== textValue ? `${textValue} – ${monthTextValue}` : monthTextValue;\n    } else if (segment.type === \"hour\" && !segment.isPlaceholder) textValue = hourDateFormatter.format(state.dateValue);\n    let { spinButtonProps: spinButtonProps } = (0, _react_aria_spinbutton__WEBPACK_IMPORTED_MODULE_7__.useSpinButton)({\n        // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.\n        // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.\n        // https://github.com/dequelabs/axe-core/issues/3505\n        value: segment.value,\n        textValue: textValue,\n        minValue: segment.minValue,\n        maxValue: segment.maxValue,\n        isDisabled: state.isDisabled,\n        isReadOnly: state.isReadOnly || !segment.isEditable,\n        isRequired: state.isRequired,\n        onIncrement: ()=>{\n            enteredKeys.current = \"\";\n            state.increment(segment.type);\n        },\n        onDecrement: ()=>{\n            enteredKeys.current = \"\";\n            state.decrement(segment.type);\n        },\n        onIncrementPage: ()=>{\n            enteredKeys.current = \"\";\n            state.incrementPage(segment.type);\n        },\n        onDecrementPage: ()=>{\n            enteredKeys.current = \"\";\n            state.decrementPage(segment.type);\n        },\n        onIncrementToMax: ()=>{\n            enteredKeys.current = \"\";\n            state.setSegment(segment.type, segment.maxValue);\n        },\n        onDecrementToMin: ()=>{\n            enteredKeys.current = \"\";\n            state.setSegment(segment.type, segment.minValue);\n        }\n    });\n    let parser = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_number__WEBPACK_IMPORTED_MODULE_8__.NumberParser)(locale, {\n            maximumFractionDigits: 0\n        }), [\n        locale\n    ]);\n    let backspace = ()=>{\n        if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {\n            let newValue = segment.text.slice(0, -1);\n            let parsed = parser.parse(newValue);\n            if (newValue.length === 0 || parsed === 0) state.clearSegment(segment.type);\n            else state.setSegment(segment.type, parsed);\n            enteredKeys.current = newValue;\n        } else if (segment.type === \"dayPeriod\") state.clearSegment(segment.type);\n    };\n    let onKeyDown = (e)=>{\n        // Firefox does not fire selectstart for Ctrl/Cmd + A\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1742153\n        if (e.key === \"a\" && ((0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.isMac)() ? e.metaKey : e.ctrlKey)) e.preventDefault();\n        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;\n        switch(e.key){\n            case \"Backspace\":\n            case \"Delete\":\n                // Safari on iOS does not fire beforeinput for the backspace key because the cursor is at the start.\n                e.preventDefault();\n                e.stopPropagation();\n                backspace();\n                break;\n        }\n    };\n    // Safari dayPeriod option doesn't work...\n    let { startsWith: startsWith } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useFilter)({\n        sensitivity: \"base\"\n    });\n    let amPmFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useDateFormatter)({\n        hour: \"numeric\",\n        hour12: true\n    });\n    let am = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let date = new Date();\n        date.setHours(0);\n        return amPmFormatter.formatToParts(date).find((part)=>part.type === \"dayPeriod\").value;\n    }, [\n        amPmFormatter\n    ]);\n    let pm = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let date = new Date();\n        date.setHours(12);\n        return amPmFormatter.formatToParts(date).find((part)=>part.type === \"dayPeriod\").value;\n    }, [\n        amPmFormatter\n    ]);\n    // Get a list of formatted era names so users can type the first character to choose one.\n    let eraFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useDateFormatter)({\n        year: \"numeric\",\n        era: \"narrow\",\n        timeZone: \"UTC\"\n    });\n    let eras = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (segment.type !== \"era\") return [];\n        let date = (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_9__.toCalendar)(new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_9__.CalendarDate)(1, 1, 1), state.calendar);\n        let eras = state.calendar.getEras().map((era)=>{\n            let eraDate = date.set({\n                year: 1,\n                month: 1,\n                day: 1,\n                era: era\n            }).toDate(\"UTC\");\n            let parts = eraFormatter.formatToParts(eraDate);\n            let formatted = parts.find((p)=>p.type === \"era\").value;\n            return {\n                era: era,\n                formatted: formatted\n            };\n        });\n        // Remove the common prefix from formatted values. This is so that in calendars with eras like\n        // ERA0 and ERA1 (e.g. Ethiopic), users can press \"0\" and \"1\" to select an era. In other cases,\n        // the first letter is used.\n        let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras.map((era)=>era.formatted));\n        if (prefixLength) for (let era of eras)era.formatted = era.formatted.slice(prefixLength);\n        return eras;\n    }, [\n        eraFormatter,\n        state.calendar,\n        segment.type\n    ]);\n    let onInput = (key)=>{\n        if (state.isDisabled || state.isReadOnly) return;\n        let newValue = enteredKeys.current + key;\n        switch(segment.type){\n            case \"dayPeriod\":\n                if (startsWith(am, key)) state.setSegment(\"dayPeriod\", 0);\n                else if (startsWith(pm, key)) state.setSegment(\"dayPeriod\", 12);\n                else break;\n                focusManager.focusNext();\n                break;\n            case \"era\":\n                {\n                    let matched = eras.find((e)=>startsWith(e.formatted, key));\n                    if (matched) {\n                        state.setSegment(\"era\", matched.era);\n                        focusManager.focusNext();\n                    }\n                    break;\n                }\n            case \"day\":\n            case \"hour\":\n            case \"minute\":\n            case \"second\":\n            case \"month\":\n            case \"year\":\n                {\n                    if (!parser.isValidPartialNumber(newValue)) return;\n                    let numberValue = parser.parse(newValue);\n                    let segmentValue = numberValue;\n                    let allowsZero = segment.minValue === 0;\n                    if (segment.type === \"hour\" && state.dateFormatter.resolvedOptions().hour12) {\n                        switch(state.dateFormatter.resolvedOptions().hourCycle){\n                            case \"h11\":\n                                if (numberValue > 11) segmentValue = parser.parse(key);\n                                break;\n                            case \"h12\":\n                                allowsZero = false;\n                                if (numberValue > 12) segmentValue = parser.parse(key);\n                                break;\n                        }\n                        if (segment.value >= 12 && numberValue > 1) numberValue += 12;\n                    } else if (numberValue > segment.maxValue) segmentValue = parser.parse(key);\n                    if (isNaN(numberValue)) return;\n                    let shouldSetValue = segmentValue !== 0 || allowsZero;\n                    if (shouldSetValue) state.setSegment(segment.type, segmentValue);\n                    if (Number(numberValue + \"0\") > segment.maxValue || newValue.length >= String(segment.maxValue).length) {\n                        enteredKeys.current = \"\";\n                        if (shouldSetValue) focusManager.focusNext();\n                    } else enteredKeys.current = newValue;\n                    break;\n                }\n        }\n    };\n    let onFocus = ()=>{\n        enteredKeys.current = \"\";\n        (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.scrollIntoViewport)(ref.current, {\n            containingElement: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.getScrollParent)(ref.current)\n        });\n        // Collapse selection to start or Chrome won't fire input events.\n        let selection = window.getSelection();\n        selection.collapse(ref.current);\n    };\n    let compositionRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"\");\n    // @ts-ignore - TODO: possibly old TS version? doesn't fail in my editor...\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useEvent)(ref, \"beforeinput\", (e)=>{\n        e.preventDefault();\n        switch(e.inputType){\n            case \"deleteContentBackward\":\n            case \"deleteContentForward\":\n                if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) backspace();\n                break;\n            case \"insertCompositionText\":\n                // insertCompositionText cannot be canceled.\n                // Record the current state of the element so we can restore it in the `input` event below.\n                compositionRef.current = ref.current.textContent;\n                // Safari gets stuck in a composition state unless we also assign to the value here.\n                // eslint-disable-next-line no-self-assign\n                ref.current.textContent = ref.current.textContent;\n                break;\n            default:\n                if (e.data != null) onInput(e.data);\n                break;\n        }\n    });\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useEvent)(ref, \"input\", (e)=>{\n        let { inputType: inputType, data: data } = e;\n        switch(inputType){\n            case \"insertCompositionText\":\n                // Reset the DOM to how it was in the beforeinput event.\n                ref.current.textContent = compositionRef.current;\n                // Android sometimes fires key presses of letters as composition events. Need to handle am/pm keys here too.\n                // Can also happen e.g. with Pinyin keyboard on iOS.\n                if (startsWith(am, data) || startsWith(pm, data)) onInput(data);\n                break;\n        }\n    });\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useLayoutEffect)(()=>{\n        let element = ref.current;\n        return ()=>{\n            // If the focused segment is removed, focus the previous one, or the next one if there was no previous one.\n            if (document.activeElement === element) {\n                let prev = focusManager.focusPrevious();\n                if (!prev) focusManager.focusNext();\n            }\n        };\n    }, [\n        ref,\n        focusManager\n    ]);\n    // spinbuttons cannot be focused with VoiceOver on iOS.\n    let touchPropOverrides = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.isIOS)() || segment.type === \"timeZoneName\" ? {\n        role: \"textbox\",\n        \"aria-valuemax\": null,\n        \"aria-valuemin\": null,\n        \"aria-valuetext\": null,\n        \"aria-valuenow\": null\n    } : {};\n    // Only apply aria-describedby to the first segment, unless the field is invalid. This avoids it being\n    // read every time the user navigates to a new segment.\n    let firstSegment = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>state.segments.find((s)=>s.isEditable), [\n        state.segments\n    ]);\n    if (segment !== firstSegment && !state.isInvalid) ariaDescribedBy = undefined;\n    let id = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;\n    // Prepend the label passed from the field to each segment name.\n    // This is needed because VoiceOver on iOS does not announce groups.\n    let name = segment.type === \"literal\" ? \"\" : displayNames.of(segment.type);\n    let labelProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useLabels)({\n        \"aria-label\": `${name}${ariaLabel ? `, ${ariaLabel}` : \"\"}${ariaLabelledBy ? \", \" : \"\"}`,\n        \"aria-labelledby\": ariaLabelledBy\n    });\n    // Literal segments should not be visible to screen readers. We don't really need any of the above,\n    // but the rules of hooks mean hooks cannot be conditional so we have to put this condition here.\n    if (segment.type === \"literal\") return {\n        segmentProps: {\n            \"aria-hidden\": true\n        }\n    };\n    return {\n        segmentProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(spinButtonProps, labelProps, {\n            id: id,\n            ...touchPropOverrides,\n            \"aria-invalid\": state.isInvalid ? \"true\" : undefined,\n            \"aria-describedby\": ariaDescribedBy,\n            \"aria-readonly\": state.isReadOnly || !segment.isEditable ? \"true\" : undefined,\n            \"data-placeholder\": segment.isPlaceholder || undefined,\n            contentEditable: isEditable,\n            suppressContentEditableWarning: isEditable,\n            spellCheck: isEditable ? \"false\" : undefined,\n            autoCapitalize: isEditable ? \"off\" : undefined,\n            autoCorrect: isEditable ? \"off\" : undefined,\n            // Capitalization was changed in React 17...\n            [parseInt((0, react__WEBPACK_IMPORTED_MODULE_0__).version, 10) >= 17 ? \"enterKeyHint\" : \"enterkeyhint\"]: isEditable ? \"next\" : undefined,\n            inputMode: state.isDisabled || segment.type === \"dayPeriod\" || segment.type === \"era\" || !isEditable ? undefined : \"numeric\",\n            tabIndex: state.isDisabled ? undefined : 0,\n            onKeyDown: onKeyDown,\n            onFocus: onFocus,\n            style: {\n                caretColor: \"transparent\"\n            },\n            // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.\n            onPointerDown (e) {\n                e.stopPropagation();\n            },\n            onMouseDown (e) {\n                e.stopPropagation();\n            }\n        })\n    };\n}\nfunction $32489daedd52963e$var$commonPrefixLength(strings) {\n    // Sort the strings, and compare the characters in the first and last to find the common prefix.\n    strings.sort();\n    let first = strings[0];\n    let last = strings[strings.length - 1];\n    for(let i = 0; i < first.length; i++){\n        if (first[i] !== last[i]) return i;\n    }\n    return 0;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref) {\n    var _state_value, _state_value1;\n    let stringFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocalizedStringFormatter)((0, /*@__PURE__*/ $parcel$interopDefault($dfb4eba373ed9493$exports)));\n    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = (0, _react_aria_label__WEBPACK_IMPORTED_MODULE_5__.useField)({\n        ...props,\n        labelElementType: \"span\"\n    });\n    let labelledBy = fieldProps[\"aria-labelledby\"] || fieldProps.id;\n    let { locale: locale } = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocale)();\n    let range = state.formatValue(locale, {\n        month: \"long\"\n    });\n    let description = range ? stringFormatter.format(\"selectedRangeDescription\", {\n        startDate: range.start,\n        endDate: range.end\n    }) : \"\";\n    let descProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useDescription)(description);\n    let startFieldProps = {\n        \"aria-label\": stringFormatter.format(\"startDate\"),\n        \"aria-labelledby\": labelledBy\n    };\n    let endFieldProps = {\n        \"aria-label\": stringFormatter.format(\"endDate\"),\n        \"aria-labelledby\": labelledBy\n    };\n    let buttonId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let dialogId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.useId)();\n    let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n    let ariaDescribedBy = [\n        descProps[\"aria-describedby\"],\n        fieldProps[\"aria-describedby\"]\n    ].filter(Boolean).join(\" \") || undefined;\n    let focusManager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0, _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.createFocusManager)(ref, {\n            // Exclude the button from the focus manager.\n            accept: (element)=>element.id !== buttonId\n        }), [\n        ref,\n        buttonId\n    ]);\n    let commonFieldProps = {\n        [(0, $16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,\n        [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: \"presentation\",\n        \"aria-describedby\": ariaDescribedBy,\n        minValue: props.minValue,\n        maxValue: props.maxValue,\n        placeholderValue: props.placeholderValue,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        granularity: props.granularity,\n        shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n        isDisabled: props.isDisabled,\n        isReadOnly: props.isReadOnly,\n        isRequired: props.isRequired,\n        isInvalid: state.isInvalid\n    };\n    let domProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.filterDOMProps)(props);\n    let { focusWithinProps: focusWithinProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_3__.useFocusWithin)({\n        ...props,\n        isDisabled: state.isOpen,\n        onBlurWithin: props.onBlur,\n        onFocusWithin: props.onFocus,\n        onFocusWithinChange: props.onFocusChange\n    });\n    return {\n        groupProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n            role: \"group\",\n            \"aria-disabled\": props.isDisabled || null,\n            \"aria-describedby\": ariaDescribedBy,\n            onKeyDown (e) {\n                if (state.isOpen) return;\n                if (props.onKeyDown) props.onKeyDown(e);\n            },\n            onKeyUp (e) {\n                if (state.isOpen) return;\n                if (props.onKeyUp) props.onKeyUp(e);\n            }\n        }),\n        labelProps: {\n            ...labelProps,\n            onClick: ()=>{\n                focusManager.focusFirst();\n            }\n        },\n        buttonProps: {\n            ...descProps,\n            id: buttonId,\n            \"aria-haspopup\": \"dialog\",\n            \"aria-label\": stringFormatter.format(\"calendar\"),\n            \"aria-labelledby\": `${buttonId} ${labelledBy}`,\n            \"aria-describedby\": ariaDescribedBy,\n            \"aria-expanded\": state.isOpen,\n            onPress: ()=>state.setOpen(true)\n        },\n        dialogProps: {\n            id: dialogId,\n            \"aria-labelledby\": `${buttonId} ${labelledBy}`\n        },\n        startFieldProps: {\n            ...startFieldProps,\n            ...commonFieldProps,\n            value: (_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.start,\n            onChange: (start)=>state.setDateTime(\"start\", start),\n            autoFocus: props.autoFocus,\n            name: props.startName\n        },\n        endFieldProps: {\n            ...endFieldProps,\n            ...commonFieldProps,\n            value: (_state_value1 = state.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,\n            onChange: (end)=>state.setDateTime(\"end\", end),\n            name: props.endName\n        },\n        descriptionProps: descriptionProps,\n        errorMessageProps: errorMessageProps,\n        calendarProps: {\n            autoFocus: true,\n            value: state.dateRange,\n            onChange: state.setDateRange,\n            minValue: props.minValue,\n            maxValue: props.maxValue,\n            isDisabled: props.isDisabled,\n            isReadOnly: props.isReadOnly,\n            isDateUnavailable: props.isDateUnavailable,\n            allowsNonContiguousRanges: props.allowsNonContiguousRanges,\n            defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,\n            isInvalid: state.isInvalid,\n            errorMessage: props.errorMessage\n        }\n    };\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/datepicker/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/focus/dist/import.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@react-aria/focus/dist/import.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusRing: () => (/* binding */ $907718708eab68af$export$1a38b4ad7f578e1d),\n/* harmony export */   FocusScope: () => (/* binding */ $9bf71ea28793e738$export$20e40289641fbbb6),\n/* harmony export */   FocusableProvider: () => (/* binding */ $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5),\n/* harmony export */   createFocusManager: () => (/* binding */ $9bf71ea28793e738$export$c5251b9e124bf29),\n/* harmony export */   focusSafely: () => (/* binding */ $6a99195332edec8b$export$80f3e147d781571c),\n/* harmony export */   getFocusableTreeWalker: () => (/* binding */ $9bf71ea28793e738$export$2d6ec8fc375ceafa),\n/* harmony export */   isElementInChildOfActiveScope: () => (/* binding */ $9bf71ea28793e738$export$1258395f99bf9cbf),\n/* harmony export */   useFocusManager: () => (/* binding */ $9bf71ea28793e738$export$10c5169755ce7bd7),\n/* harmony export */   useFocusRing: () => (/* binding */ $f7dceffc5ad7768b$export$4e328f61c538687f),\n/* harmony export */   useFocusable: () => (/* binding */ $e6afbd83fe6ebbd2$export$4c014de7c8940b4c),\n/* harmony export */   useHasTabbableChild: () => (/* binding */ $83013635b024ae3d$export$eac1895992b9f3d6)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n/* harmony import */ var _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-aria/interactions */ \"(ssr)/./node_modules/@react-aria/interactions/dist/import.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.m.js\");\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $6a99195332edec8b$export$80f3e147d781571c(element) {\n    // If the user is interacting with a virtual cursor, e.g. screen reader, then\n    // wait until after any animated transitions that are currently occurring on\n    // the page before shifting focus. This avoids issues with VoiceOver on iOS\n    // causing the page to scroll when moving focus if the element is transitioning\n    // from off the screen.\n    if ((0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.getInteractionModality)() === \"virtual\") {\n        let lastFocusedElement = document.activeElement;\n        (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.runAfterTransition)(()=>{\n            // If focus did not move and the element is still in the document, focus it.\n            if (document.activeElement === lastFocusedElement && document.contains(element)) (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.focusWithoutScrolling)(element);\n        });\n    } else (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.focusWithoutScrolling)(element);\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $645f2e67b85a24c9$var$isStyleVisible(element) {\n    if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n    let { display: display, visibility: visibility } = element.style;\n    let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n    if (isVisible) {\n        const { getComputedStyle: getComputedStyle } = element.ownerDocument.defaultView;\n        let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);\n        isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n    }\n    return isVisible;\n}\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n    return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n    return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n    let { children: children, contain: contain, restoreFocus: restoreFocus, autoFocus: autoFocus } = props;\n    let startRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let endRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let scopeRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    let { parentNode: parentNode } = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($9bf71ea28793e738$var$FocusContext) || {};\n    // Create a tree node here so we can add children to it even before it is added to the tree.\n    let node = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new $9bf71ea28793e738$var$TreeNode({\n            scopeRef: scopeRef\n        }), [\n        scopeRef\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n        // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n        // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n        // that is being added should get the activeScope as its parent.\n        let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n        if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n            let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n            if (activeNode) parent = activeNode;\n        }\n        // Add the node to the parent, and to the tree.\n        parent.addChild(node);\n        $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n    }, [\n        node,\n        parentNode\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n        node.contain = contain;\n    }, [\n        contain\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        // Find all rendered nodes between the sentinels and add them to the scope.\n        let node = startRef.current.nextSibling;\n        let nodes = [];\n        while(node && node !== endRef.current){\n            nodes.push(node);\n            node = node.nextSibling;\n        }\n        scopeRef.current = nodes;\n    }, [\n        children\n    ]);\n    $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n    $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n    $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n    $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n    // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (scopeRef) {\n            let activeElement = document.activeElement;\n            let scope = null;\n            // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n            // To fix this, we need to update the actual activeScope here\n            if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n                // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n                // contains the active element and set that as the activeScope\n                for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())if ($9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n                if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n            }\n            return ()=>{\n                // Scope may have been re-parented.\n                let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;\n                // Restore the active scope on unmount if this scope or a descendant scope is active.\n                // Parent effect cleanups run before children, so we need to check if the\n                // parent scope actually still exists before restoring the active scope to it.\n                if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n                $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n            };\n        }\n    }, [\n        scopeRef\n    ]);\n    let focusManager = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n    let value = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            focusManager: focusManager,\n            parentNode: node\n        }), [\n        node,\n        focusManager\n    ]);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n        value: value\n    }, /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement(\"span\", {\n        \"data-focus-scope-start\": true,\n        hidden: true,\n        ref: startRef\n    }), children, /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement(\"span\", {\n        \"data-focus-scope-end\": true,\n        hidden: true,\n        ref: endRef\n    }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n    var _useContext;\n    return (_useContext = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n    return {\n        focusNext (opts = {}) {\n            let scope = scopeRef.current;\n            let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;\n            let node = from || document.activeElement;\n            let sentinel = scope[0].previousElementSibling;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n                tabbable: tabbable,\n                accept: accept\n            }, scope);\n            walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n            let nextNode = walker.nextNode();\n            if (!nextNode && wrap) {\n                walker.currentNode = sentinel;\n                nextNode = walker.nextNode();\n            }\n            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n            return nextNode;\n        },\n        focusPrevious (opts = {}) {\n            let scope = scopeRef.current;\n            let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;\n            let node = from || document.activeElement;\n            let sentinel = scope[scope.length - 1].nextElementSibling;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n                tabbable: tabbable,\n                accept: accept\n            }, scope);\n            walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n            let previousNode = walker.previousNode();\n            if (!previousNode && wrap) {\n                walker.currentNode = sentinel;\n                previousNode = walker.previousNode();\n            }\n            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n            return previousNode;\n        },\n        focusFirst (opts = {}) {\n            let scope = scopeRef.current;\n            let { tabbable: tabbable, accept: accept } = opts;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n                tabbable: tabbable,\n                accept: accept\n            }, scope);\n            walker.currentNode = scope[0].previousElementSibling;\n            let nextNode = walker.nextNode();\n            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n            return nextNode;\n        },\n        focusLast (opts = {}) {\n            let scope = scopeRef.current;\n            let { tabbable: tabbable, accept: accept } = opts;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n                tabbable: tabbable,\n                accept: accept\n            }, scope);\n            walker.currentNode = scope[scope.length - 1].nextElementSibling;\n            let previousNode = walker.previousNode();\n            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n            return previousNode;\n        }\n    };\n}\nconst $9bf71ea28793e738$var$focusableElements = [\n    \"input:not([disabled]):not([type=hidden])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"button:not([disabled])\",\n    \"a[href]\",\n    \"area[href]\",\n    \"summary\",\n    \"iframe\",\n    \"object\",\n    \"embed\",\n    \"audio[controls]\",\n    \"video[controls]\",\n    \"[contenteditable]\"\n];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n    return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n    let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n    while(scope && scope.scopeRef !== scopeRef){\n        if (scope.contain) return false;\n        scope = scope.parent;\n    }\n    return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n    let focusedNode = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let raf = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        let scope = scopeRef.current;\n        if (!contain) {\n            // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n            if (raf.current) {\n                cancelAnimationFrame(raf.current);\n                raf.current = null;\n            }\n            return;\n        }\n        // Handle the Tab key to contain focus within the scope\n        let onKeyDown = (e)=>{\n            if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n            let focusedElement = document.activeElement;\n            let scope = scopeRef.current;\n            if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n                tabbable: true\n            }, scope);\n            walker.currentNode = focusedElement;\n            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n            if (!nextElement) {\n                walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n                nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n            }\n            e.preventDefault();\n            if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n        };\n        let onFocus = (e)=>{\n            // If focusing an element in a child scope of the currently active scope, the child becomes active.\n            // Moving out of the active scope to an ancestor is not allowed.\n            if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n                $9bf71ea28793e738$var$activeScope = scopeRef;\n                focusedNode.current = e.target;\n            } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n                // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n                // restore focus to the previously focused node or the first tabbable element in the active scope.\n                if (focusedNode.current) focusedNode.current.focus();\n                else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n            } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n        };\n        let onBlur = (e)=>{\n            // Firefox doesn't shift focus back to the Dialog properly without this\n            if (raf.current) cancelAnimationFrame(raf.current);\n            raf.current = requestAnimationFrame(()=>{\n                // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n                if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n                    $9bf71ea28793e738$var$activeScope = scopeRef;\n                    if (document.body.contains(e.target)) {\n                        focusedNode.current = e.target;\n                        focusedNode.current.focus();\n                    } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n                }\n            });\n        };\n        document.addEventListener(\"keydown\", onKeyDown, false);\n        document.addEventListener(\"focusin\", onFocus, false);\n        scope.forEach((element)=>element.addEventListener(\"focusin\", onFocus, false));\n        scope.forEach((element)=>element.addEventListener(\"focusout\", onBlur, false));\n        return ()=>{\n            document.removeEventListener(\"keydown\", onKeyDown, false);\n            document.removeEventListener(\"focusin\", onFocus, false);\n            scope.forEach((element)=>element.removeEventListener(\"focusin\", onFocus, false));\n            scope.forEach((element)=>element.removeEventListener(\"focusout\", onBlur, false));\n        };\n    }, [\n        scopeRef,\n        contain\n    ]);\n    // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n    // eslint-disable-next-line arrow-body-style\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        return ()=>{\n            if (raf.current) cancelAnimationFrame(raf.current);\n        };\n    }, [\n        raf\n    ]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n    return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n    return scope.some((node)=>node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n    // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n    if (element instanceof Element && element.closest(\"[data-react-aria-top-layer]\")) return true;\n    // node.contains in isElementInScope covers child scopes that are also DOM children,\n    // but does not cover child scopes in portals.\n    for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))){\n        if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n    }\n    return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n    return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n    var _focusScopeTree_getTreeNode;\n    let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n    while(parent){\n        if (parent.scopeRef === ancestor) return true;\n        parent = parent.parent;\n    }\n    return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n    if (element != null && !scroll) try {\n        (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n    } catch (err) {\n    // ignore\n    }\n    else if (element != null) try {\n        element.focus();\n    } catch (err) {\n    // ignore\n    }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n    let sentinel = scope[0].previousElementSibling;\n    let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable\n    }, scope);\n    walker.currentNode = sentinel;\n    let nextNode = walker.nextNode();\n    // If the scope does not contain a tabbable element, use the first focusable element.\n    if (tabbable && !nextNode) {\n        walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n            tabbable: false\n        }, scope);\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n    }\n    $9bf71ea28793e738$var$focusElement(nextNode);\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n    const autoFocusRef = (0, react__WEBPACK_IMPORTED_MODULE_0__).useRef(autoFocus);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoFocusRef.current) {\n            $9bf71ea28793e738$var$activeScope = scopeRef;\n            if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n        }\n        autoFocusRef.current = false;\n    }, [\n        scopeRef\n    ]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n    // tracks the active scope, in case restore and contain are both false.\n    // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (restore || contain) return;\n        let scope = scopeRef.current;\n        let onFocus = (e)=>{\n            let target = e.target;\n            if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n            else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n        };\n        document.addEventListener(\"focusin\", onFocus, false);\n        scope.forEach((element)=>element.addEventListener(\"focusin\", onFocus, false));\n        return ()=>{\n            document.removeEventListener(\"focusin\", onFocus, false);\n            scope.forEach((element)=>element.removeEventListener(\"focusin\", onFocus, false));\n        };\n    }, [\n        scopeRef,\n        restore,\n        contain\n    ]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n    let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n    while(scope && scope.scopeRef !== scopeRef){\n        if (scope.nodeToRestore) return false;\n        scope = scope.parent;\n    }\n    return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n    // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n    const nodeToRestoreRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(typeof document !== \"undefined\" ? document.activeElement : null);\n    // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n    // restoring-non-containing scopes should only care if they become active so they can perform the restore\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        let scope = scopeRef.current;\n        if (!restoreFocus || contain) return;\n        let onFocus = ()=>{\n            // If focusing an element in a child scope of the currently active scope, the child becomes active.\n            // Moving out of the active scope to an ancestor is not allowed.\n            if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n        };\n        document.addEventListener(\"focusin\", onFocus, false);\n        scope.forEach((element)=>element.addEventListener(\"focusin\", onFocus, false));\n        return ()=>{\n            document.removeEventListener(\"focusin\", onFocus, false);\n            scope.forEach((element)=>element.removeEventListener(\"focusin\", onFocus, false));\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        scopeRef,\n        contain\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (!restoreFocus) return;\n        // Handle the Tab key so that tabbing out of the scope goes to the next element\n        // after the node that had focus when the scope mounted. This is important when\n        // using portals for overlays, so that focus goes to the expected element when\n        // tabbing out of the overlay.\n        let onKeyDown = (e)=>{\n            if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n            let focusedElement = document.activeElement;\n            if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n            let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n            // Create a DOM tree walker that matches all tabbable elements\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n                tabbable: true\n            });\n            // Find the next tabbable element after the currently focused element\n            walker.currentNode = focusedElement;\n            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n            if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n                nodeToRestore = null;\n                $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n            }\n            // If there is no next element, or it is outside the current scope, move focus to the\n            // next element after the node to restore to instead.\n            if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n                walker.currentNode = nodeToRestore;\n                // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n                do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n                while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n                e.preventDefault();\n                e.stopPropagation();\n                if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n                else // then move focus to the body.\n                // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n                if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();\n                else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n            }\n        };\n        if (!contain) document.addEventListener(\"keydown\", onKeyDown, true);\n        return ()=>{\n            if (!contain) document.removeEventListener(\"keydown\", onKeyDown, true);\n        };\n    }, [\n        scopeRef,\n        restoreFocus,\n        contain\n    ]);\n    // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (!restoreFocus) return;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n        return ()=>{\n            let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n            // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n            if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps\n            ($9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n                // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n                let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n                requestAnimationFrame(()=>{\n                    // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n                    if (document.activeElement === document.body) {\n                        // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n                        let treeNode = clonedTree.getTreeNode(scopeRef);\n                        while(treeNode){\n                            if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                                return;\n                            }\n                            treeNode = treeNode.parent;\n                        }\n                        // If no nodeToRestore was found, focus the first element in the nearest\n                        // ancestor scope that is still in the tree.\n                        treeNode = clonedTree.getTreeNode(scopeRef);\n                        while(treeNode){\n                            if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                                return;\n                            }\n                            treeNode = treeNode.parent;\n                        }\n                    }\n                });\n            }\n        };\n    }, [\n        scopeRef,\n        restoreFocus\n    ]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n    let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n    let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n        acceptNode (node) {\n            var _opts_from;\n            // Skip nodes inside the starting node.\n            if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n            if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n            return NodeFilter.FILTER_SKIP;\n        }\n    });\n    if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n    return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n    return {\n        focusNext (opts = {}) {\n            let root = ref.current;\n            if (!root) return;\n            let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;\n            let node = from || document.activeElement;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n                tabbable: tabbable,\n                accept: accept\n            });\n            if (root.contains(node)) walker.currentNode = node;\n            let nextNode = walker.nextNode();\n            if (!nextNode && wrap) {\n                walker.currentNode = root;\n                nextNode = walker.nextNode();\n            }\n            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n            return nextNode;\n        },\n        focusPrevious (opts = defaultOptions) {\n            let root = ref.current;\n            if (!root) return;\n            let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;\n            let node = from || document.activeElement;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n                tabbable: tabbable,\n                accept: accept\n            });\n            if (root.contains(node)) walker.currentNode = node;\n            else {\n                let next = $9bf71ea28793e738$var$last(walker);\n                if (next) $9bf71ea28793e738$var$focusElement(next, true);\n                return next;\n            }\n            let previousNode = walker.previousNode();\n            if (!previousNode && wrap) {\n                walker.currentNode = root;\n                previousNode = $9bf71ea28793e738$var$last(walker);\n            }\n            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n            return previousNode;\n        },\n        focusFirst (opts = defaultOptions) {\n            let root = ref.current;\n            if (!root) return;\n            let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n                tabbable: tabbable,\n                accept: accept\n            });\n            let nextNode = walker.nextNode();\n            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n            return nextNode;\n        },\n        focusLast (opts = defaultOptions) {\n            let root = ref.current;\n            if (!root) return;\n            let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;\n            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n                tabbable: tabbable,\n                accept: accept\n            });\n            let next = $9bf71ea28793e738$var$last(walker);\n            if (next) $9bf71ea28793e738$var$focusElement(next, true);\n            return next;\n        }\n    };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n    let next;\n    let last;\n    do {\n        last = walker.lastChild();\n        if (last) next = last;\n    }while (last);\n    return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n    get size() {\n        return this.fastMap.size;\n    }\n    getTreeNode(data) {\n        return this.fastMap.get(data);\n    }\n    addTreeNode(scopeRef, parent, nodeToRestore) {\n        let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n        let node = new $9bf71ea28793e738$var$TreeNode({\n            scopeRef: scopeRef\n        });\n        parentNode.addChild(node);\n        node.parent = parentNode;\n        this.fastMap.set(scopeRef, node);\n        if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n    }\n    addNode(node) {\n        this.fastMap.set(node.scopeRef, node);\n    }\n    removeTreeNode(scopeRef) {\n        // never remove the root\n        if (scopeRef === null) return;\n        let node = this.fastMap.get(scopeRef);\n        let parentNode = node.parent;\n        // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n        // if we are, then replace the siblings restore with the restore from the scope we're removing\n        for (let current of this.traverse())if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n        let children = node.children;\n        parentNode.removeChild(node);\n        if (children.size > 0) children.forEach((child)=>parentNode.addChild(child));\n        this.fastMap.delete(node.scopeRef);\n    }\n    // Pre Order Depth First\n    *traverse(node = this.root) {\n        if (node.scopeRef != null) yield node;\n        if (node.children.size > 0) for (let child of node.children)yield* this.traverse(child);\n    }\n    clone() {\n        let newTree = new $9bf71ea28793e738$var$Tree();\n        for (let node of this.traverse())newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n        return newTree;\n    }\n    constructor(){\n        this.fastMap = new Map();\n        this.root = new $9bf71ea28793e738$var$TreeNode({\n            scopeRef: null\n        });\n        this.fastMap.set(null, this.root);\n    }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n    addChild(node) {\n        this.children.add(node);\n        node.parent = this;\n    }\n    removeChild(node) {\n        this.children.delete(node);\n        node.parent = undefined;\n    }\n    constructor(props){\n        this.children = new Set();\n        this.contain = false;\n        this.scopeRef = props.scopeRef;\n    }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n    let { autoFocus: autoFocus = false, isTextInput: isTextInput, within: within } = props;\n    let state = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isFocused: false,\n        isFocusVisible: autoFocus || (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.isFocusVisible)()\n    });\n    let [isFocused, setFocused] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    let [isFocusVisibleState, setFocusVisible] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>state.current.isFocused && state.current.isFocusVisible);\n    let updateState = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n    let onFocusChange = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((isFocused)=>{\n        state.current.isFocused = isFocused;\n        setFocused(isFocused);\n        updateState();\n    }, [\n        updateState\n    ]);\n    (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.useFocusVisibleListener)((isFocusVisible)=>{\n        state.current.isFocusVisible = isFocusVisible;\n        updateState();\n    }, [], {\n        isTextInput: isTextInput\n    });\n    let { focusProps: focusProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.useFocus)({\n        isDisabled: within,\n        onFocusChange: onFocusChange\n    });\n    let { focusWithinProps: focusWithinProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.useFocusWithin)({\n        isDisabled: !within,\n        onFocusWithinChange: onFocusChange\n    });\n    return {\n        isFocused: isFocused,\n        isFocusVisible: isFocusVisibleState,\n        focusProps: within ? focusWithinProps : focusProps\n    };\n}\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n    let { children: children, focusClass: focusClass, focusRingClass: focusRingClass } = props;\n    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n    let child = (0, react__WEBPACK_IMPORTED_MODULE_0__).Children.only(children);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).cloneElement(child, (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.mergeProps)(child.props, {\n        ...focusProps,\n        className: (0, clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            [focusClass || \"\"]: isFocused,\n            [focusRingClass || \"\"]: isFocusVisible\n        })\n    }));\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(null);\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n    let context = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useSyncRef)(context, ref);\n    // eslint-disable-next-line\n    let { ref: _, ...otherProps } = context;\n    return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */ function $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n    let { children: children, ...otherProps } = props;\n    let context = {\n        ...otherProps,\n        ref: ref\n    };\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n        value: context\n    }, children);\n}\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n    let { focusProps: focusProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.useFocus)(props);\n    let { keyboardProps: keyboardProps } = (0, _react_aria_interactions__WEBPACK_IMPORTED_MODULE_2__.useKeyboard)(props);\n    let interactions = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.mergeProps)(focusProps, keyboardProps);\n    let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n    let interactionProps = props.isDisabled ? {} : domProps;\n    let autoFocusRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props.autoFocus);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n        autoFocusRef.current = false;\n    }, [\n        domRef\n    ]);\n    return {\n        focusableProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.mergeProps)({\n            ...interactions,\n            tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n        }, interactionProps)\n    };\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {\n    let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;\n    let [hasTabbableChild, setHasTabbableChild] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {\n            let update = ()=>{\n                if (ref.current) {\n                    let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {\n                        tabbable: true\n                    });\n                    setHasTabbableChild(!!walker.nextNode());\n                }\n            };\n            update();\n            // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n            let observer = new MutationObserver(update);\n            observer.observe(ref.current, {\n                subtree: true,\n                childList: true,\n                attributes: true,\n                attributeFilter: [\n                    \"tabIndex\",\n                    \"disabled\"\n                ]\n            });\n            return ()=>{\n                // Disconnect mutation observer when a React update occurs on the top-level component\n                // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n                // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n                // so we also update if a child component re-renders and adds/removes something tabbable.\n                observer.disconnect();\n            };\n        }\n    });\n    return isDisabled ? false : hasTabbableChild;\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/focus/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/i18n/dist/real-module.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@react-aria/i18n/dist/real-module.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I18nProvider: () => (/* binding */ $18f2051aff69b9bf$export$a54013f0d02a8f82),\n/* harmony export */   useCollator: () => (/* binding */ $325a3faab7a68acd$export$a16aca283550c30d),\n/* harmony export */   useDateFormatter: () => (/* binding */ $896ba0a80a8f4d36$export$85fd5fdf27bacc79),\n/* harmony export */   useFilter: () => (/* binding */ $bb77f239b46e8c72$export$3274cf84b703fff),\n/* harmony export */   useListFormatter: () => (/* binding */ $33bf17300c498528$export$a2f47a3d2973640),\n/* harmony export */   useLocale: () => (/* binding */ $18f2051aff69b9bf$export$43bb16f9c6d9e3f7),\n/* harmony export */   useLocalizedStringFormatter: () => (/* binding */ $fca6afa0e843324b$export$f12b703ca79dfbb1),\n/* harmony export */   useNumberFormatter: () => (/* binding */ $a916eb452884faea$export$b7a616150fdb9f44)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_aria_ssr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-aria/ssr */ \"(ssr)/./node_modules/@react-aria/ssr/dist/import.mjs\");\n/* harmony import */ var _internationalized_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @internationalized/string */ \"(ssr)/./node_modules/@internationalized/string/dist/import.mjs\");\n/* harmony import */ var _internationalized_date__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @internationalized/date */ \"(ssr)/./node_modules/@internationalized/date/dist/import.mjs\");\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n/* harmony import */ var _internationalized_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @internationalized/number */ \"(ssr)/./node_modules/@internationalized/number/dist/import.mjs\");\n\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // https://en.wikipedia.org/wiki/Right-to-left\nconst $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set([\n    \"Arab\",\n    \"Syrc\",\n    \"Samr\",\n    \"Mand\",\n    \"Thaa\",\n    \"Mend\",\n    \"Nkoo\",\n    \"Adlm\",\n    \"Rohg\",\n    \"Hebr\"\n]);\nconst $148a7a147e38ea7f$var$RTL_LANGS = new Set([\n    \"ae\",\n    \"ar\",\n    \"arc\",\n    \"bcc\",\n    \"bqi\",\n    \"ckb\",\n    \"dv\",\n    \"fa\",\n    \"glk\",\n    \"he\",\n    \"ku\",\n    \"mzn\",\n    \"nqo\",\n    \"pnb\",\n    \"ps\",\n    \"sd\",\n    \"ug\",\n    \"ur\",\n    \"yi\"\n]);\nfunction $148a7a147e38ea7f$export$702d680b21cbd764(locale) {\n    // If the Intl.Locale API is available, use it to get the script for the locale.\n    // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n    // @ts-ignore\n    if (Intl.Locale) {\n        // @ts-ignore\n        let script = new Intl.Locale(locale).maximize().script;\n        return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);\n    }\n    // If not, just guess by the language (first part of the locale)\n    let lang = locale.split(\"-\")[0];\n    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {\n    // @ts-ignore\n    let locale = typeof navigator !== \"undefined\" && (navigator.language || navigator.userLanguage) || \"en-US\";\n    try {\n        // @ts-ignore\n        Intl.DateTimeFormat.supportedLocalesOf([\n            locale\n        ]);\n    } catch (_err) {\n        locale = \"en-US\";\n    }\n    return {\n        locale: locale,\n        direction: (0, $148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? \"rtl\" : \"ltr\"\n    };\n}\nlet $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\nlet $1e5a04cdaf7d1af8$var$listeners = new Set();\nfunction $1e5a04cdaf7d1af8$var$updateLocale() {\n    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\n    for (let listener of $1e5a04cdaf7d1af8$var$listeners)listener($1e5a04cdaf7d1af8$var$currentLocale);\n}\nfunction $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {\n    let isSSR = (0, _react_aria_ssr__WEBPACK_IMPORTED_MODULE_1__.useIsSSR)();\n    let [defaultLocale, setDefaultLocale] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)($1e5a04cdaf7d1af8$var$currentLocale);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener(\"languagechange\", $1e5a04cdaf7d1af8$var$updateLocale);\n        $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);\n        return ()=>{\n            $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);\n            if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener(\"languagechange\", $1e5a04cdaf7d1af8$var$updateLocale);\n        };\n    }, []);\n    // We cannot determine the browser's language on the server, so default to\n    // en-US. This will be updated after hydration on the client to the correct value.\n    if (isSSR) return {\n        locale: \"en-US\",\n        direction: \"ltr\"\n    };\n    return defaultLocale;\n}\nconst $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(null);\nfunction $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {\n    let { locale: locale, children: children } = props;\n    let defaultLocale = (0, $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();\n    let value = locale ? {\n        locale: locale,\n        direction: (0, $148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? \"rtl\" : \"ltr\"\n    } : defaultLocale;\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($18f2051aff69b9bf$var$I18nContext.Provider, {\n        value: value\n    }, children);\n}\nfunction $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {\n    let defaultLocale = (0, $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();\n    let context = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($18f2051aff69b9bf$var$I18nContext);\n    return context || defaultLocale;\n}\nvar $2aa2084a6c2b6b4f$exports = {};\n\"use strict\";\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $fca6afa0e843324b$var$cache = new WeakMap();\nfunction $fca6afa0e843324b$var$getCachedDictionary(strings) {\n    let dictionary = $fca6afa0e843324b$var$cache.get(strings);\n    if (!dictionary) {\n        dictionary = new (0, _internationalized_string__WEBPACK_IMPORTED_MODULE_2__.LocalizedStringDictionary)(strings);\n        $fca6afa0e843324b$var$cache.set(strings, dictionary);\n    }\n    return dictionary;\n}\nfunction $fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {\n    let { locale: locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n    let dictionary = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>$fca6afa0e843324b$var$getCachedDictionary(strings), [\n        strings\n    ]);\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_string__WEBPACK_IMPORTED_MODULE_2__.LocalizedStringFormatter)(locale, dictionary), [\n        locale,\n        dictionary\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $33bf17300c498528$export$a2f47a3d2973640(options = {}) {\n    let { locale: locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n    // @ts-ignore\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new Intl.ListFormat(locale, options), [\n        locale,\n        options\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {\n    // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.\n    options = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useDeepMemo)(options, $896ba0a80a8f4d36$var$isEqual);\n    let { locale: locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_4__.DateFormatter)(locale, options), [\n        locale,\n        options\n    ]);\n}\nfunction $896ba0a80a8f4d36$var$isEqual(a, b) {\n    if (a === b) return true;\n    let aKeys = Object.keys(a);\n    let bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    for (let key of aKeys){\n        if (b[key] !== a[key]) return false;\n    }\n    return true;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {\n    let { locale: locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_number__WEBPACK_IMPORTED_MODULE_5__.NumberFormatter)(locale, options), [\n        locale,\n        options\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $325a3faab7a68acd$var$cache = new Map();\nfunction $325a3faab7a68acd$export$a16aca283550c30d(options) {\n    let { locale: locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : \"\");\n    if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);\n    let formatter = new Intl.Collator(locale, options);\n    $325a3faab7a68acd$var$cache.set(cacheKey, formatter);\n    return formatter;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n    let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({\n        usage: \"search\",\n        ...options\n    });\n    // TODO(later): these methods don't currently support the ignorePunctuation option.\n    let startsWith = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        // Normalize both strings so we can slice safely\n        // TODO: take into account the ignorePunctuation option as well...\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        return collator.compare(string.slice(0, substring.length), substring) === 0;\n    }, [\n        collator\n    ]);\n    let endsWith = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        return collator.compare(string.slice(-substring.length), substring) === 0;\n    }, [\n        collator\n    ]);\n    let contains = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        let scan = 0;\n        let sliceLen = substring.length;\n        for(; scan + sliceLen <= string.length; scan++){\n            let slice = string.slice(scan, scan + sliceLen);\n            if (collator.compare(substring, slice) === 0) return true;\n        }\n        return false;\n    }, [\n        collator\n    ]);\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            startsWith: startsWith,\n            endsWith: endsWith,\n            contains: contains\n        }), [\n        startsWith,\n        endsWith,\n        contains\n    ]);\n}\n //# sourceMappingURL=real-module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/i18n/dist/real-module.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/interactions/dist/import.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@react-aria/interactions/dist/import.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClearPressResponder: () => (/* binding */ $f1ab8c75478c6f73$export$cf75428e0b9ed1ea),\n/* harmony export */   PressResponder: () => (/* binding */ $f1ab8c75478c6f73$export$3351871ee4b288b8),\n/* harmony export */   Pressable: () => (/* binding */ $3b117e43dc0ca95d$export$27c701ed9e449e99),\n/* harmony export */   getInteractionModality: () => (/* binding */ $507fabe10e71c6fb$export$630ff653c5ada6a9),\n/* harmony export */   isFocusVisible: () => (/* binding */ $507fabe10e71c6fb$export$b9b3dfddab17db27),\n/* harmony export */   setInteractionModality: () => (/* binding */ $507fabe10e71c6fb$export$8397ddfc504fdb9a),\n/* harmony export */   useFocus: () => (/* binding */ $a1ea59d68270f0dd$export$f8168d8dd8fd66e6),\n/* harmony export */   useFocusVisible: () => (/* binding */ $507fabe10e71c6fb$export$ffd9e5021c1fb2d6),\n/* harmony export */   useFocusVisibleListener: () => (/* binding */ $507fabe10e71c6fb$export$ec71b4b83ac08ec3),\n/* harmony export */   useFocusWithin: () => (/* binding */ $9ab94262bd0047c7$export$420e68273165f4ec),\n/* harmony export */   useHover: () => (/* binding */ $6179b936705e76d3$export$ae780daf29e6d456),\n/* harmony export */   useInteractOutside: () => (/* binding */ $e0b6e0b68ec7f50f$export$872b660ac5a1ff98),\n/* harmony export */   useInteractionModality: () => (/* binding */ $507fabe10e71c6fb$export$98e20ec92f614cfe),\n/* harmony export */   useKeyboard: () => (/* binding */ $46d819fcbaf35654$export$8f71654801c2f7cd),\n/* harmony export */   useLongPress: () => (/* binding */ $8a26561d2877236e$export$c24ed0104d07eab9),\n/* harmony export */   useMove: () => (/* binding */ $e8a7022cf87cba2a$export$36da96379f79f245),\n/* harmony export */   usePress: () => (/* binding */ $f6c31cce2adf654f$export$45712eceda6fad21),\n/* harmony export */   useScrollWheel: () => (/* binding */ $7d0a636d7a4dcefd$export$2123ff2b87c81ca)\n/* harmony export */ });\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(ssr)/./node_modules/next/node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(ssr)/./node_modules/next/node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(ssr)/./node_modules/next/node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _react_aria_ssr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-aria/ssr */ \"(ssr)/./node_modules/@react-aria/ssr/dist/import.mjs\");\n\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = \"default\";\nlet $14c0b72509d70225$var$savedUserSelect = \"\";\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n    if ((0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isIOS)()) {\n        if ($14c0b72509d70225$var$state === \"default\") {\n            $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n            document.documentElement.style.webkitUserSelect = \"none\";\n        }\n        $14c0b72509d70225$var$state = \"disabled\";\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n        // If not iOS, store the target's original user-select and change to user-select: none\n        // Ignore state since it doesn't apply for non iOS\n        $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n        target.style.userSelect = \"none\";\n    }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n    if ((0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isIOS)()) {\n        // If the state is already default, there's nothing to do.\n        // If it is restoring, then there's no need to queue a second restore.\n        if ($14c0b72509d70225$var$state !== \"disabled\") return;\n        $14c0b72509d70225$var$state = \"restoring\";\n        // There appears to be a delay on iOS where selection still might occur\n        // after pointer up, so wait a bit before removing user-select.\n        setTimeout(()=>{\n            // Wait for any CSS transitions to complete so we don't recompute style\n            // for the whole page in the middle of the animation and cause jank.\n            (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.runAfterTransition)(()=>{\n                // Avoid race conditions\n                if ($14c0b72509d70225$var$state === \"restoring\") {\n                    if (document.documentElement.style.webkitUserSelect === \"none\") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || \"\";\n                    $14c0b72509d70225$var$savedUserSelect = \"\";\n                    $14c0b72509d70225$var$state = \"default\";\n                }\n            });\n        }, 300);\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) // Ignore state since it doesn't apply for non iOS\n    {\n        if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n            let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n            if (target.style.userSelect === \"none\") target.style.userSelect = targetOldUserSelect;\n            if (target.getAttribute(\"style\") === \"\") target.removeAttribute(\"style\");\n            $14c0b72509d70225$var$modifiedElementMap.delete(target);\n        }\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = \"PressResponderContext\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n    // Consume context from <PressResponder> and merge with props.\n    let context = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n    if (context) {\n        let { register: register, ...contextProps } = context;\n        props = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.mergeProps)(contextProps, props);\n        register();\n    }\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useSyncRef)(context, props.ref);\n    return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/ new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n    continuePropagation() {\n        (0, _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n    }\n    get shouldStopPropagation() {\n        return (0, _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n    }\n    constructor(type, pointerType, originalEvent){\n        (0, _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n            writable: true,\n            value: void 0\n        });\n        (0, _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n        this.type = type;\n        this.pointerType = pointerType;\n        this.target = originalEvent.currentTarget;\n        this.shiftKey = originalEvent.shiftKey;\n        this.metaKey = originalEvent.metaKey;\n        this.ctrlKey = originalEvent.ctrlKey;\n        this.altKey = originalEvent.altKey;\n    }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol(\"linkClicked\");\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n    let { onPress: onPress, onPressChange: onPressChange, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, isDisabled: isDisabled, isPressed: isPressedProp, preventFocusOnPress: preventFocusOnPress, shouldCancelOnPointerExit: shouldCancelOnPointerExit, allowTextSelectionOnPress: allowTextSelectionOnPress, ref: _, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n    let [isPressed, setPressed] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    let ref = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isPressed: false,\n        ignoreEmulatedMouseEvents: false,\n        ignoreClickAfterPress: false,\n        didFirePressStart: false,\n        isTriggeringEvent: false,\n        activePointerId: null,\n        target: null,\n        isOverTarget: false,\n        pointerType: null\n    });\n    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useGlobalListeners)();\n    let triggerPressStart = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((originalEvent, pointerType)=>{\n        let state = ref.current;\n        if (isDisabled || state.didFirePressStart) return;\n        let shouldStopPropagation = true;\n        state.isTriggeringEvent = true;\n        if (onPressStart) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressstart\", pointerType, originalEvent);\n            onPressStart(event);\n            shouldStopPropagation = event.shouldStopPropagation;\n        }\n        if (onPressChange) onPressChange(true);\n        state.isTriggeringEvent = false;\n        state.didFirePressStart = true;\n        setPressed(true);\n        return shouldStopPropagation;\n    });\n    let triggerPressEnd = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((originalEvent, pointerType, wasPressed = true)=>{\n        let state = ref.current;\n        if (!state.didFirePressStart) return;\n        state.ignoreClickAfterPress = true;\n        state.didFirePressStart = false;\n        state.isTriggeringEvent = true;\n        let shouldStopPropagation = true;\n        if (onPressEnd) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressend\", pointerType, originalEvent);\n            onPressEnd(event);\n            shouldStopPropagation = event.shouldStopPropagation;\n        }\n        if (onPressChange) onPressChange(false);\n        setPressed(false);\n        if (onPress && wasPressed && !isDisabled) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"press\", pointerType, originalEvent);\n            onPress(event);\n            shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n        }\n        state.isTriggeringEvent = false;\n        return shouldStopPropagation;\n    });\n    let triggerPressUp = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((originalEvent, pointerType)=>{\n        let state = ref.current;\n        if (isDisabled) return;\n        if (onPressUp) {\n            state.isTriggeringEvent = true;\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressup\", pointerType, originalEvent);\n            onPressUp(event);\n            state.isTriggeringEvent = false;\n            return event.shouldStopPropagation;\n        }\n        return true;\n    });\n    let cancel = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((e)=>{\n        let state = ref.current;\n        if (state.isPressed) {\n            if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n            state.isPressed = false;\n            state.isOverTarget = false;\n            state.activePointerId = null;\n            state.pointerType = null;\n            removeAllGlobalListeners();\n            if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n    });\n    let cancelOnPointerExit = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((e)=>{\n        if (shouldCancelOnPointerExit) cancel(e);\n    });\n    let pressProps = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let state = ref.current;\n        let pressProps = {\n            onKeyDown (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                    // If the event is repeating, it may have started on a different element\n                    // after which focus moved to the current element. Ignore these events and\n                    // only handle the first key down event.\n                    let shouldStopPropagation = true;\n                    if (!state.isPressed && !e.repeat) {\n                        state.target = e.currentTarget;\n                        state.isPressed = true;\n                        shouldStopPropagation = triggerPressStart(e, \"keyboard\");\n                        // Focus may move before the key up event, so register the event on the document\n                        // instead of the same element where the key down event occurred.\n                        addGlobalListener(document, \"keyup\", onKeyUp, false);\n                    }\n                    if (shouldStopPropagation) e.stopPropagation();\n                    // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n                    // macOS has a bug where keyup events are not fired while the Meta key is down.\n                    // When the Meta key itself is released we will get an event for that, and we'll act as if\n                    // all of these other keys were released as well.\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n                    // https://bugs.webkit.org/show_bug.cgi?id=55291\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n                    if (e.metaKey && (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isMac)()) state.metaKeyEvents.set(e.key, e.nativeEvent);\n                } else if (e.key === \"Meta\") state.metaKeyEvents = new Map();\n            },\n            onKeyUp (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n            },\n            onClick (e) {\n                if (e && !e.currentTarget.contains(e.target)) return;\n                if (e && e.button === 0 && !state.isTriggeringEvent && !(0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.openLink).isOpening) {\n                    let shouldStopPropagation = true;\n                    if (isDisabled) e.preventDefault();\n                    // If triggered from a screen reader or by using element.click(),\n                    // trigger as if it were a keyboard click.\n                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === \"virtual\" || (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isVirtualClick)(e.nativeEvent))) {\n                        // Ensure the element receives focus (VoiceOver on iOS does not do this)\n                        if (!isDisabled && !preventFocusOnPress) (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.focusWithoutScrolling)(e.currentTarget);\n                        let stopPressStart = triggerPressStart(e, \"virtual\");\n                        let stopPressUp = triggerPressUp(e, \"virtual\");\n                        let stopPressEnd = triggerPressEnd(e, \"virtual\");\n                        shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n                    }\n                    state.ignoreEmulatedMouseEvents = false;\n                    state.ignoreClickAfterPress = false;\n                    if (shouldStopPropagation) e.stopPropagation();\n                }\n            }\n        };\n        let onKeyUp = (e)=>{\n            var _state_metaKeyEvents;\n            if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n                var _state_metaKeyEvents1;\n                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                let target = e.target;\n                let shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n                removeAllGlobalListeners();\n                if (shouldStopPropagation) e.stopPropagation();\n                // If a link was triggered with a key other than Enter, open the URL ourselves.\n                // This means the link has a role override, and the default browser behavior\n                // only applies when using the Enter key.\n                if (e.key !== \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n                    // Store a hidden property on the event so we only trigger link click once,\n                    // even if there are multiple usePress instances attached to the element.\n                    e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n                    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.openLink)(state.target, e, false);\n                }\n                state.isPressed = false;\n                (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n            } else if (e.key === \"Meta\" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n                // If we recorded keydown events that occurred while the Meta key was pressed,\n                // and those haven't received keyup events already, fire keyup events ourselves.\n                // See comment above for more info about the macOS bug causing this.\n                let events = state.metaKeyEvents;\n                state.metaKeyEvents = null;\n                for (let event of events.values())state.target.dispatchEvent(new KeyboardEvent(\"keyup\", event));\n            }\n        };\n        if (typeof PointerEvent !== \"undefined\") {\n            pressProps.onPointerDown = (e)=>{\n                // Only handle left clicks, and ignore events that bubbled through portals.\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n                // Ignore and let the onClick handler take care of it instead.\n                // https://bugs.webkit.org/show_bug.cgi?id=222627\n                // https://bugs.webkit.org/show_bug.cgi?id=223202\n                if ((0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isVirtualPointerEvent)(e.nativeEvent)) {\n                    state.pointerType = \"virtual\";\n                    return;\n                }\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on pointer down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                state.pointerType = e.pointerType;\n                let shouldStopPropagation = true;\n                if (!state.isPressed) {\n                    state.isPressed = true;\n                    state.isOverTarget = true;\n                    state.activePointerId = e.pointerId;\n                    state.target = e.currentTarget;\n                    if (!isDisabled && !preventFocusOnPress) (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.focusWithoutScrolling)(e.currentTarget);\n                    if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n                    shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                    addGlobalListener(document, \"pointermove\", onPointerMove, false);\n                    addGlobalListener(document, \"pointerup\", onPointerUp, false);\n                    addGlobalListener(document, \"pointercancel\", onPointerCancel, false);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseDown = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (e.button === 0) {\n                    // Chrome and Firefox on touch Windows devices require mouse down events\n                    // to be canceled in addition to pointer events, or an extra asynchronous\n                    // focus event will be fired.\n                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                    e.stopPropagation();\n                }\n            };\n            pressProps.onPointerUp = (e)=>{\n                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n                if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n                // Only handle left clicks\n                // Safari on iOS sometimes fires pointerup events, even\n                // when the touch isn't over the target, so double check.\n                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n            };\n            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n            // Use pointer move events instead to implement our own hit testing.\n            // See https://bugs.webkit.org/show_bug.cgi?id=199803\n            let onPointerMove = (e)=>{\n                if (e.pointerId !== state.activePointerId) return;\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    state.isPressed = false;\n                    state.isOverTarget = false;\n                    state.activePointerId = null;\n                    state.pointerType = null;\n                    removeAllGlobalListeners();\n                    if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n                }\n            };\n            let onPointerCancel = (e)=>{\n                cancel(e);\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n                cancel(e);\n            };\n        } else {\n            pressProps.onMouseDown = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on mouse down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                if (state.ignoreEmulatedMouseEvents) {\n                    e.stopPropagation();\n                    return;\n                }\n                state.isPressed = true;\n                state.isOverTarget = true;\n                state.target = e.currentTarget;\n                state.pointerType = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n                if (!isDisabled && !preventFocusOnPress) (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.focusWithoutScrolling)(e.currentTarget);\n                let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                if (shouldStopPropagation) e.stopPropagation();\n                addGlobalListener(document, \"mouseup\", onMouseUp, false);\n            };\n            pressProps.onMouseEnter = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let shouldStopPropagation = true;\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = true;\n                    shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseLeave = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let shouldStopPropagation = true;\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = false;\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseUp = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || \"mouse\");\n            };\n            let onMouseUp = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0) return;\n                state.isPressed = false;\n                removeAllGlobalListeners();\n                if (state.ignoreEmulatedMouseEvents) {\n                    state.ignoreEmulatedMouseEvents = false;\n                    return;\n                }\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isOverTarget = false;\n            };\n            pressProps.onTouchStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n                if (!touch) return;\n                state.activePointerId = touch.identifier;\n                state.ignoreEmulatedMouseEvents = true;\n                state.isOverTarget = true;\n                state.isPressed = true;\n                state.target = e.currentTarget;\n                state.pointerType = \"touch\";\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n                // on the emulated mouse event and handle focusing the pressable element ourselves.\n                if (!isDisabled && !preventFocusOnPress) (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.focusWithoutScrolling)(e.currentTarget);\n                if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n                let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                if (shouldStopPropagation) e.stopPropagation();\n                addGlobalListener(window, \"scroll\", onScroll, true);\n            };\n            pressProps.onTouchMove = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.isPressed) {\n                    e.stopPropagation();\n                    return;\n                }\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                let shouldStopPropagation = true;\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onTouchEnd = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.isPressed) {\n                    e.stopPropagation();\n                    return;\n                }\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                let shouldStopPropagation = true;\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    triggerPressUp(e, state.pointerType);\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n                } else if (state.isOverTarget) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                if (shouldStopPropagation) e.stopPropagation();\n                state.isPressed = false;\n                state.activePointerId = null;\n                state.isOverTarget = false;\n                state.ignoreEmulatedMouseEvents = true;\n                if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n                removeAllGlobalListeners();\n            };\n            pressProps.onTouchCancel = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed) cancel(e);\n            };\n            let onScroll = (e)=>{\n                if (state.isPressed && e.target.contains(state.target)) cancel({\n                    currentTarget: state.target,\n                    shiftKey: false,\n                    ctrlKey: false,\n                    metaKey: false,\n                    altKey: false\n                });\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                cancel(e);\n            };\n        }\n        return pressProps;\n    }, [\n        addGlobalListener,\n        isDisabled,\n        preventFocusOnPress,\n        removeAllGlobalListeners,\n        allowTextSelectionOnPress,\n        cancel,\n        cancelOnPointerExit,\n        triggerPressEnd,\n        triggerPressStart,\n        triggerPressUp\n    ]);\n    // Remove user-select: none in case component unmounts immediately after pressStart\n    // eslint-disable-next-line arrow-body-style\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);\n        };\n    }, [\n        allowTextSelectionOnPress\n    ]);\n    return {\n        isPressed: isPressedProp || isPressed,\n        pressProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.mergeProps)(domProps, pressProps)\n    };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n    return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n    const { key: key, code: code } = event;\n    const element = currentTarget;\n    const role = element.getAttribute(\"role\");\n    // Accessibility for keyboards. Space and Enter only.\n    // \"Spacebar\" is for IE 11\n    return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key\n    !((role === \"link\" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n    const { targetTouches: targetTouches } = event;\n    if (targetTouches.length > 0) return targetTouches[0];\n    return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n    const changedTouches = event.changedTouches;\n    for(let i = 0; i < changedTouches.length; i++){\n        const touch = changedTouches[i];\n        if (touch.identifier === pointerId) return touch;\n    }\n    return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n    return {\n        currentTarget: target,\n        shiftKey: e.shiftKey,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey\n    };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n    let offsetX = point.width / 2 || point.radiusX || 0;\n    let offsetY = point.height / 2 || point.radiusY || 0;\n    return {\n        top: point.clientY - offsetY,\n        right: point.clientX + offsetX,\n        bottom: point.clientY + offsetY,\n        left: point.clientX - offsetX\n    };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n    // check if they cannot overlap on x axis\n    if (a.left > b.right || b.left > a.right) return false;\n    // check if they cannot overlap on y axis\n    if (a.top > b.bottom || b.top > a.bottom) return false;\n    return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n    let rect = target.getBoundingClientRect();\n    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n    // We cannot prevent default if the target is a draggable element.\n    return !(target instanceof HTMLElement) || !target.hasAttribute(\"draggable\");\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n    if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n    if (target instanceof HTMLButtonElement) return target.type !== \"submit\" && target.type !== \"reset\";\n    if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n    return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\n    \"checkbox\",\n    \"radio\",\n    \"range\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"button\",\n    \"submit\",\n    \"reset\"\n]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n    // Only space should toggle checkboxes and radios, not enter.\n    return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).forwardRef(({ children: children, ...props }, ref)=>{\n    let newRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    ref = ref !== null && ref !== void 0 ? ref : newRef;\n    let { pressProps: pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n        ...props,\n        ref: ref\n    });\n    let child = (0, react__WEBPACK_IMPORTED_MODULE_0__).Children.only(children);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).cloneElement(child, {\n        ref: ref,\n        ...(0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.mergeProps)(child.props, pressProps)\n    });\n});\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).forwardRef(({ children: children, ...props }, ref)=>{\n    let isRegistered = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    let prevContext = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n    let context = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.mergeProps)(prevContext || {}, {\n        ...props,\n        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n        register () {\n            isRegistered.current = true;\n            if (prevContext) prevContext.register();\n        }\n    });\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useSyncRef)(prevContext, ref);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isRegistered.current) {\n            console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n            isRegistered.current = true; // only warn once in strict mode.\n        }\n    }, []);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n        value: context\n    }, children);\n});\nfunction $f1ab8c75478c6f73$export$cf75428e0b9ed1ea({ children: children }) {\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n        value: undefined\n    }, children);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ class $8a9cb279dc87e130$export$905e7fc544a71f36 {\n    isDefaultPrevented() {\n        return this.nativeEvent.defaultPrevented;\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n        this.nativeEvent.preventDefault();\n    }\n    stopPropagation() {\n        this.nativeEvent.stopPropagation();\n        this.isPropagationStopped = ()=>true;\n    }\n    isPropagationStopped() {\n        return false;\n    }\n    persist() {}\n    constructor(type, nativeEvent){\n        this.nativeEvent = nativeEvent;\n        this.target = nativeEvent.target;\n        this.currentTarget = nativeEvent.currentTarget;\n        this.relatedTarget = nativeEvent.relatedTarget;\n        this.bubbles = nativeEvent.bubbles;\n        this.cancelable = nativeEvent.cancelable;\n        this.defaultPrevented = nativeEvent.defaultPrevented;\n        this.eventPhase = nativeEvent.eventPhase;\n        this.isTrusted = nativeEvent.isTrusted;\n        this.timeStamp = nativeEvent.timeStamp;\n        this.type = type;\n    }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n    let stateRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isFocused: false,\n        observer: null\n    });\n    // Clean up MutationObserver on unmount. See below.\n    // eslint-disable-next-line arrow-body-style\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(()=>{\n        const state = stateRef.current;\n        return ()=>{\n            if (state.observer) {\n                state.observer.disconnect();\n                state.observer = null;\n            }\n        };\n    }, []);\n    let dispatchBlur = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((e)=>{\n        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n    });\n    // This function is called during a React onFocus event.\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n        // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n        // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n        // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n        if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n            stateRef.current.isFocused = true;\n            let target = e.target;\n            let onBlurHandler = (e)=>{\n                stateRef.current.isFocused = false;\n                if (target.disabled) dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36(\"blur\", e));\n                // We no longer need the MutationObserver once the target is blurred.\n                if (stateRef.current.observer) {\n                    stateRef.current.observer.disconnect();\n                    stateRef.current.observer = null;\n                }\n            };\n            target.addEventListener(\"focusout\", onBlurHandler, {\n                once: true\n            });\n            stateRef.current.observer = new MutationObserver(()=>{\n                if (stateRef.current.isFocused && target.disabled) {\n                    stateRef.current.observer.disconnect();\n                    let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n                    target.dispatchEvent(new FocusEvent(\"blur\", {\n                        relatedTarget: relatedTargetEl\n                    }));\n                    target.dispatchEvent(new FocusEvent(\"focusout\", {\n                        bubbles: true,\n                        relatedTarget: relatedTargetEl\n                    }));\n                }\n            });\n            stateRef.current.observer.observe(target, {\n                attributes: true,\n                attributeFilter: [\n                    \"disabled\"\n                ]\n            });\n        }\n    }, [\n        dispatchBlur\n    ]);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n    let { isDisabled: isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange: onFocusChange } = props;\n    const onBlur = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onBlurProp) onBlurProp(e);\n            if (onFocusChange) onFocusChange(false);\n            return true;\n        }\n    }, [\n        onBlurProp,\n        onFocusChange\n    ]);\n    const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n    const onFocus = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // Double check that document.activeElement actually matches e.target in case a previously chained\n        // focus handler already moved focus somewhere else.\n        if (e.target === e.currentTarget && document.activeElement === e.target) {\n            if (onFocusProp) onFocusProp(e);\n            if (onFocusChange) onFocusChange(true);\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusChange,\n        onFocusProp,\n        onSyntheticFocus\n    ]);\n    return {\n        focusProps: {\n            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined\n        }\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n    Tab: true,\n    Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */ function $507fabe10e71c6fb$var$isValidKey(e) {\n    // Control and Shift keys trigger when navigating back to the tab with keyboard.\n    return !(e.metaKey || !(0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    if ($507fabe10e71c6fb$var$isValidKey(e)) {\n        $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n        $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n    $507fabe10e71c6fb$var$currentModality = \"pointer\";\n    if (e.type === \"mousedown\" || e.type === \"pointerdown\") {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n    if ((0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.isVirtualClick)(e)) {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n    // Firefox fires two extra focus events when the user first clicks into an iframe:\n    // first on the window, then on the document. We ignore these events so they don't\n    // cause keyboard focus rings to appear.\n    if (e.target === window || e.target === document) return;\n    // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n        $507fabe10e71c6fb$var$currentModality = \"virtual\";\n        $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e);\n    }\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n    // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n    // for example, since a subsequent focus event won't be fired.\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n    if (true) return;\n    // Programmatic focus() calls shouldn't affect the current input modality.\n    // However, we need to detect other cases when a focus event occurs without\n    // a preceding user event (e.g. screen reader focus). Overriding the focus\n    // method on HTMLElement.prototype is a bit hacky, but works.\n    let focus = HTMLElement.prototype.focus;\n    HTMLElement.prototype.focus = function() {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        focus.apply(this, arguments);\n    };\n    document.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n    // Register focus events on the window so they are sure to happen\n    // before React's event listeners (registered on the document).\n    window.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n    window.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n    if (typeof PointerEvent !== \"undefined\") {\n        document.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    } else {\n        document.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    }\n    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== \"undefined\") {\n    if (document.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    else document.addEventListener(\"DOMContentLoaded\", $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n    return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n    return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n    $507fabe10e71c6fb$var$currentModality = modality;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    let [modality, setModality] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)($507fabe10e71c6fb$var$currentModality);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let handler = ()=>{\n            setModality($507fabe10e71c6fb$var$currentModality);\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, []);\n    return (0, _react_aria_ssr__WEBPACK_IMPORTED_MODULE_5__.useIsSSR)() ? null : modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n    return !(isTextInput && modality === \"keyboard\" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {\n    let { isTextInput: isTextInput, autoFocus: autoFocus } = props;\n    let [isFocusVisibleState, setFocusVisible] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n    $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible)=>{\n        setFocusVisible(isFocusVisible);\n    }, [\n        isTextInput\n    ], {\n        isTextInput: isTextInput\n    });\n    return {\n        isFocusVisible: isFocusVisibleState\n    };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let handler = (modality, e)=>{\n            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n    let { isDisabled: isDisabled, onBlurWithin: onBlurWithin, onFocusWithin: onFocusWithin, onFocusWithinChange: onFocusWithinChange } = props;\n    let state = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isFocusWithin: false\n    });\n    let onBlur = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n        // when moving focus inside the element. Only trigger if the currentTarget doesn't\n        // include the relatedTarget (where focus is moving).\n        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n            state.current.isFocusWithin = false;\n            if (onBlurWithin) onBlurWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(false);\n        }\n    }, [\n        onBlurWithin,\n        onFocusWithinChange,\n        state\n    ]);\n    let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n    let onFocus = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // Double check that document.activeElement actually matches e.target in case a previously chained\n        // focus handler already moved focus somewhere else.\n        if (!state.current.isFocusWithin && document.activeElement === e.target) {\n            if (onFocusWithin) onFocusWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(true);\n            state.current.isFocusWithin = true;\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusWithin,\n        onFocusWithinChange,\n        onSyntheticFocus\n    ]);\n    if (isDisabled) return {\n        focusWithinProps: {\n            onFocus: null,\n            onBlur: null\n        }\n    };\n    return {\n        focusWithinProps: {\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(()=>{\n        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n    }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n    if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n    if (typeof document === \"undefined\") return;\n    if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    $6179b936705e76d3$var$hoverCount++;\n    return ()=>{\n        $6179b936705e76d3$var$hoverCount--;\n        if ($6179b936705e76d3$var$hoverCount > 0) return;\n        if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n        else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n    let { onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, isDisabled: isDisabled } = props;\n    let [isHovered, setHovered] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    let state = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isHovered: false,\n        ignoreEmulatedMouseEvents: false,\n        pointerType: \"\",\n        target: null\n    }).current;\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n    let { hoverProps: hoverProps, triggerHoverEnd: triggerHoverEnd } = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let triggerHoverStart = (event, pointerType)=>{\n            state.pointerType = pointerType;\n            if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n            state.isHovered = true;\n            let target = event.currentTarget;\n            state.target = target;\n            if (onHoverStart) onHoverStart({\n                type: \"hoverstart\",\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(true);\n            setHovered(true);\n        };\n        let triggerHoverEnd = (event, pointerType)=>{\n            state.pointerType = \"\";\n            state.target = null;\n            if (pointerType === \"touch\" || !state.isHovered) return;\n            state.isHovered = false;\n            let target = event.currentTarget;\n            if (onHoverEnd) onHoverEnd({\n                type: \"hoverend\",\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(false);\n            setHovered(false);\n        };\n        let hoverProps = {};\n        if (typeof PointerEvent !== \"undefined\") {\n            hoverProps.onPointerEnter = (e)=>{\n                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n                triggerHoverStart(e, e.pointerType);\n            };\n            hoverProps.onPointerLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n            };\n        } else {\n            hoverProps.onTouchStart = ()=>{\n                state.ignoreEmulatedMouseEvents = true;\n            };\n            hoverProps.onMouseEnter = (e)=>{\n                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n                state.ignoreEmulatedMouseEvents = false;\n            };\n            hoverProps.onMouseLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n            };\n        }\n        return {\n            hoverProps: hoverProps,\n            triggerHoverEnd: triggerHoverEnd\n        };\n    }, [\n        onHoverStart,\n        onHoverChange,\n        onHoverEnd,\n        isDisabled,\n        state\n    ]);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Call the triggerHoverEnd as soon as isDisabled changes to true\n        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n        if (isDisabled) triggerHoverEnd({\n            currentTarget: state.target\n        }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled\n    ]);\n    return {\n        hoverProps: hoverProps,\n        isHovered: isHovered\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n    let { ref: ref, onInteractOutside: onInteractOutside, isDisabled: isDisabled, onInteractOutsideStart: onInteractOutsideStart } = props;\n    let stateRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isPointerDown: false,\n        ignoreEmulatedMouseEvents: false\n    });\n    let onPointerDown = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((e)=>{\n        if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n            if (onInteractOutsideStart) onInteractOutsideStart(e);\n            stateRef.current.isPointerDown = true;\n        }\n    });\n    let triggerInteractOutside = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((e)=>{\n        if (onInteractOutside) onInteractOutside(e);\n    });\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let state = stateRef.current;\n        if (isDisabled) return;\n        // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n        if (typeof PointerEvent !== \"undefined\") {\n            let onPointerUp = (e)=>{\n                if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n                state.isPointerDown = false;\n            };\n            // changing these to capture phase fixed combobox\n            document.addEventListener(\"pointerdown\", onPointerDown, true);\n            document.addEventListener(\"pointerup\", onPointerUp, true);\n            return ()=>{\n                document.removeEventListener(\"pointerdown\", onPointerDown, true);\n                document.removeEventListener(\"pointerup\", onPointerUp, true);\n            };\n        } else {\n            let onMouseUp = (e)=>{\n                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;\n                else if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n                state.isPointerDown = false;\n            };\n            let onTouchEnd = (e)=>{\n                state.ignoreEmulatedMouseEvents = true;\n                if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n                state.isPointerDown = false;\n            };\n            document.addEventListener(\"mousedown\", onPointerDown, true);\n            document.addEventListener(\"mouseup\", onMouseUp, true);\n            document.addEventListener(\"touchstart\", onPointerDown, true);\n            document.addEventListener(\"touchend\", onTouchEnd, true);\n            return ()=>{\n                document.removeEventListener(\"mousedown\", onPointerDown, true);\n                document.removeEventListener(\"mouseup\", onMouseUp, true);\n                document.removeEventListener(\"touchstart\", onPointerDown, true);\n                document.removeEventListener(\"touchend\", onTouchEnd, true);\n            };\n        }\n    }, [\n        ref,\n        isDisabled,\n        onPointerDown,\n        triggerInteractOutside\n    ]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n    if (event.button > 0) return false;\n    if (event.target) {\n        // if the event target is no longer in the document, ignore\n        const ownerDocument = event.target.ownerDocument;\n        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n        // If the target is within a top layer element (e.g. toasts), ignore.\n        if (event.target.closest(\"[data-react-aria-top-layer]\")) return false;\n    }\n    return ref.current && !ref.current.contains(event.target);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $93925083ecbb358c$export$48d1ea6320830260(handler) {\n    if (!handler) return;\n    let shouldStopPropagation = true;\n    return (e)=>{\n        let event = {\n            ...e,\n            preventDefault () {\n                e.preventDefault();\n            },\n            isDefaultPrevented () {\n                return e.isDefaultPrevented();\n            },\n            stopPropagation () {\n                console.error(\"stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.\");\n            },\n            continuePropagation () {\n                shouldStopPropagation = false;\n            }\n        };\n        handler(event);\n        if (shouldStopPropagation) e.stopPropagation();\n    };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n    return {\n        keyboardProps: props.isDisabled ? {} : {\n            onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),\n            onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)\n        }\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n    let { onMoveStart: onMoveStart, onMove: onMove, onMoveEnd: onMoveEnd } = props;\n    let state = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        didMove: false,\n        lastPosition: null,\n        id: null\n    });\n    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useGlobalListeners)();\n    let move = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((originalEvent, pointerType, deltaX, deltaY)=>{\n        if (deltaX === 0 && deltaY === 0) return;\n        if (!state.current.didMove) {\n            state.current.didMove = true;\n            onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n                type: \"movestart\",\n                pointerType: pointerType,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        }\n        onMove({\n            type: \"move\",\n            pointerType: pointerType,\n            deltaX: deltaX,\n            deltaY: deltaY,\n            shiftKey: originalEvent.shiftKey,\n            metaKey: originalEvent.metaKey,\n            ctrlKey: originalEvent.ctrlKey,\n            altKey: originalEvent.altKey\n        });\n    });\n    let end = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEffectEvent)((originalEvent, pointerType)=>{\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n        if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n            type: \"moveend\",\n            pointerType: pointerType,\n            shiftKey: originalEvent.shiftKey,\n            metaKey: originalEvent.metaKey,\n            ctrlKey: originalEvent.ctrlKey,\n            altKey: originalEvent.altKey\n        });\n    });\n    let moveProps = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let moveProps = {};\n        let start = ()=>{\n            (0, $14c0b72509d70225$export$16a4697467175487)();\n            state.current.didMove = false;\n        };\n        if (typeof PointerEvent === \"undefined\") {\n            let onMouseMove = (e)=>{\n                if (e.button === 0) {\n                    move(e, \"mouse\", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onMouseUp = (e)=>{\n                if (e.button === 0) {\n                    end(e, \"mouse\");\n                    removeGlobalListener(window, \"mousemove\", onMouseMove, false);\n                    removeGlobalListener(window, \"mouseup\", onMouseUp, false);\n                }\n            };\n            moveProps.onMouseDown = (e)=>{\n                if (e.button === 0) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    addGlobalListener(window, \"mousemove\", onMouseMove, false);\n                    addGlobalListener(window, \"mouseup\", onMouseUp, false);\n                }\n            };\n            let onTouchMove = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier })=>identifier === state.current.id);\n                if (touch >= 0) {\n                    let { pageX: pageX, pageY: pageY } = e.changedTouches[touch];\n                    move(e, \"touch\", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: pageX,\n                        pageY: pageY\n                    };\n                }\n            };\n            let onTouchEnd = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier })=>identifier === state.current.id);\n                if (touch >= 0) {\n                    end(e, \"touch\");\n                    state.current.id = null;\n                    removeGlobalListener(window, \"touchmove\", onTouchMove);\n                    removeGlobalListener(window, \"touchend\", onTouchEnd);\n                    removeGlobalListener(window, \"touchcancel\", onTouchEnd);\n                }\n            };\n            moveProps.onTouchStart = (e)=>{\n                if (e.changedTouches.length === 0 || state.current.id != null) return;\n                let { pageX: pageX, pageY: pageY, identifier: identifier } = e.changedTouches[0];\n                start();\n                e.stopPropagation();\n                e.preventDefault();\n                state.current.lastPosition = {\n                    pageX: pageX,\n                    pageY: pageY\n                };\n                state.current.id = identifier;\n                addGlobalListener(window, \"touchmove\", onTouchMove, false);\n                addGlobalListener(window, \"touchend\", onTouchEnd, false);\n                addGlobalListener(window, \"touchcancel\", onTouchEnd, false);\n            };\n        } else {\n            let onPointerMove = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || \"mouse\";\n                    // Problems with PointerEvent#movementX/movementY:\n                    // 1. it is always 0 on macOS Safari.\n                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n                    move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || \"mouse\";\n                    end(e, pointerType);\n                    state.current.id = null;\n                    removeGlobalListener(window, \"pointermove\", onPointerMove, false);\n                    removeGlobalListener(window, \"pointerup\", onPointerUp, false);\n                    removeGlobalListener(window, \"pointercancel\", onPointerUp, false);\n                }\n            };\n            moveProps.onPointerDown = (e)=>{\n                if (e.button === 0 && state.current.id == null) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    state.current.id = e.pointerId;\n                    addGlobalListener(window, \"pointermove\", onPointerMove, false);\n                    addGlobalListener(window, \"pointerup\", onPointerUp, false);\n                    addGlobalListener(window, \"pointercancel\", onPointerUp, false);\n                }\n            };\n        }\n        let triggerKeyboardMove = (e, deltaX, deltaY)=>{\n            start();\n            move(e, \"keyboard\", deltaX, deltaY);\n            end(e, \"keyboard\");\n        };\n        moveProps.onKeyDown = (e)=>{\n            switch(e.key){\n                case \"Left\":\n                case \"ArrowLeft\":\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, -1, 0);\n                    break;\n                case \"Right\":\n                case \"ArrowRight\":\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 1, 0);\n                    break;\n                case \"Up\":\n                case \"ArrowUp\":\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, -1);\n                    break;\n                case \"Down\":\n                case \"ArrowDown\":\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, 1);\n                    break;\n            }\n        };\n        return moveProps;\n    }, [\n        state,\n        addGlobalListener,\n        removeGlobalListener,\n        move,\n        end\n    ]);\n    return {\n        moveProps: moveProps\n    };\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n    let { onScroll: onScroll, isDisabled: isDisabled } = props;\n    let onScrollHandler = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // If the ctrlKey is pressed, this is a zoom event, do nothing.\n        if (e.ctrlKey) return;\n        // stop scrolling the page\n        e.preventDefault();\n        e.stopPropagation();\n        if (onScroll) onScroll({\n            deltaX: e.deltaX,\n            deltaY: e.deltaY\n        });\n    }, [\n        onScroll\n    ]);\n    (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useEvent)(ref, \"wheel\", isDisabled ? null : onScrollHandler);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n    let { isDisabled: isDisabled, onLongPressStart: onLongPressStart, onLongPressEnd: onLongPressEnd, onLongPress: onLongPress, threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription: accessibilityDescription } = props;\n    const timeRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useGlobalListeners)();\n    let { pressProps: pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n        isDisabled: isDisabled,\n        onPressStart (e) {\n            e.continuePropagation();\n            if (e.pointerType === \"mouse\" || e.pointerType === \"touch\") {\n                if (onLongPressStart) onLongPressStart({\n                    ...e,\n                    type: \"longpressstart\"\n                });\n                timeRef.current = setTimeout(()=>{\n                    // Prevent other usePress handlers from also handling this event.\n                    e.target.dispatchEvent(new PointerEvent(\"pointercancel\", {\n                        bubbles: true\n                    }));\n                    if (onLongPress) onLongPress({\n                        ...e,\n                        type: \"longpress\"\n                    });\n                    timeRef.current = null;\n                }, threshold);\n                // Prevent context menu, which may be opened on long press on touch devices\n                if (e.pointerType === \"touch\") {\n                    let onContextMenu = (e)=>{\n                        e.preventDefault();\n                    };\n                    addGlobalListener(e.target, \"contextmenu\", onContextMenu, {\n                        once: true\n                    });\n                    addGlobalListener(window, \"pointerup\", ()=>{\n                        // If no contextmenu event is fired quickly after pointerup, remove the handler\n                        // so future context menu events outside a long press are not prevented.\n                        setTimeout(()=>{\n                            removeGlobalListener(e.target, \"contextmenu\", onContextMenu);\n                        }, 30);\n                    }, {\n                        once: true\n                    });\n                }\n            }\n        },\n        onPressEnd (e) {\n            if (timeRef.current) clearTimeout(timeRef.current);\n            if (onLongPressEnd && (e.pointerType === \"mouse\" || e.pointerType === \"touch\")) onLongPressEnd({\n                ...e,\n                type: \"longpressend\"\n            });\n        }\n    });\n    let descriptionProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);\n    return {\n        longPressProps: (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__.mergeProps)(pressProps, descriptionProps)\n    };\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/interactions/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/label/dist/import.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@react-aria/label/dist/import.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useField: () => (/* binding */ $2baaea4c71418dea$export$294aa081a6c6f55d),\n/* harmony export */   useLabel: () => (/* binding */ $d191a55c9702f145$export$8467354a121f1b9f)\n/* harmony export */ });\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $d191a55c9702f145$export$8467354a121f1b9f(props) {\n    let { id: id, label: label, \"aria-labelledby\": ariaLabelledby, \"aria-label\": ariaLabel, labelElementType: labelElementType = \"label\" } = props;\n    id = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.useId)(id);\n    let labelId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    let labelProps = {};\n    if (label) {\n        ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;\n        labelProps = {\n            id: labelId,\n            htmlFor: labelElementType === \"label\" ? id : undefined\n        };\n    } else if (!ariaLabelledby && !ariaLabel) console.warn(\"If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility\");\n    let fieldProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.useLabels)({\n        id: id,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledby\n    });\n    return {\n        labelProps: labelProps,\n        fieldProps: fieldProps\n    };\n}\nfunction $2baaea4c71418dea$export$294aa081a6c6f55d(props) {\n    let { description: description, errorMessage: errorMessage, isInvalid: isInvalid, validationState: validationState } = props;\n    let { labelProps: labelProps, fieldProps: fieldProps } = (0, $d191a55c9702f145$export$8467354a121f1b9f)(props);\n    let descriptionId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.useSlotId)([\n        Boolean(description),\n        Boolean(errorMessage),\n        isInvalid,\n        validationState\n    ]);\n    let errorMessageId = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.useSlotId)([\n        Boolean(description),\n        Boolean(errorMessage),\n        isInvalid,\n        validationState\n    ]);\n    fieldProps = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(fieldProps, {\n        \"aria-describedby\": [\n            descriptionId,\n            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n            errorMessageId,\n            props[\"aria-describedby\"]\n        ].filter(Boolean).join(\" \") || undefined\n    });\n    return {\n        labelProps: labelProps,\n        fieldProps: fieldProps,\n        descriptionProps: {\n            id: descriptionId\n        },\n        errorMessageProps: {\n            id: errorMessageId\n        }\n    };\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/label/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/live-announcer/dist/import.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-aria/live-announcer/dist/import.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   announce: () => (/* binding */ $319e236875307eab$export$a9b970dcc4ae71a9),\n/* harmony export */   clearAnnouncer: () => (/* binding */ $319e236875307eab$export$d10ae4f68404609a),\n/* harmony export */   destroyAnnouncer: () => (/* binding */ $319e236875307eab$export$d8686216b8b81b2f)\n/* harmony export */ });\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /* Inspired by https://github.com/AlmeroSteyn/react-aria-live */ const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;\nlet $319e236875307eab$var$liveAnnouncer = null;\nfunction $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = \"assertive\", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {\n    if (!$319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();\n    $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);\n}\nfunction $319e236875307eab$export$d10ae4f68404609a(assertiveness) {\n    if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);\n}\nfunction $319e236875307eab$export$d8686216b8b81b2f() {\n    if ($319e236875307eab$var$liveAnnouncer) {\n        $319e236875307eab$var$liveAnnouncer.destroy();\n        $319e236875307eab$var$liveAnnouncer = null;\n    }\n}\n// LiveAnnouncer is implemented using vanilla DOM, not React. That's because as of React 18\n// ReactDOM.render is deprecated, and the replacement, ReactDOM.createRoot is moved into a\n// subpath import `react-dom/client`. That makes it hard for us to support multiple React versions.\n// As a global API, we can't use portals without introducing a breaking API change. LiveAnnouncer\n// is simple enough to implement without React, so that's what we do here.\n// See this discussion for more details: https://github.com/reactwg/react-18/discussions/125#discussioncomment-2382638\nclass $319e236875307eab$var$LiveAnnouncer {\n    createLog(ariaLive) {\n        let node = document.createElement(\"div\");\n        node.setAttribute(\"role\", \"log\");\n        node.setAttribute(\"aria-live\", ariaLive);\n        node.setAttribute(\"aria-relevant\", \"additions\");\n        return node;\n    }\n    destroy() {\n        if (!this.node) return;\n        document.body.removeChild(this.node);\n        this.node = null;\n    }\n    announce(message, assertiveness = \"assertive\", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {\n        if (!this.node) return;\n        let node = document.createElement(\"div\");\n        node.textContent = message;\n        if (assertiveness === \"assertive\") this.assertiveLog.appendChild(node);\n        else this.politeLog.appendChild(node);\n        if (message !== \"\") setTimeout(()=>{\n            node.remove();\n        }, timeout);\n    }\n    clear(assertiveness) {\n        if (!this.node) return;\n        if (!assertiveness || assertiveness === \"assertive\") this.assertiveLog.innerHTML = \"\";\n        if (!assertiveness || assertiveness === \"polite\") this.politeLog.innerHTML = \"\";\n    }\n    constructor(){\n        this.node = document.createElement(\"div\");\n        this.node.dataset.liveAnnouncer = \"true\";\n        // copied from VisuallyHidden\n        Object.assign(this.node.style, {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            clipPath: \"inset(50%)\",\n            height: \"1px\",\n            margin: \"-1px\",\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            width: \"1px\",\n            whiteSpace: \"nowrap\"\n        });\n        this.assertiveLog = this.createLog(\"assertive\");\n        this.node.appendChild(this.assertiveLog);\n        this.politeLog = this.createLog(\"polite\");\n        this.node.appendChild(this.politeLog);\n        document.body.prepend(this.node);\n    }\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/live-announcer/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/spinbutton/dist/import.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@react-aria/spinbutton/dist/import.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSpinButton: () => (/* binding */ $d2e8511e6f209edf$export$e908e06f4b8e3402)\n/* harmony export */ });\n/* harmony import */ var _react_aria_live_announcer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-aria/live-announcer */ \"(ssr)/./node_modules/@react-aria/live-announcer/dist/import.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-aria/utils */ \"(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\");\n/* harmony import */ var _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-aria/i18n */ \"(ssr)/./node_modules/@react-aria/i18n/dist/real-module.mjs\");\n\n\n\n\nfunction $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ var $a99895ee3dc79e61$exports = {};\nvar $ed6aae4e5f766f1e$exports = {};\n$ed6aae4e5f766f1e$exports = {\n    \"Empty\": `فارغ`\n};\nvar $38854e2b175151fa$exports = {};\n$38854e2b175151fa$exports = {\n    \"Empty\": `Изпразни`\n};\nvar $15b25ab20f3945b2$exports = {};\n$15b25ab20f3945b2$exports = {\n    \"Empty\": `Prázdné`\n};\nvar $692a4298b6b649a2$exports = {};\n$692a4298b6b649a2$exports = {\n    \"Empty\": `Tom`\n};\nvar $1c6e1539193f1243$exports = {};\n$1c6e1539193f1243$exports = {\n    \"Empty\": `Leer`\n};\nvar $1e8678632c464b6d$exports = {};\n$1e8678632c464b6d$exports = {\n    \"Empty\": `Άδειο`\n};\nvar $4adc85d9bf5b9eed$exports = {};\n$4adc85d9bf5b9eed$exports = {\n    \"Empty\": `Empty`\n};\nvar $41c4b2bb61dafbca$exports = {};\n$41c4b2bb61dafbca$exports = {\n    \"Empty\": `Vacío`\n};\nvar $405f8b24f5dd2a60$exports = {};\n$405f8b24f5dd2a60$exports = {\n    \"Empty\": `Tühjenda`\n};\nvar $7efe3ed02b9b9dd4$exports = {};\n$7efe3ed02b9b9dd4$exports = {\n    \"Empty\": `Tyhjä`\n};\nvar $99fc4c101d92daf3$exports = {};\n$99fc4c101d92daf3$exports = {\n    \"Empty\": `Vide`\n};\nvar $f9e155e6e8cacaa2$exports = {};\n$f9e155e6e8cacaa2$exports = {\n    \"Empty\": `ריק`\n};\nvar $c31b5e8e9a249fd5$exports = {};\n$c31b5e8e9a249fd5$exports = {\n    \"Empty\": `Prazno`\n};\nvar $9c5435bc17499bd9$exports = {};\n$9c5435bc17499bd9$exports = {\n    \"Empty\": `Üres`\n};\nvar $6d1fc8e84d8165e1$exports = {};\n$6d1fc8e84d8165e1$exports = {\n    \"Empty\": `Vuoto`\n};\nvar $46ea6b3641b83e71$exports = {};\n$46ea6b3641b83e71$exports = {\n    \"Empty\": `空`\n};\nvar $0e3cc9a288289dc5$exports = {};\n$0e3cc9a288289dc5$exports = {\n    \"Empty\": `비어 있음`\n};\nvar $4ff2bb25c0089ffb$exports = {};\n$4ff2bb25c0089ffb$exports = {\n    \"Empty\": `Tuščias`\n};\nvar $6cf33cd4c010a2fb$exports = {};\n$6cf33cd4c010a2fb$exports = {\n    \"Empty\": `Tukšs`\n};\nvar $5a9f8486f8b8837e$exports = {};\n$5a9f8486f8b8837e$exports = {\n    \"Empty\": `Tom`\n};\nvar $583f94d807f6ecea$exports = {};\n$583f94d807f6ecea$exports = {\n    \"Empty\": `Leeg`\n};\nvar $cc4dcfeea2b4050d$exports = {};\n$cc4dcfeea2b4050d$exports = {\n    \"Empty\": `Pusty`\n};\nvar $68ac2954d56e12b4$exports = {};\n$68ac2954d56e12b4$exports = {\n    \"Empty\": `Vazio`\n};\nvar $fdb0616f309780b0$exports = {};\n$fdb0616f309780b0$exports = {\n    \"Empty\": `Vazio`\n};\nvar $fe1eccf4ee1d6f52$exports = {};\n$fe1eccf4ee1d6f52$exports = {\n    \"Empty\": `Gol`\n};\nvar $a38b6c4e18725976$exports = {};\n$a38b6c4e18725976$exports = {\n    \"Empty\": `Не заполнено`\n};\nvar $6c14ae2b766b652c$exports = {};\n$6c14ae2b766b652c$exports = {\n    \"Empty\": `Prázdne`\n};\nvar $8f1c9692e16dc5eb$exports = {};\n$8f1c9692e16dc5eb$exports = {\n    \"Empty\": `Prazen`\n};\nvar $d2aa7abea627cafa$exports = {};\n$d2aa7abea627cafa$exports = {\n    \"Empty\": `Prazno`\n};\nvar $676b82e4b56408e6$exports = {};\n$676b82e4b56408e6$exports = {\n    \"Empty\": `Tomt`\n};\nvar $14c9042552d7ce08$exports = {};\n$14c9042552d7ce08$exports = {\n    \"Empty\": `Boş`\n};\nvar $393254ebcb66c9f5$exports = {};\n$393254ebcb66c9f5$exports = {\n    \"Empty\": `Пусто`\n};\nvar $d49d621f310cf6ce$exports = {};\n$d49d621f310cf6ce$exports = {\n    \"Empty\": `空`\n};\nvar $94b60c866ca5dfe6$exports = {};\n$94b60c866ca5dfe6$exports = {\n    \"Empty\": `空白`\n};\n$a99895ee3dc79e61$exports = {\n    \"ar-AE\": $ed6aae4e5f766f1e$exports,\n    \"bg-BG\": $38854e2b175151fa$exports,\n    \"cs-CZ\": $15b25ab20f3945b2$exports,\n    \"da-DK\": $692a4298b6b649a2$exports,\n    \"de-DE\": $1c6e1539193f1243$exports,\n    \"el-GR\": $1e8678632c464b6d$exports,\n    \"en-US\": $4adc85d9bf5b9eed$exports,\n    \"es-ES\": $41c4b2bb61dafbca$exports,\n    \"et-EE\": $405f8b24f5dd2a60$exports,\n    \"fi-FI\": $7efe3ed02b9b9dd4$exports,\n    \"fr-FR\": $99fc4c101d92daf3$exports,\n    \"he-IL\": $f9e155e6e8cacaa2$exports,\n    \"hr-HR\": $c31b5e8e9a249fd5$exports,\n    \"hu-HU\": $9c5435bc17499bd9$exports,\n    \"it-IT\": $6d1fc8e84d8165e1$exports,\n    \"ja-JP\": $46ea6b3641b83e71$exports,\n    \"ko-KR\": $0e3cc9a288289dc5$exports,\n    \"lt-LT\": $4ff2bb25c0089ffb$exports,\n    \"lv-LV\": $6cf33cd4c010a2fb$exports,\n    \"nb-NO\": $5a9f8486f8b8837e$exports,\n    \"nl-NL\": $583f94d807f6ecea$exports,\n    \"pl-PL\": $cc4dcfeea2b4050d$exports,\n    \"pt-BR\": $68ac2954d56e12b4$exports,\n    \"pt-PT\": $fdb0616f309780b0$exports,\n    \"ro-RO\": $fe1eccf4ee1d6f52$exports,\n    \"ru-RU\": $a38b6c4e18725976$exports,\n    \"sk-SK\": $6c14ae2b766b652c$exports,\n    \"sl-SI\": $8f1c9692e16dc5eb$exports,\n    \"sr-SP\": $d2aa7abea627cafa$exports,\n    \"sv-SE\": $676b82e4b56408e6$exports,\n    \"tr-TR\": $14c9042552d7ce08$exports,\n    \"uk-UA\": $393254ebcb66c9f5$exports,\n    \"zh-CN\": $d49d621f310cf6ce$exports,\n    \"zh-TW\": $94b60c866ca5dfe6$exports\n};\nfunction $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {\n    const _async = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let { value: value, textValue: textValue, minValue: minValue, maxValue: maxValue, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, onIncrement: onIncrement, onIncrementPage: onIncrementPage, onDecrement: onDecrement, onDecrementPage: onDecrementPage, onDecrementToMin: onDecrementToMin, onIncrementToMax: onIncrementToMax } = props;\n    const stringFormatter = (0, _react_aria_i18n__WEBPACK_IMPORTED_MODULE_1__.useLocalizedStringFormatter)((0, /*@__PURE__*/ $parcel$interopDefault($a99895ee3dc79e61$exports)));\n    const clearAsync = ()=>clearTimeout(_async.current);\n    // eslint-disable-next-line arrow-body-style\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>clearAsync();\n    }, []);\n    let onKeyDown = (e)=>{\n        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;\n        switch(e.key){\n            case \"PageUp\":\n                if (onIncrementPage) {\n                    e.preventDefault();\n                    onIncrementPage();\n                    break;\n                }\n            // fallthrough!\n            case \"ArrowUp\":\n            case \"Up\":\n                if (onIncrement) {\n                    e.preventDefault();\n                    onIncrement();\n                }\n                break;\n            case \"PageDown\":\n                if (onDecrementPage) {\n                    e.preventDefault();\n                    onDecrementPage();\n                    break;\n                }\n            // fallthrough\n            case \"ArrowDown\":\n            case \"Down\":\n                if (onDecrement) {\n                    e.preventDefault();\n                    onDecrement();\n                }\n                break;\n            case \"Home\":\n                if (onDecrementToMin) {\n                    e.preventDefault();\n                    onDecrementToMin();\n                }\n                break;\n            case \"End\":\n                if (onIncrementToMax) {\n                    e.preventDefault();\n                    onIncrementToMax();\n                }\n                break;\n        }\n    };\n    let isFocused = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    let onFocus = ()=>{\n        isFocused.current = true;\n    };\n    let onBlur = ()=>{\n        isFocused.current = false;\n    };\n    // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).\n    // This ensures that macOS VoiceOver announces it as \"minus\" even with other characters between the minus sign\n    // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.\n    // In addition, replace the empty string with the word \"Empty\" so that iOS VoiceOver does not read \"50%\" for an empty field.\n    textValue = textValue === \"\" ? stringFormatter.format(\"Empty\") : (textValue || `${value}`).replace(\"-\", \"−\");\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isFocused.current) {\n            (0, _react_aria_live_announcer__WEBPACK_IMPORTED_MODULE_2__.clearAnnouncer)(\"assertive\");\n            (0, _react_aria_live_announcer__WEBPACK_IMPORTED_MODULE_2__.announce)(textValue, \"assertive\");\n        }\n    }, [\n        textValue\n    ]);\n    const onIncrementPressStart = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useEffectEvent)((initialStepDelay)=>{\n        clearAsync();\n        onIncrement();\n        // Start spinning after initial delay\n        _async.current = window.setTimeout(()=>{\n            if (isNaN(maxValue) || isNaN(value) || value < maxValue) onIncrementPressStart(60);\n        }, initialStepDelay);\n    });\n    const onDecrementPressStart = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useEffectEvent)((initialStepDelay)=>{\n        clearAsync();\n        onDecrement();\n        // Start spinning after initial delay\n        _async.current = window.setTimeout(()=>{\n            if (isNaN(minValue) || isNaN(value) || value > minValue) onDecrementPressStart(60);\n        }, initialStepDelay);\n    });\n    let cancelContextMenu = (e)=>{\n        e.preventDefault();\n    };\n    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = (0, _react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.useGlobalListeners)();\n    return {\n        spinButtonProps: {\n            role: \"spinbutton\",\n            \"aria-valuenow\": !isNaN(value) ? value : null,\n            \"aria-valuetext\": textValue,\n            \"aria-valuemin\": minValue,\n            \"aria-valuemax\": maxValue,\n            \"aria-disabled\": isDisabled || null,\n            \"aria-readonly\": isReadOnly || null,\n            \"aria-required\": isRequired || null,\n            onKeyDown: onKeyDown,\n            onFocus: onFocus,\n            onBlur: onBlur\n        },\n        incrementButtonProps: {\n            onPressStart: ()=>{\n                onIncrementPressStart(400);\n                addGlobalListener(window, \"contextmenu\", cancelContextMenu);\n            },\n            onPressEnd: ()=>{\n                clearAsync();\n                removeAllGlobalListeners();\n            },\n            onFocus: onFocus,\n            onBlur: onBlur\n        },\n        decrementButtonProps: {\n            onPressStart: ()=>{\n                onDecrementPressStart(400);\n                addGlobalListener(window, \"contextmenu\", cancelContextMenu);\n            },\n            onPressEnd: ()=>{\n                clearAsync();\n                removeAllGlobalListeners();\n            },\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/spinbutton/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/ssr/dist/import.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@react-aria/ssr/dist/import.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SSRProvider: () => (/* binding */ $b5e257d569688ac6$export$9f8ac96af4b1b2ae),\n/* harmony export */   useIsSSR: () => (/* binding */ $b5e257d569688ac6$export$535bd6ca7f90a273),\n/* harmony export */   useSSRSafeId: () => (/* binding */ $b5e257d569688ac6$export$619500959fc48b26)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $b5e257d569688ac6$var$defaultContext = {\n    prefix: String(Math.round(Math.random() * 10000000000)),\n    current: 0\n};\nconst $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext($b5e257d569688ac6$var$defaultContext);\nconst $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createContext(false);\n// This is only used in React < 18.\nfunction $b5e257d569688ac6$var$LegacySSRProvider(props) {\n    let cur = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$SSRContext);\n    let counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);\n    let [isSSR, setIsSSR] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    let value = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            // If this is the first SSRProvider, start with an empty string prefix, otherwise\n            // append and increment the counter.\n            prefix: cur === $b5e257d569688ac6$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n            current: 0\n        }), [\n        cur,\n        counter\n    ]);\n    // If on the client, and the component was initially server rendered,\n    // then schedule a layout effect to update the component after hydration.\n    if (typeof document !== \"undefined\") // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        setIsSSR(false);\n    }, []);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($b5e257d569688ac6$var$SSRContext.Provider, {\n        value: value\n    }, /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($b5e257d569688ac6$var$IsSSRContext.Provider, {\n        value: isSSR\n    }, props.children));\n}\nlet $b5e257d569688ac6$var$warnedAboutSSRProvider = false;\nfunction $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {\n    if (typeof (0, react__WEBPACK_IMPORTED_MODULE_0__)[\"useId\"] === \"function\") {\n        if ( true && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {\n            console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n            $b5e257d569688ac6$var$warnedAboutSSRProvider = true;\n        }\n        return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement((0, react__WEBPACK_IMPORTED_MODULE_0__).Fragment, null, props.children);\n    }\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);\n}\nlet $b5e257d569688ac6$var$canUseDOM = Boolean( false && 0);\nlet $b5e257d569688ac6$var$componentIds = new WeakMap();\nfunction $b5e257d569688ac6$var$useCounter(isDisabled = false) {\n    let ctx = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$SSRContext);\n    let ref = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // eslint-disable-next-line rulesdir/pure-render\n    if (ref.current === null && !isDisabled) {\n        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;\n        // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n        // This means our id counter will be incremented twice instead of once. This is a problem because on the\n        // server, components are only rendered once and so ids generated on the server won't match the client.\n        // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n        // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n        // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n        // To ensure that we only increment the global counter once, we store the starting id for this component in\n        // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n        // Since React runs the second render immediately after the first, this is safe.\n        // @ts-ignore\n        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, react__WEBPACK_IMPORTED_MODULE_0__).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n        if (currentOwner) {\n            let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);\n            if (prevComponentValue == null) $b5e257d569688ac6$var$componentIds.set(currentOwner, {\n                id: ctx.current,\n                state: currentOwner.memoizedState\n            });\n            else if (currentOwner.memoizedState !== prevComponentValue.state) {\n                // On the second render, the memoizedState gets reset by React.\n                // Reset the counter, and remove from the weak map so we don't\n                // do this for subsequent useId calls.\n                ctx.current = prevComponentValue.id;\n                $b5e257d569688ac6$var$componentIds.delete(currentOwner);\n            }\n        }\n        // eslint-disable-next-line rulesdir/pure-render\n        ref.current = ++ctx.current;\n    }\n    // eslint-disable-next-line rulesdir/pure-render\n    return ref.current;\n}\nfunction $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {\n    let ctx = (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$SSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n    // provide a warning to hint to the developer to add one.\n    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);\n    let prefix = ctx === $b5e257d569688ac6$var$defaultContext && \"development\" === \"test\" ? 0 : `react-aria${ctx.prefix}`;\n    return defaultId || `${prefix}-${counter}`;\n}\nfunction $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {\n    // @ts-ignore\n    let id = (0, react__WEBPACK_IMPORTED_MODULE_0__).useId();\n    let [didSSR] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());\n    let prefix = didSSR || \"development\" === \"test\" ? \"react-aria\" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;\n    return defaultId || `${prefix}-${id}`;\n}\nconst $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, react__WEBPACK_IMPORTED_MODULE_0__)[\"useId\"] === \"function\" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;\nfunction $b5e257d569688ac6$var$getSnapshot() {\n    return false;\n}\nfunction $b5e257d569688ac6$var$getServerSnapshot() {\n    return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $b5e257d569688ac6$var$subscribe(onStoreChange) {\n    // noop\n    return ()=>{};\n}\nfunction $b5e257d569688ac6$export$535bd6ca7f90a273() {\n    // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n    if (typeof (0, react__WEBPACK_IMPORTED_MODULE_0__)[\"useSyncExternalStore\"] === \"function\") return (0, react__WEBPACK_IMPORTED_MODULE_0__)[\"useSyncExternalStore\"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($b5e257d569688ac6$var$IsSSRContext);\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/ssr/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-aria/utils/dist/import.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@react-aria/utils/dist/import.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterProvider: () => (/* binding */ $ea8dcbcb9ea1b556$export$323e4fc2fa4753fb),\n/* harmony export */   chain: () => (/* binding */ $ff5963eb1fccf552$export$e08e3b67e392101e),\n/* harmony export */   clamp: () => (/* reexport safe */ _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.clamp),\n/* harmony export */   filterDOMProps: () => (/* binding */ $65484d02dcb7eb3e$export$457c3d6518dd4c6f),\n/* harmony export */   focusWithoutScrolling: () => (/* binding */ $7215afc6de606d6b$export$de79e2c695e052f3),\n/* harmony export */   getOffset: () => (/* binding */ $ab71dadb03a6fb2e$export$622cea445a1c5b7d),\n/* harmony export */   getScrollParent: () => (/* binding */ $62d8ded9296f3872$export$cfa2225e87938781),\n/* harmony export */   getSyntheticLinkProps: () => (/* binding */ $ea8dcbcb9ea1b556$export$51437d503373d223),\n/* harmony export */   isAndroid: () => (/* binding */ $c87311424ea30a05$export$a11b0059900ceec8),\n/* harmony export */   isAppleDevice: () => (/* binding */ $c87311424ea30a05$export$e1865c3bedcd822b),\n/* harmony export */   isChrome: () => (/* binding */ $c87311424ea30a05$export$6446a186d09e379e),\n/* harmony export */   isIOS: () => (/* binding */ $c87311424ea30a05$export$fedb369cb70207f1),\n/* harmony export */   isIPad: () => (/* binding */ $c87311424ea30a05$export$7bef049ce92e4224),\n/* harmony export */   isIPhone: () => (/* binding */ $c87311424ea30a05$export$186c6964ca17d99),\n/* harmony export */   isMac: () => (/* binding */ $c87311424ea30a05$export$9ac100e40613ea10),\n/* harmony export */   isScrollable: () => (/* binding */ $62d8ded9296f3872$export$2bb74740c4e19def),\n/* harmony export */   isVirtualClick: () => (/* binding */ $6a7db85432448f7f$export$60278871457622de),\n/* harmony export */   isVirtualPointerEvent: () => (/* binding */ $6a7db85432448f7f$export$29bf1b5f2c56cf63),\n/* harmony export */   isWebKit: () => (/* binding */ $c87311424ea30a05$export$78551043582a6a98),\n/* harmony export */   mergeIds: () => (/* binding */ $bdb11010cef70236$export$cd8c9cb68f842629),\n/* harmony export */   mergeProps: () => (/* binding */ $3ef42575df84b30b$export$9d1611c77c2fe928),\n/* harmony export */   mergeRefs: () => (/* binding */ $5dc95899b306f630$export$c9058316764c140e),\n/* harmony export */   openLink: () => (/* binding */ $ea8dcbcb9ea1b556$export$95185d699e05d4d7),\n/* harmony export */   runAfterTransition: () => (/* binding */ $bbed8b41f857bcc0$export$24490316f764c430),\n/* harmony export */   scrollIntoView: () => (/* binding */ $2f04cbc44ee30ce0$export$53a0910f038337bd),\n/* harmony export */   scrollIntoViewport: () => (/* binding */ $2f04cbc44ee30ce0$export$c826860796309d1b),\n/* harmony export */   shouldClientNavigate: () => (/* binding */ $ea8dcbcb9ea1b556$export$efa8c9099e530235),\n/* harmony export */   snapValueToStep: () => (/* reexport safe */ _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.snapValueToStep),\n/* harmony export */   useDeepMemo: () => (/* binding */ $5a387cc49350e6db$export$722debc0e56fea39),\n/* harmony export */   useDescription: () => (/* binding */ $ef06256079686ba0$export$f8aeda7b10753fa1),\n/* harmony export */   useDrag1D: () => (/* binding */ $9cc09df9fd7676be$export$7bbed75feba39706),\n/* harmony export */   useEffectEvent: () => (/* binding */ $8ae05eaa5c114e9c$export$7f54fc3180508a52),\n/* harmony export */   useEvent: () => (/* binding */ $e9faafb641e167db$export$90fc3a17d93f704c),\n/* harmony export */   useFormReset: () => (/* binding */ $99facab73266f662$export$5add1d006293d136),\n/* harmony export */   useGlobalListeners: () => (/* binding */ $03deb23ff14920c4$export$4eaf04e54aa8eed6),\n/* harmony export */   useId: () => (/* binding */ $bdb11010cef70236$export$f680877a34711e37),\n/* harmony export */   useLabels: () => (/* binding */ $313b98861ee5dd6c$export$d6875122194c7b44),\n/* harmony export */   useLayoutEffect: () => (/* binding */ $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c),\n/* harmony export */   useObjectRef: () => (/* binding */ $df56164dff5785e2$export$4338b53315abf666),\n/* harmony export */   useResizeObserver: () => (/* binding */ $9daab02d461809db$export$683480f191c0e3ea),\n/* harmony export */   useRouter: () => (/* binding */ $ea8dcbcb9ea1b556$export$9a302a45f65d0572),\n/* harmony export */   useSlotId: () => (/* binding */ $bdb11010cef70236$export$b4cc09c592e8fdb8),\n/* harmony export */   useSyncRef: () => (/* binding */ $e7801be82b4b2a53$export$4debdb1a3f0fa79e),\n/* harmony export */   useUpdateEffect: () => (/* binding */ $4f58c5f72bcf79f7$export$496315a1608d9602),\n/* harmony export */   useValueEffect: () => (/* binding */ $1dbecbe27a04f9af$export$14d238f342723f25),\n/* harmony export */   useViewportSize: () => (/* binding */ $5df64b3807dc15ee$export$d699905dd57c73ca)\n/* harmony export */ });\n/* harmony import */ var _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-stately/utils */ \"(ssr)/./node_modules/@react-stately/utils/dist/import.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_aria_ssr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-aria/ssr */ \"(ssr)/./node_modules/@react-aria/ssr/dist/import.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.m.js\");\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== \"undefined\" ? (0, react__WEBPACK_IMPORTED_MODULE_0__).useLayoutEffect : ()=>{};\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {\n    const ref = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        ref.current = fn;\n    }, [\n        fn\n    ]);\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        const f = ref.current;\n        return f(...args);\n    }, []);\n}\nfunction $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {\n    let [value1, setValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);\n    let effect = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Store the function in a ref so we can always access the current version\n    // which has the proper `value` in scope.\n    let nextRef = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{\n        // Run the generator to the next yield.\n        let newValue = effect.current.next();\n        // If the generator is done, reset the effect.\n        if (newValue.done) {\n            effect.current = null;\n            return;\n        }\n        // If the value is the same as the current value,\n        // then continue to the next yield. Otherwise,\n        // set the value in state and wait for the next layout effect.\n        if (value1 === newValue.value) nextRef();\n        else setValue(newValue.value);\n    });\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        // If there is an effect currently running, continue to the next yield.\n        if (effect.current) nextRef();\n    });\n    let queue = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((fn)=>{\n        effect.current = fn(value1);\n        nextRef();\n    });\n    return [\n        value1,\n        queue\n    ];\n}\nlet $bdb11010cef70236$var$idsUpdaterMap = new Map();\nfunction $bdb11010cef70236$export$f680877a34711e37(defaultId) {\n    let [value1, setValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultId);\n    let nextId = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    let res = (0, _react_aria_ssr__WEBPACK_IMPORTED_MODULE_2__.useSSRSafeId)(value1);\n    let updateValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((val)=>{\n        nextId.current = val;\n    }, []);\n    $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        let r = res;\n        return ()=>{\n            $bdb11010cef70236$var$idsUpdaterMap.delete(r);\n        };\n    }, [\n        res\n    ]);\n    // This cannot cause an infinite loop because the ref is updated first.\n    // eslint-disable-next-line\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let newId = nextId.current;\n        if (newId) {\n            nextId.current = null;\n            setValue(newId);\n        }\n    });\n    return res;\n}\nfunction $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {\n    if (idA === idB) return idA;\n    let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);\n    if (setIdA) {\n        setIdA(idB);\n        return idB;\n    }\n    let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);\n    if (setIdB) {\n        setIdB(idA);\n        return idA;\n    }\n    return idB;\n}\nfunction $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {\n    let id = $bdb11010cef70236$export$f680877a34711e37();\n    let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);\n    let updateId = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setResolvedId(function*() {\n            yield id;\n            yield document.getElementById(id) ? id : undefined;\n        });\n    }, [\n        id,\n        setResolvedId\n    ]);\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [\n        id,\n        updateId,\n        ...depArray\n    ]);\n    return resolvedId;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /**\n * Calls all functions in the order they were chained with the same arguments.\n */ function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {\n    return (...args)=>{\n        for (let callback of callbacks)if (typeof callback === \"function\") callback(...args);\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {\n    // Start with a base clone of the first argument. This is a lot faster than starting\n    // with an empty object and adding properties as we go.\n    let result = {\n        ...args[0]\n    };\n    for(let i = 1; i < args.length; i++){\n        let props = args[i];\n        for(let key in props){\n            let a = result[key];\n            let b = props[key];\n            // Chain events\n            if (typeof a === \"function\" && typeof b === \"function\" && // This is a lot faster than a regex.\n            key[0] === \"o\" && key[1] === \"n\" && key.charCodeAt(2) >= /* 'A' */ 65 && key.charCodeAt(2) <= /* 'Z' */ 90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);\n            else if ((key === \"className\" || key === \"UNSAFE_className\") && typeof a === \"string\" && typeof b === \"string\") result[key] = (0, clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(a, b);\n            else if (key === \"id\" && a && b) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a, b);\n            else result[key] = b !== undefined ? b : a;\n        }\n    }\n    return result;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $5dc95899b306f630$export$c9058316764c140e(...refs) {\n    if (refs.length === 1) return refs[0];\n    return (value1)=>{\n        for (let ref of refs){\n            if (typeof ref === \"function\") ref(value1);\n            else if (ref != null) ref.current = value1;\n        }\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $65484d02dcb7eb3e$var$DOMPropNames = new Set([\n    \"id\"\n]);\nconst $65484d02dcb7eb3e$var$labelablePropNames = new Set([\n    \"aria-label\",\n    \"aria-labelledby\",\n    \"aria-describedby\",\n    \"aria-details\"\n]);\n// See LinkDOMProps in dom.d.ts.\nconst $65484d02dcb7eb3e$var$linkPropNames = new Set([\n    \"href\",\n    \"target\",\n    \"rel\",\n    \"download\",\n    \"ping\",\n    \"referrerPolicy\"\n]);\nconst $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;\nfunction $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {\n    let { labelable: labelable, isLink: isLink, propNames: propNames } = opts;\n    let filteredProps = {};\n    for(const prop in props)if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];\n    return filteredProps;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $7215afc6de606d6b$export$de79e2c695e052f3(element) {\n    if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({\n        preventScroll: true\n    });\n    else {\n        let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);\n        element.focus();\n        $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);\n    }\n}\nlet $7215afc6de606d6b$var$supportsPreventScrollCached = null;\nfunction $7215afc6de606d6b$var$supportsPreventScroll() {\n    if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {\n        $7215afc6de606d6b$var$supportsPreventScrollCached = false;\n        try {\n            var focusElem = document.createElement(\"div\");\n            focusElem.focus({\n                get preventScroll () {\n                    $7215afc6de606d6b$var$supportsPreventScrollCached = true;\n                    return true;\n                }\n            });\n        } catch (e) {\n        // Ignore\n        }\n    }\n    return $7215afc6de606d6b$var$supportsPreventScrollCached;\n}\nfunction $7215afc6de606d6b$var$getScrollableElements(element) {\n    var parent = element.parentNode;\n    var scrollableElements = [];\n    var rootScrollingElement = document.scrollingElement || document.documentElement;\n    while(parent instanceof HTMLElement && parent !== rootScrollingElement){\n        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({\n            element: parent,\n            scrollTop: parent.scrollTop,\n            scrollLeft: parent.scrollLeft\n        });\n        parent = parent.parentNode;\n    }\n    if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({\n        element: rootScrollingElement,\n        scrollTop: rootScrollingElement.scrollTop,\n        scrollLeft: rootScrollingElement.scrollLeft\n    });\n    return scrollableElements;\n}\nfunction $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {\n    for (let { element: element, scrollTop: scrollTop, scrollLeft: scrollLeft } of scrollableElements){\n        element.scrollTop = scrollTop;\n        element.scrollLeft = scrollLeft;\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = \"horizontal\") {\n    let rect = element.getBoundingClientRect();\n    if (reverse) return orientation === \"horizontal\" ? rect.right : rect.bottom;\n    return orientation === \"horizontal\" ? rect.left : rect.top;\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $c87311424ea30a05$var$testUserAgent(re) {\n    var _window_navigator_userAgentData;\n    if (true) return false;\n    return ((_window_navigator_userAgentData = window.navigator[\"userAgentData\"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand)=>re.test(brand.brand))) || re.test(window.navigator.userAgent);\n}\nfunction $c87311424ea30a05$var$testPlatform(re) {\n    var _window_navigator_userAgentData;\n    return  false ? 0 : false;\n}\nfunction $c87311424ea30a05$export$9ac100e40613ea10() {\n    return $c87311424ea30a05$var$testPlatform(/^Mac/i);\n}\nfunction $c87311424ea30a05$export$186c6964ca17d99() {\n    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);\n}\nfunction $c87311424ea30a05$export$7bef049ce92e4224() {\n    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;\n}\nfunction $c87311424ea30a05$export$fedb369cb70207f1() {\n    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();\n}\nfunction $c87311424ea30a05$export$e1865c3bedcd822b() {\n    return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();\n}\nfunction $c87311424ea30a05$export$78551043582a6a98() {\n    return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();\n}\nfunction $c87311424ea30a05$export$6446a186d09e379e() {\n    return $c87311424ea30a05$var$testUserAgent(/Chrome/i);\n}\nfunction $c87311424ea30a05$export$a11b0059900ceec8() {\n    return $c87311424ea30a05$var$testUserAgent(/Android/i);\n}\nfunction $c87311424ea30a05$export$b7d78993b74f766d() {\n    return $c87311424ea30a05$var$testUserAgent(/Firefox/i);\n}\nconst $ea8dcbcb9ea1b556$var$RouterContext = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    isNative: true,\n    open: $ea8dcbcb9ea1b556$var$openSyntheticLink\n});\nfunction $ea8dcbcb9ea1b556$export$323e4fc2fa4753fb(props) {\n    let { children: children, navigate: navigate } = props;\n    let ctx = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            isNative: false,\n            open: (target, modifiers)=>{\n                $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link)=>{\n                    if ($ea8dcbcb9ea1b556$export$efa8c9099e530235(link, modifiers)) navigate(link.pathname + link.search + link.hash);\n                    else $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers);\n                });\n            }\n        }), [\n        navigate\n    ]);\n    return /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_0__).createElement($ea8dcbcb9ea1b556$var$RouterContext.Provider, {\n        value: ctx\n    }, children);\n}\nfunction $ea8dcbcb9ea1b556$export$9a302a45f65d0572() {\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useContext)($ea8dcbcb9ea1b556$var$RouterContext);\n}\nfunction $ea8dcbcb9ea1b556$export$efa8c9099e530235(link, modifiers) {\n    // Use getAttribute here instead of link.target. Firefox will default link.target to \"_parent\" when inside an iframe.\n    let target = link.getAttribute(\"target\");\n    return (!target || target === \"_self\") && link.origin === location.origin && !link.hasAttribute(\"download\") && !modifiers.metaKey && // open in new tab (mac)\n    !modifiers.ctrlKey && // open in new tab (windows)\n    !modifiers.altKey && // download\n    !modifiers.shiftKey;\n}\nfunction $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {\n    var _window_event, _window_event_type;\n    let { metaKey: metaKey, ctrlKey: ctrlKey, altKey: altKey, shiftKey: shiftKey } = modifiers;\n    // Firefox does not recognize keyboard events as a user action by default, and the popup blocker\n    // will prevent links with target=\"_blank\" from opening. However, it does allow the event if the\n    // Command/Control key is held, which opens the link in a background tab. This seems like the best we can do.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=257870 and https://bugzilla.mozilla.org/show_bug.cgi?id=746640.\n    if ((0, $c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith(\"key\")) && target.target === \"_blank\") {\n        if ((0, $c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;\n        else ctrlKey = true;\n    }\n    // WebKit does not support firing click events with modifier keys, but does support keyboard events.\n    // https://github.com/WebKit/WebKit/blob/c03d0ac6e6db178f90923a0a63080b5ca210d25f/Source/WebCore/html/HTMLAnchorElement.cpp#L184\n    let event = (0, $c87311424ea30a05$export$78551043582a6a98)() && (0, $c87311424ea30a05$export$9ac100e40613ea10)() && !(0, $c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent(\"keydown\", {\n        keyIdentifier: \"Enter\",\n        metaKey: metaKey,\n        ctrlKey: ctrlKey,\n        altKey: altKey,\n        shiftKey: shiftKey\n    }) : new MouseEvent(\"click\", {\n        metaKey: metaKey,\n        ctrlKey: ctrlKey,\n        altKey: altKey,\n        shiftKey: shiftKey,\n        bubbles: true,\n        cancelable: true\n    });\n    $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;\n    (0, $7215afc6de606d6b$export$de79e2c695e052f3)(target);\n    target.dispatchEvent(event);\n    $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;\n}\n// https://github.com/parcel-bundler/parcel/issues/8724\n$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;\nfunction $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {\n    if (target instanceof HTMLAnchorElement) open(target);\n    else if (target.hasAttribute(\"data-href\")) {\n        let link = document.createElement(\"a\");\n        link.href = target.getAttribute(\"data-href\");\n        if (target.hasAttribute(\"data-target\")) link.target = target.getAttribute(\"data-target\");\n        if (target.hasAttribute(\"data-rel\")) link.rel = target.getAttribute(\"data-rel\");\n        if (target.hasAttribute(\"data-download\")) link.download = target.getAttribute(\"data-download\");\n        if (target.hasAttribute(\"data-ping\")) link.ping = target.getAttribute(\"data-ping\");\n        if (target.hasAttribute(\"data-referrer-policy\")) link.referrerPolicy = target.getAttribute(\"data-referrer-policy\");\n        target.appendChild(link);\n        open(link);\n        target.removeChild(link);\n    }\n}\nfunction $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {\n    $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link)=>$ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers));\n}\nfunction $ea8dcbcb9ea1b556$export$51437d503373d223(props) {\n    return {\n        \"data-href\": props.href,\n        \"data-target\": props.target,\n        \"data-rel\": props.rel,\n        \"data-download\": props.download,\n        \"data-ping\": props.ping,\n        \"data-referrer-policy\": props.referrerPolicy\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We store a global list of elements that are currently transitioning,\n// mapped to a set of CSS properties that are transitioning for that element.\n// This is necessary rather than a simple count of transitions because of browser\n// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather\n// than one or the other. So we need to track what's actually transitioning so that\n// we can ignore these duplicate events.\nlet $bbed8b41f857bcc0$var$transitionsByElement = new Map();\n// A list of callbacks to call once there are no transitioning elements.\nlet $bbed8b41f857bcc0$var$transitionCallbacks = new Set();\nfunction $bbed8b41f857bcc0$var$setupGlobalEvents() {\n    if (true) return;\n    let onTransitionStart = (e)=>{\n        // Add the transitioning property to the list for this element.\n        let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!transitions) {\n            transitions = new Set();\n            $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);\n            // The transitioncancel event must be registered on the element itself, rather than as a global\n            // event. This enables us to handle when the node is deleted from the document while it is transitioning.\n            // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.\n            e.target.addEventListener(\"transitioncancel\", onTransitionEnd);\n        }\n        transitions.add(e.propertyName);\n    };\n    let onTransitionEnd = (e)=>{\n        // Remove property from list of transitioning properties.\n        let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!properties) return;\n        properties.delete(e.propertyName);\n        // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.\n        if (properties.size === 0) {\n            e.target.removeEventListener(\"transitioncancel\", onTransitionEnd);\n            $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);\n        }\n        // If no transitioning elements, call all of the queued callbacks.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {\n            for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();\n            $bbed8b41f857bcc0$var$transitionCallbacks.clear();\n        }\n    };\n    document.body.addEventListener(\"transitionrun\", onTransitionStart);\n    document.body.addEventListener(\"transitionend\", onTransitionEnd);\n}\nif (typeof document !== \"undefined\") {\n    if (document.readyState !== \"loading\") $bbed8b41f857bcc0$var$setupGlobalEvents();\n    else document.addEventListener(\"DOMContentLoaded\", $bbed8b41f857bcc0$var$setupGlobalEvents);\n}\nfunction $bbed8b41f857bcc0$export$24490316f764c430(fn) {\n    // Wait one frame to see if an animation starts, e.g. a transition on mount.\n    requestAnimationFrame(()=>{\n        // If no transitions are running, call the function immediately.\n        // Otherwise, add it to a list of callbacks to run at the end of the animation.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();\n        else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);\n    });\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /* eslint-disable rulesdir/pure-render */ // Keep track of elements that we are currently handling dragging for via useDrag1D.\n// If there's an ancestor and a descendant both using useDrag1D(), and the user starts\n// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.\nconst $9cc09df9fd7676be$var$draggingElements = [];\nfunction $9cc09df9fd7676be$export$7bbed75feba39706(props) {\n    console.warn(\"useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html\");\n    let { containerRef: containerRef, reverse: reverse, orientation: orientation, onHover: onHover, onDrag: onDrag, onPositionChange: onPositionChange, onIncrement: onIncrement, onDecrement: onDecrement, onIncrementToMax: onIncrementToMax, onDecrementToMin: onDecrementToMin, onCollapseToggle: onCollapseToggle } = props;\n    let getPosition = (e)=>orientation === \"horizontal\" ? e.clientX : e.clientY;\n    let getNextOffset = (e)=>{\n        let containerOffset = (0, $ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);\n        let mouseOffset = getPosition(e);\n        let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;\n        return nextOffset;\n    };\n    let dragging = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    let prevPosition = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Keep track of the current handlers in a ref so that the events can access them.\n    let handlers = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        onPositionChange: onPositionChange,\n        onDrag: onDrag\n    });\n    handlers.current.onDrag = onDrag;\n    handlers.current.onPositionChange = onPositionChange;\n    let onMouseDragged = (e)=>{\n        e.preventDefault();\n        let nextOffset = getNextOffset(e);\n        if (!dragging.current) {\n            dragging.current = true;\n            if (handlers.current.onDrag) handlers.current.onDrag(true);\n            if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n        }\n        if (prevPosition.current === nextOffset) return;\n        prevPosition.current = nextOffset;\n        if (onPositionChange) onPositionChange(nextOffset);\n    };\n    let onMouseUp = (e)=>{\n        const target = e.target;\n        dragging.current = false;\n        let nextOffset = getNextOffset(e);\n        if (handlers.current.onDrag) handlers.current.onDrag(false);\n        if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n        $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);\n        window.removeEventListener(\"mouseup\", onMouseUp, false);\n        window.removeEventListener(\"mousemove\", onMouseDragged, false);\n    };\n    let onMouseDown = (e)=>{\n        const target = e.currentTarget;\n        // If we're already handling dragging on a descendant with useDrag1D, then\n        // we don't want to handle the drag motion on this target as well.\n        if ($9cc09df9fd7676be$var$draggingElements.some((elt)=>target.contains(elt))) return;\n        $9cc09df9fd7676be$var$draggingElements.push(target);\n        window.addEventListener(\"mousemove\", onMouseDragged, false);\n        window.addEventListener(\"mouseup\", onMouseUp, false);\n    };\n    let onMouseEnter = ()=>{\n        if (onHover) onHover(true);\n    };\n    let onMouseOut = ()=>{\n        if (onHover) onHover(false);\n    };\n    let onKeyDown = (e)=>{\n        switch(e.key){\n            case \"Left\":\n            case \"ArrowLeft\":\n                if (orientation === \"horizontal\") {\n                    e.preventDefault();\n                    if (onDecrement && !reverse) onDecrement();\n                    else if (onIncrement && reverse) onIncrement();\n                }\n                break;\n            case \"Up\":\n            case \"ArrowUp\":\n                if (orientation === \"vertical\") {\n                    e.preventDefault();\n                    if (onDecrement && !reverse) onDecrement();\n                    else if (onIncrement && reverse) onIncrement();\n                }\n                break;\n            case \"Right\":\n            case \"ArrowRight\":\n                if (orientation === \"horizontal\") {\n                    e.preventDefault();\n                    if (onIncrement && !reverse) onIncrement();\n                    else if (onDecrement && reverse) onDecrement();\n                }\n                break;\n            case \"Down\":\n            case \"ArrowDown\":\n                if (orientation === \"vertical\") {\n                    e.preventDefault();\n                    if (onIncrement && !reverse) onIncrement();\n                    else if (onDecrement && reverse) onDecrement();\n                }\n                break;\n            case \"Home\":\n                e.preventDefault();\n                if (onDecrementToMin) onDecrementToMin();\n                break;\n            case \"End\":\n                e.preventDefault();\n                if (onIncrementToMax) onIncrementToMax();\n                break;\n            case \"Enter\":\n                e.preventDefault();\n                if (onCollapseToggle) onCollapseToggle();\n                break;\n        }\n    };\n    return {\n        onMouseDown: onMouseDown,\n        onMouseEnter: onMouseEnter,\n        onMouseOut: onMouseOut,\n        onKeyDown: onKeyDown\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n    let globalListeners = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map());\n    let addGlobalListener = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((eventTarget, type, listener, options)=>{\n        // Make sure we remove the listener after it is called with the `once` option.\n        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args)=>{\n            globalListeners.current.delete(listener);\n            listener(...args);\n        } : listener;\n        globalListeners.current.set(listener, {\n            type: type,\n            eventTarget: eventTarget,\n            fn: fn,\n            options: options\n        });\n        eventTarget.addEventListener(type, listener, options);\n    }, []);\n    let removeGlobalListener = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((eventTarget, type, listener, options)=>{\n        var _globalListeners_current_get;\n        let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n        eventTarget.removeEventListener(type, fn, options);\n        globalListeners.current.delete(listener);\n    }, []);\n    let removeAllGlobalListeners = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        globalListeners.current.forEach((value1, key)=>{\n            removeGlobalListener(value1.eventTarget, value1.type, key, value1.options);\n        });\n    }, [\n        removeGlobalListener\n    ]);\n    // eslint-disable-next-line arrow-body-style\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return removeAllGlobalListeners;\n    }, [\n        removeAllGlobalListeners\n    ]);\n    return {\n        addGlobalListener: addGlobalListener,\n        removeGlobalListener: removeGlobalListener,\n        removeAllGlobalListeners: removeAllGlobalListeners\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {\n    let { id: id, \"aria-label\": label, \"aria-labelledby\": labelledBy } = props;\n    // If there is both an aria-label and aria-labelledby,\n    // combine them by pointing to the element itself.\n    id = (0, $bdb11010cef70236$export$f680877a34711e37)(id);\n    if (labelledBy && label) {\n        let ids = new Set([\n            id,\n            ...labelledBy.trim().split(/\\s+/)\n        ]);\n        labelledBy = [\n            ...ids\n        ].join(\" \");\n    } else if (labelledBy) labelledBy = labelledBy.trim().split(/\\s+/).join(\" \");\n    // If no labels are provided, use the default\n    if (!label && !labelledBy && defaultLabel) label = defaultLabel;\n    return {\n        id: id,\n        \"aria-label\": label,\n        \"aria-labelledby\": labelledBy\n    };\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {\n    const objRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            get current () {\n                return objRef.current;\n            },\n            set current (value){\n                objRef.current = value;\n                if (typeof forwardedRef === \"function\") forwardedRef(value);\n                else if (forwardedRef) forwardedRef.current = value;\n            }\n        }), [\n        forwardedRef\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {\n    const isInitialMount = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const lastDeps = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        isInitialMount.current = true;\n        return ()=>{\n            isInitialMount.current = false;\n        };\n    }, []);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isInitialMount.current) isInitialMount.current = false;\n        else if (!lastDeps.current || dependencies.some((dep, i)=>!Object.is(dep, lastDeps[i]))) effect();\n        lastDeps.current = dependencies;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, dependencies);\n}\nfunction $9daab02d461809db$var$hasResizeObserver() {\n    return typeof window.ResizeObserver !== \"undefined\";\n}\nfunction $9daab02d461809db$export$683480f191c0e3ea(options) {\n    const { ref: ref, onResize: onResize } = options;\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let element = ref === null || ref === void 0 ? void 0 : ref.current;\n        if (!element) return;\n        if (!$9daab02d461809db$var$hasResizeObserver()) {\n            window.addEventListener(\"resize\", onResize, false);\n            return ()=>{\n                window.removeEventListener(\"resize\", onResize, false);\n            };\n        } else {\n            const resizeObserverInstance = new window.ResizeObserver((entries)=>{\n                if (!entries.length) return;\n                onResize();\n            });\n            resizeObserverInstance.observe(element);\n            return ()=>{\n                if (element) resizeObserverInstance.unobserve(element);\n            };\n        }\n    }, [\n        onResize,\n        ref\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        if (context && context.ref && ref) {\n            context.ref.current = ref.current;\n            return ()=>{\n                context.ref.current = null;\n            };\n        }\n    });\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $62d8ded9296f3872$export$cfa2225e87938781(node) {\n    if ($62d8ded9296f3872$export$2bb74740c4e19def(node)) node = node.parentElement;\n    while(node && !$62d8ded9296f3872$export$2bb74740c4e19def(node))node = node.parentElement;\n    return node || document.scrollingElement || document.documentElement;\n}\nfunction $62d8ded9296f3872$export$2bb74740c4e19def(node) {\n    let style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // @ts-ignore\nlet $5df64b3807dc15ee$var$visualViewport = typeof document !== \"undefined\" && window.visualViewport;\nfunction $5df64b3807dc15ee$export$d699905dd57c73ca() {\n    let isSSR = (0, _react_aria_ssr__WEBPACK_IMPORTED_MODULE_2__.useIsSSR)();\n    let [size, setSize] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>isSSR ? {\n            width: 0,\n            height: 0\n        } : $5df64b3807dc15ee$var$getViewportSize());\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Use visualViewport api to track available height even on iOS virtual keyboard opening\n        let onResize = ()=>{\n            setSize((size)=>{\n                let newSize = $5df64b3807dc15ee$var$getViewportSize();\n                if (newSize.width === size.width && newSize.height === size.height) return size;\n                return newSize;\n            });\n        };\n        if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener(\"resize\", onResize);\n        else $5df64b3807dc15ee$var$visualViewport.addEventListener(\"resize\", onResize);\n        return ()=>{\n            if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener(\"resize\", onResize);\n            else $5df64b3807dc15ee$var$visualViewport.removeEventListener(\"resize\", onResize);\n        };\n    }, []);\n    return size;\n}\nfunction $5df64b3807dc15ee$var$getViewportSize() {\n    return {\n        width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,\n        height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight\n    };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $ef06256079686ba0$var$descriptionId = 0;\nconst $ef06256079686ba0$var$descriptionNodes = new Map();\nfunction $ef06256079686ba0$export$f8aeda7b10753fa1(description) {\n    let [id, setId] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        if (!description) return;\n        let desc = $ef06256079686ba0$var$descriptionNodes.get(description);\n        if (!desc) {\n            let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;\n            setId(id);\n            let node = document.createElement(\"div\");\n            node.id = id;\n            node.style.display = \"none\";\n            node.textContent = description;\n            document.body.appendChild(node);\n            desc = {\n                refCount: 0,\n                element: node\n            };\n            $ef06256079686ba0$var$descriptionNodes.set(description, desc);\n        } else setId(desc.element.id);\n        desc.refCount++;\n        return ()=>{\n            if (--desc.refCount === 0) {\n                desc.element.remove();\n                $ef06256079686ba0$var$descriptionNodes.delete(description);\n            }\n        };\n    }, [\n        description\n    ]);\n    return {\n        \"aria-describedby\": description ? id : undefined\n    };\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {\n    let handleEvent = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(handler);\n    let isDisabled = handler == null;\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isDisabled) return;\n        let element = ref.current;\n        element.addEventListener(event, handleEvent, options);\n        return ()=>{\n            element.removeEventListener(event, handleEvent, options);\n        };\n    }, [\n        ref,\n        event,\n        options,\n        isDisabled,\n        handleEvent\n    ]);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {\n    let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, \"left\");\n    let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, \"top\");\n    let width = element.offsetWidth;\n    let height = element.offsetHeight;\n    let x = scrollView.scrollLeft;\n    let y = scrollView.scrollTop;\n    // Account for top/left border offsetting the scroll top/Left\n    let { borderTopWidth: borderTopWidth, borderLeftWidth: borderLeftWidth } = getComputedStyle(scrollView);\n    let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);\n    let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);\n    // Ignore end/bottom border via clientHeight/Width instead of offsetHeight/Width\n    let maxX = borderAdjustedX + scrollView.clientWidth;\n    let maxY = borderAdjustedY + scrollView.clientHeight;\n    if (offsetX <= x) x = offsetX - parseInt(borderLeftWidth, 10);\n    else if (offsetX + width > maxX) x += offsetX + width - maxX;\n    if (offsetY <= borderAdjustedY) y = offsetY - parseInt(borderTopWidth, 10);\n    else if (offsetY + height > maxY) y += offsetY + height - maxY;\n    scrollView.scrollLeft = x;\n    scrollView.scrollTop = y;\n}\n/**\n * Computes the offset left or top from child to ancestor by accumulating\n * offsetLeft or offsetTop through intervening offsetParents.\n */ function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {\n    const prop = axis === \"left\" ? \"offsetLeft\" : \"offsetTop\";\n    let sum = 0;\n    while(child.offsetParent){\n        sum += child[prop];\n        if (child.offsetParent === ancestor) break;\n        else if (child.offsetParent.contains(ancestor)) {\n            // If the ancestor is not `position:relative`, then we stop at\n            // _its_ offset parent, and we subtract off _its_ offset, so that\n            // we end up with the proper offset from child to ancestor.\n            sum -= ancestor[prop];\n            break;\n        }\n        child = child.offsetParent;\n    }\n    return sum;\n}\nfunction $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {\n    if (document.contains(targetElement)) {\n        let root = document.scrollingElement || document.documentElement;\n        let isScrollPrevented = window.getComputedStyle(root).overflow === \"hidden\";\n        // If scrolling is not currently prevented then we aren’t in a overlay nor is a overlay open, just use element.scrollIntoView to bring the element into view\n        if (!isScrollPrevented) {\n            var // won't cause a scroll if the element is already focused and doesn't behave consistently when an element is partially out of view horizontally vs vertically\n            _targetElement_scrollIntoView;\n            let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();\n            targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {\n                block: \"nearest\"\n            });\n            let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();\n            // Account for sub pixel differences from rounding\n            if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {\n                var _opts_containingElement, _opts_containingElement_scrollIntoView, _targetElement_scrollIntoView1;\n                opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {\n                    block: \"center\",\n                    inline: \"center\"\n                });\n                (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {\n                    block: \"nearest\"\n                });\n            }\n        } else {\n            let scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);\n            // If scrolling is prevented, we don't want to scroll the body since it might move the overlay partially offscreen and the user can't scroll it back into view.\n            while(targetElement && scrollParent && targetElement !== root && scrollParent !== root){\n                $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);\n                targetElement = scrollParent;\n                scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);\n            }\n        }\n    }\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $6a7db85432448f7f$export$60278871457622de(event) {\n    // JAWS/NVDA with Firefox.\n    if (event.mozInputSource === 0 && event.isTrusted) return true;\n    // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead\n    // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check\n    // to detect TalkBack virtual clicks.\n    if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === \"click\" && event.buttons === 1;\n    return event.detail === 0 && !event.pointerType;\n}\nfunction $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {\n    // If the pointer size is zero, then we assume it's from a screen reader.\n    // Android TalkBack double tap will sometimes return a event with width and height of 1\n    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n    // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n    // Talkback double tap from Windows Firefox touch screen press\n    return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === \"mouse\";\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /* eslint-disable rulesdir/pure-render */ function $5a387cc49350e6db$export$722debc0e56fea39(value1, isEqual) {\n    // Using a ref during render is ok here because it's only an optimization – both values are equivalent.\n    // If a render is thrown away, it'll still work the same no matter if the next render is the same or not.\n    let lastValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (value1 && lastValue.current && isEqual(value1, lastValue.current)) value1 = lastValue.current;\n    lastValue.current = value1;\n    return value1;\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $99facab73266f662$export$5add1d006293d136(ref, initialValue, onReset) {\n    let resetValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialValue);\n    let handleReset = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{\n        if (onReset) onReset(resetValue.current);\n    });\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _ref_current;\n        let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;\n        form === null || form === void 0 ? void 0 : form.addEventListener(\"reset\", handleReset);\n        return ()=>{\n            form === null || form === void 0 ? void 0 : form.removeEventListener(\"reset\", handleReset);\n        };\n    }, [\n        ref,\n        handleReset\n    ]);\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LWFyaWEvdXRpbHMvZGlzdC9pbXBvcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdKO0FBQzhHO0FBQzdKO0FBQ2xFO0FBRS9COzs7Ozs7Ozs7O0NBVUMsR0FBRzs7Ozs7Ozs7OztDQVVILEdBQ0Q7Ozs7Ozs7Ozs7Q0FVQyxHQUNELE1BQU13Qiw0Q0FBNEMsT0FBT0MsYUFBYSxjQUFjLENBQUMsR0FBR3JCLGtDQUFXLEVBQUdzQixlQUFlLEdBQUcsS0FBSztBQUk3SDs7Ozs7Ozs7OztDQVVDLEdBQ0Q7Ozs7Ozs7Ozs7Q0FVQyxHQUVELFNBQVNDLDBDQUEwQ0MsRUFBRTtJQUNqRCxNQUFNQyxNQUFNLENBQUMsR0FBR3JCLHlDQUFZLEVBQUc7SUFDOUIsSUFBR2dCLHlDQUF3QyxFQUFHO1FBQzNDSyxJQUFJQyxPQUFPLEdBQUdGO0lBQ2xCLEdBQUc7UUFDQ0E7S0FDSDtJQUNELE9BQU8sQ0FBQyxHQUFHbEIsOENBQWlCLEVBQUcsQ0FBQyxHQUFHcUI7UUFDL0IsTUFBTUMsSUFBSUgsSUFBSUMsT0FBTztRQUNyQixPQUFPRSxLQUFLRDtJQUNoQixHQUFHLEVBQUU7QUFDVDtBQUdBLFNBQVNFLDBDQUEwQ0MsWUFBWTtJQUMzRCxJQUFJLENBQUNDLFFBQU9DLFNBQVMsR0FBRyxDQUFDLEdBQUc5QiwyQ0FBYyxFQUFHNEI7SUFDN0MsSUFBSUcsU0FBUyxDQUFDLEdBQUc3Qix5Q0FBWSxFQUFHO0lBQ2hDLDBFQUEwRTtJQUMxRSx5Q0FBeUM7SUFDekMsSUFBSThCLFVBQVUsQ0FBQyxHQUFHWCx5Q0FBd0MsRUFBRztRQUN6RCx1Q0FBdUM7UUFDdkMsSUFBSVksV0FBV0YsT0FBT1AsT0FBTyxDQUFDVSxJQUFJO1FBQ2xDLDhDQUE4QztRQUM5QyxJQUFJRCxTQUFTRSxJQUFJLEVBQUU7WUFDZkosT0FBT1AsT0FBTyxHQUFHO1lBQ2pCO1FB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VyxRQUFRLFFBQVFBLFFBQVEsS0FBSyxJQUFJLEtBQUssSUFBSSxDQUFDcVcsZUFBZXJXLElBQUlDLE9BQU8sTUFBTSxRQUFRb1csaUJBQWlCLEtBQUssSUFBSSxLQUFLLElBQUlBLGFBQWFDLElBQUk7UUFDbEpBLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLakwsZ0JBQWdCLENBQUMsU0FBUytLO1FBQzNFLE9BQU87WUFDSEUsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUszSyxtQkFBbUIsQ0FBQyxTQUFTeUs7UUFDbEY7SUFDSixHQUFHO1FBQ0NwVztRQUNBb1c7S0FDSDtBQUNMO0FBS3dwRixDQUN4cEYsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvQHJlYWN0LWFyaWEvdXRpbHMvZGlzdC9pbXBvcnQubWpzPzQ0OTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjbGFtcCBhcyAkNDUwNzQ2MWExYjg3MDEyMyRyZV9leHBvcnQkY2xhbXAsIHNuYXBWYWx1ZVRvU3RlcCBhcyAkNDUwNzQ2MWExYjg3MDEyMyRyZV9leHBvcnQkc25hcFZhbHVlVG9TdGVwfSBmcm9tIFwiQHJlYWN0LXN0YXRlbHkvdXRpbHNcIjtcbmltcG9ydCAkMTJ1R3AkcmVhY3QsIHt1c2VTdGF0ZSBhcyAkMTJ1R3AkdXNlU3RhdGUsIHVzZVJlZiBhcyAkMTJ1R3AkdXNlUmVmLCB1c2VDYWxsYmFjayBhcyAkMTJ1R3AkdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCBhcyAkMTJ1R3AkdXNlRWZmZWN0LCBjcmVhdGVDb250ZXh0IGFzICQxMnVHcCRjcmVhdGVDb250ZXh0LCB1c2VNZW1vIGFzICQxMnVHcCR1c2VNZW1vLCB1c2VDb250ZXh0IGFzICQxMnVHcCR1c2VDb250ZXh0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7dXNlU1NSU2FmZUlkIGFzICQxMnVHcCR1c2VTU1JTYWZlSWQsIHVzZUlzU1NSIGFzICQxMnVHcCR1c2VJc1NTUn0gZnJvbSBcIkByZWFjdC1hcmlhL3NzclwiO1xuaW1wb3J0ICQxMnVHcCRjbHN4IGZyb20gXCJjbHN4XCI7XG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5jb25zdCAkZjBhMDRjY2Q4ZGJkZDgzYiRleHBvcnQkZTVjNWE1ZjkxN2E1ODcxYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/ICgwLCAkMTJ1R3AkcmVhY3QpLnVzZUxheW91dEVmZmVjdCA6ICgpPT57fTtcblxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcblxuZnVuY3Rpb24gJDhhZTA1ZWFhNWMxMTRlOWMkZXhwb3J0JDdmNTRmYzMxODA1MDhhNTIoZm4pIHtcbiAgICBjb25zdCByZWYgPSAoMCwgJDEydUdwJHVzZVJlZikobnVsbCk7XG4gICAgKDAsICRmMGEwNGNjZDhkYmRkODNiJGV4cG9ydCRlNWM1YTVmOTE3YTU4NzFjKSgoKT0+e1xuICAgICAgICByZWYuY3VycmVudCA9IGZuO1xuICAgIH0sIFtcbiAgICAgICAgZm5cbiAgICBdKTtcbiAgICByZXR1cm4gKDAsICQxMnVHcCR1c2VDYWxsYmFjaykoKC4uLmFyZ3MpPT57XG4gICAgICAgIGNvbnN0IGYgPSByZWYuY3VycmVudDtcbiAgICAgICAgcmV0dXJuIGYoLi4uYXJncyk7XG4gICAgfSwgW10pO1xufVxuXG5cbmZ1bmN0aW9uICQxZGJlY2JlMjdhMDRmOWFmJGV4cG9ydCQxNGQyMzhmMzQyNzIzZjI1KGRlZmF1bHRWYWx1ZSkge1xuICAgIGxldCBbdmFsdWUsIHNldFZhbHVlXSA9ICgwLCAkMTJ1R3AkdXNlU3RhdGUpKGRlZmF1bHRWYWx1ZSk7XG4gICAgbGV0IGVmZmVjdCA9ICgwLCAkMTJ1R3AkdXNlUmVmKShudWxsKTtcbiAgICAvLyBTdG9yZSB0aGUgZnVuY3Rpb24gaW4gYSByZWYgc28gd2UgY2FuIGFsd2F5cyBhY2Nlc3MgdGhlIGN1cnJlbnQgdmVyc2lvblxuICAgIC8vIHdoaWNoIGhhcyB0aGUgcHJvcGVyIGB2YWx1ZWAgaW4gc2NvcGUuXG4gICAgbGV0IG5leHRSZWYgPSAoMCwgJDhhZTA1ZWFhNWMxMTRlOWMkZXhwb3J0JDdmNTRmYzMxODA1MDhhNTIpKCgpPT57XG4gICAgICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIHRvIHRoZSBuZXh0IHlpZWxkLlxuICAgICAgICBsZXQgbmV3VmFsdWUgPSBlZmZlY3QuY3VycmVudC5uZXh0KCk7XG4gICAgICAgIC8vIElmIHRoZSBnZW5lcmF0b3IgaXMgZG9uZSwgcmVzZXQgdGhlIGVmZmVjdC5cbiAgICAgICAgaWYgKG5ld1ZhbHVlLmRvbmUpIHtcbiAgICAgICAgICAgIGVmZmVjdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgdmFsdWUsXG4gICAgICAgIC8vIHRoZW4gY29udGludWUgdG8gdGhlIG5leHQgeWllbGQuIE90aGVyd2lzZSxcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBpbiBzdGF0ZSBhbmQgd2FpdCBmb3IgdGhlIG5leHQgbGF5b3V0IGVmZmVjdC5cbiAgICAgICAgaWYgKHZhbHVlID09PSBuZXdWYWx1ZS52YWx1ZSkgbmV4dFJlZigpO1xuICAgICAgICBlbHNlIHNldFZhbHVlKG5ld1ZhbHVlLnZhbHVlKTtcbiAgICB9KTtcbiAgICAoMCwgJGYwYTA0Y2NkOGRiZGQ4M2IkZXhwb3J0JGU1YzVhNWY5MTdhNTg3MWMpKCgpPT57XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGVmZmVjdCBjdXJyZW50bHkgcnVubmluZywgY29udGludWUgdG8gdGhlIG5leHQgeWllbGQuXG4gICAgICAgIGlmIChlZmZlY3QuY3VycmVudCkgbmV4dFJlZigpO1xuICAgIH0pO1xuICAgIGxldCBxdWV1ZSA9ICgwLCAkOGFlMDVlYWE1YzExNGU5YyRleHBvcnQkN2Y1NGZjMzE4MDUwOGE1MikoKGZuKT0+e1xuICAgICAgICBlZmZlY3QuY3VycmVudCA9IGZuKHZhbHVlKTtcbiAgICAgICAgbmV4dFJlZigpO1xuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBxdWV1ZVxuICAgIF07XG59XG5cblxubGV0ICRiZGIxMTAxMGNlZjcwMjM2JHZhciRpZHNVcGRhdGVyTWFwID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGY2ODA4NzdhMzQ3MTFlMzcoZGVmYXVsdElkKSB7XG4gICAgbGV0IFt2YWx1ZSwgc2V0VmFsdWVdID0gKDAsICQxMnVHcCR1c2VTdGF0ZSkoZGVmYXVsdElkKTtcbiAgICBsZXQgbmV4dElkID0gKDAsICQxMnVHcCR1c2VSZWYpKG51bGwpO1xuICAgIGxldCByZXMgPSAoMCwgJDEydUdwJHVzZVNTUlNhZmVJZCkodmFsdWUpO1xuICAgIGxldCB1cGRhdGVWYWx1ZSA9ICgwLCAkMTJ1R3AkdXNlQ2FsbGJhY2spKCh2YWwpPT57XG4gICAgICAgIG5leHRJZC5jdXJyZW50ID0gdmFsO1xuICAgIH0sIFtdKTtcbiAgICAkYmRiMTEwMTBjZWY3MDIzNiR2YXIkaWRzVXBkYXRlck1hcC5zZXQocmVzLCB1cGRhdGVWYWx1ZSk7XG4gICAgKDAsICRmMGEwNGNjZDhkYmRkODNiJGV4cG9ydCRlNWM1YTVmOTE3YTU4NzFjKSgoKT0+e1xuICAgICAgICBsZXQgciA9IHJlcztcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAkYmRiMTEwMTBjZWY3MDIzNiR2YXIkaWRzVXBkYXRlck1hcC5kZWxldGUocik7XG4gICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICByZXNcbiAgICBdKTtcbiAgICAvLyBUaGlzIGNhbm5vdCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgdGhlIHJlZiBpcyB1cGRhdGVkIGZpcnN0LlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICgwLCAkMTJ1R3AkdXNlRWZmZWN0KSgoKT0+e1xuICAgICAgICBsZXQgbmV3SWQgPSBuZXh0SWQuY3VycmVudDtcbiAgICAgICAgaWYgKG5ld0lkKSB7XG4gICAgICAgICAgICBuZXh0SWQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICBzZXRWYWx1ZShuZXdJZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGNkOGM5Y2I2OGY4NDI2MjkoaWRBLCBpZEIpIHtcbiAgICBpZiAoaWRBID09PSBpZEIpIHJldHVybiBpZEE7XG4gICAgbGV0IHNldElkQSA9ICRiZGIxMTAxMGNlZjcwMjM2JHZhciRpZHNVcGRhdGVyTWFwLmdldChpZEEpO1xuICAgIGlmIChzZXRJZEEpIHtcbiAgICAgICAgc2V0SWRBKGlkQik7XG4gICAgICAgIHJldHVybiBpZEI7XG4gICAgfVxuICAgIGxldCBzZXRJZEIgPSAkYmRiMTEwMTBjZWY3MDIzNiR2YXIkaWRzVXBkYXRlck1hcC5nZXQoaWRCKTtcbiAgICBpZiAoc2V0SWRCKSB7XG4gICAgICAgIHNldElkQihpZEEpO1xuICAgICAgICByZXR1cm4gaWRBO1xuICAgIH1cbiAgICByZXR1cm4gaWRCO1xufVxuZnVuY3Rpb24gJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGI0Y2MwOWM1OTJlOGZkYjgoZGVwQXJyYXkgPSBbXSkge1xuICAgIGxldCBpZCA9ICRiZGIxMTAxMGNlZjcwMjM2JGV4cG9ydCRmNjgwODc3YTM0NzExZTM3KCk7XG4gICAgbGV0IFtyZXNvbHZlZElkLCBzZXRSZXNvbHZlZElkXSA9ICgwLCAkMWRiZWNiZTI3YTA0ZjlhZiRleHBvcnQkMTRkMjM4ZjM0MjcyM2YyNSkoaWQpO1xuICAgIGxldCB1cGRhdGVJZCA9ICgwLCAkMTJ1R3AkdXNlQ2FsbGJhY2spKCgpPT57XG4gICAgICAgIHNldFJlc29sdmVkSWQoZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgeWllbGQgaWQ7XG4gICAgICAgICAgICB5aWVsZCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgPyBpZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgfSwgW1xuICAgICAgICBpZCxcbiAgICAgICAgc2V0UmVzb2x2ZWRJZFxuICAgIF0pO1xuICAgICgwLCAkZjBhMDRjY2Q4ZGJkZDgzYiRleHBvcnQkZTVjNWE1ZjkxN2E1ODcxYykodXBkYXRlSWQsIFtcbiAgICAgICAgaWQsXG4gICAgICAgIHVwZGF0ZUlkLFxuICAgICAgICAuLi5kZXBBcnJheVxuICAgIF0pO1xuICAgIHJldHVybiByZXNvbHZlZElkO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKipcbiAqIENhbGxzIGFsbCBmdW5jdGlvbnMgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBjaGFpbmVkIHdpdGggdGhlIHNhbWUgYXJndW1lbnRzLlxuICovIGZ1bmN0aW9uICRmZjU5NjNlYjFmY2NmNTUyJGV4cG9ydCRlMDhlM2I2N2UzOTIxMDFlKC4uLmNhbGxiYWNrcykge1xuICAgIHJldHVybiAoLi4uYXJncyk9PntcbiAgICAgICAgZm9yIChsZXQgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKWlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgfTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cblxuZnVuY3Rpb24gJDNlZjQyNTc1ZGY4NGIzMGIkZXhwb3J0JDlkMTYxMWM3N2MyZmU5MjgoLi4uYXJncykge1xuICAgIC8vIFN0YXJ0IHdpdGggYSBiYXNlIGNsb25lIG9mIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhpcyBpcyBhIGxvdCBmYXN0ZXIgdGhhbiBzdGFydGluZ1xuICAgIC8vIHdpdGggYW4gZW1wdHkgb2JqZWN0IGFuZCBhZGRpbmcgcHJvcGVydGllcyBhcyB3ZSBnby5cbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAuLi5hcmdzWzBdXG4gICAgfTtcbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBwcm9wcyA9IGFyZ3NbaV07XG4gICAgICAgIGZvcihsZXQga2V5IGluIHByb3BzKXtcbiAgICAgICAgICAgIGxldCBhID0gcmVzdWx0W2tleV07XG4gICAgICAgICAgICBsZXQgYiA9IHByb3BzW2tleV07XG4gICAgICAgICAgICAvLyBDaGFpbiBldmVudHNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiID09PSBcImZ1bmN0aW9uXCIgJiYgLy8gVGhpcyBpcyBhIGxvdCBmYXN0ZXIgdGhhbiBhIHJlZ2V4LlxuICAgICAgICAgICAga2V5WzBdID09PSBcIm9cIiAmJiBrZXlbMV0gPT09IFwiblwiICYmIGtleS5jaGFyQ29kZUF0KDIpID49IC8qICdBJyAqLyA2NSAmJiBrZXkuY2hhckNvZGVBdCgyKSA8PSAvKiAnWicgKi8gOTApIHJlc3VsdFtrZXldID0gKDAsICRmZjU5NjNlYjFmY2NmNTUyJGV4cG9ydCRlMDhlM2I2N2UzOTIxMDFlKShhLCBiKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKChrZXkgPT09IFwiY2xhc3NOYW1lXCIgfHwga2V5ID09PSBcIlVOU0FGRV9jbGFzc05hbWVcIikgJiYgdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGIgPT09IFwic3RyaW5nXCIpIHJlc3VsdFtrZXldID0gKDAsICQxMnVHcCRjbHN4KShhLCBiKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJpZFwiICYmIGEgJiYgYikgcmVzdWx0LmlkID0gKDAsICRiZGIxMTAxMGNlZjcwMjM2JGV4cG9ydCRjZDhjOWNiNjhmODQyNjI5KShhLCBiKTtcbiAgICAgICAgICAgIGVsc2UgcmVzdWx0W2tleV0gPSBiICE9PSB1bmRlZmluZWQgPyBiIDogYTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiAkNWRjOTU4OTliMzA2ZjYzMCRleHBvcnQkYzkwNTgzMTY3NjRjMTQwZSguLi5yZWZzKSB7XG4gICAgaWYgKHJlZnMubGVuZ3RoID09PSAxKSByZXR1cm4gcmVmc1swXTtcbiAgICByZXR1cm4gKHZhbHVlKT0+e1xuICAgICAgICBmb3IgKGxldCByZWYgb2YgcmVmcyl7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gXCJmdW5jdGlvblwiKSByZWYodmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAocmVmICE9IG51bGwpIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBjb25zdCAkNjU0ODRkMDJkY2I3ZWIzZSR2YXIkRE9NUHJvcE5hbWVzID0gbmV3IFNldChbXG4gICAgXCJpZFwiXG5dKTtcbmNvbnN0ICQ2NTQ4NGQwMmRjYjdlYjNlJHZhciRsYWJlbGFibGVQcm9wTmFtZXMgPSBuZXcgU2V0KFtcbiAgICBcImFyaWEtbGFiZWxcIixcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiLFxuICAgIFwiYXJpYS1kZXRhaWxzXCJcbl0pO1xuLy8gU2VlIExpbmtET01Qcm9wcyBpbiBkb20uZC50cy5cbmNvbnN0ICQ2NTQ4NGQwMmRjYjdlYjNlJHZhciRsaW5rUHJvcE5hbWVzID0gbmV3IFNldChbXG4gICAgXCJocmVmXCIsXG4gICAgXCJ0YXJnZXRcIixcbiAgICBcInJlbFwiLFxuICAgIFwiZG93bmxvYWRcIixcbiAgICBcInBpbmdcIixcbiAgICBcInJlZmVycmVyUG9saWN5XCJcbl0pO1xuY29uc3QgJDY1NDg0ZDAyZGNiN2ViM2UkdmFyJHByb3BSZSA9IC9eKGRhdGEtLiopJC87XG5mdW5jdGlvbiAkNjU0ODRkMDJkY2I3ZWIzZSRleHBvcnQkNDU3YzNkNjUxOGRkNGM2Zihwcm9wcywgb3B0cyA9IHt9KSB7XG4gICAgbGV0IHsgbGFiZWxhYmxlOiBsYWJlbGFibGUsIGlzTGluazogaXNMaW5rLCBwcm9wTmFtZXM6IHByb3BOYW1lcyB9ID0gb3B0cztcbiAgICBsZXQgZmlsdGVyZWRQcm9wcyA9IHt9O1xuICAgIGZvcihjb25zdCBwcm9wIGluIHByb3BzKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIHByb3ApICYmICgkNjU0ODRkMDJkY2I3ZWIzZSR2YXIkRE9NUHJvcE5hbWVzLmhhcyhwcm9wKSB8fCBsYWJlbGFibGUgJiYgJDY1NDg0ZDAyZGNiN2ViM2UkdmFyJGxhYmVsYWJsZVByb3BOYW1lcy5oYXMocHJvcCkgfHwgaXNMaW5rICYmICQ2NTQ4NGQwMmRjYjdlYjNlJHZhciRsaW5rUHJvcE5hbWVzLmhhcyhwcm9wKSB8fCAocHJvcE5hbWVzID09PSBudWxsIHx8IHByb3BOYW1lcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcE5hbWVzLmhhcyhwcm9wKSkgfHwgJDY1NDg0ZDAyZGNiN2ViM2UkdmFyJHByb3BSZS50ZXN0KHByb3ApKSkgZmlsdGVyZWRQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIHJldHVybiBmaWx0ZXJlZFByb3BzO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiAkNzIxNWFmYzZkZTYwNmQ2YiRleHBvcnQkZGU3OWUyYzY5NWUwNTJmMyhlbGVtZW50KSB7XG4gICAgaWYgKCQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRzdXBwb3J0c1ByZXZlbnRTY3JvbGwoKSkgZWxlbWVudC5mb2N1cyh7XG4gICAgICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgICB9KTtcbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHNjcm9sbGFibGVFbGVtZW50cyA9ICQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRnZXRTY3JvbGxhYmxlRWxlbWVudHMoZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgJDcyMTVhZmM2ZGU2MDZkNmIkdmFyJHJlc3RvcmVTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlRWxlbWVudHMpO1xuICAgIH1cbn1cbmxldCAkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkID0gbnVsbDtcbmZ1bmN0aW9uICQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRzdXBwb3J0c1ByZXZlbnRTY3JvbGwoKSB7XG4gICAgaWYgKCQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRzdXBwb3J0c1ByZXZlbnRTY3JvbGxDYWNoZWQgPT0gbnVsbCkge1xuICAgICAgICAkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZm9jdXNFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGZvY3VzRWxlbS5mb2N1cyh7XG4gICAgICAgICAgICAgICAgZ2V0IHByZXZlbnRTY3JvbGwgKCkge1xuICAgICAgICAgICAgICAgICAgICAkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWdub3JlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRzdXBwb3J0c1ByZXZlbnRTY3JvbGxDYWNoZWQ7XG59XG5mdW5jdGlvbiAkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkZ2V0U2Nyb2xsYWJsZUVsZW1lbnRzKGVsZW1lbnQpIHtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHZhciBzY3JvbGxhYmxlRWxlbWVudHMgPSBbXTtcbiAgICB2YXIgcm9vdFNjcm9sbGluZ0VsZW1lbnQgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB3aGlsZShwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBwYXJlbnQgIT09IHJvb3RTY3JvbGxpbmdFbGVtZW50KXtcbiAgICAgICAgaWYgKHBhcmVudC5vZmZzZXRIZWlnaHQgPCBwYXJlbnQuc2Nyb2xsSGVpZ2h0IHx8IHBhcmVudC5vZmZzZXRXaWR0aCA8IHBhcmVudC5zY3JvbGxXaWR0aCkgc2Nyb2xsYWJsZUVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudDogcGFyZW50LFxuICAgICAgICAgICAgc2Nyb2xsVG9wOiBwYXJlbnQuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdDogcGFyZW50LnNjcm9sbExlZnRcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICBpZiAocm9vdFNjcm9sbGluZ0VsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgc2Nyb2xsYWJsZUVsZW1lbnRzLnB1c2goe1xuICAgICAgICBlbGVtZW50OiByb290U2Nyb2xsaW5nRWxlbWVudCxcbiAgICAgICAgc2Nyb2xsVG9wOiByb290U2Nyb2xsaW5nRWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbExlZnQ6IHJvb3RTY3JvbGxpbmdFbGVtZW50LnNjcm9sbExlZnRcbiAgICB9KTtcbiAgICByZXR1cm4gc2Nyb2xsYWJsZUVsZW1lbnRzO1xufVxuZnVuY3Rpb24gJDcyMTVhZmM2ZGU2MDZkNmIkdmFyJHJlc3RvcmVTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlRWxlbWVudHMpIHtcbiAgICBmb3IgKGxldCB7IGVsZW1lbnQ6IGVsZW1lbnQsIHNjcm9sbFRvcDogc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0IH0gb2Ygc2Nyb2xsYWJsZUVsZW1lbnRzKXtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgfVxufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiAkYWI3MWRhZGIwM2E2ZmIyZSRleHBvcnQkNjIyY2VhNDQ1YTFjNWI3ZChlbGVtZW50LCByZXZlcnNlLCBvcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgbGV0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChyZXZlcnNlKSByZXR1cm4gb3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gcmVjdC5yaWdodCA6IHJlY3QuYm90dG9tO1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyByZWN0LmxlZnQgOiByZWN0LnRvcDtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGZ1bmN0aW9uICRjODczMTE0MjRlYTMwYTA1JHZhciR0ZXN0VXNlckFnZW50KHJlKSB7XG4gICAgdmFyIF93aW5kb3dfbmF2aWdhdG9yX3VzZXJBZ2VudERhdGE7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgd2luZG93Lm5hdmlnYXRvciA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICgoX3dpbmRvd19uYXZpZ2F0b3JfdXNlckFnZW50RGF0YSA9IHdpbmRvdy5uYXZpZ2F0b3JbXCJ1c2VyQWdlbnREYXRhXCJdKSA9PT0gbnVsbCB8fCBfd2luZG93X25hdmlnYXRvcl91c2VyQWdlbnREYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd2luZG93X25hdmlnYXRvcl91c2VyQWdlbnREYXRhLmJyYW5kcy5zb21lKChicmFuZCk9PnJlLnRlc3QoYnJhbmQuYnJhbmQpKSkgfHwgcmUudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5mdW5jdGlvbiAkYzg3MzExNDI0ZWEzMGEwNSR2YXIkdGVzdFBsYXRmb3JtKHJlKSB7XG4gICAgdmFyIF93aW5kb3dfbmF2aWdhdG9yX3VzZXJBZ2VudERhdGE7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lm5hdmlnYXRvciAhPSBudWxsID8gcmUudGVzdCgoKF93aW5kb3dfbmF2aWdhdG9yX3VzZXJBZ2VudERhdGEgPSB3aW5kb3cubmF2aWdhdG9yW1widXNlckFnZW50RGF0YVwiXSkgPT09IG51bGwgfHwgX3dpbmRvd19uYXZpZ2F0b3JfdXNlckFnZW50RGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3dpbmRvd19uYXZpZ2F0b3JfdXNlckFnZW50RGF0YS5wbGF0Zm9ybSkgfHwgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSkgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ5YWMxMDBlNDA2MTNlYTEwKCkge1xuICAgIHJldHVybiAkYzg3MzExNDI0ZWEzMGEwNSR2YXIkdGVzdFBsYXRmb3JtKC9eTWFjL2kpO1xufVxuZnVuY3Rpb24gJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDE4NmM2OTY0Y2ExN2Q5OSgpIHtcbiAgICByZXR1cm4gJGM4NzMxMTQyNGVhMzBhMDUkdmFyJHRlc3RQbGF0Zm9ybSgvXmlQaG9uZS9pKTtcbn1cbmZ1bmN0aW9uICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ3YmVmMDQ5Y2U5MmU0MjI0KCkge1xuICAgIHJldHVybiAkYzg3MzExNDI0ZWEzMGEwNSR2YXIkdGVzdFBsYXRmb3JtKC9eaVBhZC9pKSB8fCAvLyBpUGFkT1MgMTMgbGllcyBhbmQgc2F5cyBpdCdzIGEgTWFjLCBidXQgd2UgY2FuIGRpc3Rpbmd1aXNoIGJ5IGRldGVjdGluZyB0b3VjaCBzdXBwb3J0LlxuICAgICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ5YWMxMDBlNDA2MTNlYTEwKCkgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMTtcbn1cbmZ1bmN0aW9uICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRmZWRiMzY5Y2I3MDIwN2YxKCkge1xuICAgIHJldHVybiAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkMTg2YzY5NjRjYTE3ZDk5KCkgfHwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDdiZWYwNDljZTkyZTQyMjQoKTtcbn1cbmZ1bmN0aW9uICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRlMTg2NWMzYmVkY2Q4MjJiKCkge1xuICAgIHJldHVybiAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkOWFjMTAwZTQwNjEzZWExMCgpIHx8ICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRmZWRiMzY5Y2I3MDIwN2YxKCk7XG59XG5mdW5jdGlvbiAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkNzg1NTEwNDM1ODJhNmE5OCgpIHtcbiAgICByZXR1cm4gJGM4NzMxMTQyNGVhMzBhMDUkdmFyJHRlc3RVc2VyQWdlbnQoL0FwcGxlV2ViS2l0L2kpICYmICEkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkNjQ0NmExODZkMDllMzc5ZSgpO1xufVxuZnVuY3Rpb24gJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDY0NDZhMTg2ZDA5ZTM3OWUoKSB7XG4gICAgcmV0dXJuICRjODczMTE0MjRlYTMwYTA1JHZhciR0ZXN0VXNlckFnZW50KC9DaHJvbWUvaSk7XG59XG5mdW5jdGlvbiAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkYTExYjAwNTk5MDBjZWVjOCgpIHtcbiAgICByZXR1cm4gJGM4NzMxMTQyNGVhMzBhMDUkdmFyJHRlc3RVc2VyQWdlbnQoL0FuZHJvaWQvaSk7XG59XG5mdW5jdGlvbiAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkYjdkNzg5OTNiNzRmNzY2ZCgpIHtcbiAgICByZXR1cm4gJGM4NzMxMTQyNGVhMzBhMDUkdmFyJHRlc3RVc2VyQWdlbnQoL0ZpcmVmb3gvaSk7XG59XG5cblxuXG5cbmNvbnN0ICRlYThkY2JjYjllYTFiNTU2JHZhciRSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qLyAoMCwgJDEydUdwJGNyZWF0ZUNvbnRleHQpKHtcbiAgICBpc05hdGl2ZTogdHJ1ZSxcbiAgICBvcGVuOiAkZWE4ZGNiY2I5ZWExYjU1NiR2YXIkb3BlblN5bnRoZXRpY0xpbmtcbn0pO1xuZnVuY3Rpb24gJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDMyM2U0ZmMyZmE0NzUzZmIocHJvcHMpIHtcbiAgICBsZXQgeyBjaGlsZHJlbjogY2hpbGRyZW4sIG5hdmlnYXRlOiBuYXZpZ2F0ZSB9ID0gcHJvcHM7XG4gICAgbGV0IGN0eCA9ICgwLCAkMTJ1R3AkdXNlTWVtbykoKCk9Pih7XG4gICAgICAgICAgICBpc05hdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBvcGVuOiAodGFyZ2V0LCBtb2RpZmllcnMpPT57XG4gICAgICAgICAgICAgICAgJGVhOGRjYmNiOWVhMWI1NTYkdmFyJGdldFN5bnRoZXRpY0xpbmsodGFyZ2V0LCAobGluayk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCRlZmE4YzkwOTllNTMwMjM1KGxpbmssIG1vZGlmaWVycykpIG5hdmlnYXRlKGxpbmsucGF0aG5hbWUgKyBsaW5rLnNlYXJjaCArIGxpbmsuaGFzaCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDk1MTg1ZDY5OWUwNWQ0ZDcobGluaywgbW9kaWZpZXJzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIFtcbiAgICAgICAgbmF2aWdhdGVcbiAgICBdKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyAoMCwgJDEydUdwJHJlYWN0KS5jcmVhdGVFbGVtZW50KCRlYThkY2JjYjllYTFiNTU2JHZhciRSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjdHhcbiAgICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiAkZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkOWEzMDJhNDVmNjVkMDU3MigpIHtcbiAgICByZXR1cm4gKDAsICQxMnVHcCR1c2VDb250ZXh0KSgkZWE4ZGNiY2I5ZWExYjU1NiR2YXIkUm91dGVyQ29udGV4dCk7XG59XG5mdW5jdGlvbiAkZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkZWZhOGM5MDk5ZTUzMDIzNShsaW5rLCBtb2RpZmllcnMpIHtcbiAgICAvLyBVc2UgZ2V0QXR0cmlidXRlIGhlcmUgaW5zdGVhZCBvZiBsaW5rLnRhcmdldC4gRmlyZWZveCB3aWxsIGRlZmF1bHQgbGluay50YXJnZXQgdG8gXCJfcGFyZW50XCIgd2hlbiBpbnNpZGUgYW4gaWZyYW1lLlxuICAgIGxldCB0YXJnZXQgPSBsaW5rLmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcbiAgICByZXR1cm4gKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIGxpbmsub3JpZ2luID09PSBsb2NhdGlvbi5vcmlnaW4gJiYgIWxpbmsuaGFzQXR0cmlidXRlKFwiZG93bmxvYWRcIikgJiYgIW1vZGlmaWVycy5tZXRhS2V5ICYmIC8vIG9wZW4gaW4gbmV3IHRhYiAobWFjKVxuICAgICFtb2RpZmllcnMuY3RybEtleSAmJiAvLyBvcGVuIGluIG5ldyB0YWIgKHdpbmRvd3MpXG4gICAgIW1vZGlmaWVycy5hbHRLZXkgJiYgLy8gZG93bmxvYWRcbiAgICAhbW9kaWZpZXJzLnNoaWZ0S2V5O1xufVxuZnVuY3Rpb24gJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDk1MTg1ZDY5OWUwNWQ0ZDcodGFyZ2V0LCBtb2RpZmllcnMsIHNldE9wZW5pbmcgPSB0cnVlKSB7XG4gICAgdmFyIF93aW5kb3dfZXZlbnQsIF93aW5kb3dfZXZlbnRfdHlwZTtcbiAgICBsZXQgeyBtZXRhS2V5OiBtZXRhS2V5LCBjdHJsS2V5OiBjdHJsS2V5LCBhbHRLZXk6IGFsdEtleSwgc2hpZnRLZXk6IHNoaWZ0S2V5IH0gPSBtb2RpZmllcnM7XG4gICAgLy8gRmlyZWZveCBkb2VzIG5vdCByZWNvZ25pemUga2V5Ym9hcmQgZXZlbnRzIGFzIGEgdXNlciBhY3Rpb24gYnkgZGVmYXVsdCwgYW5kIHRoZSBwb3B1cCBibG9ja2VyXG4gICAgLy8gd2lsbCBwcmV2ZW50IGxpbmtzIHdpdGggdGFyZ2V0PVwiX2JsYW5rXCIgZnJvbSBvcGVuaW5nLiBIb3dldmVyLCBpdCBkb2VzIGFsbG93IHRoZSBldmVudCBpZiB0aGVcbiAgICAvLyBDb21tYW5kL0NvbnRyb2wga2V5IGlzIGhlbGQsIHdoaWNoIG9wZW5zIHRoZSBsaW5rIGluIGEgYmFja2dyb3VuZCB0YWIuIFRoaXMgc2VlbXMgbGlrZSB0aGUgYmVzdCB3ZSBjYW4gZG8uXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTI1Nzg3MCBhbmQgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzQ2NjQwLlxuICAgIGlmICgoMCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JGI3ZDc4OTkzYjc0Zjc2NmQpKCkgJiYgKChfd2luZG93X2V2ZW50ID0gd2luZG93LmV2ZW50KSA9PT0gbnVsbCB8fCBfd2luZG93X2V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3dpbmRvd19ldmVudF90eXBlID0gX3dpbmRvd19ldmVudC50eXBlKSA9PT0gbnVsbCB8fCBfd2luZG93X2V2ZW50X3R5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93aW5kb3dfZXZlbnRfdHlwZS5zdGFydHNXaXRoKFwia2V5XCIpKSAmJiB0YXJnZXQudGFyZ2V0ID09PSBcIl9ibGFua1wiKSB7XG4gICAgICAgIGlmICgoMCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDlhYzEwMGU0MDYxM2VhMTApKCkpIG1ldGFLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIGN0cmxLZXkgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBXZWJLaXQgZG9lcyBub3Qgc3VwcG9ydCBmaXJpbmcgY2xpY2sgZXZlbnRzIHdpdGggbW9kaWZpZXIga2V5cywgYnV0IGRvZXMgc3VwcG9ydCBrZXlib2FyZCBldmVudHMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9jMDNkMGFjNmU2ZGIxNzhmOTA5MjNhMGE2MzA4MGI1Y2EyMTBkMjVmL1NvdXJjZS9XZWJDb3JlL2h0bWwvSFRNTEFuY2hvckVsZW1lbnQuY3BwI0wxODRcbiAgICBsZXQgZXZlbnQgPSAoMCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDc4NTUxMDQzNTgyYTZhOTgpKCkgJiYgKDAsICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ5YWMxMDBlNDA2MTNlYTEwKSgpICYmICEoMCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDdiZWYwNDljZTkyZTQyMjQpKCkgJiYgdHJ1ZSA/IG5ldyBLZXlib2FyZEV2ZW50KFwia2V5ZG93blwiLCB7XG4gICAgICAgIGtleUlkZW50aWZpZXI6IFwiRW50ZXJcIixcbiAgICAgICAgbWV0YUtleTogbWV0YUtleSxcbiAgICAgICAgY3RybEtleTogY3RybEtleSxcbiAgICAgICAgYWx0S2V5OiBhbHRLZXksXG4gICAgICAgIHNoaWZ0S2V5OiBzaGlmdEtleVxuICAgIH0pIDogbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLCB7XG4gICAgICAgIG1ldGFLZXk6IG1ldGFLZXksXG4gICAgICAgIGN0cmxLZXk6IGN0cmxLZXksXG4gICAgICAgIGFsdEtleTogYWx0S2V5LFxuICAgICAgICBzaGlmdEtleTogc2hpZnRLZXksXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgICAkZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkOTUxODVkNjk5ZTA1ZDRkNy5pc09wZW5pbmcgPSBzZXRPcGVuaW5nO1xuICAgICgwLCAkNzIxNWFmYzZkZTYwNmQ2YiRleHBvcnQkZGU3OWUyYzY5NWUwNTJmMykodGFyZ2V0KTtcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDk1MTg1ZDY5OWUwNWQ0ZDcuaXNPcGVuaW5nID0gZmFsc2U7XG59XG4vLyBodHRwczovL2dpdGh1Yi5jb20vcGFyY2VsLWJ1bmRsZXIvcGFyY2VsL2lzc3Vlcy84NzI0XG4kZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkOTUxODVkNjk5ZTA1ZDRkNy5pc09wZW5pbmcgPSBmYWxzZTtcbmZ1bmN0aW9uICRlYThkY2JjYjllYTFiNTU2JHZhciRnZXRTeW50aGV0aWNMaW5rKHRhcmdldCwgb3Blbikge1xuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCkgb3Blbih0YXJnZXQpO1xuICAgIGVsc2UgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikpIHtcbiAgICAgICAgbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgbGluay5ocmVmID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcbiAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXRhcmdldFwiKSkgbGluay50YXJnZXQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YXJnZXRcIik7XG4gICAgICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWxcIikpIGxpbmsucmVsID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtcmVsXCIpO1xuICAgICAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRhdGEtZG93bmxvYWRcIikpIGxpbmsuZG93bmxvYWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1kb3dubG9hZFwiKTtcbiAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBpbmdcIikpIGxpbmsucGluZyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBpbmdcIik7XG4gICAgICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWZlcnJlci1wb2xpY3lcIikpIGxpbmsucmVmZXJyZXJQb2xpY3kgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1yZWZlcnJlci1wb2xpY3lcIik7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgb3BlbihsaW5rKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKGxpbmspO1xuICAgIH1cbn1cbmZ1bmN0aW9uICRlYThkY2JjYjllYTFiNTU2JHZhciRvcGVuU3ludGhldGljTGluayh0YXJnZXQsIG1vZGlmaWVycykge1xuICAgICRlYThkY2JjYjllYTFiNTU2JHZhciRnZXRTeW50aGV0aWNMaW5rKHRhcmdldCwgKGxpbmspPT4kZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkOTUxODVkNjk5ZTA1ZDRkNyhsaW5rLCBtb2RpZmllcnMpKTtcbn1cbmZ1bmN0aW9uICRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCQ1MTQzN2Q1MDMzNzNkMjIzKHByb3BzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJkYXRhLWhyZWZcIjogcHJvcHMuaHJlZixcbiAgICAgICAgXCJkYXRhLXRhcmdldFwiOiBwcm9wcy50YXJnZXQsXG4gICAgICAgIFwiZGF0YS1yZWxcIjogcHJvcHMucmVsLFxuICAgICAgICBcImRhdGEtZG93bmxvYWRcIjogcHJvcHMuZG93bmxvYWQsXG4gICAgICAgIFwiZGF0YS1waW5nXCI6IHByb3BzLnBpbmcsXG4gICAgICAgIFwiZGF0YS1yZWZlcnJlci1wb2xpY3lcIjogcHJvcHMucmVmZXJyZXJQb2xpY3lcbiAgICB9O1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvLyBXZSBzdG9yZSBhIGdsb2JhbCBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGN1cnJlbnRseSB0cmFuc2l0aW9uaW5nLFxuLy8gbWFwcGVkIHRvIGEgc2V0IG9mIENTUyBwcm9wZXJ0aWVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmcgZm9yIHRoYXQgZWxlbWVudC5cbi8vIFRoaXMgaXMgbmVjZXNzYXJ5IHJhdGhlciB0aGFuIGEgc2ltcGxlIGNvdW50IG9mIHRyYW5zaXRpb25zIGJlY2F1c2Ugb2YgYnJvd3NlclxuLy8gYnVncywgZS5nLiBDaHJvbWUgc29tZXRpbWVzIGZpcmVzIGJvdGggdHJhbnNpdGlvbmVuZCBhbmQgdHJhbnNpdGlvbmNhbmNlbCByYXRoZXJcbi8vIHRoYW4gb25lIG9yIHRoZSBvdGhlci4gU28gd2UgbmVlZCB0byB0cmFjayB3aGF0J3MgYWN0dWFsbHkgdHJhbnNpdGlvbmluZyBzbyB0aGF0XG4vLyB3ZSBjYW4gaWdub3JlIHRoZXNlIGR1cGxpY2F0ZSBldmVudHMuXG5sZXQgJGJiZWQ4YjQxZjg1N2JjYzAkdmFyJHRyYW5zaXRpb25zQnlFbGVtZW50ID0gbmV3IE1hcCgpO1xuLy8gQSBsaXN0IG9mIGNhbGxiYWNrcyB0byBjYWxsIG9uY2UgdGhlcmUgYXJlIG5vIHRyYW5zaXRpb25pbmcgZWxlbWVudHMuXG5sZXQgJGJiZWQ4YjQxZjg1N2JjYzAkdmFyJHRyYW5zaXRpb25DYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiAkYmJlZDhiNDFmODU3YmNjMCR2YXIkc2V0dXBHbG9iYWxFdmVudHMoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbiAgICBsZXQgb25UcmFuc2l0aW9uU3RhcnQgPSAoZSk9PntcbiAgICAgICAgLy8gQWRkIHRoZSB0cmFuc2l0aW9uaW5nIHByb3BlcnR5IHRvIHRoZSBsaXN0IGZvciB0aGlzIGVsZW1lbnQuXG4gICAgICAgIGxldCB0cmFuc2l0aW9ucyA9ICRiYmVkOGI0MWY4NTdiY2MwJHZhciR0cmFuc2l0aW9uc0J5RWxlbWVudC5nZXQoZS50YXJnZXQpO1xuICAgICAgICBpZiAoIXRyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICRiYmVkOGI0MWY4NTdiY2MwJHZhciR0cmFuc2l0aW9uc0J5RWxlbWVudC5zZXQoZS50YXJnZXQsIHRyYW5zaXRpb25zKTtcbiAgICAgICAgICAgIC8vIFRoZSB0cmFuc2l0aW9uY2FuY2VsIGV2ZW50IG11c3QgYmUgcmVnaXN0ZXJlZCBvbiB0aGUgZWxlbWVudCBpdHNlbGYsIHJhdGhlciB0aGFuIGFzIGEgZ2xvYmFsXG4gICAgICAgICAgICAvLyBldmVudC4gVGhpcyBlbmFibGVzIHVzIHRvIGhhbmRsZSB3aGVuIHRoZSBub2RlIGlzIGRlbGV0ZWQgZnJvbSB0aGUgZG9jdW1lbnQgd2hpbGUgaXQgaXMgdHJhbnNpdGlvbmluZy5cbiAgICAgICAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhlIGNhbmNlbCBldmVudCB3b3VsZCBoYXZlIG5vd2hlcmUgdG8gYnViYmxlIHRvIHNvIHdlIG5lZWQgdG8gaGFuZGxlIGl0IGRpcmVjdGx5LlxuICAgICAgICAgICAgZS50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25jYW5jZWxcIiwgb25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9ucy5hZGQoZS5wcm9wZXJ0eU5hbWUpO1xuICAgIH07XG4gICAgbGV0IG9uVHJhbnNpdGlvbkVuZCA9IChlKT0+e1xuICAgICAgICAvLyBSZW1vdmUgcHJvcGVydHkgZnJvbSBsaXN0IG9mIHRyYW5zaXRpb25pbmcgcHJvcGVydGllcy5cbiAgICAgICAgbGV0IHByb3BlcnRpZXMgPSAkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbnNCeUVsZW1lbnQuZ2V0KGUudGFyZ2V0KTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0aWVzKSByZXR1cm47XG4gICAgICAgIHByb3BlcnRpZXMuZGVsZXRlKGUucHJvcGVydHlOYW1lKTtcbiAgICAgICAgLy8gSWYgZW1wdHksIHJlbW92ZSB0cmFuc2l0aW9uY2FuY2VsIGV2ZW50LCBhbmQgcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gdGhlIGxpc3Qgb2YgdHJhbnNpdGlvbmluZyBlbGVtZW50cy5cbiAgICAgICAgaWYgKHByb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25jYW5jZWxcIiwgb25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgICRiYmVkOGI0MWY4NTdiY2MwJHZhciR0cmFuc2l0aW9uc0J5RWxlbWVudC5kZWxldGUoZS50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vIHRyYW5zaXRpb25pbmcgZWxlbWVudHMsIGNhbGwgYWxsIG9mIHRoZSBxdWV1ZWQgY2FsbGJhY2tzLlxuICAgICAgICBpZiAoJGJiZWQ4YjQxZjg1N2JjYzAkdmFyJHRyYW5zaXRpb25zQnlFbGVtZW50LnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNiIG9mICRiYmVkOGI0MWY4NTdiY2MwJHZhciR0cmFuc2l0aW9uQ2FsbGJhY2tzKWNiKCk7XG4gICAgICAgICAgICAkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbkNhbGxiYWNrcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9ucnVuXCIsIG9uVHJhbnNpdGlvblN0YXJ0KTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIG9uVHJhbnNpdGlvbkVuZCk7XG59XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSAkYmJlZDhiNDFmODU3YmNjMCR2YXIkc2V0dXBHbG9iYWxFdmVudHMoKTtcbiAgICBlbHNlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICRiYmVkOGI0MWY4NTdiY2MwJHZhciRzZXR1cEdsb2JhbEV2ZW50cyk7XG59XG5mdW5jdGlvbiAkYmJlZDhiNDFmODU3YmNjMCRleHBvcnQkMjQ0OTAzMTZmNzY0YzQzMChmbikge1xuICAgIC8vIFdhaXQgb25lIGZyYW1lIHRvIHNlZSBpZiBhbiBhbmltYXRpb24gc3RhcnRzLCBlLmcuIGEgdHJhbnNpdGlvbiBvbiBtb3VudC5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcbiAgICAgICAgLy8gSWYgbm8gdHJhbnNpdGlvbnMgYXJlIHJ1bm5pbmcsIGNhbGwgdGhlIGZ1bmN0aW9uIGltbWVkaWF0ZWx5LlxuICAgICAgICAvLyBPdGhlcndpc2UsIGFkZCBpdCB0byBhIGxpc3Qgb2YgY2FsbGJhY2tzIHRvIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24uXG4gICAgICAgIGlmICgkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbnNCeUVsZW1lbnQuc2l6ZSA9PT0gMCkgZm4oKTtcbiAgICAgICAgZWxzZSAkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbkNhbGxiYWNrcy5hZGQoZm4pO1xuICAgIH0pO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKiBlc2xpbnQtZGlzYWJsZSBydWxlc2Rpci9wdXJlLXJlbmRlciAqLyBcblxuLy8gS2VlcCB0cmFjayBvZiBlbGVtZW50cyB0aGF0IHdlIGFyZSBjdXJyZW50bHkgaGFuZGxpbmcgZHJhZ2dpbmcgZm9yIHZpYSB1c2VEcmFnMUQuXG4vLyBJZiB0aGVyZSdzIGFuIGFuY2VzdG9yIGFuZCBhIGRlc2NlbmRhbnQgYm90aCB1c2luZyB1c2VEcmFnMUQoKSwgYW5kIHRoZSB1c2VyIHN0YXJ0c1xuLy8gZHJhZ2dpbmcgdGhlIGRlc2NlbmRhbnQsIHdlIGRvbid0IHdhbnQgdXNlRHJhZzFEIGV2ZW50cyB0byBmaXJlIGZvciB0aGUgYW5jZXN0b3IuXG5jb25zdCAkOWNjMDlkZjlmZDc2NzZiZSR2YXIkZHJhZ2dpbmdFbGVtZW50cyA9IFtdO1xuZnVuY3Rpb24gJDljYzA5ZGY5ZmQ3Njc2YmUkZXhwb3J0JDdiYmVkNzVmZWJhMzk3MDYocHJvcHMpIHtcbiAgICBjb25zb2xlLndhcm4oXCJ1c2VEcmFnMUQgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBgdXNlTW92ZWAgaW5zdGVhZCBodHRwczovL3JlYWN0LXNwZWN0cnVtLmFkb2JlLmNvbS9yZWFjdC1hcmlhL3VzZU1vdmUuaHRtbFwiKTtcbiAgICBsZXQgeyBjb250YWluZXJSZWY6IGNvbnRhaW5lclJlZiwgcmV2ZXJzZTogcmV2ZXJzZSwgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLCBvbkhvdmVyOiBvbkhvdmVyLCBvbkRyYWc6IG9uRHJhZywgb25Qb3NpdGlvbkNoYW5nZTogb25Qb3NpdGlvbkNoYW5nZSwgb25JbmNyZW1lbnQ6IG9uSW5jcmVtZW50LCBvbkRlY3JlbWVudDogb25EZWNyZW1lbnQsIG9uSW5jcmVtZW50VG9NYXg6IG9uSW5jcmVtZW50VG9NYXgsIG9uRGVjcmVtZW50VG9NaW46IG9uRGVjcmVtZW50VG9NaW4sIG9uQ29sbGFwc2VUb2dnbGU6IG9uQ29sbGFwc2VUb2dnbGUgfSA9IHByb3BzO1xuICAgIGxldCBnZXRQb3NpdGlvbiA9IChlKT0+b3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gZS5jbGllbnRYIDogZS5jbGllbnRZO1xuICAgIGxldCBnZXROZXh0T2Zmc2V0ID0gKGUpPT57XG4gICAgICAgIGxldCBjb250YWluZXJPZmZzZXQgPSAoMCwgJGFiNzFkYWRiMDNhNmZiMmUkZXhwb3J0JDYyMmNlYTQ0NWExYzViN2QpKGNvbnRhaW5lclJlZi5jdXJyZW50LCByZXZlcnNlLCBvcmllbnRhdGlvbik7XG4gICAgICAgIGxldCBtb3VzZU9mZnNldCA9IGdldFBvc2l0aW9uKGUpO1xuICAgICAgICBsZXQgbmV4dE9mZnNldCA9IHJldmVyc2UgPyBjb250YWluZXJPZmZzZXQgLSBtb3VzZU9mZnNldCA6IG1vdXNlT2Zmc2V0IC0gY29udGFpbmVyT2Zmc2V0O1xuICAgICAgICByZXR1cm4gbmV4dE9mZnNldDtcbiAgICB9O1xuICAgIGxldCBkcmFnZ2luZyA9ICgwLCAkMTJ1R3AkdXNlUmVmKShmYWxzZSk7XG4gICAgbGV0IHByZXZQb3NpdGlvbiA9ICgwLCAkMTJ1R3AkdXNlUmVmKSgwKTtcbiAgICAvLyBLZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IGhhbmRsZXJzIGluIGEgcmVmIHNvIHRoYXQgdGhlIGV2ZW50cyBjYW4gYWNjZXNzIHRoZW0uXG4gICAgbGV0IGhhbmRsZXJzID0gKDAsICQxMnVHcCR1c2VSZWYpKHtcbiAgICAgICAgb25Qb3NpdGlvbkNoYW5nZTogb25Qb3NpdGlvbkNoYW5nZSxcbiAgICAgICAgb25EcmFnOiBvbkRyYWdcbiAgICB9KTtcbiAgICBoYW5kbGVycy5jdXJyZW50Lm9uRHJhZyA9IG9uRHJhZztcbiAgICBoYW5kbGVycy5jdXJyZW50Lm9uUG9zaXRpb25DaGFuZ2UgPSBvblBvc2l0aW9uQ2hhbmdlO1xuICAgIGxldCBvbk1vdXNlRHJhZ2dlZCA9IChlKT0+e1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBuZXh0T2Zmc2V0ID0gZ2V0TmV4dE9mZnNldChlKTtcbiAgICAgICAgaWYgKCFkcmFnZ2luZy5jdXJyZW50KSB7XG4gICAgICAgICAgICBkcmFnZ2luZy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVycy5jdXJyZW50Lm9uRHJhZykgaGFuZGxlcnMuY3VycmVudC5vbkRyYWcodHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMuY3VycmVudC5vblBvc2l0aW9uQ2hhbmdlKSBoYW5kbGVycy5jdXJyZW50Lm9uUG9zaXRpb25DaGFuZ2UobmV4dE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZQb3NpdGlvbi5jdXJyZW50ID09PSBuZXh0T2Zmc2V0KSByZXR1cm47XG4gICAgICAgIHByZXZQb3NpdGlvbi5jdXJyZW50ID0gbmV4dE9mZnNldDtcbiAgICAgICAgaWYgKG9uUG9zaXRpb25DaGFuZ2UpIG9uUG9zaXRpb25DaGFuZ2UobmV4dE9mZnNldCk7XG4gICAgfTtcbiAgICBsZXQgb25Nb3VzZVVwID0gKGUpPT57XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBkcmFnZ2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIGxldCBuZXh0T2Zmc2V0ID0gZ2V0TmV4dE9mZnNldChlKTtcbiAgICAgICAgaWYgKGhhbmRsZXJzLmN1cnJlbnQub25EcmFnKSBoYW5kbGVycy5jdXJyZW50Lm9uRHJhZyhmYWxzZSk7XG4gICAgICAgIGlmIChoYW5kbGVycy5jdXJyZW50Lm9uUG9zaXRpb25DaGFuZ2UpIGhhbmRsZXJzLmN1cnJlbnQub25Qb3NpdGlvbkNoYW5nZShuZXh0T2Zmc2V0KTtcbiAgICAgICAgJDljYzA5ZGY5ZmQ3Njc2YmUkdmFyJGRyYWdnaW5nRWxlbWVudHMuc3BsaWNlKCQ5Y2MwOWRmOWZkNzY3NmJlJHZhciRkcmFnZ2luZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSwgMSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbk1vdXNlVXAsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZURyYWdnZWQsIGZhbHNlKTtcbiAgICB9O1xuICAgIGxldCBvbk1vdXNlRG93biA9IChlKT0+e1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIC8vIElmIHdlJ3JlIGFscmVhZHkgaGFuZGxpbmcgZHJhZ2dpbmcgb24gYSBkZXNjZW5kYW50IHdpdGggdXNlRHJhZzFELCB0aGVuXG4gICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gaGFuZGxlIHRoZSBkcmFnIG1vdGlvbiBvbiB0aGlzIHRhcmdldCBhcyB3ZWxsLlxuICAgICAgICBpZiAoJDljYzA5ZGY5ZmQ3Njc2YmUkdmFyJGRyYWdnaW5nRWxlbWVudHMuc29tZSgoZWx0KT0+dGFyZ2V0LmNvbnRhaW5zKGVsdCkpKSByZXR1cm47XG4gICAgICAgICQ5Y2MwOWRmOWZkNzY3NmJlJHZhciRkcmFnZ2luZ0VsZW1lbnRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZURyYWdnZWQsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG9uTW91c2VVcCwgZmFsc2UpO1xuICAgIH07XG4gICAgbGV0IG9uTW91c2VFbnRlciA9ICgpPT57XG4gICAgICAgIGlmIChvbkhvdmVyKSBvbkhvdmVyKHRydWUpO1xuICAgIH07XG4gICAgbGV0IG9uTW91c2VPdXQgPSAoKT0+e1xuICAgICAgICBpZiAob25Ib3Zlcikgb25Ib3ZlcihmYWxzZSk7XG4gICAgfTtcbiAgICBsZXQgb25LZXlEb3duID0gKGUpPT57XG4gICAgICAgIHN3aXRjaChlLmtleSl7XG4gICAgICAgICAgICBjYXNlIFwiTGVmdFwiOlxuICAgICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob25EZWNyZW1lbnQgJiYgIXJldmVyc2UpIG9uRGVjcmVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9uSW5jcmVtZW50ICYmIHJldmVyc2UpIG9uSW5jcmVtZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlVwXCI6XG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uRGVjcmVtZW50ICYmICFyZXZlcnNlKSBvbkRlY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvbkluY3JlbWVudCAmJiByZXZlcnNlKSBvbkluY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJSaWdodFwiOlxuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uSW5jcmVtZW50ICYmICFyZXZlcnNlKSBvbkluY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvbkRlY3JlbWVudCAmJiByZXZlcnNlKSBvbkRlY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJEb3duXCI6XG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob25JbmNyZW1lbnQgJiYgIXJldmVyc2UpIG9uSW5jcmVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9uRGVjcmVtZW50ICYmIHJldmVyc2UpIG9uRGVjcmVtZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkhvbWVcIjpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9uRGVjcmVtZW50VG9NaW4pIG9uRGVjcmVtZW50VG9NaW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9uSW5jcmVtZW50VG9NYXgpIG9uSW5jcmVtZW50VG9NYXgoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJFbnRlclwiOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAob25Db2xsYXBzZVRvZ2dsZSkgb25Db2xsYXBzZVRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gICAgICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlT3V0OiBvbk1vdXNlT3V0LFxuICAgICAgICBvbktleURvd246IG9uS2V5RG93blxuICAgIH07XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuZnVuY3Rpb24gJDAzZGViMjNmZjE0OTIwYzQkZXhwb3J0JDRlYWYwNGU1NGFhOGVlZDYoKSB7XG4gICAgbGV0IGdsb2JhbExpc3RlbmVycyA9ICgwLCAkMTJ1R3AkdXNlUmVmKShuZXcgTWFwKCkpO1xuICAgIGxldCBhZGRHbG9iYWxMaXN0ZW5lciA9ICgwLCAkMTJ1R3AkdXNlQ2FsbGJhY2spKChldmVudFRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpPT57XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSByZW1vdmUgdGhlIGxpc3RlbmVyIGFmdGVyIGl0IGlzIGNhbGxlZCB3aXRoIHRoZSBgb25jZWAgb3B0aW9uLlxuICAgICAgICBsZXQgZm4gPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uY2UpID8gKC4uLmFyZ3MpPT57XG4gICAgICAgICAgICBnbG9iYWxMaXN0ZW5lcnMuY3VycmVudC5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICAgIH0gOiBsaXN0ZW5lcjtcbiAgICAgICAgZ2xvYmFsTGlzdGVuZXJzLmN1cnJlbnQuc2V0KGxpc3RlbmVyLCB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgZXZlbnRUYXJnZXQ6IGV2ZW50VGFyZ2V0LFxuICAgICAgICAgICAgZm46IGZuLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfSwgW10pO1xuICAgIGxldCByZW1vdmVHbG9iYWxMaXN0ZW5lciA9ICgwLCAkMTJ1R3AkdXNlQ2FsbGJhY2spKChldmVudFRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpPT57XG4gICAgICAgIHZhciBfZ2xvYmFsTGlzdGVuZXJzX2N1cnJlbnRfZ2V0O1xuICAgICAgICBsZXQgZm4gPSAoKF9nbG9iYWxMaXN0ZW5lcnNfY3VycmVudF9nZXQgPSBnbG9iYWxMaXN0ZW5lcnMuY3VycmVudC5nZXQobGlzdGVuZXIpKSA9PT0gbnVsbCB8fCBfZ2xvYmFsTGlzdGVuZXJzX2N1cnJlbnRfZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2xvYmFsTGlzdGVuZXJzX2N1cnJlbnRfZ2V0LmZuKSB8fCBsaXN0ZW5lcjtcbiAgICAgICAgZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgb3B0aW9ucyk7XG4gICAgICAgIGdsb2JhbExpc3RlbmVycy5jdXJyZW50LmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgfSwgW10pO1xuICAgIGxldCByZW1vdmVBbGxHbG9iYWxMaXN0ZW5lcnMgPSAoMCwgJDEydUdwJHVzZUNhbGxiYWNrKSgoKT0+e1xuICAgICAgICBnbG9iYWxMaXN0ZW5lcnMuY3VycmVudC5mb3JFYWNoKCh2YWx1ZSwga2V5KT0+e1xuICAgICAgICAgICAgcmVtb3ZlR2xvYmFsTGlzdGVuZXIodmFsdWUuZXZlbnRUYXJnZXQsIHZhbHVlLnR5cGUsIGtleSwgdmFsdWUub3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtcbiAgICAgICAgcmVtb3ZlR2xvYmFsTGlzdGVuZXJcbiAgICBdKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyb3ctYm9keS1zdHlsZVxuICAgICgwLCAkMTJ1R3AkdXNlRWZmZWN0KSgoKT0+e1xuICAgICAgICByZXR1cm4gcmVtb3ZlQWxsR2xvYmFsTGlzdGVuZXJzO1xuICAgIH0sIFtcbiAgICAgICAgcmVtb3ZlQWxsR2xvYmFsTGlzdGVuZXJzXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkR2xvYmFsTGlzdGVuZXI6IGFkZEdsb2JhbExpc3RlbmVyLFxuICAgICAgICByZW1vdmVHbG9iYWxMaXN0ZW5lcjogcmVtb3ZlR2xvYmFsTGlzdGVuZXIsXG4gICAgICAgIHJlbW92ZUFsbEdsb2JhbExpc3RlbmVyczogcmVtb3ZlQWxsR2xvYmFsTGlzdGVuZXJzXG4gICAgfTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5mdW5jdGlvbiAkMzEzYjk4ODYxZWU1ZGQ2YyRleHBvcnQkZDY4NzUxMjIxOTRjN2I0NChwcm9wcywgZGVmYXVsdExhYmVsKSB7XG4gICAgbGV0IHsgaWQ6IGlkLCBcImFyaWEtbGFiZWxcIjogbGFiZWwsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGxhYmVsbGVkQnkgfSA9IHByb3BzO1xuICAgIC8vIElmIHRoZXJlIGlzIGJvdGggYW4gYXJpYS1sYWJlbCBhbmQgYXJpYS1sYWJlbGxlZGJ5LFxuICAgIC8vIGNvbWJpbmUgdGhlbSBieSBwb2ludGluZyB0byB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgaWQgPSAoMCwgJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGY2ODA4NzdhMzQ3MTFlMzcpKGlkKTtcbiAgICBpZiAobGFiZWxsZWRCeSAmJiBsYWJlbCkge1xuICAgICAgICBsZXQgaWRzID0gbmV3IFNldChbXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIC4uLmxhYmVsbGVkQnkudHJpbSgpLnNwbGl0KC9cXHMrLylcbiAgICAgICAgXSk7XG4gICAgICAgIGxhYmVsbGVkQnkgPSBbXG4gICAgICAgICAgICAuLi5pZHNcbiAgICAgICAgXS5qb2luKFwiIFwiKTtcbiAgICB9IGVsc2UgaWYgKGxhYmVsbGVkQnkpIGxhYmVsbGVkQnkgPSBsYWJlbGxlZEJ5LnRyaW0oKS5zcGxpdCgvXFxzKy8pLmpvaW4oXCIgXCIpO1xuICAgIC8vIElmIG5vIGxhYmVscyBhcmUgcHJvdmlkZWQsIHVzZSB0aGUgZGVmYXVsdFxuICAgIGlmICghbGFiZWwgJiYgIWxhYmVsbGVkQnkgJiYgZGVmYXVsdExhYmVsKSBsYWJlbCA9IGRlZmF1bHRMYWJlbDtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCxcbiAgICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogbGFiZWxsZWRCeVxuICAgIH07XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIxIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuZnVuY3Rpb24gJGRmNTYxNjRkZmY1Nzg1ZTIkZXhwb3J0JDQzMzhiNTMzMTVhYmY2NjYoZm9yd2FyZGVkUmVmKSB7XG4gICAgY29uc3Qgb2JqUmVmID0gKDAsICQxMnVHcCR1c2VSZWYpKCk7XG4gICAgcmV0dXJuICgwLCAkMTJ1R3AkdXNlTWVtbykoKCk9Pih7XG4gICAgICAgICAgICBnZXQgY3VycmVudCAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ialJlZi5jdXJyZW50O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBjdXJyZW50ICh2YWx1ZSl7XG4gICAgICAgICAgICAgICAgb2JqUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcndhcmRlZFJlZiA9PT0gXCJmdW5jdGlvblwiKSBmb3J3YXJkZWRSZWYodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvcndhcmRlZFJlZikgZm9yd2FyZGVkUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIFtcbiAgICAgICAgZm9yd2FyZGVkUmVmXG4gICAgXSk7XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuZnVuY3Rpb24gJDRmNThjNWY3MmJjZjc5ZjckZXhwb3J0JDQ5NjMxNWExNjA4ZDk2MDIoZWZmZWN0LCBkZXBlbmRlbmNpZXMpIHtcbiAgICBjb25zdCBpc0luaXRpYWxNb3VudCA9ICgwLCAkMTJ1R3AkdXNlUmVmKSh0cnVlKTtcbiAgICBjb25zdCBsYXN0RGVwcyA9ICgwLCAkMTJ1R3AkdXNlUmVmKShudWxsKTtcbiAgICAoMCwgJDEydUdwJHVzZUVmZmVjdCkoKCk9PntcbiAgICAgICAgaXNJbml0aWFsTW91bnQuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgaXNJbml0aWFsTW91bnQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICAoMCwgJDEydUdwJHVzZUVmZmVjdCkoKCk9PntcbiAgICAgICAgaWYgKGlzSW5pdGlhbE1vdW50LmN1cnJlbnQpIGlzSW5pdGlhbE1vdW50LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgZWxzZSBpZiAoIWxhc3REZXBzLmN1cnJlbnQgfHwgZGVwZW5kZW5jaWVzLnNvbWUoKGRlcCwgaSk9PiFPYmplY3QuaXMoZGVwLCBsYXN0RGVwc1tpXSkpKSBlZmZlY3QoKTtcbiAgICAgICAgbGFzdERlcHMuY3VycmVudCA9IGRlcGVuZGVuY2llcztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuXG5cblxuZnVuY3Rpb24gJDlkYWFiMDJkNDYxODA5ZGIkdmFyJGhhc1Jlc2l6ZU9ic2VydmVyKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gJDlkYWFiMDJkNDYxODA5ZGIkZXhwb3J0JDY4MzQ4MGYxOTFjMGUzZWEob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcmVmOiByZWYsIG9uUmVzaXplOiBvblJlc2l6ZSB9ID0gb3B0aW9ucztcbiAgICAoMCwgJDEydUdwJHVzZUVmZmVjdCkoKCk9PntcbiAgICAgICAgbGV0IGVsZW1lbnQgPSByZWYgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuY3VycmVudDtcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XG4gICAgICAgIGlmICghJDlkYWFiMDJkNDYxODA5ZGIkdmFyJGhhc1Jlc2l6ZU9ic2VydmVyKCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvblJlc2l6ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZU9ic2VydmVySW5zdGFuY2UgPSBuZXcgd2luZG93LlJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICAgICAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgICAgICBvblJlc2l6ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNpemVPYnNlcnZlckluc3RhbmNlLm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgcmVzaXplT2JzZXJ2ZXJJbnN0YW5jZS51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBvblJlc2l6ZSxcbiAgICAgICAgcmVmXG4gICAgXSk7XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuZnVuY3Rpb24gJGU3ODAxYmU4MmI0YjJhNTMkZXhwb3J0JDRkZWJkYjFhM2YwZmE3OWUoY29udGV4dCwgcmVmKSB7XG4gICAgKDAsICRmMGEwNGNjZDhkYmRkODNiJGV4cG9ydCRlNWM1YTVmOTE3YTU4NzFjKSgoKT0+e1xuICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LnJlZiAmJiByZWYpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVmLmN1cnJlbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBmdW5jdGlvbiAkNjJkOGRlZDkyOTZmMzg3MiRleHBvcnQkY2ZhMjIyNWU4NzkzODc4MShub2RlKSB7XG4gICAgaWYgKCQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCQyYmI3NDc0MGM0ZTE5ZGVmKG5vZGUpKSBub2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIHdoaWxlKG5vZGUgJiYgISQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCQyYmI3NDc0MGM0ZTE5ZGVmKG5vZGUpKW5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIG5vZGUgfHwgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5mdW5jdGlvbiAkNjJkOGRlZDkyOTZmMzg3MiRleHBvcnQkMmJiNzQ3NDBjNGUxOWRlZihub2RlKSB7XG4gICAgbGV0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgcmV0dXJuIC8oYXV0b3xzY3JvbGwpLy50ZXN0KHN0eWxlLm92ZXJmbG93ICsgc3R5bGUub3ZlcmZsb3dYICsgc3R5bGUub3ZlcmZsb3dZKTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbi8vIEB0cy1pZ25vcmVcbmxldCAkNWRmNjRiMzgwN2RjMTVlZSR2YXIkdmlzdWFsVmlld3BvcnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnZpc3VhbFZpZXdwb3J0O1xuZnVuY3Rpb24gJDVkZjY0YjM4MDdkYzE1ZWUkZXhwb3J0JGQ2OTk5MDVkZDU3YzczY2EoKSB7XG4gICAgbGV0IGlzU1NSID0gKDAsICQxMnVHcCR1c2VJc1NTUikoKTtcbiAgICBsZXQgW3NpemUsIHNldFNpemVdID0gKDAsICQxMnVHcCR1c2VTdGF0ZSkoKCk9PmlzU1NSID8ge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfSA6ICQ1ZGY2NGIzODA3ZGMxNWVlJHZhciRnZXRWaWV3cG9ydFNpemUoKSk7XG4gICAgKDAsICQxMnVHcCR1c2VFZmZlY3QpKCgpPT57XG4gICAgICAgIC8vIFVzZSB2aXN1YWxWaWV3cG9ydCBhcGkgdG8gdHJhY2sgYXZhaWxhYmxlIGhlaWdodCBldmVuIG9uIGlPUyB2aXJ0dWFsIGtleWJvYXJkIG9wZW5pbmdcbiAgICAgICAgbGV0IG9uUmVzaXplID0gKCk9PntcbiAgICAgICAgICAgIHNldFNpemUoKHNpemUpPT57XG4gICAgICAgICAgICAgICAgbGV0IG5ld1NpemUgPSAkNWRmNjRiMzgwN2RjMTVlZSR2YXIkZ2V0Vmlld3BvcnRTaXplKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1NpemUud2lkdGggPT09IHNpemUud2lkdGggJiYgbmV3U2l6ZS5oZWlnaHQgPT09IHNpemUuaGVpZ2h0KSByZXR1cm4gc2l6ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3U2l6ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoISQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydCkgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25SZXNpemUpO1xuICAgICAgICBlbHNlICQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplKTtcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICBpZiAoISQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydCkgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25SZXNpemUpO1xuICAgICAgICAgICAgZWxzZSAkNWRmNjRiMzgwN2RjMTVlZSR2YXIkdmlzdWFsVmlld3BvcnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBzaXplO1xufVxuZnVuY3Rpb24gJDVkZjY0YjM4MDdkYzE1ZWUkdmFyJGdldFZpZXdwb3J0U2l6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogKCQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydCA9PT0gbnVsbCB8fCAkNWRmNjRiMzgwN2RjMTVlZSR2YXIkdmlzdWFsVmlld3BvcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6ICQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydC53aWR0aCkgfHwgd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogKCQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydCA9PT0gbnVsbCB8fCAkNWRmNjRiMzgwN2RjMTVlZSR2YXIkdmlzdWFsVmlld3BvcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6ICQ1ZGY2NGIzODA3ZGMxNWVlJHZhciR2aXN1YWxWaWV3cG9ydC5oZWlnaHQpIHx8IHdpbmRvdy5pbm5lckhlaWdodFxuICAgIH07XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuXG5sZXQgJGVmMDYyNTYwNzk2ODZiYTAkdmFyJGRlc2NyaXB0aW9uSWQgPSAwO1xuY29uc3QgJGVmMDYyNTYwNzk2ODZiYTAkdmFyJGRlc2NyaXB0aW9uTm9kZXMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiAkZWYwNjI1NjA3OTY4NmJhMCRleHBvcnQkZjhhZWRhN2IxMDc1M2ZhMShkZXNjcmlwdGlvbikge1xuICAgIGxldCBbaWQsIHNldElkXSA9ICgwLCAkMTJ1R3AkdXNlU3RhdGUpKHVuZGVmaW5lZCk7XG4gICAgKDAsICRmMGEwNGNjZDhkYmRkODNiJGV4cG9ydCRlNWM1YTVmOTE3YTU4NzFjKSgoKT0+e1xuICAgICAgICBpZiAoIWRlc2NyaXB0aW9uKSByZXR1cm47XG4gICAgICAgIGxldCBkZXNjID0gJGVmMDYyNTYwNzk2ODZiYTAkdmFyJGRlc2NyaXB0aW9uTm9kZXMuZ2V0KGRlc2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKCFkZXNjKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBgcmVhY3QtYXJpYS1kZXNjcmlwdGlvbi0keyRlZjA2MjU2MDc5Njg2YmEwJHZhciRkZXNjcmlwdGlvbklkKyt9YDtcbiAgICAgICAgICAgIHNldElkKGlkKTtcbiAgICAgICAgICAgIGxldCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIG5vZGUuaWQgPSBpZDtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgbm9kZS50ZXh0Q29udGVudCA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgICAgICAgcmVmQ291bnQ6IDAsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbm9kZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRlZjA2MjU2MDc5Njg2YmEwJHZhciRkZXNjcmlwdGlvbk5vZGVzLnNldChkZXNjcmlwdGlvbiwgZGVzYyk7XG4gICAgICAgIH0gZWxzZSBzZXRJZChkZXNjLmVsZW1lbnQuaWQpO1xuICAgICAgICBkZXNjLnJlZkNvdW50Kys7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgaWYgKC0tZGVzYy5yZWZDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlc2MuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkZWYwNjI1NjA3OTY4NmJhMCR2YXIkZGVzY3JpcHRpb25Ob2Rlcy5kZWxldGUoZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgZGVzY3JpcHRpb25cbiAgICBdKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogZGVzY3JpcHRpb24gPyBpZCA6IHVuZGVmaW5lZFxuICAgIH07XG59XG5cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjEgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbmZ1bmN0aW9uICRlOWZhYWZiNjQxZTE2N2RiJGV4cG9ydCQ5MGZjM2ExN2Q5M2Y3MDRjKHJlZiwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgaGFuZGxlRXZlbnQgPSAoMCwgJDhhZTA1ZWFhNWMxMTRlOWMkZXhwb3J0JDdmNTRmYzMxODA1MDhhNTIpKGhhbmRsZXIpO1xuICAgIGxldCBpc0Rpc2FibGVkID0gaGFuZGxlciA9PSBudWxsO1xuICAgICgwLCAkMTJ1R3AkdXNlRWZmZWN0KSgoKT0+e1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgICBsZXQgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIHJlZixcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgIGhhbmRsZUV2ZW50XG4gICAgXSk7XG59XG5cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5mdW5jdGlvbiAkMmYwNGNiYzQ0ZWUzMGNlMCRleHBvcnQkNTNhMDkxMGYwMzgzMzdiZChzY3JvbGxWaWV3LCBlbGVtZW50KSB7XG4gICAgbGV0IG9mZnNldFggPSAkMmYwNGNiYzQ0ZWUzMGNlMCR2YXIkcmVsYXRpdmVPZmZzZXQoc2Nyb2xsVmlldywgZWxlbWVudCwgXCJsZWZ0XCIpO1xuICAgIGxldCBvZmZzZXRZID0gJDJmMDRjYmM0NGVlMzBjZTAkdmFyJHJlbGF0aXZlT2Zmc2V0KHNjcm9sbFZpZXcsIGVsZW1lbnQsIFwidG9wXCIpO1xuICAgIGxldCB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgbGV0IGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIGxldCB4ID0gc2Nyb2xsVmlldy5zY3JvbGxMZWZ0O1xuICAgIGxldCB5ID0gc2Nyb2xsVmlldy5zY3JvbGxUb3A7XG4gICAgLy8gQWNjb3VudCBmb3IgdG9wL2xlZnQgYm9yZGVyIG9mZnNldHRpbmcgdGhlIHNjcm9sbCB0b3AvTGVmdFxuICAgIGxldCB7IGJvcmRlclRvcFdpZHRoOiBib3JkZXJUb3BXaWR0aCwgYm9yZGVyTGVmdFdpZHRoOiBib3JkZXJMZWZ0V2lkdGggfSA9IGdldENvbXB1dGVkU3R5bGUoc2Nyb2xsVmlldyk7XG4gICAgbGV0IGJvcmRlckFkanVzdGVkWCA9IHNjcm9sbFZpZXcuc2Nyb2xsTGVmdCArIHBhcnNlSW50KGJvcmRlckxlZnRXaWR0aCwgMTApO1xuICAgIGxldCBib3JkZXJBZGp1c3RlZFkgPSBzY3JvbGxWaWV3LnNjcm9sbFRvcCArIHBhcnNlSW50KGJvcmRlclRvcFdpZHRoLCAxMCk7XG4gICAgLy8gSWdub3JlIGVuZC9ib3R0b20gYm9yZGVyIHZpYSBjbGllbnRIZWlnaHQvV2lkdGggaW5zdGVhZCBvZiBvZmZzZXRIZWlnaHQvV2lkdGhcbiAgICBsZXQgbWF4WCA9IGJvcmRlckFkanVzdGVkWCArIHNjcm9sbFZpZXcuY2xpZW50V2lkdGg7XG4gICAgbGV0IG1heFkgPSBib3JkZXJBZGp1c3RlZFkgKyBzY3JvbGxWaWV3LmNsaWVudEhlaWdodDtcbiAgICBpZiAob2Zmc2V0WCA8PSB4KSB4ID0gb2Zmc2V0WCAtIHBhcnNlSW50KGJvcmRlckxlZnRXaWR0aCwgMTApO1xuICAgIGVsc2UgaWYgKG9mZnNldFggKyB3aWR0aCA+IG1heFgpIHggKz0gb2Zmc2V0WCArIHdpZHRoIC0gbWF4WDtcbiAgICBpZiAob2Zmc2V0WSA8PSBib3JkZXJBZGp1c3RlZFkpIHkgPSBvZmZzZXRZIC0gcGFyc2VJbnQoYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgICBlbHNlIGlmIChvZmZzZXRZICsgaGVpZ2h0ID4gbWF4WSkgeSArPSBvZmZzZXRZICsgaGVpZ2h0IC0gbWF4WTtcbiAgICBzY3JvbGxWaWV3LnNjcm9sbExlZnQgPSB4O1xuICAgIHNjcm9sbFZpZXcuc2Nyb2xsVG9wID0geTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG9mZnNldCBsZWZ0IG9yIHRvcCBmcm9tIGNoaWxkIHRvIGFuY2VzdG9yIGJ5IGFjY3VtdWxhdGluZ1xuICogb2Zmc2V0TGVmdCBvciBvZmZzZXRUb3AgdGhyb3VnaCBpbnRlcnZlbmluZyBvZmZzZXRQYXJlbnRzLlxuICovIGZ1bmN0aW9uICQyZjA0Y2JjNDRlZTMwY2UwJHZhciRyZWxhdGl2ZU9mZnNldChhbmNlc3RvciwgY2hpbGQsIGF4aXMpIHtcbiAgICBjb25zdCBwcm9wID0gYXhpcyA9PT0gXCJsZWZ0XCIgPyBcIm9mZnNldExlZnRcIiA6IFwib2Zmc2V0VG9wXCI7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgd2hpbGUoY2hpbGQub2Zmc2V0UGFyZW50KXtcbiAgICAgICAgc3VtICs9IGNoaWxkW3Byb3BdO1xuICAgICAgICBpZiAoY2hpbGQub2Zmc2V0UGFyZW50ID09PSBhbmNlc3RvcikgYnJlYWs7XG4gICAgICAgIGVsc2UgaWYgKGNoaWxkLm9mZnNldFBhcmVudC5jb250YWlucyhhbmNlc3RvcikpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBhbmNlc3RvciBpcyBub3QgYHBvc2l0aW9uOnJlbGF0aXZlYCwgdGhlbiB3ZSBzdG9wIGF0XG4gICAgICAgICAgICAvLyBfaXRzXyBvZmZzZXQgcGFyZW50LCBhbmQgd2Ugc3VidHJhY3Qgb2ZmIF9pdHNfIG9mZnNldCwgc28gdGhhdFxuICAgICAgICAgICAgLy8gd2UgZW5kIHVwIHdpdGggdGhlIHByb3BlciBvZmZzZXQgZnJvbSBjaGlsZCB0byBhbmNlc3Rvci5cbiAgICAgICAgICAgIHN1bSAtPSBhbmNlc3Rvcltwcm9wXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkID0gY2hpbGQub2Zmc2V0UGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gc3VtO1xufVxuZnVuY3Rpb24gJDJmMDRjYmM0NGVlMzBjZTAkZXhwb3J0JGM4MjY4NjA3OTYzMDlkMWIodGFyZ2V0RWxlbWVudCwgb3B0cykge1xuICAgIGlmIChkb2N1bWVudC5jb250YWlucyh0YXJnZXRFbGVtZW50KSkge1xuICAgICAgICBsZXQgcm9vdCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICBsZXQgaXNTY3JvbGxQcmV2ZW50ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShyb290KS5vdmVyZmxvdyA9PT0gXCJoaWRkZW5cIjtcbiAgICAgICAgLy8gSWYgc2Nyb2xsaW5nIGlzIG5vdCBjdXJyZW50bHkgcHJldmVudGVkIHRoZW4gd2UgYXJlbuKAmXQgaW4gYSBvdmVybGF5IG5vciBpcyBhIG92ZXJsYXkgb3BlbiwganVzdCB1c2UgZWxlbWVudC5zY3JvbGxJbnRvVmlldyB0byBicmluZyB0aGUgZWxlbWVudCBpbnRvIHZpZXdcbiAgICAgICAgaWYgKCFpc1Njcm9sbFByZXZlbnRlZCkge1xuICAgICAgICAgICAgdmFyIC8vIHVzZSBzY3JvbGxJbnRvVmlldyh7YmxvY2s6ICduZWFyZXN0J30pIGluc3RlYWQgb2YgLmZvY3VzIHRvIGNoZWNrIGlmIHRoZSBlbGVtZW50IGlzIGZ1bGx5IGluIHZpZXcgb3Igbm90IHNpbmNlIC5mb2N1cygpXG4gICAgICAgICAgICAvLyB3b24ndCBjYXVzZSBhIHNjcm9sbCBpZiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGZvY3VzZWQgYW5kIGRvZXNuJ3QgYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIGFuIGVsZW1lbnQgaXMgcGFydGlhbGx5IG91dCBvZiB2aWV3IGhvcml6b250YWxseSB2cyB2ZXJ0aWNhbGx5XG4gICAgICAgICAgICBfdGFyZ2V0RWxlbWVudF9zY3JvbGxJbnRvVmlldztcbiAgICAgICAgICAgIGxldCB7IGxlZnQ6IG9yaWdpbmFsTGVmdCwgdG9wOiBvcmlnaW5hbFRvcCB9ID0gdGFyZ2V0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHRhcmdldEVsZW1lbnQgPT09IG51bGwgfHwgdGFyZ2V0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90YXJnZXRFbGVtZW50X3Njcm9sbEludG9WaWV3ID0gdGFyZ2V0RWxlbWVudC5zY3JvbGxJbnRvVmlldykgPT09IG51bGwgfHwgX3RhcmdldEVsZW1lbnRfc2Nyb2xsSW50b1ZpZXcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90YXJnZXRFbGVtZW50X3Njcm9sbEludG9WaWV3LmNhbGwodGFyZ2V0RWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGJsb2NrOiBcIm5lYXJlc3RcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgeyBsZWZ0OiBuZXdMZWZ0LCB0b3A6IG5ld1RvcCB9ID0gdGFyZ2V0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIC8vIEFjY291bnQgZm9yIHN1YiBwaXhlbCBkaWZmZXJlbmNlcyBmcm9tIHJvdW5kaW5nXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMob3JpZ2luYWxMZWZ0IC0gbmV3TGVmdCkgPiAxIHx8IE1hdGguYWJzKG9yaWdpbmFsVG9wIC0gbmV3VG9wKSA+IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgX29wdHNfY29udGFpbmluZ0VsZW1lbnQsIF9vcHRzX2NvbnRhaW5pbmdFbGVtZW50X3Njcm9sbEludG9WaWV3LCBfdGFyZ2V0RWxlbWVudF9zY3JvbGxJbnRvVmlldzE7XG4gICAgICAgICAgICAgICAgb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdHNfY29udGFpbmluZ0VsZW1lbnQgPSBvcHRzLmNvbnRhaW5pbmdFbGVtZW50KSA9PT0gbnVsbCB8fCBfb3B0c19jb250YWluaW5nRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRzX2NvbnRhaW5pbmdFbGVtZW50X3Njcm9sbEludG9WaWV3ID0gX29wdHNfY29udGFpbmluZ0VsZW1lbnQuc2Nyb2xsSW50b1ZpZXcpID09PSBudWxsIHx8IF9vcHRzX2NvbnRhaW5pbmdFbGVtZW50X3Njcm9sbEludG9WaWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0c19jb250YWluaW5nRWxlbWVudF9zY3JvbGxJbnRvVmlldy5jYWxsKF9vcHRzX2NvbnRhaW5pbmdFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICBpbmxpbmU6IFwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAoX3RhcmdldEVsZW1lbnRfc2Nyb2xsSW50b1ZpZXcxID0gdGFyZ2V0RWxlbWVudC5zY3JvbGxJbnRvVmlldykgPT09IG51bGwgfHwgX3RhcmdldEVsZW1lbnRfc2Nyb2xsSW50b1ZpZXcxID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGFyZ2V0RWxlbWVudF9zY3JvbGxJbnRvVmlldzEuY2FsbCh0YXJnZXRFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrOiBcIm5lYXJlc3RcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNjcm9sbFBhcmVudCA9ICgwLCAkNjJkOGRlZDkyOTZmMzg3MiRleHBvcnQkY2ZhMjIyNWU4NzkzODc4MSkodGFyZ2V0RWxlbWVudCk7XG4gICAgICAgICAgICAvLyBJZiBzY3JvbGxpbmcgaXMgcHJldmVudGVkLCB3ZSBkb24ndCB3YW50IHRvIHNjcm9sbCB0aGUgYm9keSBzaW5jZSBpdCBtaWdodCBtb3ZlIHRoZSBvdmVybGF5IHBhcnRpYWxseSBvZmZzY3JlZW4gYW5kIHRoZSB1c2VyIGNhbid0IHNjcm9sbCBpdCBiYWNrIGludG8gdmlldy5cbiAgICAgICAgICAgIHdoaWxlKHRhcmdldEVsZW1lbnQgJiYgc2Nyb2xsUGFyZW50ICYmIHRhcmdldEVsZW1lbnQgIT09IHJvb3QgJiYgc2Nyb2xsUGFyZW50ICE9PSByb290KXtcbiAgICAgICAgICAgICAgICAkMmYwNGNiYzQ0ZWUzMGNlMCRleHBvcnQkNTNhMDkxMGYwMzgzMzdiZChzY3JvbGxQYXJlbnQsIHRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQgPSBzY3JvbGxQYXJlbnQ7XG4gICAgICAgICAgICAgICAgc2Nyb2xsUGFyZW50ID0gKDAsICQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCRjZmEyMjI1ZTg3OTM4NzgxKSh0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbmZ1bmN0aW9uICQ2YTdkYjg1NDMyNDQ4ZjdmJGV4cG9ydCQ2MDI3ODg3MTQ1NzYyMmRlKGV2ZW50KSB7XG4gICAgLy8gSkFXUy9OVkRBIHdpdGggRmlyZWZveC5cbiAgICBpZiAoZXZlbnQubW96SW5wdXRTb3VyY2UgPT09IDAgJiYgZXZlbnQuaXNUcnVzdGVkKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBbmRyb2lkIFRhbGtCYWNrJ3MgZGV0YWlsIHZhbHVlIHZhcmllcyBkZXBlbmRpbmcgb24gdGhlIGV2ZW50IGxpc3RlbmVyIHByb3ZpZGluZyB0aGUgZXZlbnQgc28gd2UgaGF2ZSBzcGVjaWZpYyBsb2dpYyBoZXJlIGluc3RlYWRcbiAgICAvLyBJZiBwb2ludGVyVHlwZSBpcyBkZWZpbmVkLCBldmVudCBpcyBmcm9tIGEgY2xpY2sgbGlzdGVuZXIuIEZvciBldmVudHMgZnJvbSBtb3VzZWRvd24gbGlzdGVuZXIsIGRldGFpbCA9PT0gMCBpcyBhIHN1ZmZpY2llbnQgY2hlY2tcbiAgICAvLyB0byBkZXRlY3QgVGFsa0JhY2sgdmlydHVhbCBjbGlja3MuXG4gICAgaWYgKCgwLCAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkYTExYjAwNTk5MDBjZWVjOCkoKSAmJiBldmVudC5wb2ludGVyVHlwZSkgcmV0dXJuIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b25zID09PSAxO1xuICAgIHJldHVybiBldmVudC5kZXRhaWwgPT09IDAgJiYgIWV2ZW50LnBvaW50ZXJUeXBlO1xufVxuZnVuY3Rpb24gJDZhN2RiODU0MzI0NDhmN2YkZXhwb3J0JDI5YmYxYjVmMmM1NmNmNjMoZXZlbnQpIHtcbiAgICAvLyBJZiB0aGUgcG9pbnRlciBzaXplIGlzIHplcm8sIHRoZW4gd2UgYXNzdW1lIGl0J3MgZnJvbSBhIHNjcmVlbiByZWFkZXIuXG4gICAgLy8gQW5kcm9pZCBUYWxrQmFjayBkb3VibGUgdGFwIHdpbGwgc29tZXRpbWVzIHJldHVybiBhIGV2ZW50IHdpdGggd2lkdGggYW5kIGhlaWdodCBvZiAxXG4gICAgLy8gYW5kIHBvaW50ZXJUeXBlID09PSAnbW91c2UnIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGEgc3BlY2lmaWMgY29tYmluYXRpb24gb2YgZXZlbnQgYXR0cmlidXRlcy5cbiAgICAvLyBDYW5ub3QgdXNlIFwiZXZlbnQucHJlc3N1cmUgPT09IDBcIiBhcyB0aGUgc29sZSBjaGVjayBkdWUgdG8gU2FmYXJpIHBvaW50ZXIgZXZlbnRzIGFsd2F5cyByZXR1cm5pbmcgcHJlc3N1cmUgPT09IDBcbiAgICAvLyBpbnN0ZWFkIG9mIC41LCBzZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwNjIxNi4gZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScgaXMgdG8gZGlzdGluZ3VzaFxuICAgIC8vIFRhbGtiYWNrIGRvdWJsZSB0YXAgZnJvbSBXaW5kb3dzIEZpcmVmb3ggdG91Y2ggc2NyZWVuIHByZXNzXG4gICAgcmV0dXJuICEoMCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JGExMWIwMDU5OTAwY2VlYzgpKCkgJiYgZXZlbnQud2lkdGggPT09IDAgJiYgZXZlbnQuaGVpZ2h0ID09PSAwIHx8IGV2ZW50LndpZHRoID09PSAxICYmIGV2ZW50LmhlaWdodCA9PT0gMSAmJiBldmVudC5wcmVzc3VyZSA9PT0gMCAmJiBldmVudC5kZXRhaWwgPT09IDAgJiYgZXZlbnQucG9pbnRlclR5cGUgPT09IFwibW91c2VcIjtcbn1cblxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKiBlc2xpbnQtZGlzYWJsZSBydWxlc2Rpci9wdXJlLXJlbmRlciAqLyBcbmZ1bmN0aW9uICQ1YTM4N2NjNDkzNTBlNmRiJGV4cG9ydCQ3MjJkZWJjMGU1NmZlYTM5KHZhbHVlLCBpc0VxdWFsKSB7XG4gICAgLy8gVXNpbmcgYSByZWYgZHVyaW5nIHJlbmRlciBpcyBvayBoZXJlIGJlY2F1c2UgaXQncyBvbmx5IGFuIG9wdGltaXphdGlvbiDigJMgYm90aCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQuXG4gICAgLy8gSWYgYSByZW5kZXIgaXMgdGhyb3duIGF3YXksIGl0J2xsIHN0aWxsIHdvcmsgdGhlIHNhbWUgbm8gbWF0dGVyIGlmIHRoZSBuZXh0IHJlbmRlciBpcyB0aGUgc2FtZSBvciBub3QuXG4gICAgbGV0IGxhc3RWYWx1ZSA9ICgwLCAkMTJ1R3AkdXNlUmVmKShudWxsKTtcbiAgICBpZiAodmFsdWUgJiYgbGFzdFZhbHVlLmN1cnJlbnQgJiYgaXNFcXVhbCh2YWx1ZSwgbGFzdFZhbHVlLmN1cnJlbnQpKSB2YWx1ZSA9IGxhc3RWYWx1ZS5jdXJyZW50O1xuICAgIGxhc3RWYWx1ZS5jdXJyZW50ID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcblxuZnVuY3Rpb24gJDk5ZmFjYWI3MzI2NmY2NjIkZXhwb3J0JDVhZGQxZDAwNjI5M2QxMzYocmVmLCBpbml0aWFsVmFsdWUsIG9uUmVzZXQpIHtcbiAgICBsZXQgcmVzZXRWYWx1ZSA9ICgwLCAkMTJ1R3AkdXNlUmVmKShpbml0aWFsVmFsdWUpO1xuICAgIGxldCBoYW5kbGVSZXNldCA9ICgwLCAkOGFlMDVlYWE1YzExNGU5YyRleHBvcnQkN2Y1NGZjMzE4MDUwOGE1MikoKCk9PntcbiAgICAgICAgaWYgKG9uUmVzZXQpIG9uUmVzZXQocmVzZXRWYWx1ZS5jdXJyZW50KTtcbiAgICB9KTtcbiAgICAoMCwgJDEydUdwJHVzZUVmZmVjdCkoKCk9PntcbiAgICAgICAgdmFyIF9yZWZfY3VycmVudDtcbiAgICAgICAgbGV0IGZvcm0gPSByZWYgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3JlZl9jdXJyZW50ID0gcmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9yZWZfY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlZl9jdXJyZW50LmZvcm07XG4gICAgICAgIGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRcIiwgaGFuZGxlUmVzZXQpO1xuICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgIGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzZXRcIiwgaGFuZGxlUmVzZXQpO1xuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgcmVmLFxuICAgICAgICBoYW5kbGVSZXNldFxuICAgIF0pO1xufVxuXG5cblxuXG5leHBvcnQgeyRiZGIxMTAxMGNlZjcwMjM2JGV4cG9ydCRmNjgwODc3YTM0NzExZTM3IGFzIHVzZUlkLCAkYmRiMTEwMTBjZWY3MDIzNiRleHBvcnQkY2Q4YzljYjY4Zjg0MjYyOSBhcyBtZXJnZUlkcywgJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGI0Y2MwOWM1OTJlOGZkYjggYXMgdXNlU2xvdElkLCAkZmY1OTYzZWIxZmNjZjU1MiRleHBvcnQkZTA4ZTNiNjdlMzkyMTAxZSBhcyBjaGFpbiwgJDNlZjQyNTc1ZGY4NGIzMGIkZXhwb3J0JDlkMTYxMWM3N2MyZmU5MjggYXMgbWVyZ2VQcm9wcywgJDVkYzk1ODk5YjMwNmY2MzAkZXhwb3J0JGM5MDU4MzE2NzY0YzE0MGUgYXMgbWVyZ2VSZWZzLCAkNjU0ODRkMDJkY2I3ZWIzZSRleHBvcnQkNDU3YzNkNjUxOGRkNGM2ZiBhcyBmaWx0ZXJET01Qcm9wcywgJDcyMTVhZmM2ZGU2MDZkNmIkZXhwb3J0JGRlNzllMmM2OTVlMDUyZjMgYXMgZm9jdXNXaXRob3V0U2Nyb2xsaW5nLCAkYWI3MWRhZGIwM2E2ZmIyZSRleHBvcnQkNjIyY2VhNDQ1YTFjNWI3ZCBhcyBnZXRPZmZzZXQsICRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCQ5NTE4NWQ2OTllMDVkNGQ3IGFzIG9wZW5MaW5rLCAkZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkNTE0MzdkNTAzMzczZDIyMyBhcyBnZXRTeW50aGV0aWNMaW5rUHJvcHMsICRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCQzMjNlNGZjMmZhNDc1M2ZiIGFzIFJvdXRlclByb3ZpZGVyLCAkZWE4ZGNiY2I5ZWExYjU1NiRleHBvcnQkZWZhOGM5MDk5ZTUzMDIzNSBhcyBzaG91bGRDbGllbnROYXZpZ2F0ZSwgJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDlhMzAyYTQ1ZjY1ZDA1NzIgYXMgdXNlUm91dGVyLCAkYmJlZDhiNDFmODU3YmNjMCRleHBvcnQkMjQ0OTAzMTZmNzY0YzQzMCBhcyBydW5BZnRlclRyYW5zaXRpb24sICQ5Y2MwOWRmOWZkNzY3NmJlJGV4cG9ydCQ3YmJlZDc1ZmViYTM5NzA2IGFzIHVzZURyYWcxRCwgJDAzZGViMjNmZjE0OTIwYzQkZXhwb3J0JDRlYWYwNGU1NGFhOGVlZDYgYXMgdXNlR2xvYmFsTGlzdGVuZXJzLCAkMzEzYjk4ODYxZWU1ZGQ2YyRleHBvcnQkZDY4NzUxMjIxOTRjN2I0NCBhcyB1c2VMYWJlbHMsICRkZjU2MTY0ZGZmNTc4NWUyJGV4cG9ydCQ0MzM4YjUzMzE1YWJmNjY2IGFzIHVzZU9iamVjdFJlZiwgJDRmNThjNWY3MmJjZjc5ZjckZXhwb3J0JDQ5NjMxNWExNjA4ZDk2MDIgYXMgdXNlVXBkYXRlRWZmZWN0LCAkZjBhMDRjY2Q4ZGJkZDgzYiRleHBvcnQkZTVjNWE1ZjkxN2E1ODcxYyBhcyB1c2VMYXlvdXRFZmZlY3QsICQ5ZGFhYjAyZDQ2MTgwOWRiJGV4cG9ydCQ2ODM0ODBmMTkxYzBlM2VhIGFzIHVzZVJlc2l6ZU9ic2VydmVyLCAkZTc4MDFiZTgyYjRiMmE1MyRleHBvcnQkNGRlYmRiMWEzZjBmYTc5ZSBhcyB1c2VTeW5jUmVmLCAkNjJkOGRlZDkyOTZmMzg3MiRleHBvcnQkY2ZhMjIyNWU4NzkzODc4MSBhcyBnZXRTY3JvbGxQYXJlbnQsICQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCQyYmI3NDc0MGM0ZTE5ZGVmIGFzIGlzU2Nyb2xsYWJsZSwgJDVkZjY0YjM4MDdkYzE1ZWUkZXhwb3J0JGQ2OTk5MDVkZDU3YzczY2EgYXMgdXNlVmlld3BvcnRTaXplLCAkZWYwNjI1NjA3OTY4NmJhMCRleHBvcnQkZjhhZWRhN2IxMDc1M2ZhMSBhcyB1c2VEZXNjcmlwdGlvbiwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDlhYzEwMGU0MDYxM2VhMTAgYXMgaXNNYWMsICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQxODZjNjk2NGNhMTdkOTkgYXMgaXNJUGhvbmUsICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ3YmVmMDQ5Y2U5MmU0MjI0IGFzIGlzSVBhZCwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JGZlZGIzNjljYjcwMjA3ZjEgYXMgaXNJT1MsICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRlMTg2NWMzYmVkY2Q4MjJiIGFzIGlzQXBwbGVEZXZpY2UsICRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ3ODU1MTA0MzU4MmE2YTk4IGFzIGlzV2ViS2l0LCAkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkNjQ0NmExODZkMDllMzc5ZSBhcyBpc0Nocm9tZSwgJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JGExMWIwMDU5OTAwY2VlYzggYXMgaXNBbmRyb2lkLCAkZTlmYWFmYjY0MWUxNjdkYiRleHBvcnQkOTBmYzNhMTdkOTNmNzA0YyBhcyB1c2VFdmVudCwgJDFkYmVjYmUyN2EwNGY5YWYkZXhwb3J0JDE0ZDIzOGYzNDI3MjNmMjUgYXMgdXNlVmFsdWVFZmZlY3QsICQyZjA0Y2JjNDRlZTMwY2UwJGV4cG9ydCQ1M2EwOTEwZjAzODMzN2JkIGFzIHNjcm9sbEludG9WaWV3LCAkMmYwNGNiYzQ0ZWUzMGNlMCRleHBvcnQkYzgyNjg2MDc5NjMwOWQxYiBhcyBzY3JvbGxJbnRvVmlld3BvcnQsICQ0NTA3NDYxYTFiODcwMTIzJHJlX2V4cG9ydCRjbGFtcCBhcyBjbGFtcCwgJDQ1MDc0NjFhMWI4NzAxMjMkcmVfZXhwb3J0JHNuYXBWYWx1ZVRvU3RlcCBhcyBzbmFwVmFsdWVUb1N0ZXAsICQ2YTdkYjg1NDMyNDQ4ZjdmJGV4cG9ydCQ2MDI3ODg3MTQ1NzYyMmRlIGFzIGlzVmlydHVhbENsaWNrLCAkNmE3ZGI4NTQzMjQ0OGY3ZiRleHBvcnQkMjliZjFiNWYyYzU2Y2Y2MyBhcyBpc1ZpcnR1YWxQb2ludGVyRXZlbnQsICQ4YWUwNWVhYTVjMTE0ZTljJGV4cG9ydCQ3ZjU0ZmMzMTgwNTA4YTUyIGFzIHVzZUVmZmVjdEV2ZW50LCAkNWEzODdjYzQ5MzUwZTZkYiRleHBvcnQkNzIyZGViYzBlNTZmZWEzOSBhcyB1c2VEZWVwTWVtbywgJDk5ZmFjYWI3MzI2NmY2NjIkZXhwb3J0JDVhZGQxZDAwNjI5M2QxMzYgYXMgdXNlRm9ybVJlc2V0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjbGFtcCIsIiQ0NTA3NDYxYTFiODcwMTIzJHJlX2V4cG9ydCRjbGFtcCIsInNuYXBWYWx1ZVRvU3RlcCIsIiQ0NTA3NDYxYTFiODcwMTIzJHJlX2V4cG9ydCRzbmFwVmFsdWVUb1N0ZXAiLCIkMTJ1R3AkcmVhY3QiLCJ1c2VTdGF0ZSIsIiQxMnVHcCR1c2VTdGF0ZSIsInVzZVJlZiIsIiQxMnVHcCR1c2VSZWYiLCJ1c2VDYWxsYmFjayIsIiQxMnVHcCR1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsIiQxMnVHcCR1c2VFZmZlY3QiLCJjcmVhdGVDb250ZXh0IiwiJDEydUdwJGNyZWF0ZUNvbnRleHQiLCJ1c2VNZW1vIiwiJDEydUdwJHVzZU1lbW8iLCJ1c2VDb250ZXh0IiwiJDEydUdwJHVzZUNvbnRleHQiLCJ1c2VTU1JTYWZlSWQiLCIkMTJ1R3AkdXNlU1NSU2FmZUlkIiwidXNlSXNTU1IiLCIkMTJ1R3AkdXNlSXNTU1IiLCIkMTJ1R3AkY2xzeCIsIiRmMGEwNGNjZDhkYmRkODNiJGV4cG9ydCRlNWM1YTVmOTE3YTU4NzFjIiwiZG9jdW1lbnQiLCJ1c2VMYXlvdXRFZmZlY3QiLCIkOGFlMDVlYWE1YzExNGU5YyRleHBvcnQkN2Y1NGZjMzE4MDUwOGE1MiIsImZuIiwicmVmIiwiY3VycmVudCIsImFyZ3MiLCJmIiwiJDFkYmVjYmUyN2EwNGY5YWYkZXhwb3J0JDE0ZDIzOGYzNDI3MjNmMjUiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZSIsInNldFZhbHVlIiwiZWZmZWN0IiwibmV4dFJlZiIsIm5ld1ZhbHVlIiwibmV4dCIsImRvbmUiLCJxdWV1ZSIsIiRiZGIxMTAxMGNlZjcwMjM2JHZhciRpZHNVcGRhdGVyTWFwIiwiTWFwIiwiJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGY2ODA4NzdhMzQ3MTFlMzciLCJkZWZhdWx0SWQiLCJuZXh0SWQiLCJyZXMiLCJ1cGRhdGVWYWx1ZSIsInZhbCIsInNldCIsInIiLCJkZWxldGUiLCJuZXdJZCIsIiRiZGIxMTAxMGNlZjcwMjM2JGV4cG9ydCRjZDhjOWNiNjhmODQyNjI5IiwiaWRBIiwiaWRCIiwic2V0SWRBIiwiZ2V0Iiwic2V0SWRCIiwiJGJkYjExMDEwY2VmNzAyMzYkZXhwb3J0JGI0Y2MwOWM1OTJlOGZkYjgiLCJkZXBBcnJheSIsImlkIiwicmVzb2x2ZWRJZCIsInNldFJlc29sdmVkSWQiLCJ1cGRhdGVJZCIsImdldEVsZW1lbnRCeUlkIiwidW5kZWZpbmVkIiwiJGZmNTk2M2ViMWZjY2Y1NTIkZXhwb3J0JGUwOGUzYjY3ZTM5MjEwMWUiLCJjYWxsYmFja3MiLCJjYWxsYmFjayIsIiQzZWY0MjU3NWRmODRiMzBiJGV4cG9ydCQ5ZDE2MTFjNzdjMmZlOTI4IiwicmVzdWx0IiwiaSIsImxlbmd0aCIsInByb3BzIiwia2V5IiwiYSIsImIiLCJjaGFyQ29kZUF0IiwiJDVkYzk1ODk5YjMwNmY2MzAkZXhwb3J0JGM5MDU4MzE2NzY0YzE0MGUiLCJyZWZzIiwiJDY1NDg0ZDAyZGNiN2ViM2UkdmFyJERPTVByb3BOYW1lcyIsIlNldCIsIiQ2NTQ4NGQwMmRjYjdlYjNlJHZhciRsYWJlbGFibGVQcm9wTmFtZXMiLCIkNjU0ODRkMDJkY2I3ZWIzZSR2YXIkbGlua1Byb3BOYW1lcyIsIiQ2NTQ4NGQwMmRjYjdlYjNlJHZhciRwcm9wUmUiLCIkNjU0ODRkMDJkY2I3ZWIzZSRleHBvcnQkNDU3YzNkNjUxOGRkNGM2ZiIsIm9wdHMiLCJsYWJlbGFibGUiLCJpc0xpbmsiLCJwcm9wTmFtZXMiLCJmaWx0ZXJlZFByb3BzIiwicHJvcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhhcyIsInRlc3QiLCIkNzIxNWFmYzZkZTYwNmQ2YiRleHBvcnQkZGU3OWUyYzY5NWUwNTJmMyIsImVsZW1lbnQiLCIkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkc3VwcG9ydHNQcmV2ZW50U2Nyb2xsIiwiZm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwic2Nyb2xsYWJsZUVsZW1lbnRzIiwiJDcyMTVhZmM2ZGU2MDZkNmIkdmFyJGdldFNjcm9sbGFibGVFbGVtZW50cyIsIiQ3MjE1YWZjNmRlNjA2ZDZiJHZhciRyZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCIkNzIxNWFmYzZkZTYwNmQ2YiR2YXIkc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkIiwiZm9jdXNFbGVtIiwiY3JlYXRlRWxlbWVudCIsImUiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwicm9vdFNjcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJvZmZzZXRXaWR0aCIsInNjcm9sbFdpZHRoIiwicHVzaCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCIkYWI3MWRhZGIwM2E2ZmIyZSRleHBvcnQkNjIyY2VhNDQ1YTFjNWI3ZCIsInJldmVyc2UiLCJvcmllbnRhdGlvbiIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ0b3AiLCIkYzg3MzExNDI0ZWEzMGEwNSR2YXIkdGVzdFVzZXJBZ2VudCIsInJlIiwiX3dpbmRvd19uYXZpZ2F0b3JfdXNlckFnZW50RGF0YSIsIndpbmRvdyIsIm5hdmlnYXRvciIsImJyYW5kcyIsInNvbWUiLCJicmFuZCIsInVzZXJBZ2VudCIsIiRjODczMTE0MjRlYTMwYTA1JHZhciR0ZXN0UGxhdGZvcm0iLCJwbGF0Zm9ybSIsIiRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ5YWMxMDBlNDA2MTNlYTEwIiwiJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDE4NmM2OTY0Y2ExN2Q5OSIsIiRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCQ3YmVmMDQ5Y2U5MmU0MjI0IiwibWF4VG91Y2hQb2ludHMiLCIkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkZmVkYjM2OWNiNzAyMDdmMSIsIiRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRlMTg2NWMzYmVkY2Q4MjJiIiwiJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JDc4NTUxMDQzNTgyYTZhOTgiLCIkYzg3MzExNDI0ZWEzMGEwNSRleHBvcnQkNjQ0NmExODZkMDllMzc5ZSIsIiRjODczMTE0MjRlYTMwYTA1JGV4cG9ydCRhMTFiMDA1OTkwMGNlZWM4IiwiJGM4NzMxMTQyNGVhMzBhMDUkZXhwb3J0JGI3ZDc4OTkzYjc0Zjc2NmQiLCIkZWE4ZGNiY2I5ZWExYjU1NiR2YXIkUm91dGVyQ29udGV4dCIsImlzTmF0aXZlIiwib3BlbiIsIiRlYThkY2JjYjllYTFiNTU2JHZhciRvcGVuU3ludGhldGljTGluayIsIiRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCQzMjNlNGZjMmZhNDc1M2ZiIiwiY2hpbGRyZW4iLCJuYXZpZ2F0ZSIsImN0eCIsInRhcmdldCIsIm1vZGlmaWVycyIsIiRlYThkY2JjYjllYTFiNTU2JHZhciRnZXRTeW50aGV0aWNMaW5rIiwibGluayIsIiRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCRlZmE4YzkwOTllNTMwMjM1IiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoIiwiJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDk1MTg1ZDY5OWUwNWQ0ZDciLCJQcm92aWRlciIsIiRlYThkY2JjYjllYTFiNTU2JGV4cG9ydCQ5YTMwMmE0NWY2NWQwNTcyIiwiZ2V0QXR0cmlidXRlIiwib3JpZ2luIiwibG9jYXRpb24iLCJoYXNBdHRyaWJ1dGUiLCJtZXRhS2V5IiwiY3RybEtleSIsImFsdEtleSIsInNoaWZ0S2V5Iiwic2V0T3BlbmluZyIsIl93aW5kb3dfZXZlbnQiLCJfd2luZG93X2V2ZW50X3R5cGUiLCJldmVudCIsInR5cGUiLCJzdGFydHNXaXRoIiwiS2V5Ym9hcmRFdmVudCIsImtleUlkZW50aWZpZXIiLCJNb3VzZUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpc09wZW5pbmciLCJkaXNwYXRjaEV2ZW50IiwiSFRNTEFuY2hvckVsZW1lbnQiLCJocmVmIiwicmVsIiwiZG93bmxvYWQiLCJwaW5nIiwicmVmZXJyZXJQb2xpY3kiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiJGVhOGRjYmNiOWVhMWI1NTYkZXhwb3J0JDUxNDM3ZDUwMzM3M2QyMjMiLCIkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbnNCeUVsZW1lbnQiLCIkYmJlZDhiNDFmODU3YmNjMCR2YXIkdHJhbnNpdGlvbkNhbGxiYWNrcyIsIiRiYmVkOGI0MWY4NTdiY2MwJHZhciRzZXR1cEdsb2JhbEV2ZW50cyIsIm9uVHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwib25UcmFuc2l0aW9uRW5kIiwiYWRkIiwicHJvcGVydHlOYW1lIiwicHJvcGVydGllcyIsInNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2IiLCJjbGVhciIsImJvZHkiLCJyZWFkeVN0YXRlIiwiJGJiZWQ4YjQxZjg1N2JjYzAkZXhwb3J0JDI0NDkwMzE2Zjc2NGM0MzAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCIkOWNjMDlkZjlmZDc2NzZiZSR2YXIkZHJhZ2dpbmdFbGVtZW50cyIsIiQ5Y2MwOWRmOWZkNzY3NmJlJGV4cG9ydCQ3YmJlZDc1ZmViYTM5NzA2IiwiY29uc29sZSIsIndhcm4iLCJjb250YWluZXJSZWYiLCJvbkhvdmVyIiwib25EcmFnIiwib25Qb3NpdGlvbkNoYW5nZSIsIm9uSW5jcmVtZW50Iiwib25EZWNyZW1lbnQiLCJvbkluY3JlbWVudFRvTWF4Iiwib25EZWNyZW1lbnRUb01pbiIsIm9uQ29sbGFwc2VUb2dnbGUiLCJnZXRQb3NpdGlvbiIsImNsaWVudFgiLCJjbGllbnRZIiwiZ2V0TmV4dE9mZnNldCIsImNvbnRhaW5lck9mZnNldCIsIm1vdXNlT2Zmc2V0IiwibmV4dE9mZnNldCIsImRyYWdnaW5nIiwicHJldlBvc2l0aW9uIiwiaGFuZGxlcnMiLCJvbk1vdXNlRHJhZ2dlZCIsInByZXZlbnREZWZhdWx0Iiwib25Nb3VzZVVwIiwic3BsaWNlIiwiaW5kZXhPZiIsIm9uTW91c2VEb3duIiwiY3VycmVudFRhcmdldCIsImVsdCIsImNvbnRhaW5zIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZU91dCIsIm9uS2V5RG93biIsIiQwM2RlYjIzZmYxNDkyMGM0JGV4cG9ydCQ0ZWFmMDRlNTRhYThlZWQ2IiwiZ2xvYmFsTGlzdGVuZXJzIiwiYWRkR2xvYmFsTGlzdGVuZXIiLCJldmVudFRhcmdldCIsImxpc3RlbmVyIiwib3B0aW9ucyIsIm9uY2UiLCJyZW1vdmVHbG9iYWxMaXN0ZW5lciIsIl9nbG9iYWxMaXN0ZW5lcnNfY3VycmVudF9nZXQiLCJyZW1vdmVBbGxHbG9iYWxMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiJDMxM2I5ODg2MWVlNWRkNmMkZXhwb3J0JGQ2ODc1MTIyMTk0YzdiNDQiLCJkZWZhdWx0TGFiZWwiLCJsYWJlbCIsImxhYmVsbGVkQnkiLCJpZHMiLCJ0cmltIiwic3BsaXQiLCJqb2luIiwiJGRmNTYxNjRkZmY1Nzg1ZTIkZXhwb3J0JDQzMzhiNTMzMTVhYmY2NjYiLCJmb3J3YXJkZWRSZWYiLCJvYmpSZWYiLCIkNGY1OGM1ZjcyYmNmNzlmNyRleHBvcnQkNDk2MzE1YTE2MDhkOTYwMiIsImRlcGVuZGVuY2llcyIsImlzSW5pdGlhbE1vdW50IiwibGFzdERlcHMiLCJkZXAiLCJpcyIsIiQ5ZGFhYjAyZDQ2MTgwOWRiJHZhciRoYXNSZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiJDlkYWFiMDJkNDYxODA5ZGIkZXhwb3J0JDY4MzQ4MGYxOTFjMGUzZWEiLCJvblJlc2l6ZSIsInJlc2l6ZU9ic2VydmVySW5zdGFuY2UiLCJlbnRyaWVzIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIiRlNzgwMWJlODJiNGIyYTUzJGV4cG9ydCQ0ZGViZGIxYTNmMGZhNzllIiwiY29udGV4dCIsIiQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCRjZmEyMjI1ZTg3OTM4NzgxIiwibm9kZSIsIiQ2MmQ4ZGVkOTI5NmYzODcyJGV4cG9ydCQyYmI3NDc0MGM0ZTE5ZGVmIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiJDVkZjY0YjM4MDdkYzE1ZWUkdmFyJHZpc3VhbFZpZXdwb3J0IiwidmlzdWFsVmlld3BvcnQiLCIkNWRmNjRiMzgwN2RjMTVlZSRleHBvcnQkZDY5OTkwNWRkNTdjNzNjYSIsImlzU1NSIiwic2V0U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiJDVkZjY0YjM4MDdkYzE1ZWUkdmFyJGdldFZpZXdwb3J0U2l6ZSIsIm5ld1NpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCIkZWYwNjI1NjA3OTY4NmJhMCR2YXIkZGVzY3JpcHRpb25JZCIsIiRlZjA2MjU2MDc5Njg2YmEwJHZhciRkZXNjcmlwdGlvbk5vZGVzIiwiJGVmMDYyNTYwNzk2ODZiYTAkZXhwb3J0JGY4YWVkYTdiMTA3NTNmYTEiLCJkZXNjcmlwdGlvbiIsInNldElkIiwiZGVzYyIsImRpc3BsYXkiLCJ0ZXh0Q29udGVudCIsInJlZkNvdW50IiwicmVtb3ZlIiwiJGU5ZmFhZmI2NDFlMTY3ZGIkZXhwb3J0JDkwZmMzYTE3ZDkzZjcwNGMiLCJoYW5kbGVyIiwiaGFuZGxlRXZlbnQiLCJpc0Rpc2FibGVkIiwiJDJmMDRjYmM0NGVlMzBjZTAkZXhwb3J0JDUzYTA5MTBmMDM4MzM3YmQiLCJzY3JvbGxWaWV3Iiwib2Zmc2V0WCIsIiQyZjA0Y2JjNDRlZTMwY2UwJHZhciRyZWxhdGl2ZU9mZnNldCIsIm9mZnNldFkiLCJ4IiwieSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyQWRqdXN0ZWRYIiwicGFyc2VJbnQiLCJib3JkZXJBZGp1c3RlZFkiLCJtYXhYIiwiY2xpZW50V2lkdGgiLCJtYXhZIiwiY2xpZW50SGVpZ2h0IiwiYW5jZXN0b3IiLCJjaGlsZCIsImF4aXMiLCJzdW0iLCJvZmZzZXRQYXJlbnQiLCIkMmYwNGNiYzQ0ZWUzMGNlMCRleHBvcnQkYzgyNjg2MDc5NjMwOWQxYiIsInRhcmdldEVsZW1lbnQiLCJyb290IiwiaXNTY3JvbGxQcmV2ZW50ZWQiLCJfdGFyZ2V0RWxlbWVudF9zY3JvbGxJbnRvVmlldyIsIm9yaWdpbmFsTGVmdCIsIm9yaWdpbmFsVG9wIiwic2Nyb2xsSW50b1ZpZXciLCJibG9jayIsIm5ld0xlZnQiLCJuZXdUb3AiLCJNYXRoIiwiYWJzIiwiX29wdHNfY29udGFpbmluZ0VsZW1lbnQiLCJfb3B0c19jb250YWluaW5nRWxlbWVudF9zY3JvbGxJbnRvVmlldyIsIl90YXJnZXRFbGVtZW50X3Njcm9sbEludG9WaWV3MSIsImNvbnRhaW5pbmdFbGVtZW50IiwiaW5saW5lIiwic2Nyb2xsUGFyZW50IiwiJDZhN2RiODU0MzI0NDhmN2YkZXhwb3J0JDYwMjc4ODcxNDU3NjIyZGUiLCJtb3pJbnB1dFNvdXJjZSIsImlzVHJ1c3RlZCIsInBvaW50ZXJUeXBlIiwiYnV0dG9ucyIsImRldGFpbCIsIiQ2YTdkYjg1NDMyNDQ4ZjdmJGV4cG9ydCQyOWJmMWI1ZjJjNTZjZjYzIiwicHJlc3N1cmUiLCIkNWEzODdjYzQ5MzUwZTZkYiRleHBvcnQkNzIyZGViYzBlNTZmZWEzOSIsImlzRXF1YWwiLCJsYXN0VmFsdWUiLCIkOTlmYWNhYjczMjY2ZjY2MiRleHBvcnQkNWFkZDFkMDA2MjkzZDEzNiIsImluaXRpYWxWYWx1ZSIsIm9uUmVzZXQiLCJyZXNldFZhbHVlIiwiaGFuZGxlUmVzZXQiLCJfcmVmX2N1cnJlbnQiLCJmb3JtIiwidXNlSWQiLCJtZXJnZUlkcyIsInVzZVNsb3RJZCIsImNoYWluIiwibWVyZ2VQcm9wcyIsIm1lcmdlUmVmcyIsImZpbHRlckRPTVByb3BzIiwiZm9jdXNXaXRob3V0U2Nyb2xsaW5nIiwiZ2V0T2Zmc2V0Iiwib3BlbkxpbmsiLCJnZXRTeW50aGV0aWNMaW5rUHJvcHMiLCJSb3V0ZXJQcm92aWRlciIsInNob3VsZENsaWVudE5hdmlnYXRlIiwidXNlUm91dGVyIiwicnVuQWZ0ZXJUcmFuc2l0aW9uIiwidXNlRHJhZzFEIiwidXNlR2xvYmFsTGlzdGVuZXJzIiwidXNlTGFiZWxzIiwidXNlT2JqZWN0UmVmIiwidXNlVXBkYXRlRWZmZWN0IiwidXNlUmVzaXplT2JzZXJ2ZXIiLCJ1c2VTeW5jUmVmIiwiZ2V0U2Nyb2xsUGFyZW50IiwiaXNTY3JvbGxhYmxlIiwidXNlVmlld3BvcnRTaXplIiwidXNlRGVzY3JpcHRpb24iLCJpc01hYyIsImlzSVBob25lIiwiaXNJUGFkIiwiaXNJT1MiLCJpc0FwcGxlRGV2aWNlIiwiaXNXZWJLaXQiLCJpc0Nocm9tZSIsImlzQW5kcm9pZCIsInVzZUV2ZW50IiwidXNlVmFsdWVFZmZlY3QiLCJzY3JvbGxJbnRvVmlld3BvcnQiLCJpc1ZpcnR1YWxDbGljayIsImlzVmlydHVhbFBvaW50ZXJFdmVudCIsInVzZUVmZmVjdEV2ZW50IiwidXNlRGVlcE1lbW8iLCJ1c2VGb3JtUmVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-aria/utils/dist/import.mjs\n");

/***/ })

};
;