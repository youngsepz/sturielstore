"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prism-react-renderer";
exports.ids = ["vendor-chunks/prism-react-renderer"];
exports.modules = {

/***/ "(ssr)/./node_modules/prism-react-renderer/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/prism-react-renderer/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Highlight: () => (/* binding */ Highlight2),\n/* harmony export */   Prism: () => (/* binding */ Prism),\n/* harmony export */   themes: () => (/* binding */ themes_exports)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.m.js\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// ../../node_modules/.pnpm/prismjs@1.29.0_patch_hash=vrxx3pzkik6jpmgpayxfjunetu/node_modules/prismjs/prism.js\nvar require_prism = __commonJS({\n    \"../../node_modules/.pnpm/prismjs@1.29.0_patch_hash=vrxx3pzkik6jpmgpayxfjunetu/node_modules/prismjs/prism.js\" (exports, module) {\n        var Prism2 = function() {\n            var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n            var uniqueId = 0;\n            var plainTextGrammar = {};\n            var _ = {\n                /**\n         * A namespace for utility methods.\n         *\n         * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n         * change or disappear at any time.\n         *\n         * @namespace\n         * @memberof Prism\n         */ util: {\n                    encode: function encode(tokens) {\n                        if (tokens instanceof Token) {\n                            return new Token(tokens.type, encode(tokens.content), tokens.alias);\n                        } else if (Array.isArray(tokens)) {\n                            return tokens.map(encode);\n                        } else {\n                            return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n                        }\n                    },\n                    /**\n           * Returns the name of the type of the given value.\n           *\n           * @param {any} o\n           * @returns {string}\n           * @example\n           * type(null)      === 'Null'\n           * type(undefined) === 'Undefined'\n           * type(123)       === 'Number'\n           * type('foo')     === 'String'\n           * type(true)      === 'Boolean'\n           * type([1, 2])    === 'Array'\n           * type({})        === 'Object'\n           * type(String)    === 'Function'\n           * type(/abc+/)    === 'RegExp'\n           */ type: function(o) {\n                        return Object.prototype.toString.call(o).slice(8, -1);\n                    },\n                    /**\n           * Returns a unique number for the given object. Later calls will still return the same number.\n           *\n           * @param {Object} obj\n           * @returns {number}\n           */ objId: function(obj) {\n                        if (!obj[\"__id\"]) {\n                            Object.defineProperty(obj, \"__id\", {\n                                value: ++uniqueId\n                            });\n                        }\n                        return obj[\"__id\"];\n                    },\n                    /**\n           * Creates a deep clone of the given object.\n           *\n           * The main intended use of this function is to clone language definitions.\n           *\n           * @param {T} o\n           * @param {Record<number, any>} [visited]\n           * @returns {T}\n           * @template T\n           */ clone: function deepClone(o, visited) {\n                        visited = visited || {};\n                        var clone;\n                        var id;\n                        switch(_.util.type(o)){\n                            case \"Object\":\n                                id = _.util.objId(o);\n                                if (visited[id]) {\n                                    return visited[id];\n                                }\n                                clone = /** @type {Record<string, any>} */ {};\n                                visited[id] = clone;\n                                for(var key in o){\n                                    if (o.hasOwnProperty(key)) {\n                                        clone[key] = deepClone(o[key], visited);\n                                    }\n                                }\n                                return /** @type {any} */ clone;\n                            case \"Array\":\n                                id = _.util.objId(o);\n                                if (visited[id]) {\n                                    return visited[id];\n                                }\n                                clone = [];\n                                visited[id] = clone;\n                                /** @type {Array} */ /** @type {any} */ o.forEach(function(v, i) {\n                                    clone[i] = deepClone(v, visited);\n                                });\n                                return /** @type {any} */ clone;\n                            default:\n                                return o;\n                        }\n                    },\n                    /**\n           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n           *\n           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n           *\n           * @param {Element} element\n           * @returns {string}\n           */ getLanguage: function(element) {\n                        while(element){\n                            var m = lang.exec(element.className);\n                            if (m) {\n                                return m[1].toLowerCase();\n                            }\n                            element = element.parentElement;\n                        }\n                        return \"none\";\n                    },\n                    /**\n           * Sets the Prism `language-xxxx` class of the given element.\n           *\n           * @param {Element} element\n           * @param {string} language\n           * @returns {void}\n           */ setLanguage: function(element, language) {\n                        element.className = element.className.replace(RegExp(lang, \"gi\"), \"\");\n                        element.classList.add(\"language-\" + language);\n                    },\n                    /**\n           * Returns whether a given class is active for `element`.\n           *\n           * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n           * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n           * given class is just the given class with a `no-` prefix.\n           *\n           * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n           * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n           * ancestors have the given class or the negated version of it, then the default activation will be returned.\n           *\n           * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n           * version of it, the class is considered active.\n           *\n           * @param {Element} element\n           * @param {string} className\n           * @param {boolean} [defaultActivation=false]\n           * @returns {boolean}\n           */ isActive: function(element, className, defaultActivation) {\n                        var no = \"no-\" + className;\n                        while(element){\n                            var classList = element.classList;\n                            if (classList.contains(className)) {\n                                return true;\n                            }\n                            if (classList.contains(no)) {\n                                return false;\n                            }\n                            element = element.parentElement;\n                        }\n                        return !!defaultActivation;\n                    }\n                },\n                /**\n         * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n         *\n         * @namespace\n         * @memberof Prism\n         * @public\n         */ languages: {\n                    /**\n           * The grammar for plain, unformatted text.\n           */ plain: plainTextGrammar,\n                    plaintext: plainTextGrammar,\n                    text: plainTextGrammar,\n                    txt: plainTextGrammar,\n                    /**\n           * Creates a deep copy of the language with the given id and appends the given tokens.\n           *\n           * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n           * will be overwritten at its original position.\n           *\n           * ## Best practices\n           *\n           * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n           * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n           * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n           *\n           * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n           * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n           *\n           * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n           * @param {Grammar} redef The new tokens to append.\n           * @returns {Grammar} The new language created.\n           * @public\n           * @example\n           * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n           *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n           *     // at its original position\n           *     'comment': { ... },\n           *     // CSS doesn't have a 'color' token, so this token will be appended\n           *     'color': /\\b(?:red|green|blue)\\b/\n           * });\n           */ extend: function(id, redef) {\n                        var lang2 = _.util.clone(_.languages[id]);\n                        for(var key in redef){\n                            lang2[key] = redef[key];\n                        }\n                        return lang2;\n                    },\n                    /**\n           * Inserts tokens _before_ another token in a language definition or any other grammar.\n           *\n           * ## Usage\n           *\n           * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n           * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n           * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n           * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n           * this:\n           *\n           * ```js\n           * Prism.languages.markup.style = {\n           *     // token\n           * };\n           * ```\n           *\n           * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n           * before existing tokens. For the CSS example above, you would use it like this:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'cdata', {\n           *     'style': {\n           *         // token\n           *     }\n           * });\n           * ```\n           *\n           * ## Special cases\n           *\n           * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n           * will be ignored.\n           *\n           * This behavior can be used to insert tokens after `before`:\n           *\n           * ```js\n           * Prism.languages.insertBefore('markup', 'comment', {\n           *     'comment': Prism.languages.markup.comment,\n           *     // tokens after 'comment'\n           * });\n           * ```\n           *\n           * ## Limitations\n           *\n           * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n           * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n           * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n           * deleting properties which is necessary to insert at arbitrary positions.\n           *\n           * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n           * Instead, it will create a new object and replace all references to the target object with the new one. This\n           * can be done without temporarily deleting properties, so the iteration order is well-defined.\n           *\n           * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n           * you hold the target object in a variable, then the value of the variable will not change.\n           *\n           * ```js\n           * var oldMarkup = Prism.languages.markup;\n           * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n           *\n           * assert(oldMarkup !== Prism.languages.markup);\n           * assert(newMarkup === Prism.languages.markup);\n           * ```\n           *\n           * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n           * object to be modified.\n           * @param {string} before The key to insert before.\n           * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n           * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n           * object to be modified.\n           *\n           * Defaults to `Prism.languages`.\n           * @returns {Grammar} The new grammar object.\n           * @public\n           */ insertBefore: function(inside, before, insert, root) {\n                        root = root || /** @type {any} */ _.languages;\n                        var grammar = root[inside];\n                        var ret = {};\n                        for(var token in grammar){\n                            if (grammar.hasOwnProperty(token)) {\n                                if (token == before) {\n                                    for(var newToken in insert){\n                                        if (insert.hasOwnProperty(newToken)) {\n                                            ret[newToken] = insert[newToken];\n                                        }\n                                    }\n                                }\n                                if (!insert.hasOwnProperty(token)) {\n                                    ret[token] = grammar[token];\n                                }\n                            }\n                        }\n                        var old = root[inside];\n                        root[inside] = ret;\n                        _.languages.DFS(_.languages, function(key, value) {\n                            if (value === old && key != inside) {\n                                this[key] = ret;\n                            }\n                        });\n                        return ret;\n                    },\n                    // Traverse a language definition with Depth First Search\n                    DFS: function DFS(o, callback, type, visited) {\n                        visited = visited || {};\n                        var objId = _.util.objId;\n                        for(var i in o){\n                            if (o.hasOwnProperty(i)) {\n                                callback.call(o, i, o[i], type || i);\n                                var property = o[i];\n                                var propertyType = _.util.type(property);\n                                if (propertyType === \"Object\" && !visited[objId(property)]) {\n                                    visited[objId(property)] = true;\n                                    DFS(property, callback, null, visited);\n                                } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n                                    visited[objId(property)] = true;\n                                    DFS(property, callback, i, visited);\n                                }\n                            }\n                        }\n                    }\n                },\n                plugins: {},\n                /**\n         * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n         * and the language definitions to use, and returns a string with the HTML produced.\n         *\n         * The following hooks will be run:\n         * 1. `before-tokenize`\n         * 2. `after-tokenize`\n         * 3. `wrap`: On each {@link Token}.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @param {string} language The name of the language definition passed to `grammar`.\n         * @returns {string} The highlighted HTML.\n         * @memberof Prism\n         * @public\n         * @example\n         * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n         */ highlight: function(text, grammar, language) {\n                    var env = {\n                        code: text,\n                        grammar,\n                        language\n                    };\n                    _.hooks.run(\"before-tokenize\", env);\n                    if (!env.grammar) {\n                        throw new Error('The language \"' + env.language + '\" has no grammar.');\n                    }\n                    env.tokens = _.tokenize(env.code, env.grammar);\n                    _.hooks.run(\"after-tokenize\", env);\n                    return Token.stringify(_.util.encode(env.tokens), env.language);\n                },\n                /**\n         * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n         * and the language definitions to use, and returns an array with the tokenized code.\n         *\n         * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n         *\n         * This method could be useful in other contexts as well, as a very crude parser.\n         *\n         * @param {string} text A string with the code to be highlighted.\n         * @param {Grammar} grammar An object containing the tokens to use.\n         *\n         * Usually a language definition like `Prism.languages.markup`.\n         * @returns {TokenStream} An array of strings and tokens, a token stream.\n         * @memberof Prism\n         * @public\n         * @example\n         * let code = `var foo = 0;`;\n         * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n         * tokens.forEach(token => {\n         *     if (token instanceof Prism.Token && token.type === 'number') {\n         *         console.log(`Found numeric literal: ${token.content}`);\n         *     }\n         * });\n         */ tokenize: function(text, grammar) {\n                    var rest = grammar.rest;\n                    if (rest) {\n                        for(var token in rest){\n                            grammar[token] = rest[token];\n                        }\n                        delete grammar.rest;\n                    }\n                    var tokenList = new LinkedList();\n                    addAfter(tokenList, tokenList.head, text);\n                    matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n                    return toArray(tokenList);\n                },\n                /**\n         * @namespace\n         * @memberof Prism\n         * @public\n         */ hooks: {\n                    all: {},\n                    /**\n           * Adds the given callback to the list of callbacks for the given hook.\n           *\n           * The callback will be invoked when the hook it is registered for is run.\n           * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n           *\n           * One callback function can be registered to multiple hooks and the same hook multiple times.\n           *\n           * @param {string} name The name of the hook.\n           * @param {HookCallback} callback The callback function which is given environment variables.\n           * @public\n           */ add: function(name, callback) {\n                        var hooks2 = _.hooks.all;\n                        hooks2[name] = hooks2[name] || [];\n                        hooks2[name].push(callback);\n                    },\n                    /**\n           * Runs a hook invoking all registered callbacks with the given environment variables.\n           *\n           * Callbacks will be invoked synchronously and in the order in which they were registered.\n           *\n           * @param {string} name The name of the hook.\n           * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n           * @public\n           */ run: function(name, env) {\n                        var callbacks = _.hooks.all[name];\n                        if (!callbacks || !callbacks.length) {\n                            return;\n                        }\n                        for(var i = 0, callback; callback = callbacks[i++];){\n                            callback(env);\n                        }\n                    }\n                },\n                Token\n            };\n            function Token(type, content, alias, matchedStr) {\n                this.type = type;\n                this.content = content;\n                this.alias = alias;\n                this.length = (matchedStr || \"\").length | 0;\n            }\n            Token.stringify = function stringify(o, language) {\n                if (typeof o == \"string\") {\n                    return o;\n                }\n                if (Array.isArray(o)) {\n                    var s = \"\";\n                    o.forEach(function(e) {\n                        s += stringify(e, language);\n                    });\n                    return s;\n                }\n                var env = {\n                    type: o.type,\n                    content: stringify(o.content, language),\n                    tag: \"span\",\n                    classes: [\n                        \"token\",\n                        o.type\n                    ],\n                    attributes: {},\n                    language\n                };\n                var aliases = o.alias;\n                if (aliases) {\n                    if (Array.isArray(aliases)) {\n                        Array.prototype.push.apply(env.classes, aliases);\n                    } else {\n                        env.classes.push(aliases);\n                    }\n                }\n                _.hooks.run(\"wrap\", env);\n                var attributes = \"\";\n                for(var name in env.attributes){\n                    attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n                }\n                return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n            };\n            function matchPattern(pattern, pos, text, lookbehind) {\n                pattern.lastIndex = pos;\n                var match = pattern.exec(text);\n                if (match && lookbehind && match[1]) {\n                    var lookbehindLength = match[1].length;\n                    match.index += lookbehindLength;\n                    match[0] = match[0].slice(lookbehindLength);\n                }\n                return match;\n            }\n            function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n                for(var token in grammar){\n                    if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n                        continue;\n                    }\n                    var patterns = grammar[token];\n                    patterns = Array.isArray(patterns) ? patterns : [\n                        patterns\n                    ];\n                    for(var j = 0; j < patterns.length; ++j){\n                        if (rematch && rematch.cause == token + \",\" + j) {\n                            return;\n                        }\n                        var patternObj = patterns[j];\n                        var inside = patternObj.inside;\n                        var lookbehind = !!patternObj.lookbehind;\n                        var greedy = !!patternObj.greedy;\n                        var alias = patternObj.alias;\n                        if (greedy && !patternObj.pattern.global) {\n                            var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n                            patternObj.pattern = RegExp(patternObj.pattern.source, flags + \"g\");\n                        }\n                        var pattern = patternObj.pattern || patternObj;\n                        for(var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next){\n                            if (rematch && pos >= rematch.reach) {\n                                break;\n                            }\n                            var str = currentNode.value;\n                            if (tokenList.length > text.length) {\n                                return;\n                            }\n                            if (str instanceof Token) {\n                                continue;\n                            }\n                            var removeCount = 1;\n                            var match;\n                            if (greedy) {\n                                match = matchPattern(pattern, pos, text, lookbehind);\n                                if (!match || match.index >= text.length) {\n                                    break;\n                                }\n                                var from = match.index;\n                                var to = match.index + match[0].length;\n                                var p = pos;\n                                p += currentNode.value.length;\n                                while(from >= p){\n                                    currentNode = currentNode.next;\n                                    p += currentNode.value.length;\n                                }\n                                p -= currentNode.value.length;\n                                pos = p;\n                                if (currentNode.value instanceof Token) {\n                                    continue;\n                                }\n                                for(var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\"); k = k.next){\n                                    removeCount++;\n                                    p += k.value.length;\n                                }\n                                removeCount--;\n                                str = text.slice(pos, p);\n                                match.index -= pos;\n                            } else {\n                                match = matchPattern(pattern, 0, str, lookbehind);\n                                if (!match) {\n                                    continue;\n                                }\n                            }\n                            var from = match.index;\n                            var matchStr = match[0];\n                            var before = str.slice(0, from);\n                            var after = str.slice(from + matchStr.length);\n                            var reach = pos + str.length;\n                            if (rematch && reach > rematch.reach) {\n                                rematch.reach = reach;\n                            }\n                            var removeFrom = currentNode.prev;\n                            if (before) {\n                                removeFrom = addAfter(tokenList, removeFrom, before);\n                                pos += before.length;\n                            }\n                            removeRange(tokenList, removeFrom, removeCount);\n                            var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n                            currentNode = addAfter(tokenList, removeFrom, wrapped);\n                            if (after) {\n                                addAfter(tokenList, currentNode, after);\n                            }\n                            if (removeCount > 1) {\n                                var nestedRematch = {\n                                    cause: token + \",\" + j,\n                                    reach\n                                };\n                                matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n                                if (rematch && nestedRematch.reach > rematch.reach) {\n                                    rematch.reach = nestedRematch.reach;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            function LinkedList() {\n                var head = {\n                    value: null,\n                    prev: null,\n                    next: null\n                };\n                var tail = {\n                    value: null,\n                    prev: head,\n                    next: null\n                };\n                head.next = tail;\n                this.head = head;\n                this.tail = tail;\n                this.length = 0;\n            }\n            function addAfter(list, node, value) {\n                var next = node.next;\n                var newNode = {\n                    value,\n                    prev: node,\n                    next\n                };\n                node.next = newNode;\n                next.prev = newNode;\n                list.length++;\n                return newNode;\n            }\n            function removeRange(list, node, count) {\n                var next = node.next;\n                for(var i = 0; i < count && next !== list.tail; i++){\n                    next = next.next;\n                }\n                node.next = next;\n                next.prev = node;\n                list.length -= i;\n            }\n            function toArray(list) {\n                var array = [];\n                var node = list.head.next;\n                while(node !== list.tail){\n                    array.push(node.value);\n                    node = node.next;\n                }\n                return array;\n            }\n            return _;\n        }();\n        module.exports = Prism2;\n        Prism2.default = Prism2;\n    }\n});\n// src/prism-langs.ts\nvar Prism = __toESM(require_prism());\n!function(e) {\n    var n = {\n        pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n        alias: \"escape\"\n    }, t = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/, a = \"(?:[^\\\\\\\\-]|\" + t.source + \")\", a = RegExp(a + \"-\" + a), r = {\n        pattern: /(<|')[^<>']+(?=[>']$)/,\n        lookbehind: true,\n        alias: \"variable\"\n    };\n    e.languages.regex = {\n        \"char-class\": {\n            pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n            lookbehind: true,\n            inside: {\n                \"char-class-negation\": {\n                    pattern: /(^\\[)\\^/,\n                    lookbehind: true,\n                    alias: \"operator\"\n                },\n                \"char-class-punctuation\": {\n                    pattern: /^\\[|\\]$/,\n                    alias: \"punctuation\"\n                },\n                range: {\n                    pattern: a,\n                    inside: {\n                        escape: t,\n                        \"range-punctuation\": {\n                            pattern: /-/,\n                            alias: \"operator\"\n                        }\n                    }\n                },\n                \"special-escape\": n,\n                \"char-set\": {\n                    pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n                    alias: \"class-name\"\n                },\n                escape: t\n            }\n        },\n        \"special-escape\": n,\n        \"char-set\": {\n            pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n            alias: \"class-name\"\n        },\n        backreference: [\n            {\n                pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n                alias: \"keyword\"\n            },\n            {\n                pattern: /\\\\k<[^<>']+>/,\n                alias: \"keyword\",\n                inside: {\n                    \"group-name\": r\n                }\n            }\n        ],\n        anchor: {\n            pattern: /[$^]|\\\\[ABbGZz]/,\n            alias: \"function\"\n        },\n        escape: t,\n        group: [\n            {\n                pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n                alias: \"punctuation\",\n                inside: {\n                    \"group-name\": r\n                }\n            },\n            {\n                pattern: /\\)/,\n                alias: \"punctuation\"\n            }\n        ],\n        quantifier: {\n            pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n            alias: \"number\"\n        },\n        alternation: {\n            pattern: /\\|/,\n            alias: \"keyword\"\n        }\n    };\n}(Prism), Prism.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: true,\n            greedy: true\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: true,\n            greedy: true\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        Prism.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n            lookbehind: true\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|\\})\\s*)catch\\b/,\n            lookbehind: true\n        },\n        {\n            pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: true\n        }\n    ],\n    function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    number: {\n        pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + /NaN|Infinity/.source + \"|\" + /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + /\\d+(?:_\\d+)*n/.source + \"|\" + /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source + \")\" + /(?![\\w$])/.source),\n        lookbehind: true\n    },\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n}), Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/, Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: RegExp(/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source + /\\//.source + \"(?:\" + /(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source + \"|\" + /(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + \")\" + /(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: true,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    },\n    \"function-variable\": {\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n}), Prism.languages.insertBefore(\"javascript\", \"string\", {\n    hashbang: {\n        pattern: /^#!.*/,\n        greedy: true,\n        alias: \"comment\"\n    },\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: true,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.javascript\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    \"string-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\"\n    }\n}), Prism.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n        lookbehind: true,\n        alias: \"property\"\n    }\n}), Prism.languages.markup && (Prism.languages.markup.tag.addInlined(\"script\", \"javascript\"), Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\")), Prism.languages.js = Prism.languages.javascript, Prism.languages.actionscript = Prism.languages.extend(\"javascript\", {\n    keyword: /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n}), Prism.languages.actionscript[\"class-name\"].alias = \"function\", delete Prism.languages.actionscript.parameter, delete Prism.languages.actionscript[\"literal-property\"], Prism.languages.markup && Prism.languages.insertBefore(\"actionscript\", \"string\", {\n    xml: {\n        pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n    }\n}), function(e) {\n    var n = /#(?!\\{).+/, t = {\n        pattern: /#\\{[^}]+\\}/,\n        alias: \"variable\"\n    };\n    e.languages.coffeescript = e.languages.extend(\"javascript\", {\n        comment: n,\n        string: [\n            {\n                pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n                greedy: true\n            },\n            {\n                pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                greedy: true,\n                inside: {\n                    interpolation: t\n                }\n            }\n        ],\n        keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n        \"class-member\": {\n            pattern: /@(?!\\d)\\w+/,\n            alias: \"variable\"\n        }\n    }), e.languages.insertBefore(\"coffeescript\", \"comment\", {\n        \"multiline-comment\": {\n            pattern: /###[\\s\\S]+?###/,\n            alias: \"comment\"\n        },\n        \"block-regex\": {\n            pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n            alias: \"regex\",\n            inside: {\n                comment: n,\n                interpolation: t\n            }\n        }\n    }), e.languages.insertBefore(\"coffeescript\", \"string\", {\n        \"inline-javascript\": {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            inside: {\n                delimiter: {\n                    pattern: /^`|`$/,\n                    alias: \"punctuation\"\n                },\n                script: {\n                    pattern: /[\\s\\S]+/,\n                    alias: \"language-javascript\",\n                    inside: e.languages.javascript\n                }\n            }\n        },\n        \"multiline-string\": [\n            {\n                pattern: /'''[\\s\\S]*?'''/,\n                greedy: true,\n                alias: \"string\"\n            },\n            {\n                pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n                greedy: true,\n                alias: \"string\",\n                inside: {\n                    interpolation: t\n                }\n            }\n        ]\n    }), e.languages.insertBefore(\"coffeescript\", \"keyword\", {\n        property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    }), delete e.languages.coffeescript[\"template-string\"], e.languages.coffee = e.languages.coffeescript;\n}(Prism), function(l) {\n    var e = l.languages.javadoclike = {\n        parameter: {\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n            lookbehind: true\n        },\n        keyword: {\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n            lookbehind: true\n        },\n        punctuation: /[{}]/\n    };\n    Object.defineProperty(e, \"addSupport\", {\n        value: function(e2, o) {\n            (e2 = \"string\" == typeof e2 ? [\n                e2\n            ] : e2).forEach(function(e3) {\n                var n = function(e4) {\n                    e4.inside || (e4.inside = {}), e4.inside.rest = o;\n                }, t = \"doc-comment\";\n                if (a = l.languages[e3]) {\n                    var a, r = a[t];\n                    if ((r = r ? r : (a = l.languages.insertBefore(e3, \"comment\", {\n                        \"doc-comment\": {\n                            pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n                            lookbehind: true,\n                            alias: \"comment\"\n                        }\n                    }))[t]) instanceof RegExp && (r = a[t] = {\n                        pattern: r\n                    }), Array.isArray(r)) for(var s = 0, i = r.length; s < i; s++)r[s] instanceof RegExp && (r[s] = {\n                        pattern: r[s]\n                    }), n(r[s]);\n                    else n(r);\n                }\n            });\n        }\n    }), e.addSupport([\n        \"java\",\n        \"javascript\",\n        \"php\"\n    ], e);\n}(Prism), function(e) {\n    var n = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/, n = (e.languages.css = {\n        comment: /\\/\\*[\\s\\S]*?\\*\\//,\n        atrule: {\n            pattern: RegExp(\"@[\\\\w-](?:\" + /[^;{\\s\"']|\\s+(?!\\s)/.source + \"|\" + n.source + \")*?\" + /(?:;|(?=\\s*\\{))/.source),\n            inside: {\n                rule: /^@[\\w-]+/,\n                \"selector-function-argument\": {\n                    pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                    lookbehind: true,\n                    alias: \"selector\"\n                },\n                keyword: {\n                    pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                    lookbehind: true\n                }\n            }\n        },\n        url: {\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + n.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n            greedy: true,\n            inside: {\n                function: /^url/i,\n                punctuation: /^\\(|\\)$/,\n                string: {\n                    pattern: RegExp(\"^\" + n.source + \"$\"),\n                    alias: \"url\"\n                }\n            }\n        },\n        selector: {\n            pattern: RegExp(`(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"'\\\\s]|\\\\s+(?![\\\\s{])|` + n.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: true\n        },\n        string: {\n            pattern: n,\n            greedy: true\n        },\n        property: {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: true\n        },\n        important: /!important\\b/i,\n        function: {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: true\n        },\n        punctuation: /[(){};:,]/\n    }, e.languages.css.atrule.inside.rest = e.languages.css, e.languages.markup);\n    n && (n.tag.addInlined(\"style\", \"css\"), n.tag.addAttribute(\"style\", \"css\"));\n}(Prism), function(e) {\n    var n = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, n = (e.languages.css.selector = {\n        pattern: e.languages.css.selector.pattern,\n        lookbehind: true,\n        inside: n = {\n            \"pseudo-element\": /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n            \"pseudo-class\": /:[-\\w]+/,\n            class: /\\.[-\\w]+/,\n            id: /#[-\\w]+/,\n            attribute: {\n                pattern: RegExp(`\\\\[(?:[^[\\\\]\"']|` + n.source + \")*\\\\]\"),\n                greedy: true,\n                inside: {\n                    punctuation: /^\\[|\\]$/,\n                    \"case-sensitivity\": {\n                        pattern: /(\\s)[si]$/i,\n                        lookbehind: true,\n                        alias: \"keyword\"\n                    },\n                    namespace: {\n                        pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n                        lookbehind: true,\n                        inside: {\n                            punctuation: /\\|$/\n                        }\n                    },\n                    \"attr-name\": {\n                        pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n                        lookbehind: true\n                    },\n                    \"attr-value\": [\n                        n,\n                        {\n                            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                            lookbehind: true\n                        }\n                    ],\n                    operator: /[|~*^$]?=/\n                }\n            },\n            \"n-th\": [\n                {\n                    pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n                    lookbehind: true,\n                    inside: {\n                        number: /[\\dn]+/,\n                        operator: /[+-]/\n                    }\n                },\n                {\n                    pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n                    lookbehind: true\n                }\n            ],\n            combinator: />|\\+|~|\\|\\|/,\n            punctuation: /[(),]/\n        }\n    }, e.languages.css.atrule.inside[\"selector-function-argument\"].inside = n, e.languages.insertBefore(\"css\", \"property\", {\n        variable: {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n            lookbehind: true\n        }\n    }), {\n        pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n        lookbehind: true\n    }), t = {\n        pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n        lookbehind: true\n    };\n    e.languages.insertBefore(\"css\", \"function\", {\n        operator: {\n            pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n            lookbehind: true\n        },\n        hexcode: {\n            pattern: /\\B#[\\da-f]{3,8}\\b/i,\n            alias: \"color\"\n        },\n        color: [\n            {\n                pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n                lookbehind: true\n            },\n            {\n                pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n                inside: {\n                    unit: n,\n                    number: t,\n                    function: /[\\w-]+(?=\\()/,\n                    punctuation: /[(),]/\n                }\n            }\n        ],\n        entity: /\\\\[\\da-f]{1,8}/i,\n        unit: n,\n        number: t\n    });\n}(Prism), function(e) {\n    var n = /[*&][^\\s[\\]{},]+/, t = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/, a = \"(?:\" + t.source + \"(?:[ \t]+\" + n.source + \")?|\" + n.source + \"(?:[ \t]+\" + t.source + \")?)\", r = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function() {\n        return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n    }), s = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n    function i(e2, n2) {\n        n2 = (n2 || \"\").replace(/m/g, \"\") + \"m\";\n        var t2 = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function() {\n            return a;\n        }).replace(/<<value>>/g, function() {\n            return e2;\n        });\n        return RegExp(t2, n2);\n    }\n    e.languages.yaml = {\n        scalar: {\n            pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function() {\n                return a;\n            })),\n            lookbehind: true,\n            alias: \"string\"\n        },\n        comment: /#.*/,\n        key: {\n            pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function() {\n                return a;\n            }).replace(/<<key>>/g, function() {\n                return \"(?:\" + r + \"|\" + s + \")\";\n            })),\n            lookbehind: true,\n            greedy: true,\n            alias: \"atrule\"\n        },\n        directive: {\n            pattern: /(^[ \\t]*)%.+/m,\n            lookbehind: true,\n            alias: \"important\"\n        },\n        datetime: {\n            pattern: i(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n            lookbehind: true,\n            alias: \"number\"\n        },\n        boolean: {\n            pattern: i(/false|true/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        null: {\n            pattern: i(/null|~/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        string: {\n            pattern: i(s),\n            lookbehind: true,\n            greedy: true\n        },\n        number: {\n            pattern: i(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, \"i\"),\n            lookbehind: true\n        },\n        tag: t,\n        important: n,\n        punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    }, e.languages.yml = e.languages.yaml;\n}(Prism), Prism.languages.markup = {\n    comment: {\n        pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n        greedy: true\n    },\n    prolog: {\n        pattern: /<\\?[\\s\\S]+?\\?>/,\n        greedy: true\n    },\n    doctype: {\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n        greedy: true,\n        inside: {\n            \"internal-subset\": {\n                pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                lookbehind: true,\n                greedy: true,\n                inside: null\n            },\n            string: {\n                pattern: /\"[^\"]*\"|'[^']*'/,\n                greedy: true\n            },\n            punctuation: /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            name: /[^\\s<>'\"]+/\n        }\n    },\n    cdata: {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        greedy: true\n    },\n    tag: {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n        greedy: true,\n        inside: {\n            tag: {\n                pattern: /^<\\/?[^\\s>\\/]+/,\n                inside: {\n                    punctuation: /^<\\/?/,\n                    namespace: /^[^\\s>\\/:]+:/\n                }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                inside: {\n                    punctuation: [\n                        {\n                            pattern: /^=/,\n                            alias: \"attr-equals\"\n                        },\n                        {\n                            pattern: /^(\\s*)[\"']|[\"']$/,\n                            lookbehind: true\n                        }\n                    ]\n                }\n            },\n            punctuation: /\\/?>/,\n            \"attr-name\": {\n                pattern: /[^\\s>\\/]+/,\n                inside: {\n                    namespace: /^[^\\s>\\/:]+:/\n                }\n            }\n        }\n    },\n    entity: [\n        {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n        },\n        /&#x?[\\da-f]{1,8};/i\n    ]\n}, Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity = Prism.languages.markup.entity, Prism.languages.markup.doctype.inside[\"internal-subset\"].inside = Prism.languages.markup, Prism.hooks.add(\"wrap\", function(e) {\n    \"entity\" === e.type && (e.attributes.title = e.content.replace(/&amp;/, \"&\"));\n}), Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n    value: function(e, n) {\n        var t = {}, t = (t[\"language-\" + n] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: true,\n            inside: Prism.languages[n]\n        }, t.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i, {\n            \"included-cdata\": {\n                pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                inside: t\n            }\n        }), n = (t[\"language-\" + n] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[n]\n        }, {});\n        n[e] = {\n            pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                return e;\n            }), \"i\"),\n            lookbehind: true,\n            greedy: true,\n            inside: t\n        }, Prism.languages.insertBefore(\"markup\", \"cdata\", n);\n    }\n}), Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n    value: function(e, n) {\n        Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + e + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n            lookbehind: true,\n            inside: {\n                \"attr-name\": /^[^\\s=]+/,\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        value: {\n                            pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                            lookbehind: true,\n                            alias: [\n                                n,\n                                \"language-\" + n\n                            ],\n                            inside: Prism.languages[n]\n                        },\n                        punctuation: [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                }\n            }\n        });\n    }\n}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup, Prism.languages.xml = Prism.languages.extend(\"markup\", {}), Prism.languages.ssml = Prism.languages.xml, Prism.languages.atom = Prism.languages.xml, Prism.languages.rss = Prism.languages.xml, function(o) {\n    var n = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    function e(e2) {\n        return e2 = e2.replace(/<inner>/g, function() {\n            return n;\n        }), RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + \"(?:\" + e2 + \")\");\n    }\n    var t = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source, a = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function() {\n        return t;\n    }), r = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source, l = (o.languages.markdown = o.languages.extend(\"markup\", {}), o.languages.insertBefore(\"markdown\", \"prolog\", {\n        \"front-matter-block\": {\n            pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                punctuation: /^---|---$/,\n                \"front-matter\": {\n                    pattern: /\\S+(?:\\s+\\S+)*/,\n                    alias: [\n                        \"yaml\",\n                        \"language-yaml\"\n                    ],\n                    inside: o.languages.yaml\n                }\n            }\n        },\n        blockquote: {\n            pattern: /^>(?:[\\t ]*>)*/m,\n            alias: \"punctuation\"\n        },\n        table: {\n            pattern: RegExp(\"^\" + a + r + \"(?:\" + a + \")*\", \"m\"),\n            inside: {\n                \"table-data-rows\": {\n                    pattern: RegExp(\"^(\" + a + r + \")(?:\" + a + \")*$\"),\n                    lookbehind: true,\n                    inside: {\n                        \"table-data\": {\n                            pattern: RegExp(t),\n                            inside: o.languages.markdown\n                        },\n                        punctuation: /\\|/\n                    }\n                },\n                \"table-line\": {\n                    pattern: RegExp(\"^(\" + a + \")\" + r + \"$\"),\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\||:?-{3,}:?/\n                    }\n                },\n                \"table-header-row\": {\n                    pattern: RegExp(\"^\" + a + \"$\"),\n                    inside: {\n                        \"table-header\": {\n                            pattern: RegExp(t),\n                            alias: \"important\",\n                            inside: o.languages.markdown\n                        },\n                        punctuation: /\\|/\n                    }\n                }\n            }\n        },\n        code: [\n            {\n                pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            {\n                pattern: /^```[\\s\\S]*?^```$/m,\n                greedy: true,\n                inside: {\n                    \"code-block\": {\n                        pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n                        lookbehind: true\n                    },\n                    \"code-language\": {\n                        pattern: /^(```).+/,\n                        lookbehind: true\n                    },\n                    punctuation: /```/\n                }\n            }\n        ],\n        title: [\n            {\n                pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n                alias: \"important\",\n                inside: {\n                    punctuation: /==+$|--+$/\n                }\n            },\n            {\n                pattern: /(^\\s*)#.+/m,\n                lookbehind: true,\n                alias: \"important\",\n                inside: {\n                    punctuation: /^#+|#+$/\n                }\n            }\n        ],\n        hr: {\n            pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        list: {\n            pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"url-reference\": {\n            pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n            inside: {\n                variable: {\n                    pattern: /^(!?\\[)[^\\]]+/,\n                    lookbehind: true\n                },\n                string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n                punctuation: /^[\\[\\]!:]|[<>]/\n            },\n            alias: \"url\"\n        },\n        bold: {\n            pattern: e(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                content: {\n                    pattern: /(^..)[\\s\\S]+(?=..$)/,\n                    lookbehind: true,\n                    inside: {}\n                },\n                punctuation: /\\*\\*|__/\n            }\n        },\n        italic: {\n            pattern: e(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                content: {\n                    pattern: /(^.)[\\s\\S]+(?=.$)/,\n                    lookbehind: true,\n                    inside: {}\n                },\n                punctuation: /[*_]/\n            }\n        },\n        strike: {\n            pattern: e(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                content: {\n                    pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n                    lookbehind: true,\n                    inside: {}\n                },\n                punctuation: /~~?/\n            }\n        },\n        \"code-snippet\": {\n            pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n            lookbehind: true,\n            greedy: true,\n            alias: [\n                \"code\",\n                \"keyword\"\n            ]\n        },\n        url: {\n            pattern: e(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                operator: /^!/,\n                content: {\n                    pattern: /(^\\[)[^\\]]+(?=\\])/,\n                    lookbehind: true,\n                    inside: {}\n                },\n                variable: {\n                    pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n                    lookbehind: true\n                },\n                url: {\n                    pattern: /(^\\]\\()[^\\s)]+/,\n                    lookbehind: true\n                },\n                string: {\n                    pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n                    lookbehind: true\n                }\n            }\n        }\n    }), [\n        \"url\",\n        \"bold\",\n        \"italic\",\n        \"strike\"\n    ].forEach(function(n2) {\n        [\n            \"url\",\n            \"bold\",\n            \"italic\",\n            \"strike\",\n            \"code-snippet\"\n        ].forEach(function(e2) {\n            n2 !== e2 && (o.languages.markdown[n2].inside.content.inside[e2] = o.languages.markdown[e2]);\n        });\n    }), o.hooks.add(\"after-tokenize\", function(e2) {\n        \"markdown\" !== e2.language && \"md\" !== e2.language || !function e3(n2) {\n            if (n2 && \"string\" != typeof n2) for(var t2 = 0, a2 = n2.length; t2 < a2; t2++){\n                var r2, s = n2[t2];\n                \"code\" !== s.type ? e3(s.content) : (r2 = s.content[1], s = s.content[3], r2 && s && \"code-language\" === r2.type && \"code-block\" === s.type && \"string\" == typeof r2.content && (r2 = r2.content.replace(/\\b#/g, \"sharp\").replace(/\\b\\+\\+/g, \"pp\"), r2 = \"language-\" + (r2 = (/[a-z][\\w-]*/i.exec(r2) || [\n                    \"\"\n                ])[0].toLowerCase()), s.alias ? \"string\" == typeof s.alias ? s.alias = [\n                    s.alias,\n                    r2\n                ] : s.alias.push(r2) : s.alias = [\n                    r2\n                ]));\n            }\n        }(e2.tokens);\n    }), o.hooks.add(\"wrap\", function(e2) {\n        if (\"code-block\" === e2.type) {\n            for(var n2 = \"\", t2 = 0, a2 = e2.classes.length; t2 < a2; t2++){\n                var r2 = e2.classes[t2], r2 = /language-(.+)/.exec(r2);\n                if (r2) {\n                    n2 = r2[1];\n                    break;\n                }\n            }\n            var s, i = o.languages[n2];\n            i ? e2.content = o.highlight(function(e3) {\n                e3 = e3.replace(l, \"\");\n                return e3 = e3.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function(e4, n3) {\n                    var t3;\n                    return \"#\" === (n3 = n3.toLowerCase())[0] ? (t3 = \"x\" === n3[1] ? parseInt(n3.slice(2), 16) : Number(n3.slice(1)), c(t3)) : u[n3] || e4;\n                });\n            }(e2.content), i, n2) : n2 && \"none\" !== n2 && o.plugins.autoloader && (s = \"md-\" + /* @__PURE__ */ new Date().valueOf() + \"-\" + Math.floor(1e16 * Math.random()), e2.attributes.id = s, o.plugins.autoloader.loadLanguages(n2, function() {\n                var e3 = document.getElementById(s);\n                e3 && (e3.innerHTML = o.highlight(e3.textContent, o.languages[n2], n2));\n            }));\n        }\n    }), RegExp(o.languages.markup.tag.pattern.source, \"gi\")), u = {\n        amp: \"&\",\n        lt: \"<\",\n        gt: \">\",\n        quot: '\"'\n    }, c = String.fromCodePoint || String.fromCharCode;\n    o.languages.md = o.languages.markdown;\n}(Prism), Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n        pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n        greedy: true,\n        alias: \"string\",\n        inside: {\n            \"language-markdown\": {\n                pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n                lookbehind: true,\n                inside: Prism.languages.markdown\n            }\n        }\n    },\n    string: {\n        pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n        pattern: /@[a-z_]\\w*/i,\n        alias: \"function\"\n    },\n    \"attr-name\": {\n        pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n        greedy: true\n    },\n    \"atom-input\": {\n        pattern: /\\b[A-Z]\\w*Input\\b/,\n        alias: \"class-name\"\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    \"class-name\": {\n        pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n        lookbehind: true\n    },\n    fragment: {\n        pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"definition-mutation\": {\n        pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"definition-query\": {\n        pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    \"property-query\": /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n}, Prism.hooks.add(\"after-tokenize\", function(e) {\n    if (\"graphql\" === e.language) for(var i = e.tokens.filter(function(e2) {\n        return \"string\" != typeof e2 && \"comment\" !== e2.type && \"scalar\" !== e2.type;\n    }), o = 0; o < i.length;){\n        var n = i[o++];\n        if (\"keyword\" === n.type && \"mutation\" === n.content) {\n            var t = [];\n            if (p([\n                \"definition-mutation\",\n                \"punctuation\"\n            ]) && \"(\" === c(1).content) {\n                o += 2;\n                var a = d(/^\\($/, /^\\)$/);\n                if (-1 === a) continue;\n                for(; o < a; o++){\n                    var r = c(0);\n                    \"variable\" === r.type && (g(r, \"variable-input\"), t.push(r.content));\n                }\n                o = a + 1;\n            }\n            if (p([\n                \"punctuation\",\n                \"property-query\"\n            ]) && \"{\" === c(0).content && (o++, g(c(0), \"property-mutation\"), 0 < t.length)) {\n                var s = d(/^\\{$/, /^\\}$/);\n                if (-1 !== s) for(var l = o; l < s; l++){\n                    var u = i[l];\n                    \"variable\" === u.type && 0 <= t.indexOf(u.content) && g(u, \"variable-input\");\n                }\n            }\n        }\n    }\n    function c(e2) {\n        return i[o + e2];\n    }\n    function p(e2, n2) {\n        n2 = n2 || 0;\n        for(var t2 = 0; t2 < e2.length; t2++){\n            var a2 = c(t2 + n2);\n            if (!a2 || a2.type !== e2[t2]) return;\n        }\n        return 1;\n    }\n    function d(e2, n2) {\n        for(var t2 = 1, a2 = o; a2 < i.length; a2++){\n            var r2 = i[a2], s2 = r2.content;\n            if (\"punctuation\" === r2.type && \"string\" == typeof s2) {\n                if (e2.test(s2)) t2++;\n                else if (n2.test(s2) && 0 === --t2) return a2;\n            }\n        }\n        return -1;\n    }\n    function g(e2, n2) {\n        var t2 = e2.alias;\n        t2 ? Array.isArray(t2) || (e2.alias = t2 = [\n            t2\n        ]) : e2.alias = t2 = [], t2.push(n2);\n    }\n}), Prism.languages.sql = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: true\n    },\n    variable: [\n        {\n            pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n            greedy: true\n        },\n        /@[\\w.$]+/\n    ],\n    string: {\n        pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: true,\n        lookbehind: true\n    },\n    identifier: {\n        pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n            punctuation: /^`|`$/\n        }\n    },\n    function: /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    keyword: /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    boolean: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator: /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    punctuation: /[;[\\]()`,.]/\n}, function(b) {\n    var e = b.languages.javascript[\"template-string\"], t = e.pattern.source, m = e.inside.interpolation, f = m.inside[\"interpolation-punctuation\"], s = m.pattern.source;\n    function n(e2, n2) {\n        if (b.languages[e2]) return {\n            pattern: RegExp(\"((?:\" + n2 + \")\\\\s*)\" + t),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                \"embedded-code\": {\n                    pattern: /[\\s\\S]+/,\n                    alias: e2\n                }\n            }\n        };\n    }\n    function h(e2, n2, t2) {\n        e2 = {\n            code: e2,\n            grammar: n2,\n            language: t2\n        };\n        return b.hooks.run(\"before-tokenize\", e2), e2.tokens = b.tokenize(e2.code, e2.grammar), b.hooks.run(\"after-tokenize\", e2), e2.tokens;\n    }\n    function l(a2, e2, r) {\n        var n2 = b.tokenize(a2, {\n            interpolation: {\n                pattern: RegExp(s),\n                lookbehind: true\n            }\n        }), p = 0, d = {}, n2 = h(n2.map(function(e3) {\n            if (\"string\" == typeof e3) return e3;\n            for(var n3, t2, e3 = e3.content; -1 !== a2.indexOf((t2 = p++, n3 = \"___\" + r.toUpperCase() + \"_\" + t2 + \"___\")););\n            return d[n3] = e3, n3;\n        }).join(\"\"), e2, r), g = Object.keys(d);\n        return p = 0, function e3(n3) {\n            for(var t2 = 0; t2 < n3.length; t2++){\n                if (p >= g.length) return;\n                var a3, r2, s2, i, o, l2, u2, c = n3[t2];\n                \"string\" == typeof c || \"string\" == typeof c.content ? (a3 = g[p], -1 !== (u2 = (l2 = \"string\" == typeof c ? c : c.content).indexOf(a3)) && (++p, r2 = l2.substring(0, u2), o = d[a3], s2 = void 0, (i = {})[\"interpolation-punctuation\"] = f, 3 === (i = b.tokenize(o, i)).length && ((s2 = [\n                    1,\n                    1\n                ]).push.apply(s2, h(i[1], b.languages.javascript, \"javascript\")), i.splice.apply(i, s2)), s2 = new b.Token(\"interpolation\", i, m.alias, o), i = l2.substring(u2 + a3.length), o = [], r2 && o.push(r2), o.push(s2), i && (e3(l2 = [\n                    i\n                ]), o.push.apply(o, l2)), \"string\" == typeof c ? (n3.splice.apply(n3, [\n                    t2,\n                    1\n                ].concat(o)), t2 += o.length - 1) : c.content = o)) : (u2 = c.content, Array.isArray(u2) ? e3(u2) : e3([\n                    u2\n                ]));\n            }\n        }(n2), new b.Token(r, n2, \"language-\" + r, a2);\n    }\n    b.languages.javascript[\"template-string\"] = [\n        n(\"css\", /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n        n(\"html\", /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n        n(\"svg\", /\\bsvg/.source),\n        n(\"markdown\", /\\b(?:markdown|md)/.source),\n        n(\"graphql\", /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n        n(\"sql\", /\\bsql/.source),\n        e\n    ].filter(Boolean);\n    var a = {\n        javascript: true,\n        js: true,\n        typescript: true,\n        ts: true,\n        jsx: true,\n        tsx: true\n    };\n    function u(e2) {\n        return \"string\" == typeof e2 ? e2 : Array.isArray(e2) ? e2.map(u).join(\"\") : u(e2.content);\n    }\n    b.hooks.add(\"after-tokenize\", function(e2) {\n        e2.language in a && !function e3(n2) {\n            for(var t2 = 0, a2 = n2.length; t2 < a2; t2++){\n                var r, s2, i, o = n2[t2];\n                \"string\" != typeof o && (r = o.content, Array.isArray(r) ? \"template-string\" === o.type ? (o = r[1], 3 === r.length && \"string\" != typeof o && \"embedded-code\" === o.type && (s2 = u(o), o = o.alias, o = Array.isArray(o) ? o[0] : o, i = b.languages[o]) && (r[1] = l(s2, i, o))) : e3(r) : \"string\" != typeof r && e3([\n                    r\n                ]));\n            }\n        }(e2.tokens);\n    });\n}(Prism), function(e) {\n    e.languages.typescript = e.languages.extend(\"javascript\", {\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n            lookbehind: true,\n            greedy: true,\n            inside: null\n        },\n        builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }), e.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, /\\btype\\b(?=\\s*(?:[\\{*]|$))/), delete e.languages.typescript.parameter, delete e.languages.typescript[\"literal-property\"];\n    var n = e.languages.extend(\"typescript\", {});\n    delete n[\"class-name\"], e.languages.typescript[\"class-name\"].inside = n, e.languages.insertBefore(\"typescript\", \"function\", {\n        decorator: {\n            pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n            inside: {\n                at: {\n                    pattern: /^@/,\n                    alias: \"operator\"\n                },\n                function: /^[\\s\\S]+/\n            }\n        },\n        \"generic-function\": {\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n            greedy: true,\n            inside: {\n                function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                generic: {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: n\n                }\n            }\n        }\n    }), e.languages.ts = e.languages.typescript;\n}(Prism), function(e) {\n    var n = e.languages.javascript, t = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source, a = \"(@(?:arg|argument|param|property)\\\\s+(?:\" + t + \"\\\\s+)?)\";\n    e.languages.jsdoc = e.languages.extend(\"javadoclike\", {\n        parameter: {\n            pattern: RegExp(a + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source),\n            lookbehind: true,\n            inside: {\n                punctuation: /\\./\n            }\n        }\n    }), e.languages.insertBefore(\"jsdoc\", \"keyword\", {\n        \"optional-parameter\": {\n            pattern: RegExp(a + /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n            lookbehind: true,\n            inside: {\n                parameter: {\n                    pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\./\n                    }\n                },\n                code: {\n                    pattern: /(=)[\\s\\S]*(?=\\]$)/,\n                    lookbehind: true,\n                    inside: n,\n                    alias: \"language-javascript\"\n                },\n                punctuation: /[=[\\]]/\n            }\n        },\n        \"class-name\": [\n            {\n                pattern: RegExp(/(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(/<TYPE>/g, function() {\n                    return t;\n                })),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            {\n                pattern: RegExp(\"(@[a-z]+\\\\s+)\" + t),\n                lookbehind: true,\n                inside: {\n                    string: n.string,\n                    number: n.number,\n                    boolean: n.boolean,\n                    keyword: e.languages.typescript.keyword,\n                    operator: /=>|\\.\\.\\.|[&|?:*]/,\n                    punctuation: /[.,;=<>{}()[\\]]/\n                }\n            }\n        ],\n        example: {\n            pattern: /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n            lookbehind: true,\n            inside: {\n                code: {\n                    pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n                    lookbehind: true,\n                    inside: n,\n                    alias: \"language-javascript\"\n                }\n            }\n        }\n    }), e.languages.javadoclike.addSupport(\"javascript\", e.languages.jsdoc);\n}(Prism), function(e) {\n    e.languages.flow = e.languages.extend(\"javascript\", {}), e.languages.insertBefore(\"flow\", \"keyword\", {\n        type: [\n            {\n                pattern: /\\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|[Ss]ymbol|any|mixed|null|void)\\b/,\n                alias: \"class-name\"\n            }\n        ]\n    }), e.languages.flow[\"function-variable\"].pattern = /(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i, delete e.languages.flow.parameter, e.languages.insertBefore(\"flow\", \"operator\", {\n        \"flow-punctuation\": {\n            pattern: /\\{\\||\\|\\}/,\n            alias: \"punctuation\"\n        }\n    }), Array.isArray(e.languages.flow.keyword) || (e.languages.flow.keyword = [\n        e.languages.flow.keyword\n    ]), e.languages.flow.keyword.unshift({\n        pattern: /(^|[^$]\\b)(?:Class|declare|opaque|type)\\b(?!\\$)/,\n        lookbehind: true\n    }, {\n        pattern: /(^|[^$]\\B)\\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\\b(?!\\$)/,\n        lookbehind: true\n    });\n}(Prism), Prism.languages.n4js = Prism.languages.extend(\"javascript\", {\n    keyword: /\\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n}), Prism.languages.insertBefore(\"n4js\", \"constant\", {\n    annotation: {\n        pattern: /@+\\w+/,\n        alias: \"operator\"\n    }\n}), Prism.languages.n4jsd = Prism.languages.n4js, function(e) {\n    function n(e2, n2) {\n        return RegExp(e2.replace(/<ID>/g, function() {\n            return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n        }), n2);\n    }\n    e.languages.insertBefore(\"javascript\", \"function-variable\", {\n        \"method-variable\": {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + e.languages.javascript[\"function-variable\"].pattern.source),\n            lookbehind: true,\n            alias: [\n                \"function-variable\",\n                \"method\",\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    }), e.languages.insertBefore(\"javascript\", \"function\", {\n        method: {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + e.languages.javascript.function.source),\n            lookbehind: true,\n            alias: [\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    }), e.languages.insertBefore(\"javascript\", \"constant\", {\n        \"known-class-name\": [\n            {\n                pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n                alias: \"class-name\"\n            },\n            {\n                pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n                alias: \"class-name\"\n            }\n        ]\n    }), e.languages.insertBefore(\"javascript\", \"keyword\", {\n        imports: {\n            pattern: n(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n            lookbehind: true,\n            inside: e.languages.javascript\n        },\n        exports: {\n            pattern: n(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n            lookbehind: true,\n            inside: e.languages.javascript\n        }\n    }), e.languages.javascript.keyword.unshift({\n        pattern: /\\b(?:as|default|export|from|import)\\b/,\n        alias: \"module\"\n    }, {\n        pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n        alias: \"control-flow\"\n    }, {\n        pattern: /\\bnull\\b/,\n        alias: [\n            \"null\",\n            \"nil\"\n        ]\n    }, {\n        pattern: /\\bundefined\\b/,\n        alias: \"nil\"\n    }), e.languages.insertBefore(\"javascript\", \"operator\", {\n        spread: {\n            pattern: /\\.{3}/,\n            alias: \"operator\"\n        },\n        arrow: {\n            pattern: /=>/,\n            alias: \"operator\"\n        }\n    }), e.languages.insertBefore(\"javascript\", \"punctuation\", {\n        \"property-access\": {\n            pattern: n(/(\\.\\s*)#?<ID>/.source),\n            lookbehind: true\n        },\n        \"maybe-class-name\": {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n            lookbehind: true\n        },\n        dom: {\n            pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n            alias: \"variable\"\n        },\n        console: {\n            pattern: /\\bconsole(?=\\s*\\.)/,\n            alias: \"class-name\"\n        }\n    });\n    for(var t = [\n        \"function\",\n        \"function-variable\",\n        \"method\",\n        \"method-variable\",\n        \"property-access\"\n    ], a = 0; a < t.length; a++){\n        var r = t[a], s = e.languages.javascript[r], r = (s = \"RegExp\" === e.util.type(s) ? e.languages.javascript[r] = {\n            pattern: s\n        } : s).inside || {};\n        (s.inside = r)[\"maybe-class-name\"] = /^[A-Z][\\s\\S]*/;\n    }\n}(Prism), function(s) {\n    var e = s.util.clone(s.languages.javascript), t = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source, a = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source, r = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n    function n(e2, n2) {\n        return e2 = e2.replace(/<S>/g, function() {\n            return t;\n        }).replace(/<BRACES>/g, function() {\n            return a;\n        }).replace(/<SPREAD>/g, function() {\n            return r;\n        }), RegExp(e2, n2);\n    }\n    r = n(r).source, s.languages.jsx = s.languages.extend(\"markup\", e), s.languages.jsx.tag.pattern = n(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source), s.languages.jsx.tag.inside.tag.pattern = /^<\\/?[^\\s>\\/]*/, s.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/, s.languages.jsx.tag.inside.tag.inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/, s.languages.jsx.tag.inside.comment = e.comment, s.languages.insertBefore(\"inside\", \"attr-name\", {\n        spread: {\n            pattern: n(/<SPREAD>/.source),\n            inside: s.languages.jsx\n        }\n    }, s.languages.jsx.tag), s.languages.insertBefore(\"inside\", \"special-attr\", {\n        script: {\n            pattern: n(/=<BRACES>/.source),\n            alias: \"language-javascript\",\n            inside: {\n                \"script-punctuation\": {\n                    pattern: /^=(?=\\{)/,\n                    alias: \"punctuation\"\n                },\n                rest: s.languages.jsx\n            }\n        }\n    }, s.languages.jsx.tag);\n    function i(e2) {\n        for(var n2 = [], t2 = 0; t2 < e2.length; t2++){\n            var a2 = e2[t2], r2 = false;\n            \"string\" != typeof a2 && (\"tag\" === a2.type && a2.content[0] && \"tag\" === a2.content[0].type ? \"</\" === a2.content[0].content[0].content ? 0 < n2.length && n2[n2.length - 1].tagName === o(a2.content[0].content[1]) && n2.pop() : \"/>\" !== a2.content[a2.content.length - 1].content && n2.push({\n                tagName: o(a2.content[0].content[1]),\n                openedBraces: 0\n            }) : 0 < n2.length && \"punctuation\" === a2.type && \"{\" === a2.content ? n2[n2.length - 1].openedBraces++ : 0 < n2.length && 0 < n2[n2.length - 1].openedBraces && \"punctuation\" === a2.type && \"}\" === a2.content ? n2[n2.length - 1].openedBraces-- : r2 = true), (r2 || \"string\" == typeof a2) && 0 < n2.length && 0 === n2[n2.length - 1].openedBraces && (r2 = o(a2), t2 < e2.length - 1 && (\"string\" == typeof e2[t2 + 1] || \"plain-text\" === e2[t2 + 1].type) && (r2 += o(e2[t2 + 1]), e2.splice(t2 + 1, 1)), 0 < t2 && (\"string\" == typeof e2[t2 - 1] || \"plain-text\" === e2[t2 - 1].type) && (r2 = o(e2[t2 - 1]) + r2, e2.splice(t2 - 1, 1), t2--), e2[t2] = new s.Token(\"plain-text\", r2, null, r2)), a2.content && \"string\" != typeof a2.content && i(a2.content);\n        }\n    }\n    var o = function(e2) {\n        return e2 ? \"string\" == typeof e2 ? e2 : \"string\" == typeof e2.content ? e2.content : e2.content.map(o).join(\"\") : \"\";\n    };\n    s.hooks.add(\"after-tokenize\", function(e2) {\n        \"jsx\" !== e2.language && \"tsx\" !== e2.language || i(e2.tokens);\n    });\n}(Prism), function(e) {\n    var n = e.util.clone(e.languages.typescript), n = (e.languages.tsx = e.languages.extend(\"jsx\", n), delete e.languages.tsx.parameter, delete e.languages.tsx[\"literal-property\"], e.languages.tsx.tag);\n    n.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + \"(?:\" + n.pattern.source + \")\", n.pattern.flags), n.lookbehind = true;\n}(Prism), Prism.languages.swift = {\n    comment: {\n        pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string-literal\": [\n        {\n            pattern: RegExp(/(^|[^\"#])/.source + \"(?:\" + /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + \"|\" + /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + \")\" + /(?![\"#])/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                interpolation: {\n                    pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: true,\n                    inside: null\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\\\($/,\n                    alias: \"punctuation\"\n                },\n                punctuation: /\\\\(?=[\\r\\n])/,\n                string: /[\\s\\S]+/\n            }\n        },\n        {\n            pattern: RegExp(/(^|[^\"#])(#+)/.source + \"(?:\" + /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + \"|\" + /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + \")\\\\2\"),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                interpolation: {\n                    pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: true,\n                    inside: null\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\#+\\($/,\n                    alias: \"punctuation\"\n                },\n                string: /[\\s\\S]+/\n            }\n        }\n    ],\n    directive: {\n        pattern: RegExp(/#/.source + \"(?:\" + /(?:elseif|if)\\b/.source + \"(?:[ \t]*\" + /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + \")+|\" + /(?:else|endif)\\b/.source + \")\"),\n        alias: \"property\",\n        inside: {\n            \"directive-name\": /^#\\w+/,\n            boolean: /\\b(?:false|true)\\b/,\n            number: /\\b\\d+(?:\\.\\d+)*\\b/,\n            operator: /!|&&|\\|\\||[<>]=?/,\n            punctuation: /[(),]/\n        }\n    },\n    literal: {\n        pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n        alias: \"constant\"\n    },\n    \"other-directive\": {\n        pattern: /#\\w+\\b/,\n        alias: \"property\"\n    },\n    attribute: {\n        pattern: /@\\w+/,\n        alias: \"atrule\"\n    },\n    \"function-definition\": {\n        pattern: /(\\bfunc\\s+)\\w+/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    label: {\n        pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n        lookbehind: true,\n        alias: \"important\"\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n        pattern: /\\bnil\\b/,\n        alias: \"constant\"\n    },\n    \"short-argument\": /\\$\\d+\\b/,\n    omit: {\n        pattern: /\\b_\\b/,\n        alias: \"keyword\"\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    \"class-name\": /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n}, Prism.languages.swift[\"string-literal\"].forEach(function(e) {\n    e.inside.interpolation.inside = Prism.languages.swift;\n}), function(e) {\n    e.languages.kotlin = e.languages.extend(\"clike\", {\n        keyword: {\n            pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n            lookbehind: true\n        },\n        function: [\n            {\n                pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n                greedy: true\n            },\n            {\n                pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n        operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    }), delete e.languages.kotlin[\"class-name\"];\n    var n = {\n        \"interpolation-punctuation\": {\n            pattern: /^\\$\\{?|\\}$/,\n            alias: \"punctuation\"\n        },\n        expression: {\n            pattern: /[\\s\\S]+/,\n            inside: e.languages.kotlin\n        }\n    };\n    e.languages.insertBefore(\"kotlin\", \"string\", {\n        \"string-literal\": [\n            {\n                pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n                alias: \"multiline\",\n                inside: {\n                    interpolation: {\n                        pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        inside: n\n                    },\n                    string: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n                alias: \"singleline\",\n                inside: {\n                    interpolation: {\n                        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        lookbehind: true,\n                        inside: n\n                    },\n                    string: /[\\s\\S]+/\n                }\n            }\n        ],\n        char: {\n            pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n            greedy: true\n        }\n    }), delete e.languages.kotlin.string, e.languages.insertBefore(\"kotlin\", \"keyword\", {\n        annotation: {\n            pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n            alias: \"builtin\"\n        }\n    }), e.languages.insertBefore(\"kotlin\", \"function\", {\n        label: {\n            pattern: /\\b\\w+@|@\\w+\\b/,\n            alias: \"symbol\"\n        }\n    }), e.languages.kt = e.languages.kotlin, e.languages.kts = e.languages.kotlin;\n}(Prism), Prism.languages.c = Prism.languages.extend(\"clike\", {\n    comment: {\n        pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: true\n    },\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n        lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n}), Prism.languages.insertBefore(\"c\", \"string\", {\n    char: {\n        pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n        greedy: true\n    }\n}), Prism.languages.insertBefore(\"c\", \"string\", {\n    macro: {\n        pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\",\n        inside: {\n            string: [\n                {\n                    pattern: /^(#\\s*include\\s*)<[^>]+>/,\n                    lookbehind: true\n                },\n                Prism.languages.c.string\n            ],\n            char: Prism.languages.c.char,\n            comment: Prism.languages.c.comment,\n            \"macro-name\": [\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n                    lookbehind: true,\n                    alias: \"function\"\n                }\n            ],\n            directive: {\n                pattern: /^(#\\s*)[a-z]+/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            \"directive-hash\": /^#/,\n            punctuation: /##|\\\\(?=[\\r\\n])/,\n            expression: {\n                pattern: /\\S[\\s\\S]*/,\n                inside: Prism.languages.c\n            }\n        }\n    }\n}), Prism.languages.insertBefore(\"c\", \"function\", {\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n}), delete Prism.languages.c.boolean, Prism.languages.objectivec = Prism.languages.extend(\"c\", {\n    string: {\n        pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    keyword: /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    operator: /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n}), delete Prism.languages.objectivec[\"class-name\"], Prism.languages.objc = Prism.languages.objectivec, Prism.languages.reason = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n    },\n    \"class-name\": /\\b[A-Z]\\w*/,\n    keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n}), Prism.languages.insertBefore(\"reason\", \"class-name\", {\n    char: {\n        pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n        greedy: true\n    },\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n        pattern: /\\b[a-z]\\w*(?=::)/,\n        alias: \"symbol\"\n    }\n}), delete Prism.languages.reason.function, function(e) {\n    for(var n = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source, t = 0; t < 2; t++)n = n.replace(/<self>/g, function() {\n        return n;\n    });\n    n = n.replace(/<self>/g, function() {\n        return /[^\\s\\S]/.source;\n    }), e.languages.rust = {\n        comment: [\n            {\n                pattern: RegExp(/(^|[^\\\\])/.source + n),\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        string: {\n            pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n            greedy: true\n        },\n        char: {\n            pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n            greedy: true\n        },\n        attribute: {\n            pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n            greedy: true,\n            alias: \"attr-name\",\n            inside: {\n                string: null\n            }\n        },\n        \"closure-params\": {\n            pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"closure-punctuation\": {\n                    pattern: /^\\||\\|$/,\n                    alias: \"punctuation\"\n                },\n                rest: null\n            }\n        },\n        \"lifetime-annotation\": {\n            pattern: /'\\w+/,\n            alias: \"symbol\"\n        },\n        \"fragment-specifier\": {\n            pattern: /(\\$\\w+:)[a-z]+/,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        variable: /\\$\\w+/,\n        \"function-definition\": {\n            pattern: /(\\bfn\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"function\"\n        },\n        \"type-definition\": {\n            pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"class-name\"\n        },\n        \"module-declaration\": [\n            {\n                pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n                lookbehind: true,\n                alias: \"namespace\"\n            },\n            {\n                pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n                lookbehind: true,\n                alias: \"namespace\",\n                inside: {\n                    punctuation: /::/\n                }\n            }\n        ],\n        keyword: [\n            /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n            /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n        ],\n        function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n        macro: {\n            pattern: /\\b\\w+!/,\n            alias: \"property\"\n        },\n        constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n        \"class-name\": /\\b[A-Z]\\w*\\b/,\n        namespace: {\n            pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n            inside: {\n                punctuation: /::/\n            }\n        },\n        number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n        operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }, e.languages.rust[\"closure-params\"].inside.rest = e.languages.rust, e.languages.rust.attribute.inside.string = e.languages.rust.string;\n}(Prism), Prism.languages.go = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n        lookbehind: true,\n        greedy: true\n    },\n    keyword: /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    boolean: /\\b(?:_|false|iota|nil|true)\\b/,\n    number: [\n        /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n        /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n        /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i\n    ],\n    operator: /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    builtin: /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n}), Prism.languages.insertBefore(\"go\", \"string\", {\n    char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n        greedy: true\n    }\n}), delete Prism.languages.go[\"class-name\"], function(e) {\n    var n = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/, t = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function() {\n        return n.source;\n    });\n    e.languages.cpp = e.languages.extend(\"c\", {\n        \"class-name\": [\n            {\n                pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function() {\n                    return n.source;\n                })),\n                lookbehind: true\n            },\n            /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n            /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n            /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n        ],\n        keyword: n,\n        number: {\n            pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n            greedy: true\n        },\n        operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n        boolean: /\\b(?:false|true)\\b/\n    }), e.languages.insertBefore(\"cpp\", \"string\", {\n        module: {\n            pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + \"(?:\" + /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + \"|\" + /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function() {\n                return t;\n            }) + \")\"),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                string: /^[<\"][\\s\\S]+/,\n                operator: /:/,\n                punctuation: /\\./\n            }\n        },\n        \"raw-string\": {\n            pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n            alias: \"string\",\n            greedy: true\n        }\n    }), e.languages.insertBefore(\"cpp\", \"keyword\", {\n        \"generic-function\": {\n            pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n            inside: {\n                function: /^\\w+/,\n                generic: {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: e.languages.cpp\n                }\n            }\n        }\n    }), e.languages.insertBefore(\"cpp\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    }), e.languages.insertBefore(\"cpp\", \"class-name\", {\n        \"base-clause\": {\n            pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n            lookbehind: true,\n            greedy: true,\n            inside: e.languages.extend(\"cpp\", {})\n        }\n    }), e.languages.insertBefore(\"inside\", \"double-colon\", {\n        \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, e.languages.cpp[\"base-clause\"]);\n}(Prism);\n// src/themes/index.ts\nvar themes_exports = {};\n__export(themes_exports, {\n    dracula: ()=>dracula_default,\n    duotoneDark: ()=>duotoneDark_default,\n    duotoneLight: ()=>duotoneLight_default,\n    github: ()=>github_default,\n    jettwaveDark: ()=>jettwaveDark_default,\n    jettwaveLight: ()=>jettwaveLight_default,\n    nightOwl: ()=>nightOwl_default,\n    nightOwlLight: ()=>nightOwlLight_default,\n    oceanicNext: ()=>oceanicNext_default,\n    okaidia: ()=>okaidia_default,\n    oneDark: ()=>oneDark_default,\n    oneLight: ()=>oneLight_default,\n    palenight: ()=>palenight_default,\n    shadesOfPurple: ()=>shadesOfPurple_default,\n    synthwave84: ()=>synthwave84_default,\n    ultramin: ()=>ultramin_default,\n    vsDark: ()=>vsDark_default,\n    vsLight: ()=>vsLight_default\n});\n// src/themes/dracula.ts\nvar theme = {\n    plain: {\n        color: \"#F8F8F2\",\n        backgroundColor: \"#282A36\"\n    },\n    styles: [\n        {\n            types: [\n                \"prolog\",\n                \"constant\",\n                \"builtin\"\n            ],\n            style: {\n                color: \"rgb(189, 147, 249)\"\n            }\n        },\n        {\n            types: [\n                \"inserted\",\n                \"function\"\n            ],\n            style: {\n                color: \"rgb(80, 250, 123)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                color: \"rgb(255, 85, 85)\"\n            }\n        },\n        {\n            types: [\n                \"changed\"\n            ],\n            style: {\n                color: \"rgb(255, 184, 108)\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"symbol\"\n            ],\n            style: {\n                color: \"rgb(248, 248, 242)\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"char\",\n                \"tag\",\n                \"selector\"\n            ],\n            style: {\n                color: \"rgb(255, 121, 198)\"\n            }\n        },\n        {\n            types: [\n                \"keyword\",\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(189, 147, 249)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(98, 114, 164)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(241, 250, 140)\"\n            }\n        }\n    ]\n};\nvar dracula_default = theme;\n// src/themes/duotoneDark.ts\nvar theme2 = {\n    plain: {\n        backgroundColor: \"#2a2734\",\n        color: \"#9a86fd\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\",\n                \"punctuation\"\n            ],\n            style: {\n                color: \"#6c6783\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                opacity: 0.7\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"operator\",\n                \"number\"\n            ],\n            style: {\n                color: \"#e09142\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"function\"\n            ],\n            style: {\n                color: \"#9a86fd\"\n            }\n        },\n        {\n            types: [\n                \"tag-id\",\n                \"selector\",\n                \"atrule-id\"\n            ],\n            style: {\n                color: \"#eeebff\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"#c4b9fe\"\n            }\n        },\n        {\n            types: [\n                \"boolean\",\n                \"string\",\n                \"entity\",\n                \"url\",\n                \"attr-value\",\n                \"keyword\",\n                \"control\",\n                \"directive\",\n                \"unit\",\n                \"statement\",\n                \"regex\",\n                \"atrule\",\n                \"placeholder\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#ffcc99\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                textDecorationLine: \"line-through\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                textDecorationLine: \"underline\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                color: \"#c4b9fe\"\n            }\n        }\n    ]\n};\nvar duotoneDark_default = theme2;\n// src/themes/duotoneLight.ts\nvar theme3 = {\n    plain: {\n        backgroundColor: \"#faf8f5\",\n        color: \"#728fcb\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\",\n                \"punctuation\"\n            ],\n            style: {\n                color: \"#b6ad9a\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                opacity: 0.7\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"operator\",\n                \"number\"\n            ],\n            style: {\n                color: \"#063289\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"function\"\n            ],\n            style: {\n                color: \"#b29762\"\n            }\n        },\n        {\n            types: [\n                \"tag-id\",\n                \"selector\",\n                \"atrule-id\"\n            ],\n            style: {\n                color: \"#2d2006\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"#896724\"\n            }\n        },\n        {\n            types: [\n                \"boolean\",\n                \"string\",\n                \"entity\",\n                \"url\",\n                \"attr-value\",\n                \"keyword\",\n                \"control\",\n                \"directive\",\n                \"unit\",\n                \"statement\",\n                \"regex\",\n                \"atrule\"\n            ],\n            style: {\n                color: \"#728fcb\"\n            }\n        },\n        {\n            types: [\n                \"placeholder\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#93abdc\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                textDecorationLine: \"line-through\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                textDecorationLine: \"underline\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                color: \"#896724\"\n            }\n        }\n    ]\n};\nvar duotoneLight_default = theme3;\n// src/themes/github.ts\nvar theme4 = {\n    plain: {\n        color: \"#393A34\",\n        backgroundColor: \"#f6f8fa\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\"\n            ],\n            style: {\n                color: \"#999988\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                opacity: 0.7\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"attr-value\"\n            ],\n            style: {\n                color: \"#e3116c\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"operator\"\n            ],\n            style: {\n                color: \"#393A34\"\n            }\n        },\n        {\n            types: [\n                \"entity\",\n                \"url\",\n                \"symbol\",\n                \"number\",\n                \"boolean\",\n                \"variable\",\n                \"constant\",\n                \"property\",\n                \"regex\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"#36acaa\"\n            }\n        },\n        {\n            types: [\n                \"atrule\",\n                \"keyword\",\n                \"attr-name\",\n                \"selector\"\n            ],\n            style: {\n                color: \"#00a4db\"\n            }\n        },\n        {\n            types: [\n                \"function\",\n                \"deleted\",\n                \"tag\"\n            ],\n            style: {\n                color: \"#d73a49\"\n            }\n        },\n        {\n            types: [\n                \"function-variable\"\n            ],\n            style: {\n                color: \"#6f42c1\"\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"selector\",\n                \"keyword\"\n            ],\n            style: {\n                color: \"#00009f\"\n            }\n        }\n    ]\n};\nvar github_default = theme4;\n// src/themes/nightOwl.ts\nvar theme5 = {\n    plain: {\n        color: \"#d6deeb\",\n        backgroundColor: \"#011627\"\n    },\n    styles: [\n        {\n            types: [\n                \"changed\"\n            ],\n            style: {\n                color: \"rgb(162, 191, 252)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                color: \"rgba(239, 83, 80, 0.56)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"inserted\",\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(173, 219, 103)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(99, 119, 119)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"url\"\n            ],\n            style: {\n                color: \"rgb(173, 219, 103)\"\n            }\n        },\n        {\n            types: [\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(214, 222, 235)\"\n            }\n        },\n        {\n            types: [\n                \"number\"\n            ],\n            style: {\n                color: \"rgb(247, 140, 108)\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"char\",\n                \"constant\",\n                \"function\"\n            ],\n            style: {\n                color: \"rgb(130, 170, 255)\"\n            }\n        },\n        {\n            // This was manually added after the auto-generation\n            // so that punctuations are not italicised\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: \"rgb(199, 146, 234)\"\n            }\n        },\n        {\n            types: [\n                \"selector\",\n                \"doctype\"\n            ],\n            style: {\n                color: \"rgb(199, 146, 234)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"rgb(255, 203, 139)\"\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"operator\",\n                \"keyword\"\n            ],\n            style: {\n                color: \"rgb(127, 219, 202)\"\n            }\n        },\n        {\n            types: [\n                \"boolean\"\n            ],\n            style: {\n                color: \"rgb(255, 88, 116)\"\n            }\n        },\n        {\n            types: [\n                \"property\"\n            ],\n            style: {\n                color: \"rgb(128, 203, 196)\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                color: \"rgb(178, 204, 214)\"\n            }\n        }\n    ]\n};\nvar nightOwl_default = theme5;\n// src/themes/nightOwlLight.ts\nvar theme6 = {\n    plain: {\n        color: \"#403f53\",\n        backgroundColor: \"#FBFBFB\"\n    },\n    styles: [\n        {\n            types: [\n                \"changed\"\n            ],\n            style: {\n                color: \"rgb(162, 191, 252)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                color: \"rgba(239, 83, 80, 0.56)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"inserted\",\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(72, 118, 214)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(152, 159, 177)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"builtin\",\n                \"char\",\n                \"constant\",\n                \"url\"\n            ],\n            style: {\n                color: \"rgb(72, 118, 214)\"\n            }\n        },\n        {\n            types: [\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(201, 103, 101)\"\n            }\n        },\n        {\n            types: [\n                \"number\"\n            ],\n            style: {\n                color: \"rgb(170, 9, 130)\"\n            }\n        },\n        {\n            // This was manually added after the auto-generation\n            // so that punctuations are not italicised\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: \"rgb(153, 76, 195)\"\n            }\n        },\n        {\n            types: [\n                \"function\",\n                \"selector\",\n                \"doctype\"\n            ],\n            style: {\n                color: \"rgb(153, 76, 195)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"rgb(17, 17, 17)\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: \"rgb(153, 76, 195)\"\n            }\n        },\n        {\n            types: [\n                \"operator\",\n                \"property\",\n                \"keyword\",\n                \"namespace\"\n            ],\n            style: {\n                color: \"rgb(12, 150, 155)\"\n            }\n        },\n        {\n            types: [\n                \"boolean\"\n            ],\n            style: {\n                color: \"rgb(188, 84, 84)\"\n            }\n        }\n    ]\n};\nvar nightOwlLight_default = theme6;\n// src/themes/oceanicNext.ts\nvar colors = {\n    char: \"#D8DEE9\",\n    comment: \"#999999\",\n    keyword: \"#c5a5c5\",\n    primitive: \"#5a9bcf\",\n    string: \"#8dc891\",\n    variable: \"#d7deea\",\n    boolean: \"#ff8b50\",\n    punctuation: \"#5FB3B3\",\n    tag: \"#fc929e\",\n    function: \"#79b6f2\",\n    className: \"#FAC863\",\n    method: \"#6699CC\",\n    operator: \"#fc929e\"\n};\nvar theme7 = {\n    plain: {\n        backgroundColor: \"#282c34\",\n        color: \"#ffffff\"\n    },\n    styles: [\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: colors.keyword\n            }\n        },\n        {\n            types: [\n                \"attr-value\"\n            ],\n            style: {\n                color: colors.string\n            }\n        },\n        {\n            types: [\n                \"comment\",\n                \"block-comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\",\n                \"shebang\"\n            ],\n            style: {\n                color: colors.comment\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"number\",\n                \"function-name\",\n                \"constant\",\n                \"symbol\",\n                \"deleted\"\n            ],\n            style: {\n                color: colors.primitive\n            }\n        },\n        {\n            types: [\n                \"boolean\"\n            ],\n            style: {\n                color: colors.boolean\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: colors.tag\n            }\n        },\n        {\n            types: [\n                \"string\"\n            ],\n            style: {\n                color: colors.string\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: colors.string\n            }\n        },\n        {\n            types: [\n                \"selector\",\n                \"char\",\n                \"builtin\",\n                \"inserted\"\n            ],\n            style: {\n                color: colors.char\n            }\n        },\n        {\n            types: [\n                \"function\"\n            ],\n            style: {\n                color: colors.function\n            }\n        },\n        {\n            types: [\n                \"operator\",\n                \"entity\",\n                \"url\",\n                \"variable\"\n            ],\n            style: {\n                color: colors.variable\n            }\n        },\n        {\n            types: [\n                \"keyword\"\n            ],\n            style: {\n                color: colors.keyword\n            }\n        },\n        {\n            types: [\n                \"atrule\",\n                \"class-name\"\n            ],\n            style: {\n                color: colors.className\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                fontWeight: \"400\"\n            }\n        },\n        {\n            types: [\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                opacity: 0.7\n            }\n        }\n    ]\n};\nvar oceanicNext_default = theme7;\n// src/themes/okaidia.ts\nvar theme8 = {\n    plain: {\n        color: \"#f8f8f2\",\n        backgroundColor: \"#272822\"\n    },\n    styles: [\n        {\n            types: [\n                \"changed\"\n            ],\n            style: {\n                color: \"rgb(162, 191, 252)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                color: \"#f92672\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                color: \"rgb(173, 219, 103)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"#8292a2\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"url\"\n            ],\n            style: {\n                color: \"#a6e22e\"\n            }\n        },\n        {\n            types: [\n                \"variable\"\n            ],\n            style: {\n                color: \"#f8f8f2\"\n            }\n        },\n        {\n            types: [\n                \"number\"\n            ],\n            style: {\n                color: \"#ae81ff\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"char\",\n                \"constant\",\n                \"function\",\n                \"class-name\"\n            ],\n            style: {\n                color: \"#e6db74\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: \"#f8f8f2\"\n            }\n        },\n        {\n            types: [\n                \"selector\",\n                \"doctype\"\n            ],\n            style: {\n                color: \"#a6e22e\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"operator\",\n                \"keyword\"\n            ],\n            style: {\n                color: \"#66d9ef\"\n            }\n        },\n        {\n            types: [\n                \"boolean\"\n            ],\n            style: {\n                color: \"#ae81ff\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                color: \"rgb(178, 204, 214)\",\n                opacity: 0.7\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"property\"\n            ],\n            style: {\n                color: \"#f92672\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"#a6e22e !important\"\n            }\n        },\n        {\n            types: [\n                \"doctype\"\n            ],\n            style: {\n                color: \"#8292a2\"\n            }\n        },\n        {\n            types: [\n                \"rule\"\n            ],\n            style: {\n                color: \"#e6db74\"\n            }\n        }\n    ]\n};\nvar okaidia_default = theme8;\n// src/themes/palenight.ts\nvar theme9 = {\n    plain: {\n        color: \"#bfc7d5\",\n        backgroundColor: \"#292d3e\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(105, 112, 152)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"rgb(195, 232, 141)\"\n            }\n        },\n        {\n            types: [\n                \"number\"\n            ],\n            style: {\n                color: \"rgb(247, 140, 108)\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"char\",\n                \"constant\",\n                \"function\"\n            ],\n            style: {\n                color: \"rgb(130, 170, 255)\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"selector\"\n            ],\n            style: {\n                color: \"rgb(199, 146, 234)\"\n            }\n        },\n        {\n            types: [\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(191, 199, 213)\"\n            }\n        },\n        {\n            types: [\n                \"class-name\",\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(255, 203, 107)\"\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"deleted\"\n            ],\n            style: {\n                color: \"rgb(255, 85, 114)\"\n            }\n        },\n        {\n            types: [\n                \"operator\"\n            ],\n            style: {\n                color: \"rgb(137, 221, 255)\"\n            }\n        },\n        {\n            types: [\n                \"boolean\"\n            ],\n            style: {\n                color: \"rgb(255, 88, 116)\"\n            }\n        },\n        {\n            types: [\n                \"keyword\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"doctype\"\n            ],\n            style: {\n                color: \"rgb(199, 146, 234)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                color: \"rgb(178, 204, 214)\"\n            }\n        },\n        {\n            types: [\n                \"url\"\n            ],\n            style: {\n                color: \"rgb(221, 221, 221)\"\n            }\n        }\n    ]\n};\nvar palenight_default = theme9;\n// src/themes/shadesOfPurple.ts\nvar theme10 = {\n    plain: {\n        color: \"#9EFEFF\",\n        backgroundColor: \"#2D2A55\"\n    },\n    styles: [\n        {\n            types: [\n                \"changed\"\n            ],\n            style: {\n                color: \"rgb(255, 238, 128)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                color: \"rgba(239, 83, 80, 0.56)\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                color: \"rgb(173, 219, 103)\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(179, 98, 255)\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: \"rgb(255, 255, 255)\"\n            }\n        },\n        {\n            types: [\n                \"constant\"\n            ],\n            style: {\n                color: \"rgb(255, 98, 140)\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"url\"\n            ],\n            style: {\n                color: \"rgb(165, 255, 144)\"\n            }\n        },\n        {\n            types: [\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(255, 238, 128)\"\n            }\n        },\n        {\n            types: [\n                \"number\",\n                \"boolean\"\n            ],\n            style: {\n                color: \"rgb(255, 98, 140)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(255, 180, 84)\"\n            }\n        },\n        {\n            types: [\n                \"keyword\",\n                \"operator\",\n                \"property\",\n                \"namespace\",\n                \"tag\",\n                \"selector\",\n                \"doctype\"\n            ],\n            style: {\n                color: \"rgb(255, 157, 0)\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"char\",\n                \"constant\",\n                \"function\",\n                \"class-name\"\n            ],\n            style: {\n                color: \"rgb(250, 208, 0)\"\n            }\n        }\n    ]\n};\nvar shadesOfPurple_default = theme10;\n// src/themes/synthwave84.ts\nvar theme11 = {\n    plain: {\n        backgroundColor: \"linear-gradient(to bottom, #2a2139 75%, #34294f)\",\n        backgroundImage: \"#34294f\",\n        color: \"#f92aad\",\n        textShadow: \"0 0 2px #100c0f, 0 0 5px #dc078e33, 0 0 10px #fff3\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"block-comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\"\n            ],\n            style: {\n                color: \"#495495\",\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            style: {\n                color: \"#ccc\"\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"attr-name\",\n                \"namespace\",\n                \"number\",\n                \"unit\",\n                \"hexcode\",\n                \"deleted\"\n            ],\n            style: {\n                color: \"#e2777a\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"selector\"\n            ],\n            style: {\n                color: \"#72f1b8\",\n                textShadow: \"0 0 2px #100c0f, 0 0 10px #257c5575, 0 0 35px #21272475\"\n            }\n        },\n        {\n            types: [\n                \"function-name\"\n            ],\n            style: {\n                color: \"#6196cc\"\n            }\n        },\n        {\n            types: [\n                \"boolean\",\n                \"selector-id\",\n                \"function\"\n            ],\n            style: {\n                color: \"#fdfdfd\",\n                textShadow: \"0 0 2px #001716, 0 0 3px #03edf975, 0 0 5px #03edf975, 0 0 8px #03edf975\"\n            }\n        },\n        {\n            types: [\n                \"class-name\",\n                \"maybe-class-name\",\n                \"builtin\"\n            ],\n            style: {\n                color: \"#fff5f6\",\n                textShadow: \"0 0 2px #000, 0 0 10px #fc1f2c75, 0 0 5px #fc1f2c75, 0 0 25px #fc1f2c75\"\n            }\n        },\n        {\n            types: [\n                \"constant\",\n                \"symbol\"\n            ],\n            style: {\n                color: \"#f92aad\",\n                textShadow: \"0 0 2px #100c0f, 0 0 5px #dc078e33, 0 0 10px #fff3\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"atrule\",\n                \"keyword\",\n                \"selector-class\"\n            ],\n            style: {\n                color: \"#f4eee4\",\n                textShadow: \"0 0 2px #393a33, 0 0 8px #f39f0575, 0 0 2px #f39f0575\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"char\",\n                \"attr-value\",\n                \"regex\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#f87c32\"\n            }\n        },\n        {\n            types: [\n                \"parameter\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"entity\",\n                \"url\"\n            ],\n            style: {\n                color: \"#67cdcc\"\n            }\n        },\n        {\n            types: [\n                \"operator\"\n            ],\n            style: {\n                color: \"ffffffee\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"entity\"\n            ],\n            style: {\n                cursor: \"help\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                color: \"green\"\n            }\n        }\n    ]\n};\nvar synthwave84_default = theme11;\n// src/themes/ultramin.ts\nvar theme12 = {\n    plain: {\n        color: \"#282a2e\",\n        backgroundColor: \"#ffffff\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(197, 200, 198)\"\n            }\n        },\n        {\n            types: [\n                \"string\",\n                \"number\",\n                \"builtin\",\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(150, 152, 150)\"\n            }\n        },\n        {\n            types: [\n                \"class-name\",\n                \"function\",\n                \"tag\",\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(40, 42, 46)\"\n            }\n        }\n    ]\n};\nvar ultramin_default = theme12;\n// src/themes/vsDark.ts\nvar theme13 = {\n    plain: {\n        color: \"#9CDCFE\",\n        backgroundColor: \"#1E1E1E\"\n    },\n    styles: [\n        {\n            types: [\n                \"prolog\"\n            ],\n            style: {\n                color: \"rgb(0, 0, 128)\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(106, 153, 85)\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"changed\",\n                \"keyword\",\n                \"interpolation-punctuation\"\n            ],\n            style: {\n                color: \"rgb(86, 156, 214)\"\n            }\n        },\n        {\n            types: [\n                \"number\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"rgb(181, 206, 168)\"\n            }\n        },\n        {\n            types: [\n                \"constant\"\n            ],\n            style: {\n                color: \"rgb(100, 102, 149)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\",\n                \"variable\"\n            ],\n            style: {\n                color: \"rgb(156, 220, 254)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\",\n                \"string\",\n                \"attr-value\",\n                \"template-punctuation\"\n            ],\n            style: {\n                color: \"rgb(206, 145, 120)\"\n            }\n        },\n        {\n            types: [\n                \"selector\"\n            ],\n            style: {\n                color: \"rgb(215, 186, 125)\"\n            }\n        },\n        {\n            // Fix tag color\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: \"rgb(78, 201, 176)\"\n            }\n        },\n        {\n            // Fix tag color for HTML\n            types: [\n                \"tag\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"rgb(86, 156, 214)\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"operator\"\n            ],\n            style: {\n                color: \"rgb(212, 212, 212)\"\n            }\n        },\n        {\n            // Fix punctuation color for HTML\n            types: [\n                \"punctuation\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"#808080\"\n            }\n        },\n        {\n            types: [\n                \"function\"\n            ],\n            style: {\n                color: \"rgb(220, 220, 170)\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"rgb(78, 201, 176)\"\n            }\n        },\n        {\n            types: [\n                \"char\"\n            ],\n            style: {\n                color: \"rgb(209, 105, 105)\"\n            }\n        }\n    ]\n};\nvar vsDark_default = theme13;\n// src/themes/vsLight.ts\nvar theme14 = {\n    plain: {\n        color: \"#000000\",\n        backgroundColor: \"#ffffff\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"rgb(0, 128, 0)\"\n            }\n        },\n        {\n            types: [\n                \"builtin\"\n            ],\n            style: {\n                color: \"rgb(0, 112, 193)\"\n            }\n        },\n        {\n            types: [\n                \"number\",\n                \"variable\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"rgb(9, 134, 88)\"\n            }\n        },\n        {\n            types: [\n                \"operator\"\n            ],\n            style: {\n                color: \"rgb(0, 0, 0)\"\n            }\n        },\n        {\n            types: [\n                \"constant\",\n                \"char\"\n            ],\n            style: {\n                color: \"rgb(129, 31, 63)\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: \"rgb(128, 0, 0)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"rgb(255, 0, 0)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\",\n                \"string\"\n            ],\n            style: {\n                color: \"rgb(163, 21, 21)\"\n            }\n        },\n        {\n            types: [\n                \"changed\",\n                \"punctuation\"\n            ],\n            style: {\n                color: \"rgb(4, 81, 165)\"\n            }\n        },\n        {\n            types: [\n                \"function\",\n                \"keyword\"\n            ],\n            style: {\n                color: \"rgb(0, 0, 255)\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"rgb(38, 127, 153)\"\n            }\n        }\n    ]\n};\nvar vsLight_default = theme14;\n// src/themes/jettwaveDark.ts\nvar theme15 = {\n    plain: {\n        color: \"#f8fafc\",\n        backgroundColor: \"#011627\"\n    },\n    styles: [\n        {\n            types: [\n                \"prolog\"\n            ],\n            style: {\n                color: \"#000080\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"#6A9955\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"changed\",\n                \"keyword\",\n                \"interpolation-punctuation\"\n            ],\n            style: {\n                color: \"#569CD6\"\n            }\n        },\n        {\n            types: [\n                \"number\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"#B5CEA8\"\n            }\n        },\n        {\n            types: [\n                \"constant\"\n            ],\n            style: {\n                color: \"#f8fafc\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#9CDCFE\"\n            }\n        },\n        {\n            types: [\n                \"deleted\",\n                \"string\",\n                \"attr-value\",\n                \"template-punctuation\"\n            ],\n            style: {\n                color: \"#cbd5e1\"\n            }\n        },\n        {\n            types: [\n                \"selector\"\n            ],\n            style: {\n                color: \"#D7BA7D\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"operator\"\n            ],\n            style: {\n                color: \"#D4D4D4\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"#808080\"\n            }\n        },\n        {\n            types: [\n                \"function\"\n            ],\n            style: {\n                color: \"#7dd3fc\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"char\"\n            ],\n            style: {\n                color: \"#D16969\"\n            }\n        }\n    ]\n};\nvar jettwaveDark_default = theme15;\n// src/themes/jettwaveLight.ts\nvar theme16 = {\n    plain: {\n        color: \"#0f172a\",\n        backgroundColor: \"#f1f5f9\"\n    },\n    styles: [\n        {\n            types: [\n                \"prolog\"\n            ],\n            style: {\n                color: \"#000080\"\n            }\n        },\n        {\n            types: [\n                \"comment\"\n            ],\n            style: {\n                color: \"#6A9955\"\n            }\n        },\n        {\n            types: [\n                \"builtin\",\n                \"changed\",\n                \"keyword\",\n                \"interpolation-punctuation\"\n            ],\n            style: {\n                color: \"#0c4a6e\"\n            }\n        },\n        {\n            types: [\n                \"number\",\n                \"inserted\"\n            ],\n            style: {\n                color: \"#B5CEA8\"\n            }\n        },\n        {\n            types: [\n                \"constant\"\n            ],\n            style: {\n                color: \"#0f172a\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#0c4a6e\"\n            }\n        },\n        {\n            types: [\n                \"deleted\",\n                \"string\",\n                \"attr-value\",\n                \"template-punctuation\"\n            ],\n            style: {\n                color: \"#64748b\"\n            }\n        },\n        {\n            types: [\n                \"selector\"\n            ],\n            style: {\n                color: \"#D7BA7D\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"tag\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\",\n                \"operator\"\n            ],\n            style: {\n                color: \"#475569\"\n            }\n        },\n        {\n            types: [\n                \"punctuation\"\n            ],\n            languages: [\n                \"markup\"\n            ],\n            style: {\n                color: \"#808080\"\n            }\n        },\n        {\n            types: [\n                \"function\"\n            ],\n            style: {\n                color: \"#0e7490\"\n            }\n        },\n        {\n            types: [\n                \"class-name\"\n            ],\n            style: {\n                color: \"#0ea5e9\"\n            }\n        },\n        {\n            types: [\n                \"char\"\n            ],\n            style: {\n                color: \"#D16969\"\n            }\n        }\n    ]\n};\nvar jettwaveLight_default = theme16;\n// src/themes/oneDark.ts\nvar theme17 = {\n    plain: {\n        backgroundColor: \"hsl(220, 13%, 18%)\",\n        color: \"hsl(220, 14%, 71%)\",\n        textShadow: \"0 1px rgba(0, 0, 0, 0.3)\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"cdata\"\n            ],\n            style: {\n                color: \"hsl(220, 10%, 40%)\"\n            }\n        },\n        {\n            types: [\n                \"doctype\",\n                \"punctuation\",\n                \"entity\"\n            ],\n            style: {\n                color: \"hsl(220, 14%, 71%)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\",\n                \"class-name\",\n                \"maybe-class-name\",\n                \"boolean\",\n                \"constant\",\n                \"number\",\n                \"atrule\"\n            ],\n            style: {\n                color: \"hsl(29, 54%, 61%)\"\n            }\n        },\n        {\n            types: [\n                \"keyword\"\n            ],\n            style: {\n                color: \"hsl(286, 60%, 67%)\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"tag\",\n                \"symbol\",\n                \"deleted\",\n                \"important\"\n            ],\n            style: {\n                color: \"hsl(355, 65%, 65%)\"\n            }\n        },\n        {\n            types: [\n                \"selector\",\n                \"string\",\n                \"char\",\n                \"builtin\",\n                \"inserted\",\n                \"regex\",\n                \"attr-value\"\n            ],\n            style: {\n                color: \"hsl(95, 38%, 62%)\"\n            }\n        },\n        {\n            types: [\n                \"variable\",\n                \"operator\",\n                \"function\"\n            ],\n            style: {\n                color: \"hsl(207, 82%, 66%)\"\n            }\n        },\n        {\n            types: [\n                \"url\"\n            ],\n            style: {\n                color: \"hsl(187, 47%, 55%)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                textDecorationLine: \"line-through\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                textDecorationLine: \"underline\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                color: \"hsl(220, 14%, 71%)\"\n            }\n        }\n    ]\n};\nvar oneDark_default = theme17;\n// src/themes/oneLight.ts\nvar theme18 = {\n    plain: {\n        backgroundColor: \"hsl(230, 1%, 98%)\",\n        color: \"hsl(230, 8%, 24%)\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"cdata\"\n            ],\n            style: {\n                color: \"hsl(230, 4%, 64%)\"\n            }\n        },\n        {\n            types: [\n                \"doctype\",\n                \"punctuation\",\n                \"entity\"\n            ],\n            style: {\n                color: \"hsl(230, 8%, 24%)\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\",\n                \"class-name\",\n                \"boolean\",\n                \"constant\",\n                \"number\",\n                \"atrule\"\n            ],\n            style: {\n                color: \"hsl(35, 99%, 36%)\"\n            }\n        },\n        {\n            types: [\n                \"keyword\"\n            ],\n            style: {\n                color: \"hsl(301, 63%, 40%)\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"tag\",\n                \"symbol\",\n                \"deleted\",\n                \"important\"\n            ],\n            style: {\n                color: \"hsl(5, 74%, 59%)\"\n            }\n        },\n        {\n            types: [\n                \"selector\",\n                \"string\",\n                \"char\",\n                \"builtin\",\n                \"inserted\",\n                \"regex\",\n                \"attr-value\",\n                \"punctuation\"\n            ],\n            style: {\n                color: \"hsl(119, 34%, 47%)\"\n            }\n        },\n        {\n            types: [\n                \"variable\",\n                \"operator\",\n                \"function\"\n            ],\n            style: {\n                color: \"hsl(221, 87%, 60%)\"\n            }\n        },\n        {\n            types: [\n                \"url\"\n            ],\n            style: {\n                color: \"hsl(198, 99%, 37%)\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                textDecorationLine: \"line-through\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                textDecorationLine: \"underline\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                color: \"hsl(230, 8%, 24%)\"\n            }\n        }\n    ]\n};\nvar oneLight_default = theme18;\n// src/index.ts\n\n// src/components/useThemeDictionary.ts\n\n// src/utils/themeToDict.ts\nvar themeToDict = (theme19, language)=>{\n    const { plain } = theme19;\n    const themeDict = theme19.styles.reduce((acc, themeEntry)=>{\n        const { languages: languages2, style } = themeEntry;\n        if (languages2 && !languages2.includes(language)) {\n            return acc;\n        }\n        themeEntry.types.forEach((type)=>{\n            const accStyle = __spreadValues(__spreadValues({}, acc[type]), style);\n            acc[type] = accStyle;\n        });\n        return acc;\n    }, {});\n    themeDict.root = plain;\n    themeDict.plain = __spreadProps(__spreadValues({}, plain), {\n        backgroundColor: void 0\n    });\n    return themeDict;\n};\nvar themeToDict_default = themeToDict;\n// src/components/useThemeDictionary.ts\nvar useThemeDictionary = (language, theme19)=>{\n    const [themeDictionary, setThemeDictionary] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(themeToDict_default(theme19, language));\n    const previousTheme = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const previousLanguage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (theme19 !== previousTheme.current || language !== previousLanguage.current) {\n            previousTheme.current = theme19;\n            previousLanguage.current = language;\n            setThemeDictionary(themeToDict_default(theme19, language));\n        }\n    }, [\n        language,\n        theme19\n    ]);\n    return themeDictionary;\n};\n// src/components/useGetLineProps.ts\n\n\nvar useGetLineProps = (themeDictionary)=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((_a)=>{\n        var _b = _a, { className, style, line } = _b, rest = __objRest(_b, [\n            \"className\",\n            \"style\",\n            \"line\"\n        ]);\n        const output = __spreadProps(__spreadValues({}, rest), {\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"token-line\", className)\n        });\n        if (typeof themeDictionary === \"object\" && \"plain\" in themeDictionary) output.style = themeDictionary.plain;\n        if (typeof style === \"object\") output.style = __spreadValues(__spreadValues({}, output.style || {}), style);\n        return output;\n    }, [\n        themeDictionary\n    ]);\n// src/components/useGetTokenProps.ts\n\n\nvar useGetTokenProps = (themeDictionary)=>{\n    const styleForToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ types, empty })=>{\n        if (themeDictionary == null) return void 0;\n        else if (types.length === 1 && types[0] === \"plain\") {\n            return empty != null ? {\n                display: \"inline-block\"\n            } : void 0;\n        } else if (types.length === 1 && empty != null) {\n            return themeDictionary[types[0]];\n        }\n        return Object.assign(empty != null ? {\n            display: \"inline-block\"\n        } : {}, ...types.map((type)=>themeDictionary[type]));\n    }, [\n        themeDictionary\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((_a)=>{\n        var _b = _a, { token, className, style } = _b, rest = __objRest(_b, [\n            \"token\",\n            \"className\",\n            \"style\"\n        ]);\n        const output = __spreadProps(__spreadValues({}, rest), {\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"token\", ...token.types, className),\n            children: token.content,\n            style: styleForToken(token)\n        });\n        if (style != null) {\n            output.style = __spreadValues(__spreadValues({}, output.style || {}), style);\n        }\n        return output;\n    }, [\n        styleForToken\n    ]);\n};\n// src/utils/normalizeTokens.ts\nvar newlineRe = /\\r\\n|\\r|\\n/;\nvar normalizeEmptyLines = (line)=>{\n    if (line.length === 0) {\n        line.push({\n            types: [\n                \"plain\"\n            ],\n            content: \"\\n\",\n            empty: true\n        });\n    } else if (line.length === 1 && line[0].content === \"\") {\n        line[0].content = \"\\n\";\n        line[0].empty = true;\n    }\n};\nvar appendTypes = (types, add)=>{\n    const typesSize = types.length;\n    if (typesSize > 0 && types[typesSize - 1] === add) {\n        return types;\n    }\n    return types.concat(add);\n};\nvar normalizeTokens = (tokens)=>{\n    const typeArrStack = [\n        []\n    ];\n    const tokenArrStack = [\n        tokens\n    ];\n    const tokenArrIndexStack = [\n        0\n    ];\n    const tokenArrSizeStack = [\n        tokens.length\n    ];\n    let i = 0;\n    let stackIndex = 0;\n    let currentLine = [];\n    const acc = [\n        currentLine\n    ];\n    while(stackIndex > -1){\n        while((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]){\n            let content;\n            let types = typeArrStack[stackIndex];\n            const tokenArr = tokenArrStack[stackIndex];\n            const token = tokenArr[i];\n            if (typeof token === \"string\") {\n                types = stackIndex > 0 ? types : [\n                    \"plain\"\n                ];\n                content = token;\n            } else {\n                types = appendTypes(types, token.type);\n                if (token.alias) {\n                    types = appendTypes(types, token.alias);\n                }\n                content = token.content;\n            }\n            if (typeof content !== \"string\") {\n                stackIndex++;\n                typeArrStack.push(types);\n                tokenArrStack.push(content);\n                tokenArrIndexStack.push(0);\n                tokenArrSizeStack.push(content.length);\n                continue;\n            }\n            const splitByNewlines = content.split(newlineRe);\n            const newlineCount = splitByNewlines.length;\n            currentLine.push({\n                types,\n                content: splitByNewlines[0]\n            });\n            for(let i2 = 1; i2 < newlineCount; i2++){\n                normalizeEmptyLines(currentLine);\n                acc.push(currentLine = []);\n                currentLine.push({\n                    types,\n                    content: splitByNewlines[i2]\n                });\n            }\n        }\n        stackIndex--;\n        typeArrStack.pop();\n        tokenArrStack.pop();\n        tokenArrIndexStack.pop();\n        tokenArrSizeStack.pop();\n    }\n    normalizeEmptyLines(currentLine);\n    return acc;\n};\nvar normalizeTokens_default = normalizeTokens;\n// src/components/useTokenize.ts\n\nvar useTokenize = ({ prism, code, grammar, language })=>{\n    const prismRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(prism);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (grammar == null) return normalizeTokens_default([\n            code\n        ]);\n        const prismConfig = {\n            code,\n            grammar,\n            language,\n            tokens: []\n        };\n        prismRef.current.hooks.run(\"before-tokenize\", prismConfig);\n        prismConfig.tokens = prismRef.current.tokenize(code, grammar);\n        prismRef.current.hooks.run(\"after-tokenize\", prismConfig);\n        return normalizeTokens_default(prismConfig.tokens);\n    }, [\n        code,\n        grammar,\n        language\n    ]);\n};\n// src/components/highlight.ts\nvar Highlight = ({ children, language: _language, code, theme: theme19, prism })=>{\n    const language = _language.toLowerCase();\n    const themeDictionary = useThemeDictionary(language, theme19);\n    const getLineProps = useGetLineProps(themeDictionary);\n    const getTokenProps = useGetTokenProps(themeDictionary);\n    const grammar = prism.languages[language];\n    const tokens = useTokenize({\n        prism,\n        language,\n        code,\n        grammar\n    });\n    return children({\n        tokens,\n        className: `prism-code language-${language}`,\n        style: themeDictionary != null ? themeDictionary.root : {},\n        getLineProps,\n        getTokenProps\n    });\n};\n// src/index.ts\nvar Highlight2 = (props)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Highlight, __spreadProps(__spreadValues({}, props), {\n        prism: props.prism || Prism,\n        theme: props.theme || vsDark_default,\n        code: props.code,\n        language: props.language\n    }));\n /*! Bundled license information:\n\nprismjs/prism.js:\n  (**\n   * Prism: Lightweight, robust, elegant syntax highlighting\n   *\n   * @license MIT <https://opensource.org/licenses/MIT>\n   * @author Lea Verou <https://lea.verou.me>\n   * @namespace\n   * @public\n   *)\n*/  //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prism-react-renderer/dist/index.mjs\n");

/***/ })

};
;