"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-instantsearch-hooks";
exports.ids = ["vendor-chunks/react-instantsearch-hooks"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/index.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar AlgoliaSearchHelper = __webpack_require__(/*! ./src/algoliasearch.helper */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\");\nvar SearchParameters = __webpack_require__(/*! ./src/SearchParameters */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./src/SearchResults */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @return {AlgoliaSearchHelper} The helper instance\n */ function algoliasearchHelper(client, index, opts) {\n    return new AlgoliaSearchHelper(client, index, opts);\n}\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */ algoliasearchHelper.version = __webpack_require__(/*! ./src/version */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/version.js\");\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */ algoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */ algoliasearchHelper.SearchParameters = SearchParameters;\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */ algoliasearchHelper.SearchResults = SearchResults;\nmodule.exports = algoliasearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxzQkFBc0JDLG1CQUFPQSxDQUFDO0FBQ2xDLElBQUlDLG1CQUFtQkQsbUJBQU9BLENBQUM7QUFDL0IsSUFBSUUsZ0JBQWdCRixtQkFBT0EsQ0FBQztBQUU1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBOEJDLEdBQ0QsU0FBU0csb0JBQW9CQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPLElBQUlQLG9CQUFvQkssUUFBUUMsT0FBT0M7QUFDaEQ7QUFFQTs7OztDQUlDLEdBQ0RILG9CQUFvQkksT0FBTyxHQUFHUCxtQkFBT0EsQ0FBQztBQUV0Qzs7OztDQUlDLEdBQ0RHLG9CQUFvQkosbUJBQW1CLEdBQUdBO0FBRTFDOzs7O0NBSUMsR0FDREksb0JBQW9CRixnQkFBZ0IsR0FBR0E7QUFFdkM7Ozs7Q0FJQyxHQUNERSxvQkFBb0JELGFBQWEsR0FBR0E7QUFFcENNLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9pbmRleC5qcz9lOTBhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFsZ29saWFTZWFyY2hIZWxwZXIgPSByZXF1aXJlKCcuL3NyYy9hbGdvbGlhc2VhcmNoLmhlbHBlcicpO1xudmFyIFNlYXJjaFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3NyYy9TZWFyY2hQYXJhbWV0ZXJzJyk7XG52YXIgU2VhcmNoUmVzdWx0cyA9IHJlcXVpcmUoJy4vc3JjL1NlYXJjaFJlc3VsdHMnKTtcblxuLyoqXG4gKiBUaGUgYWxnb2xpYXNlYXJjaEhlbHBlciBtb2R1bGUgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBsZXQgaXRzXG4gKiBjb250YWlucyBldmVyeXRoaW5nIG5lZWRlZCB0byB1c2UgdGhlIEFsZ29saWFzZWFyY2hcbiAqIEhlbHBlci4gSXQgaXMgYSBhbHNvIGEgZnVuY3Rpb24gdGhhdCBpbnN0YW5jaWF0ZSB0aGUgaGVscGVyLlxuICogVG8gdXNlIHRoZSBoZWxwZXIsIHlvdSBhbHNvIG5lZWQgdGhlIEFsZ29saWEgSlMgY2xpZW50IHYzLlxuICogQGV4YW1wbGVcbiAqIC8vdXNpbmcgdGhlIFVNRCBidWlsZFxuICogdmFyIGNsaWVudCA9IGFsZ29saWFzZWFyY2goJ2xhdGVuY3knLCAnNmJlMDU3NmZmNjFjMDUzZDVmOWEzMjI1ZTJhOTBmNzYnKTtcbiAqIHZhciBoZWxwZXIgPSBhbGdvbGlhc2VhcmNoSGVscGVyKGNsaWVudCwgJ2Jlc3RidXknLCB7XG4gKiAgIGZhY2V0czogWydzaGlwcGluZyddLFxuICogICBkaXNqdW5jdGl2ZUZhY2V0czogWydjYXRlZ29yeSddXG4gKiB9KTtcbiAqIGhlbHBlci5vbigncmVzdWx0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgY29uc29sZS5sb2coZXZlbnQucmVzdWx0cyk7XG4gKiB9KTtcbiAqIGhlbHBlclxuICogICAudG9nZ2xlRmFjZXRSZWZpbmVtZW50KCdjYXRlZ29yeScsICdNb3ZpZXMgJiBUViBTaG93cycpXG4gKiAgIC50b2dnbGVGYWNldFJlZmluZW1lbnQoJ3NoaXBwaW5nJywgJ0ZyZWUgc2hpcHBpbmcnKVxuICogICAuc2VhcmNoKCk7XG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGhlbHBlciBpcyBhbiBldmVudCBlbWl0dGVyIHVzaW5nIHRoZSBub2RlIEFQSVxuICogaGVscGVyLm9uKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5vbmNlKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5yZW1vdmVMaXN0ZW5lcigncmVzdWx0JywgdXBkYXRlVGhlUmVzdWx0cyk7XG4gKiBoZWxwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZXN1bHQnKTtcbiAqIEBtb2R1bGUgYWxnb2xpYXNlYXJjaEhlbHBlclxuICogQHBhcmFtICB7QWxnb2xpYVNlYXJjaH0gY2xpZW50IGFuIEFsZ29saWFTZWFyY2ggY2xpZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGluZGV4IHRoZSBuYW1lIG9mIHRoZSBpbmRleCB0byBxdWVyeVxuICogQHBhcmFtICB7U2VhcmNoUGFyYW1ldGVyc3xvYmplY3R9IG9wdHMgYW4gb2JqZWN0IGRlZmluaW5nIHRoZSBpbml0aWFsIGNvbmZpZyBvZiB0aGUgc2VhcmNoLiBJdCBkb2Vzbid0IGhhdmUgdG8gYmUgYSB7U2VhcmNoUGFyYW1ldGVyc30sIGp1c3QgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgeW91IG5lZWQgZnJvbSBpdC5cbiAqIEByZXR1cm4ge0FsZ29saWFTZWFyY2hIZWxwZXJ9IFRoZSBoZWxwZXIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWxnb2xpYXNlYXJjaEhlbHBlcihjbGllbnQsIGluZGV4LCBvcHRzKSB7XG4gIHJldHVybiBuZXcgQWxnb2xpYVNlYXJjaEhlbHBlcihjbGllbnQsIGluZGV4LCBvcHRzKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBjdXJyZW50bHkgdXNlZFxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci52ZXJzaW9uXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLnZlcnNpb24gPSByZXF1aXJlKCcuL3NyYy92ZXJzaW9uJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIHRoZSBIZWxwZXIuXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXJcbiAqIEB0eXBlIHtBbGdvbGlhU2VhcmNoSGVscGVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXIgPSBBbGdvbGlhU2VhcmNoSGVscGVyO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBzZWFyY2guXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnNcbiAqIEB0eXBlIHtTZWFyY2hQYXJhbWV0ZXJzfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnMgPSBTZWFyY2hQYXJhbWV0ZXJzO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIHNlYXJjaC5cbiAqIEBtZW1iZXIgbW9kdWxlOmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0c1xuICogQHR5cGUge1NlYXJjaFJlc3VsdHN9XG4gKi9cbmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0cyA9IFNlYXJjaFJlc3VsdHM7XG5cbm1vZHVsZS5leHBvcnRzID0gYWxnb2xpYXNlYXJjaEhlbHBlcjtcbiJdLCJuYW1lcyI6WyJBbGdvbGlhU2VhcmNoSGVscGVyIiwicmVxdWlyZSIsIlNlYXJjaFBhcmFtZXRlcnMiLCJTZWFyY2hSZXN1bHRzIiwiYWxnb2xpYXNlYXJjaEhlbHBlciIsImNsaWVudCIsImluZGV4Iiwib3B0cyIsInZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/DerivedHelper/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/DerivedHelper/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/@algolia/events/events.js\");\nvar inherits = __webpack_require__(/*! ../functions/inherits */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/inherits.js\");\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state\n */ function DerivedHelper(mainHelper, fn) {\n    this.main = mainHelper;\n    this.fn = fn;\n    this.lastResults = null;\n}\ninherits(DerivedHelper, EventEmitter);\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */ DerivedHelper.prototype.detach = function() {\n    this.removeAllListeners();\n    this.main.detachDerivedHelper(this);\n};\nDerivedHelper.prototype.getModifiedState = function(parameters) {\n    return this.fn(parameters);\n};\nmodule.exports = DerivedHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL0Rlcml2ZWRIZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUUzQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELFNBQVNFLGNBQWNDLFVBQVUsRUFBRUMsRUFBRTtJQUNuQyxJQUFJLENBQUNDLElBQUksR0FBR0Y7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0E7SUFDVixJQUFJLENBQUNFLFdBQVcsR0FBRztBQUNyQjtBQUVBTCxTQUFTQyxlQUFlSDtBQUV4Qjs7OztDQUlDLEdBQ0RHLGNBQWNLLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHO0lBQy9CLElBQUksQ0FBQ0Msa0JBQWtCO0lBQ3ZCLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxtQkFBbUIsQ0FBQyxJQUFJO0FBQ3BDO0FBRUFSLGNBQWNLLFNBQVMsQ0FBQ0ksZ0JBQWdCLEdBQUcsU0FBVUMsVUFBVTtJQUM3RCxPQUFPLElBQUksQ0FBQ1IsRUFBRSxDQUFDUTtBQUNqQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL0Rlcml2ZWRIZWxwZXIvaW5kZXguanM/ZmJlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdAYWxnb2xpYS9ldmVudHMnKTtcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2luaGVyaXRzJyk7XG5cbi8qKlxuICogQSBEZXJpdmVkSGVscGVyIGlzIGEgd2F5IHRvIGNyZWF0ZSBzdWIgcmVxdWVzdHMgdG9cbiAqIEFsZ29saWEgZnJvbSBhIG1haW4gaGVscGVyLlxuICogQGNsYXNzXG4gKiBAY2xhc3NkZXNjIFRoZSBEZXJpdmVkSGVscGVyIHByb3ZpZGVzIGFuIGV2ZW50IGJhc2VkIGludGVyZmFjZSBmb3Igc2VhcmNoIGNhbGxiYWNrczpcbiAqICAtIHNlYXJjaDogd2hlbiBhIHNlYXJjaCBpcyB0cmlnZ2VyZWQgdXNpbmcgdGhlIGBzZWFyY2goKWAgbWV0aG9kLlxuICogIC0gcmVzdWx0OiB3aGVuIHRoZSByZXNwb25zZSBpcyByZXRyaWV2ZWQgZnJvbSBBbGdvbGlhIGFuZCBpcyBwcm9jZXNzZWQuXG4gKiAgICBUaGlzIGV2ZW50IGNvbnRhaW5zIGEge0BsaW5rIFNlYXJjaFJlc3VsdHN9IG9iamVjdCBhbmQgdGhlXG4gKiAgICB7QGxpbmsgU2VhcmNoUGFyYW1ldGVyc30gY29ycmVzcG9uZGluZyB0byB0aGlzIGFuc3dlci5cbiAqIEBwYXJhbSB7QWxnb2xpYVNlYXJjaEhlbHBlcn0gbWFpbkhlbHBlciB0aGUgbWFpbiBoZWxwZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGRlcml2ZWQgc3RhdGVcbiAqL1xuZnVuY3Rpb24gRGVyaXZlZEhlbHBlcihtYWluSGVscGVyLCBmbikge1xuICB0aGlzLm1haW4gPSBtYWluSGVscGVyO1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMubGFzdFJlc3VsdHMgPSBudWxsO1xufVxuXG5pbmhlcml0cyhEZXJpdmVkSGVscGVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vKipcbiAqIERldGFjaCB0aGlzIGhlbHBlciBmcm9tIHRoZSBtYWluIGhlbHBlclxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICogQHRocm93cyBFcnJvciBpZiB0aGUgZGVyaXZlZCBoZWxwZXIgaXMgYWxyZWFkeSBkZXRhY2hlZFxuICovXG5EZXJpdmVkSGVscGVyLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMubWFpbi5kZXRhY2hEZXJpdmVkSGVscGVyKHRoaXMpO1xufTtcblxuRGVyaXZlZEhlbHBlci5wcm90b3R5cGUuZ2V0TW9kaWZpZWRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gIHJldHVybiB0aGlzLmZuKHBhcmFtZXRlcnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXJpdmVkSGVscGVyO1xuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJpbmhlcml0cyIsIkRlcml2ZWRIZWxwZXIiLCJtYWluSGVscGVyIiwiZm4iLCJtYWluIiwibGFzdFJlc3VsdHMiLCJwcm90b3R5cGUiLCJkZXRhY2giLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJkZXRhY2hEZXJpdmVkSGVscGVyIiwiZ2V0TW9kaWZpZWRTdGF0ZSIsInBhcmFtZXRlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js ***!
  \*************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */ var defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar lib = {\n    /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */ addRefinement: function addRefinement(refinementList, attribute, value) {\n        if (lib.isRefined(refinementList, attribute, value)) {\n            return refinementList;\n        }\n        var valueAsString = \"\" + value;\n        var facetRefinement = !refinementList[attribute] ? [\n            valueAsString\n        ] : refinementList[attribute].concat(valueAsString);\n        var mod = {};\n        mod[attribute] = facetRefinement;\n        return defaultsPure({}, mod, refinementList);\n    },\n    /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */ removeRefinement: function removeRefinement(refinementList, attribute, value) {\n        if (value === undefined) {\n            // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n            // the form with a string will remove the attribute completely\n            return lib.clearRefinement(refinementList, function(v, f) {\n                return attribute === f;\n            });\n        }\n        var valueAsString = \"\" + value;\n        return lib.clearRefinement(refinementList, function(v, f) {\n            return attribute === f && valueAsString === v;\n        });\n    },\n    /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */ toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n        if (value === undefined) throw new Error(\"toggleRefinement should be used with a value\");\n        if (lib.isRefined(refinementList, attribute, value)) {\n            return lib.removeRefinement(refinementList, attribute, value);\n        }\n        return lib.addRefinement(refinementList, attribute, value);\n    },\n    /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */ clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n        if (attribute === undefined) {\n            // return the same object if the list is already empty\n            // this is mainly for tests, as it doesn't have much impact on performance\n            if (!objectHasKeys(refinementList)) {\n                return refinementList;\n            }\n            return {};\n        } else if (typeof attribute === \"string\") {\n            return omit(refinementList, [\n                attribute\n            ]);\n        } else if (typeof attribute === \"function\") {\n            var hasChanged = false;\n            var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n                var values = refinementList[key] || [];\n                var facetList = values.filter(function(value) {\n                    return !attribute(value, key, refinementType);\n                });\n                if (facetList.length !== values.length) {\n                    hasChanged = true;\n                }\n                memo[key] = facetList;\n                return memo;\n            }, {});\n            if (hasChanged) return newRefinementList;\n            return refinementList;\n        }\n        // We return nothing if the attribute is not undefined, a string or a function,\n        // as it is not a valid value for a refinement\n        return undefined;\n    },\n    /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */ isRefined: function isRefined(refinementList, attribute, refinementValue) {\n        var containsRefinements = Boolean(refinementList[attribute]) && refinementList[attribute].length > 0;\n        if (refinementValue === undefined || !containsRefinements) {\n            return containsRefinements;\n        }\n        var refinementValueAsString = \"\" + refinementValue;\n        return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n    }\n};\nmodule.exports = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/index.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar intersection = __webpack_require__(/*! ../functions/intersection */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/intersection.js\");\nvar merge = __webpack_require__(/*! ../functions/merge */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar valToNumber = __webpack_require__(/*! ../functions/valToNumber */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/valToNumber.js\");\nvar isValidUserToken = __webpack_require__(/*! ../utils/isValidUserToken */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\");\nvar RefinementList = __webpack_require__(/*! ./RefinementList */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\");\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */ function isEqualNumericRefinement(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        return a.length === b.length && a.every(function(el, i) {\n            return isEqualNumericRefinement(b[i], el);\n        });\n    }\n    return a === b;\n}\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */ function findArray(array, searchedValue) {\n    return find(array, function(currentValue) {\n        return isEqualNumericRefinement(currentValue, searchedValue);\n    });\n}\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */ /**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */ /**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */ function SearchParameters(newParameters) {\n    var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n    if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n        // eslint-disable-next-line no-console\n        console.warn(\"[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}\");\n    }\n    /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */ this.facets = params.facets || [];\n    /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */ this.disjunctiveFacets = params.disjunctiveFacets || [];\n    /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */ this.hierarchicalFacets = params.hierarchicalFacets || [];\n    // Refinements\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.facetsRefinements = params.facetsRefinements || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.facetsExcludes = params.facetsExcludes || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */ this.numericRefinements = params.numericRefinements || {};\n    /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */ this.tagRefinements = params.tagRefinements || [];\n    /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */ this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(params).forEach(function(paramName) {\n        var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n        var isValueDefined = params[paramName] !== undefined;\n        if (!isKeyKnown && isValueDefined) {\n            self[paramName] = params[paramName];\n        }\n    });\n}\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */ SearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */ SearchParameters._parseNumbers = function(partialState) {\n    // Do not parse numbers again in SearchParameters, they ought to be parsed already\n    if (partialState instanceof SearchParameters) return partialState;\n    var numbers = {};\n    var numberKeys = [\n        \"aroundPrecision\",\n        \"aroundRadius\",\n        \"getRankingInfo\",\n        \"minWordSizefor2Typos\",\n        \"minWordSizefor1Typo\",\n        \"page\",\n        \"maxValuesPerFacet\",\n        \"distinct\",\n        \"minimumAroundRadius\",\n        \"hitsPerPage\",\n        \"minProximity\"\n    ];\n    numberKeys.forEach(function(k) {\n        var value = partialState[k];\n        if (typeof value === \"string\") {\n            var parsedValue = parseFloat(value);\n            // global isNaN is ok to use here, value is only number or NaN\n            numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n        }\n    });\n    // there's two formats of insideBoundingBox, we need to parse\n    // the one which is an array of float geo rectangles\n    if (Array.isArray(partialState.insideBoundingBox)) {\n        numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n            if (Array.isArray(geoRect)) {\n                return geoRect.map(function(value) {\n                    return parseFloat(value);\n                });\n            }\n            return geoRect;\n        });\n    }\n    if (partialState.numericRefinements) {\n        var numericRefinements = {};\n        Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n            var operators = partialState.numericRefinements[attribute] || {};\n            numericRefinements[attribute] = {};\n            Object.keys(operators).forEach(function(operator) {\n                var values = operators[operator];\n                var parsedValues = values.map(function(v) {\n                    if (Array.isArray(v)) {\n                        return v.map(function(vPrime) {\n                            if (typeof vPrime === \"string\") {\n                                return parseFloat(vPrime);\n                            }\n                            return vPrime;\n                        });\n                    } else if (typeof v === \"string\") {\n                        return parseFloat(v);\n                    }\n                    return v;\n                });\n                numericRefinements[attribute][operator] = parsedValues;\n            });\n        });\n        numbers.numericRefinements = numericRefinements;\n    }\n    return merge({}, partialState, numbers);\n};\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */ SearchParameters.make = function makeSearchParameters(newParameters) {\n    var instance = new SearchParameters(newParameters);\n    var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n    hierarchicalFacets.forEach(function(facet) {\n        if (facet.rootPath) {\n            var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n            if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n                instance = instance.clearRefinements(facet.name);\n            }\n            // get it again in case it has been cleared\n            currentRefinement = instance.getHierarchicalRefinement(facet.name);\n            if (currentRefinement.length === 0) {\n                instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n            }\n        }\n    });\n    return instance;\n};\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */ SearchParameters.validate = function(currentState, parameters) {\n    var params = parameters || {};\n    if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n        return new Error(\"[Tags] Cannot switch from the managed tag API to the advanced API. It is probably \" + \"an error, if it is really what you want, you should first clear the tags with clearTags method.\");\n    }\n    if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n        return new Error(\"[Tags] Cannot switch from the advanced tag API to the managed API. It is probably \" + \"an error, if it is not, you should first clear the tags with clearTags method.\");\n    }\n    if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {\n        return new Error(\"[Numeric filters] Can't switch from the advanced to the managed API. It\" + \" is probably an error, if this is really what you want, you have to first\" + \" clear the numeric filters.\");\n    }\n    if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n        return new Error(\"[Numeric filters] Can't switch from the managed API to the advanced. It\" + \" is probably an error, if this is really what you want, you have to first\" + \" clear the numeric filters.\");\n    }\n    return null;\n};\nSearchParameters.prototype = {\n    constructor: SearchParameters,\n    /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */ clearRefinements: function clearRefinements(attribute) {\n        var patch = {\n            numericRefinements: this._clearNumericRefinements(attribute),\n            facetsRefinements: RefinementList.clearRefinement(this.facetsRefinements, attribute, \"conjunctiveFacet\"),\n            facetsExcludes: RefinementList.clearRefinement(this.facetsExcludes, attribute, \"exclude\"),\n            disjunctiveFacetsRefinements: RefinementList.clearRefinement(this.disjunctiveFacetsRefinements, attribute, \"disjunctiveFacet\"),\n            hierarchicalFacetsRefinements: RefinementList.clearRefinement(this.hierarchicalFacetsRefinements, attribute, \"hierarchicalFacet\")\n        };\n        if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {\n            return this;\n        }\n        return this.setQueryParameters(patch);\n    },\n    /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */ clearTags: function clearTags() {\n        if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n        return this.setQueryParameters({\n            tagFilters: undefined,\n            tagRefinements: []\n        });\n    },\n    /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */ setIndex: function setIndex(index) {\n        if (index === this.index) return this;\n        return this.setQueryParameters({\n            index: index\n        });\n    },\n    /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */ setQuery: function setQuery(newQuery) {\n        if (newQuery === this.query) return this;\n        return this.setQueryParameters({\n            query: newQuery\n        });\n    },\n    /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */ setPage: function setPage(newPage) {\n        if (newPage === this.page) return this;\n        return this.setQueryParameters({\n            page: newPage\n        });\n    },\n    /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */ setFacets: function setFacets(facets) {\n        return this.setQueryParameters({\n            facets: facets\n        });\n    },\n    /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */ setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n        return this.setQueryParameters({\n            disjunctiveFacets: facets\n        });\n    },\n    /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */ setHitsPerPage: function setHitsPerPage(n) {\n        if (this.hitsPerPage === n) return this;\n        return this.setQueryParameters({\n            hitsPerPage: n\n        });\n    },\n    /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */ setTypoTolerance: function setTypoTolerance(typoTolerance) {\n        if (this.typoTolerance === typoTolerance) return this;\n        return this.setQueryParameters({\n            typoTolerance: typoTolerance\n        });\n    },\n    /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */ addNumericRefinement: function(attribute, operator, value) {\n        var val = valToNumber(value);\n        if (this.isNumericRefined(attribute, operator, val)) return this;\n        var mod = merge({}, this.numericRefinements);\n        mod[attribute] = merge({}, mod[attribute]);\n        if (mod[attribute][operator]) {\n            // Array copy\n            mod[attribute][operator] = mod[attribute][operator].slice();\n            // Add the element. Concat can't be used here because value can be an array.\n            mod[attribute][operator].push(val);\n        } else {\n            mod[attribute][operator] = [\n                val\n            ];\n        }\n        return this.setQueryParameters({\n            numericRefinements: mod\n        });\n    },\n    /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getConjunctiveRefinements: function(facetName) {\n        if (!this.isConjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.facetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getDisjunctiveRefinements: function(facetName) {\n        if (!this.isDisjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.disjunctiveFacetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getHierarchicalRefinement: function(facetName) {\n        // we send an array but we currently do not support multiple\n        // hierarchicalRefinements for a hierarchicalFacet\n        return this.hierarchicalFacetsRefinements[facetName] || [];\n    },\n    /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */ getExcludeRefinements: function(facetName) {\n        if (!this.isConjunctiveFacet(facetName)) {\n            return [];\n        }\n        return this.facetsExcludes[facetName] || [];\n    },\n    /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */ removeNumericRefinement: function(attribute, operator, number) {\n        var paramValue = number;\n        if (paramValue !== undefined) {\n            if (!this.isNumericRefined(attribute, operator, paramValue)) {\n                return this;\n            }\n            return this.setQueryParameters({\n                numericRefinements: this._clearNumericRefinements(function(value, key) {\n                    return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));\n                })\n            });\n        } else if (operator !== undefined) {\n            if (!this.isNumericRefined(attribute, operator)) return this;\n            return this.setQueryParameters({\n                numericRefinements: this._clearNumericRefinements(function(value, key) {\n                    return key === attribute && value.op === operator;\n                })\n            });\n        }\n        if (!this.isNumericRefined(attribute)) return this;\n        return this.setQueryParameters({\n            numericRefinements: this._clearNumericRefinements(function(value, key) {\n                return key === attribute;\n            })\n        });\n    },\n    /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */ getNumericRefinements: function(facetName) {\n        return this.numericRefinements[facetName] || {};\n    },\n    /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */ getNumericRefinement: function(attribute, operator) {\n        return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n    },\n    /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */ _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n        if (attribute === undefined) {\n            if (!objectHasKeys(this.numericRefinements)) {\n                return this.numericRefinements;\n            }\n            return {};\n        } else if (typeof attribute === \"string\") {\n            return omit(this.numericRefinements, [\n                attribute\n            ]);\n        } else if (typeof attribute === \"function\") {\n            var hasChanged = false;\n            var numericRefinements = this.numericRefinements;\n            var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n                var operators = numericRefinements[key];\n                var operatorList = {};\n                operators = operators || {};\n                Object.keys(operators).forEach(function(operator) {\n                    var values = operators[operator] || [];\n                    var outValues = [];\n                    values.forEach(function(value) {\n                        var predicateResult = attribute({\n                            val: value,\n                            op: operator\n                        }, key, \"numeric\");\n                        if (!predicateResult) outValues.push(value);\n                    });\n                    if (outValues.length !== values.length) {\n                        hasChanged = true;\n                    }\n                    operatorList[operator] = outValues;\n                });\n                memo[key] = operatorList;\n                return memo;\n            }, {});\n            if (hasChanged) return newNumericRefinements;\n            return this.numericRefinements;\n        }\n        // We return nothing if the attribute is not undefined, a string or a function,\n        // as it is not a valid value for a refinement\n        return undefined;\n    },\n    /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */ addFacet: function addFacet(facet) {\n        if (this.isConjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.setQueryParameters({\n            facets: this.facets.concat([\n                facet\n            ])\n        });\n    },\n    /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */ addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n        if (this.isDisjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.setQueryParameters({\n            disjunctiveFacets: this.disjunctiveFacets.concat([\n                facet\n            ])\n        });\n    },\n    /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */ addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n        if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n            throw new Error(\"Cannot declare two hierarchical facets with the same name: `\" + hierarchicalFacet.name + \"`\");\n        }\n        return this.setQueryParameters({\n            hierarchicalFacets: this.hierarchicalFacets.concat([\n                hierarchicalFacet\n            ])\n        });\n    },\n    /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addFacetRefinement: function addFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addExcludeRefinement: function addExcludeRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */ addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.addRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */ addTagRefinement: function addTagRefinement(tag) {\n        if (this.isTagRefined(tag)) return this;\n        var modification = {\n            tagRefinements: this.tagRefinements.concat(tag)\n        };\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeFacet: function removeFacet(facet) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            facets: this.facets.filter(function(f) {\n                return f !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n                return f !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */ removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n        if (!this.isHierarchicalFacet(facet)) {\n            return this;\n        }\n        return this.clearRefinements(facet).setQueryParameters({\n            hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n                return f.name !== facet;\n            })\n        });\n    },\n    /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */ removeFacetRefinement: function removeFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */ removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */ removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.removeRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */ removeTagRefinement: function removeTagRefinement(tag) {\n        if (!this.isTagRefined(tag)) return this;\n        var modification = {\n            tagRefinements: this.tagRefinements.filter(function(t) {\n                return t !== tag;\n            })\n        };\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */ toggleRefinement: function toggleRefinement(facet, value) {\n        return this.toggleFacetRefinement(facet, value);\n    },\n    /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */ toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n        if (this.isHierarchicalFacet(facet)) {\n            return this.toggleHierarchicalFacetRefinement(facet, value);\n        } else if (this.isConjunctiveFacet(facet)) {\n            return this.toggleConjunctiveFacetRefinement(facet, value);\n        } else if (this.isDisjunctiveFacet(facet)) {\n            return this.toggleDisjunctiveFacetRefinement(facet, value);\n        }\n        throw new Error(\"Cannot refine the undeclared facet \" + facet + \"; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets\");\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the facets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            throw new Error(facet + \" is not defined in the disjunctiveFacets attribute of the helper configuration\");\n        }\n        return this.setQueryParameters({\n            disjunctiveFacetsRefinements: RefinementList.toggleRefinement(this.disjunctiveFacetsRefinements, facet, value)\n        });\n    },\n    /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */ toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n        if (!this.isHierarchicalFacet(facet)) {\n            throw new Error(facet + \" is not defined in the hierarchicalFacets attribute of the helper configuration\");\n        }\n        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n        var mod = {};\n        var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined && this.hierarchicalFacetsRefinements[facet].length > 0 && // remove current refinement:\n        // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n        (this.hierarchicalFacetsRefinements[facet][0] === value || // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);\n        if (upOneOrMultipleLevel) {\n            if (value.indexOf(separator) === -1) {\n                // go back to root level\n                mod[facet] = [];\n            } else {\n                mod[facet] = [\n                    value.slice(0, value.lastIndexOf(separator))\n                ];\n            }\n        } else {\n            mod[facet] = [\n                value\n            ];\n        }\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */ addHierarchicalFacetRefinement: function(facet, path) {\n        if (this.isHierarchicalFacetRefined(facet)) {\n            throw new Error(facet + \" is already refined.\");\n        }\n        if (!this.isHierarchicalFacet(facet)) {\n            throw new Error(facet + \" is not defined in the hierarchicalFacets attribute of the helper configuration.\");\n        }\n        var mod = {};\n        mod[facet] = [\n            path\n        ];\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */ removeHierarchicalFacetRefinement: function(facet) {\n        if (!this.isHierarchicalFacetRefined(facet)) {\n            return this;\n        }\n        var mod = {};\n        mod[facet] = [];\n        return this.setQueryParameters({\n            hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n        });\n    },\n    /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */ toggleTagRefinement: function toggleTagRefinement(tag) {\n        if (this.isTagRefined(tag)) {\n            return this.removeTagRefinement(tag);\n        }\n        return this.addTagRefinement(tag);\n    },\n    /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */ isDisjunctiveFacet: function(facet) {\n        return this.disjunctiveFacets.indexOf(facet) > -1;\n    },\n    /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */ isHierarchicalFacet: function(facetName) {\n        return this.getHierarchicalFacetByName(facetName) !== undefined;\n    },\n    /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */ isConjunctiveFacet: function(facet) {\n        return this.facets.indexOf(facet) > -1;\n    },\n    /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */ isFacetRefined: function isFacetRefined(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.facetsRefinements, facet, value);\n    },\n    /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */ isExcludeRefined: function isExcludeRefined(facet, value) {\n        if (!this.isConjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.facetsExcludes, facet, value);\n    },\n    /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */ isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n        if (!this.isDisjunctiveFacet(facet)) {\n            return false;\n        }\n        return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n    },\n    /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */ isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n        if (!this.isHierarchicalFacet(facet)) {\n            return false;\n        }\n        var refinements = this.getHierarchicalRefinement(facet);\n        if (!value) {\n            return refinements.length > 0;\n        }\n        return refinements.indexOf(value) !== -1;\n    },\n    /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */ isNumericRefined: function isNumericRefined(attribute, operator, value) {\n        if (value === undefined && operator === undefined) {\n            return Boolean(this.numericRefinements[attribute]);\n        }\n        var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== undefined;\n        if (value === undefined || !isOperatorDefined) {\n            return isOperatorDefined;\n        }\n        var parsedValue = valToNumber(value);\n        var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== undefined;\n        return isOperatorDefined && isAttributeValueDefined;\n    },\n    /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */ isTagRefined: function isTagRefined(tag) {\n        return this.tagRefinements.indexOf(tag) !== -1;\n    },\n    /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */ getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        // attributes used for numeric filter can also be disjunctive\n        var disjunctiveNumericRefinedFacets = intersection(Object.keys(this.numericRefinements).filter(function(facet) {\n            return Object.keys(self.numericRefinements[facet]).length > 0;\n        }), this.disjunctiveFacets);\n        return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n            return self.disjunctiveFacetsRefinements[facet].length > 0;\n        }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets()).sort();\n    },\n    /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */ getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        return intersection(// enforce the order between the two arrays,\n        // so that refinement name index === hierarchical facet index\n        this.hierarchicalFacets.map(function(facet) {\n            return facet.name;\n        }), Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n            return self.hierarchicalFacetsRefinements[facet].length > 0;\n        })).sort();\n    },\n    /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */ getUnrefinedDisjunctiveFacets: function() {\n        var refinedFacets = this.getRefinedDisjunctiveFacets();\n        return this.disjunctiveFacets.filter(function(f) {\n            return refinedFacets.indexOf(f) === -1;\n        });\n    },\n    managedParameters: [\n        \"index\",\n        \"facets\",\n        \"disjunctiveFacets\",\n        \"facetsRefinements\",\n        \"hierarchicalFacets\",\n        \"facetsExcludes\",\n        \"disjunctiveFacetsRefinements\",\n        \"numericRefinements\",\n        \"tagRefinements\",\n        \"hierarchicalFacetsRefinements\"\n    ],\n    getQueryParams: function getQueryParams() {\n        var managedParameters = this.managedParameters;\n        var queryParams = {};\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        Object.keys(this).forEach(function(paramName) {\n            var paramValue = self[paramName];\n            if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n                queryParams[paramName] = paramValue;\n            }\n        });\n        return queryParams;\n    },\n    /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */ setQueryParameter: function setParameter(parameter, value) {\n        if (this[parameter] === value) return this;\n        var modification = {};\n        modification[parameter] = value;\n        return this.setQueryParameters(modification);\n    },\n    /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */ setQueryParameters: function setQueryParameters(params) {\n        if (!params) return this;\n        var error = SearchParameters.validate(this, params);\n        if (error) {\n            throw error;\n        }\n        // eslint-disable-next-line consistent-this\n        var self = this;\n        var nextWithNumbers = SearchParameters._parseNumbers(params);\n        var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n            acc[key] = self[key];\n            return acc;\n        }, {});\n        var nextPlainObject = Object.keys(nextWithNumbers).reduce(function(previous, key) {\n            var isPreviousValueDefined = previous[key] !== undefined;\n            var isNextValueDefined = nextWithNumbers[key] !== undefined;\n            if (isPreviousValueDefined && !isNextValueDefined) {\n                return omit(previous, [\n                    key\n                ]);\n            }\n            if (isNextValueDefined) {\n                previous[key] = nextWithNumbers[key];\n            }\n            return previous;\n        }, previousPlainObject);\n        return new this.constructor(nextPlainObject);\n    },\n    /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */ resetPage: function() {\n        if (this.page === undefined) {\n            return this;\n        }\n        return this.setPage(0);\n    },\n    /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */ _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n        return hierarchicalFacet.sortBy || [\n            \"isRefined:desc\",\n            \"name:asc\"\n        ];\n    },\n    /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */ _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n        return hierarchicalFacet.separator || \" > \";\n    },\n    /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */ _getHierarchicalRootPath: function(hierarchicalFacet) {\n        return hierarchicalFacet.rootPath || null;\n    },\n    /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */ _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n        if (typeof hierarchicalFacet.showParentLevel === \"boolean\") {\n            return hierarchicalFacet.showParentLevel;\n        }\n        return true;\n    },\n    /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */ getHierarchicalFacetByName: function(hierarchicalFacetName) {\n        return find(this.hierarchicalFacets, function(f) {\n            return f.name === hierarchicalFacetName;\n        });\n    },\n    /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */ getHierarchicalFacetBreadcrumb: function(facetName) {\n        if (!this.isHierarchicalFacet(facetName)) {\n            return [];\n        }\n        var refinement = this.getHierarchicalRefinement(facetName)[0];\n        if (!refinement) return [];\n        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facetName));\n        var path = refinement.split(separator);\n        return path.map(function(part) {\n            return part.trim();\n        });\n    },\n    toString: function() {\n        return JSON.stringify(this, null, 2);\n    }\n};\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */ module.exports = SearchParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js ***!
  \**********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = generateTrees;\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar prepareHierarchicalFacetSortBy = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\nfunction generateTrees(state) {\n    return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n        var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n        var hierarchicalFacetRefinement = state.hierarchicalFacetsRefinements[hierarchicalFacet.name] && state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0] || \"\";\n        var hierarchicalSeparator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var hierarchicalRootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(hierarchicalFacet);\n        var sortBy = prepareHierarchicalFacetSortBy(state._getHierarchicalFacetSortBy(hierarchicalFacet));\n        var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {\n            return facetResult.exhaustive;\n        });\n        var generateTreeFn = generateHierarchicalTree(sortBy, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, hierarchicalFacetRefinement);\n        var results = hierarchicalFacetResult;\n        if (hierarchicalRootPath) {\n            results = hierarchicalFacetResult.slice(hierarchicalRootPath.split(hierarchicalSeparator).length);\n        }\n        return results.reduce(generateTreeFn, {\n            name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n            count: null,\n            isRefined: true,\n            path: null,\n            escapedValue: null,\n            exhaustive: rootExhaustive,\n            data: null\n        });\n    };\n}\nfunction generateHierarchicalTree(sortBy, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, currentRefinement) {\n    return function generateTree(hierarchicalTree, hierarchicalFacetResult, currentHierarchicalLevel) {\n        var parent = hierarchicalTree;\n        if (currentHierarchicalLevel > 0) {\n            var level = 0;\n            parent = hierarchicalTree;\n            while(level < currentHierarchicalLevel){\n                /**\n         * @type {object[]]} hierarchical data\n         */ var data = parent && Array.isArray(parent.data) ? parent.data : [];\n                parent = find(data, function(subtree) {\n                    return subtree.isRefined;\n                });\n                level++;\n            }\n        }\n        // we found a refined parent, let's add current level data under it\n        if (parent) {\n            // filter values in case an object has multiple categories:\n            //   {\n            //     categories: {\n            //       level0: ['beers', 'bières'],\n            //       level1: ['beers > IPA', 'bières > Belges']\n            //     }\n            //   }\n            //\n            // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n            // showing up\n            var picked = Object.keys(hierarchicalFacetResult.data).map(function(facetValue) {\n                return [\n                    facetValue,\n                    hierarchicalFacetResult.data[facetValue]\n                ];\n            }).filter(function(tuple) {\n                var facetValue = tuple[0];\n                return onlyMatchingTree(facetValue, parent.path || hierarchicalRootPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel);\n            });\n            parent.data = orderBy(picked.map(function(tuple) {\n                var facetValue = tuple[0];\n                var facetCount = tuple[1];\n                return format(facetCount, facetValue, hierarchicalSeparator, unescapeFacetValue(currentRefinement), hierarchicalFacetResult.exhaustive);\n            }), sortBy[0], sortBy[1]);\n        }\n        return hierarchicalTree;\n    };\n}\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(facetValue, parentPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel) {\n    // we want the facetValue is a child of hierarchicalRootPath\n    if (hierarchicalRootPath && (facetValue.indexOf(hierarchicalRootPath) !== 0 || hierarchicalRootPath === facetValue)) {\n        return false;\n    }\n    // we always want root levels (only when there is no prefix path)\n    return !hierarchicalRootPath && facetValue.indexOf(hierarchicalSeparator) === -1 || // if there is a rootPath, being root level mean 1 level under rootPath\n    hierarchicalRootPath && facetValue.split(hierarchicalSeparator).length - hierarchicalRootPath.split(hierarchicalSeparator).length === 1 || // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    facetValue.indexOf(hierarchicalSeparator) === -1 && currentRefinement.indexOf(hierarchicalSeparator) === -1 || // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 || // facetValue is a child of the current parent, add it\n    facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 && (hierarchicalShowParentLevel || facetValue.indexOf(currentRefinement) === 0);\n}\nfunction format(facetCount, facetValue, hierarchicalSeparator, currentRefinement, exhaustive) {\n    var parts = facetValue.split(hierarchicalSeparator);\n    return {\n        name: parts[parts.length - 1].trim(),\n        path: facetValue,\n        escapedValue: escapeFacetValue(facetValue),\n        count: facetCount,\n        isRefined: currentRefinement === facetValue || currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n        exhaustive: exhaustive,\n        data: null\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar compact = __webpack_require__(/*! ../functions/compact */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/compact.js\");\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar findIndex = __webpack_require__(/*! ../functions/findIndex */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/findIndex.js\");\nvar formatSort = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar merge = __webpack_require__(/*! ../functions/merge */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\nvar generateHierarchicalTree = __webpack_require__(/*! ./generate-hierarchical-tree */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\");\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */ /**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */ /**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */ /**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */ /**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */ function getIndices(attributes) {\n    var indices = {};\n    attributes.forEach(function(val, idx) {\n        indices[val] = idx;\n    });\n    return indices;\n}\nfunction assignFacetStats(dest, facetStats, key) {\n    if (facetStats && facetStats[key]) {\n        dest.stats = facetStats[key];\n    }\n}\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */ /**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */ function findMatchingHierarchicalFacetFromAttributeName(hierarchicalFacets, hierarchicalAttributeName) {\n    return find(hierarchicalFacets, function facetKeyMatchesAttribute(hierarchicalFacet) {\n        var facetNames = hierarchicalFacet.attributes || [];\n        return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    });\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/ function SearchResults(state, results, options) {\n    var mainSubResponse = results[0];\n    this._rawResults = results;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n    Object.keys(mainSubResponse).forEach(function(key) {\n        self[key] = mainSubResponse[key];\n    });\n    // Make every key of the result options reachable from the instance\n    Object.keys(options || {}).forEach(function(key) {\n        self[key] = options[key];\n    });\n    /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */ /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */ /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */ /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */ /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */ this.processingTimeMS = results.reduce(function(sum, result) {\n        return result.processingTimeMS === undefined ? sum : sum + result.processingTimeMS;\n    }, 0);\n    /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */ this.disjunctiveFacets = [];\n    /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */ this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n        return [];\n    });\n    /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */ this.facets = [];\n    var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n    var facetsIndices = getIndices(state.facets);\n    var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n    var nextDisjunctiveResult = 1;\n    // Since we send request only for disjunctive facets that have been refined,\n    // we get the facets information from the first, general, response.\n    var mainFacets = mainSubResponse.facets || {};\n    Object.keys(mainFacets).forEach(function(facetKey) {\n        var facetValueObject = mainFacets[facetKey];\n        var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(state.hierarchicalFacets, facetKey);\n        if (hierarchicalFacet) {\n            // Place the hierarchicalFacet data at the correct index depending on\n            // the attributes order that was defined at the helper initialization\n            var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n            var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n                return f.name === hierarchicalFacet.name;\n            });\n            self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n                attribute: facetKey,\n                data: facetValueObject,\n                exhaustive: mainSubResponse.exhaustiveFacetsCount\n            };\n        } else {\n            var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n            var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n            var position;\n            if (isFacetDisjunctive) {\n                position = disjunctiveFacetsIndices[facetKey];\n                self.disjunctiveFacets[position] = {\n                    name: facetKey,\n                    data: facetValueObject,\n                    exhaustive: mainSubResponse.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n            }\n            if (isFacetConjunctive) {\n                position = facetsIndices[facetKey];\n                self.facets[position] = {\n                    name: facetKey,\n                    data: facetValueObject,\n                    exhaustive: mainSubResponse.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n            }\n        }\n    });\n    // Make sure we do not keep holes within the hierarchical facets\n    this.hierarchicalFacets = compact(this.hierarchicalFacets);\n    // aggregate the refined disjunctive facets\n    disjunctiveFacets.forEach(function(disjunctiveFacet) {\n        var result = results[nextDisjunctiveResult];\n        var facets = result && result.facets ? result.facets : {};\n        var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n        // There should be only item in facets.\n        Object.keys(facets).forEach(function(dfacet) {\n            var facetResults = facets[dfacet];\n            var position;\n            if (hierarchicalFacet) {\n                position = findIndex(state.hierarchicalFacets, function(f) {\n                    return f.name === hierarchicalFacet.name;\n                });\n                var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n                    return f.attribute === dfacet;\n                });\n                // previous refinements and no results so not able to find it\n                if (attributeIndex === -1) {\n                    return;\n                }\n                self.hierarchicalFacets[position][attributeIndex].data = merge({}, self.hierarchicalFacets[position][attributeIndex].data, facetResults);\n            } else {\n                position = disjunctiveFacetsIndices[dfacet];\n                var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n                self.disjunctiveFacets[position] = {\n                    name: dfacet,\n                    data: defaultsPure({}, facetResults, dataFromMainRequest),\n                    exhaustive: result.exhaustiveFacetsCount\n                };\n                assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n                if (state.disjunctiveFacetsRefinements[dfacet]) {\n                    state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n                        // add the disjunctive refinements if it is no more retrieved\n                        if (!self.disjunctiveFacets[position].data[refinementValue] && state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n                            self.disjunctiveFacets[position].data[refinementValue] = 0;\n                        }\n                    });\n                }\n            }\n        });\n        nextDisjunctiveResult++;\n    });\n    // if we have some parent level values for hierarchical facets, merge them\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n        var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n        // if we are already at a root refinement (or no refinement at all), there is no\n        // root level values request\n        if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n            return;\n        }\n        results.slice(nextDisjunctiveResult).forEach(function(result) {\n            var facets = result && result.facets ? result.facets : {};\n            Object.keys(facets).forEach(function(dfacet) {\n                var facetResults = facets[dfacet];\n                var position = findIndex(state.hierarchicalFacets, function(f) {\n                    return f.name === hierarchicalFacet.name;\n                });\n                var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n                    return f.attribute === dfacet;\n                });\n                // previous refinements and no results so not able to find it\n                if (attributeIndex === -1) {\n                    return;\n                }\n                // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n                // then the disjunctive values will be `beers` (count: 100),\n                // but we do not want to display\n                //   | beers (100)\n                //     > IPA (5)\n                // We want\n                //   | beers (5)\n                //     > IPA (5)\n                var defaultData = {};\n                if (currentRefinement.length > 0) {\n                    var root = currentRefinement[0].split(separator)[0];\n                    defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n                }\n                self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(defaultData, facetResults, self.hierarchicalFacets[position][attributeIndex].data);\n            });\n            nextDisjunctiveResult++;\n        });\n    });\n    // add the excludes\n    Object.keys(state.facetsExcludes).forEach(function(facetName) {\n        var excludes = state.facetsExcludes[facetName];\n        var position = facetsIndices[facetName];\n        self.facets[position] = {\n            name: facetName,\n            data: mainFacets[facetName],\n            exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        excludes.forEach(function(facetValue) {\n            self.facets[position] = self.facets[position] || {\n                name: facetName\n            };\n            self.facets[position].data = self.facets[position].data || {};\n            self.facets[position].data[facetValue] = 0;\n        });\n    });\n    /**\n   * @type {Array}\n   */ this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n    /**\n   * @type {Array}\n   */ this.facets = compact(this.facets);\n    /**\n   * @type {Array}\n   */ this.disjunctiveFacets = compact(this.disjunctiveFacets);\n    this._state = state;\n}\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */ SearchResults.prototype.getFacetByName = function(name) {\n    function predicate(facet) {\n        return facet.name === name;\n    }\n    return find(this.facets, predicate) || find(this.disjunctiveFacets, predicate) || find(this.hierarchicalFacets, predicate);\n};\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */ function extractNormalizedFacetValues(results, attribute) {\n    function predicate(facet) {\n        return facet.name === attribute;\n    }\n    if (results._state.isConjunctiveFacet(attribute)) {\n        var facet = find(results.facets, predicate);\n        if (!facet) return [];\n        return Object.keys(facet.data).map(function(name) {\n            var value = escapeFacetValue(name);\n            return {\n                name: name,\n                escapedValue: value,\n                count: facet.data[name],\n                isRefined: results._state.isFacetRefined(attribute, value),\n                isExcluded: results._state.isExcludeRefined(attribute, name)\n            };\n        });\n    } else if (results._state.isDisjunctiveFacet(attribute)) {\n        var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n        if (!disjunctiveFacet) return [];\n        return Object.keys(disjunctiveFacet.data).map(function(name) {\n            var value = escapeFacetValue(name);\n            return {\n                name: name,\n                escapedValue: value,\n                count: disjunctiveFacet.data[name],\n                isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n            };\n        });\n    } else if (results._state.isHierarchicalFacet(attribute)) {\n        var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n        if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n        var hierarchicalFacet = results._state.getHierarchicalFacetByName(attribute);\n        var separator = results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var currentRefinement = unescapeFacetValue(results._state.getHierarchicalRefinement(attribute)[0] || \"\");\n        if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n            currentRefinement = currentRefinement.replace(hierarchicalFacet.rootPath + separator, \"\");\n        }\n        var currentRefinementSplit = currentRefinement.split(separator);\n        currentRefinementSplit.unshift(attribute);\n        setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n        return hierarchicalFacetValues;\n    }\n    return undefined;\n}\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */ function setIsRefined(item, currentRefinement, depth) {\n    item.isRefined = item.name === currentRefinement[depth];\n    if (item.data) {\n        item.data.forEach(function(child) {\n            setIsRefined(child, currentRefinement, depth + 1);\n        });\n    }\n}\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */ function recSort(sortFn, node, names, level) {\n    level = level || 0;\n    if (Array.isArray(node)) {\n        return sortFn(node, names[level]);\n    }\n    if (!node.data || node.data.length === 0) {\n        return node;\n    }\n    var children = node.data.map(function(childNode) {\n        return recSort(sortFn, childNode, names, level + 1);\n    });\n    var sortedChildren = sortFn(children, names[level]);\n    var newNode = defaultsPure({\n        data: sortedChildren\n    }, node);\n    return newNode;\n}\nSearchResults.DEFAULT_SORT = [\n    \"isRefined:desc\",\n    \"count:desc\",\n    \"name:asc\"\n];\nfunction vanillaSortFn(order, data) {\n    return data.sort(order);\n}\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */ /**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */ function sortViaFacetOrdering(facetValues, facetOrdering) {\n    var orderedFacets = [];\n    var remainingFacets = [];\n    var order = facetOrdering.order || [];\n    /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */ var reverseOrder = order.reduce(function(acc, name, i) {\n        acc[name] = i;\n        return acc;\n    }, {});\n    facetValues.forEach(function(item) {\n        // hierarchical facets get sorted using their raw name\n        var name = item.path || item.name;\n        if (reverseOrder[name] !== undefined) {\n            orderedFacets[reverseOrder[name]] = item;\n        } else {\n            remainingFacets.push(item);\n        }\n    });\n    orderedFacets = orderedFacets.filter(function(facet) {\n        return facet;\n    });\n    var sortRemainingBy = facetOrdering.sortRemainingBy;\n    var ordering;\n    if (sortRemainingBy === \"hidden\") {\n        return orderedFacets;\n    } else if (sortRemainingBy === \"alpha\") {\n        ordering = [\n            [\n                \"path\",\n                \"name\"\n            ],\n            [\n                \"asc\",\n                \"asc\"\n            ]\n        ];\n    } else {\n        ordering = [\n            [\n                \"count\"\n            ],\n            [\n                \"desc\"\n            ]\n        ];\n    }\n    return orderedFacets.concat(orderBy(remainingFacets, ordering[0], ordering[1]));\n}\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */ function getFacetOrdering(results, attribute) {\n    return results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.values && results.renderingContent.facetOrdering.values[attribute];\n}\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */ SearchResults.prototype.getFacetValues = function(attribute, opts) {\n    var facetValues = extractNormalizedFacetValues(this, attribute);\n    if (!facetValues) {\n        return undefined;\n    }\n    var options = defaultsPure({}, opts, {\n        sortBy: SearchResults.DEFAULT_SORT,\n        // if no sortBy is given, attempt to sort based on facetOrdering\n        // if it is given, we still allow to sort via facet ordering first\n        facetOrdering: !(opts && opts.sortBy)\n    });\n    // eslint-disable-next-line consistent-this\n    var results = this;\n    var attributes;\n    if (Array.isArray(facetValues)) {\n        attributes = [\n            attribute\n        ];\n    } else {\n        var config = results._state.getHierarchicalFacetByName(facetValues.name);\n        attributes = config.attributes;\n    }\n    return recSort(function(data, facetName) {\n        if (options.facetOrdering) {\n            var facetOrdering = getFacetOrdering(results, facetName);\n            if (facetOrdering) {\n                return sortViaFacetOrdering(data, facetOrdering);\n            }\n        }\n        if (Array.isArray(options.sortBy)) {\n            var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n            return orderBy(data, order[0], order[1]);\n        } else if (typeof options.sortBy === \"function\") {\n            return vanillaSortFn(options.sortBy, data);\n        }\n        throw new Error(\"options.sortBy is optional but if defined it must be \" + \"either an array of string (predicates) or a sorting function\");\n    }, facetValues, attributes);\n};\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */ SearchResults.prototype.getFacetStats = function(attribute) {\n    if (this._state.isConjunctiveFacet(attribute)) {\n        return getFacetStatsIfAvailable(this.facets, attribute);\n    } else if (this._state.isDisjunctiveFacet(attribute)) {\n        return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n    }\n    return undefined;\n};\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */ /**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */ function getFacetStatsIfAvailable(facetList, facetName) {\n    var data = find(facetList, function(facet) {\n        return facet.name === facetName;\n    });\n    return data && data.stats;\n}\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */ SearchResults.prototype.getRefinements = function() {\n    var state = this._state;\n    // eslint-disable-next-line consistent-this\n    var results = this;\n    var res = [];\n    Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n        state.facetsRefinements[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"facet\", attributeName, name, results.facets));\n        });\n    });\n    Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n        state.facetsExcludes[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"exclude\", attributeName, name, results.facets));\n        });\n    });\n    Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n        state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n            res.push(getRefinement(state, \"disjunctive\", attributeName, name, results.disjunctiveFacets));\n        });\n    });\n    Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n        state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n            res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n        });\n    });\n    Object.keys(state.numericRefinements).forEach(function(attributeName) {\n        var operators = state.numericRefinements[attributeName];\n        Object.keys(operators).forEach(function(operator) {\n            operators[operator].forEach(function(value) {\n                res.push({\n                    type: \"numeric\",\n                    attributeName: attributeName,\n                    name: value,\n                    numericValue: value,\n                    operator: operator\n                });\n            });\n        });\n    });\n    state.tagRefinements.forEach(function(name) {\n        res.push({\n            type: \"tag\",\n            attributeName: \"_tags\",\n            name: name\n        });\n    });\n    return res;\n};\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */ /**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */ function getRefinement(state, type, attributeName, name, resultsFacets) {\n    var facet = find(resultsFacets, function(f) {\n        return f.name === attributeName;\n    });\n    var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n    var exhaustive = facet && facet.exhaustive || false;\n    return {\n        type: type,\n        attributeName: attributeName,\n        name: name,\n        count: count,\n        exhaustive: exhaustive\n    };\n}\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */ function getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n    var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n    var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n    var split = name.split(separator);\n    var rootFacet = find(resultsFacets, function(facet) {\n        return facet.name === attributeName;\n    });\n    var facet = split.reduce(function(intermediateFacet, part) {\n        var newFacet = intermediateFacet && find(intermediateFacet.data, function(f) {\n            return f.name === part;\n        });\n        return newFacet !== undefined ? newFacet : intermediateFacet;\n    }, rootFacet);\n    var count = facet && facet.count || 0;\n    var exhaustive = facet && facet.exhaustive || false;\n    var path = facet && facet.path || \"\";\n    return {\n        type: \"hierarchical\",\n        attributeName: attributeName,\n        name: path,\n        count: count,\n        exhaustive: exhaustive\n    };\n}\nmodule.exports = SearchResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/algoliasearch.helper.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/algoliasearch.helper.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/@algolia/events/events.js\");\nvar DerivedHelper = __webpack_require__(/*! ./DerivedHelper */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\");\nvar escapeFacetValue = (__webpack_require__(/*! ./functions/escapeFacetValue */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\").escapeFacetValue);\nvar inherits = __webpack_require__(/*! ./functions/inherits */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/inherits.js\");\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ./functions/objectHasKeys */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ./functions/omit */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar requestBuilder = __webpack_require__(/*! ./requestBuilder */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/requestBuilder.js\");\nvar SearchParameters = __webpack_require__(/*! ./SearchParameters */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./SearchResults */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\nvar version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/version.js\");\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */ /**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */ /**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */ /**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */ /**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */ /**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */ /**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */ /**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */ function AlgoliaSearchHelper(client, index, options) {\n    if (typeof client.addAlgoliaAgent === \"function\") {\n        client.addAlgoliaAgent(\"JS Helper (\" + version + \")\");\n    }\n    this.setClient(client);\n    var opts = options || {};\n    opts.index = index;\n    this.state = SearchParameters.make(opts);\n    this.lastResults = null;\n    this._queryId = 0;\n    this._lastQueryIdReceived = -1;\n    this.derivedHelpers = [];\n    this._currentNbQueries = 0;\n}\ninherits(AlgoliaSearchHelper, EventEmitter);\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */ AlgoliaSearchHelper.prototype.search = function() {\n    this._search({\n        onlyWithDerivedHelpers: false\n    });\n    return this;\n};\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n    this._search({\n        onlyWithDerivedHelpers: true\n    });\n    return this;\n};\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */ AlgoliaSearchHelper.prototype.getQuery = function() {\n    var state = this.state;\n    return requestBuilder._getHitsSearchParams(state);\n};\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */ AlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n    var tempState = !options ? this.state : this.state.setQueryParameters(options);\n    var queries = requestBuilder._getQueries(tempState.index, tempState);\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    this._currentNbQueries++;\n    this.emit(\"searchOnce\", {\n        state: tempState\n    });\n    if (cb) {\n        this.client.search(queries).then(function(content) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit(\"searchQueueEmpty\");\n            }\n            cb(null, new SearchResults(tempState, content.results), tempState);\n        }).catch(function(err) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit(\"searchQueueEmpty\");\n            }\n            cb(err, null, tempState);\n        });\n        return undefined;\n    }\n    return this.client.search(queries).then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        return {\n            content: new SearchResults(tempState, content.results),\n            state: tempState,\n            _originalResponse: content\n        };\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        throw e;\n    });\n};\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */ AlgoliaSearchHelper.prototype.findAnswers = function(options) {\n    // eslint-disable-next-line no-console\n    console.warn(\"[algoliasearch-helper] answers is no longer supported\");\n    var state = this.state;\n    var derivedHelper = this.derivedHelpers[0];\n    if (!derivedHelper) {\n        return Promise.resolve([]);\n    }\n    var derivedState = derivedHelper.getModifiedState(state);\n    var data = merge({\n        attributesForPrediction: options.attributesForPrediction,\n        nbHits: options.nbHits\n    }, {\n        params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n            \"attributesToSnippet\",\n            \"hitsPerPage\",\n            \"restrictSearchableAttributes\",\n            \"snippetEllipsisText\"\n        ])\n    });\n    var errorMessage = \"search for answers was called, but this client does not have a function client.initIndex(index).findAnswers\";\n    if (typeof this.client.initIndex !== \"function\") {\n        throw new Error(errorMessage);\n    }\n    var index = this.client.initIndex(derivedState.index);\n    if (typeof index.findAnswers !== \"function\") {\n        throw new Error(errorMessage);\n    }\n    return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */ /**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */ /**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */ AlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n    var clientHasSFFV = typeof this.client.searchForFacetValues === \"function\";\n    var clientHasInitIndex = typeof this.client.initIndex === \"function\";\n    if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== \"function\") {\n        throw new Error(\"search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues\");\n    }\n    var state = this.state.setQueryParameters(userState || {});\n    var isDisjunctive = state.isDisjunctiveFacet(facet);\n    var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n    this._currentNbQueries++;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var searchForFacetValuesPromise;\n    // newer algoliasearch ^3.27.1 - ~4.0.0\n    if (clientHasSFFV) {\n        searchForFacetValuesPromise = this.client.searchForFacetValues([\n            {\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]);\n    // algoliasearch < 3.27.1\n    } else if (clientHasInitIndex) {\n        searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n    } else {\n        // @MAJOR only use client.search\n        delete algoliaQuery.facetName;\n        searchForFacetValuesPromise = this.client.search([\n            {\n                type: \"facet\",\n                facet: facet,\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]).then(function processResponse(response) {\n            return response.results[0];\n        });\n    }\n    this.emit(\"searchForFacetValues\", {\n        state: state,\n        facet: facet,\n        query: query\n    });\n    return searchForFacetValuesPromise.then(function addIsRefined(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        content = Array.isArray(content) ? content[0] : content;\n        content.facetHits.forEach(function(f) {\n            f.escapedValue = escapeFacetValue(f.value);\n            f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n        });\n        return content;\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit(\"searchQueueEmpty\");\n        throw e;\n    });\n};\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setQuery = function(q) {\n    this._change({\n        state: this.state.resetPage().setQuery(q),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */ AlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n    this._change({\n        state: this.state.resetPage().clearRefinements(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.clearTags = function() {\n    this._change({\n        state: this.state.resetPage().clearTags(),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n    return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */ AlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, path) {\n    this._change({\n        state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addRefine = function() {\n    return this.addFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */ AlgoliaSearchHelper.prototype.addExclude = function() {\n    return this.addFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().addTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n    return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n    this._change({\n        state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeRefine = function() {\n    return this.removeFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */ AlgoliaSearchHelper.prototype.removeExclude = function() {\n    return this.removeFacetExclusion.apply(this, arguments);\n};\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().removeTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */ AlgoliaSearchHelper.prototype.toggleExclude = function() {\n    return this.toggleFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefine = function() {\n    return this.toggleFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().toggleTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */ AlgoliaSearchHelper.prototype.nextPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page + 1);\n};\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */ AlgoliaSearchHelper.prototype.previousPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page - 1);\n};\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */ function setCurrentPage(page) {\n    if (page < 0) throw new Error(\"Page requested below 0.\");\n    this._change({\n        state: this.state.setPage(page),\n        isPageReset: false\n    });\n    return this;\n}\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setIndex = function(name) {\n    this._change({\n        state: this.state.resetPage().setIndex(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */ AlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n    this._change({\n        state: this.state.resetPage().setQueryParameter(parameter, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setState = function(newState) {\n    this._change({\n        state: SearchParameters.make(newState),\n        isPageReset: false\n    });\n    return this;\n};\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */ AlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n};\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */ AlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n    if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n        return true;\n    } else if (this.state.isConjunctiveFacet(attribute)) {\n        return this.state.isFacetRefined(attribute);\n    } else if (this.state.isDisjunctiveFacet(attribute)) {\n        return this.state.isDisjunctiveFacetRefined(attribute);\n    } else if (this.state.isHierarchicalFacet(attribute)) {\n        return this.state.isHierarchicalFacetRefined(attribute);\n    }\n    // there's currently no way to know that the user did call `addNumericRefinement` at some point\n    // thus we cannot distinguish if there once was a numeric refinement that was cleared\n    // so we will return false in every other situations to be consistent\n    // while what we should do here is throw because we did not find the attribute in any type\n    // of refinement\n    return false;\n};\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */ AlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n    return this.state.isExcludeRefined(facet, value);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */ AlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n    return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */ AlgoliaSearchHelper.prototype.hasTag = function(tag) {\n    return this.state.isTagRefined(tag);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */ AlgoliaSearchHelper.prototype.isTagRefined = function() {\n    return this.hasTagRefinements.apply(this, arguments);\n};\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */ AlgoliaSearchHelper.prototype.getIndex = function() {\n    return this.state.index;\n};\nfunction getCurrentPage() {\n    return this.state.page;\n}\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */ AlgoliaSearchHelper.prototype.getTags = function() {\n    return this.state.tagRefinements;\n};\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */ AlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n    var refinements = [];\n    if (this.state.isConjunctiveFacet(facetName)) {\n        var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n        conjRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"conjunctive\"\n            });\n        });\n        var excludeRefinements = this.state.getExcludeRefinements(facetName);\n        excludeRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"exclude\"\n            });\n        });\n    } else if (this.state.isDisjunctiveFacet(facetName)) {\n        var disjunctiveRefinements = this.state.getDisjunctiveRefinements(facetName);\n        disjunctiveRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: \"disjunctive\"\n            });\n        });\n    }\n    var numericRefinements = this.state.getNumericRefinements(facetName);\n    Object.keys(numericRefinements).forEach(function(operator) {\n        var value = numericRefinements[operator];\n        refinements.push({\n            value: value,\n            operator: operator,\n            type: \"numeric\"\n        });\n    });\n    return refinements;\n};\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */ AlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n    return this.state.getNumericRefinement(attribute, operator);\n};\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */ AlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n    return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n// /////////// PRIVATE\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */ AlgoliaSearchHelper.prototype._search = function(options) {\n    var state = this.state;\n    var states = [];\n    var mainQueries = [];\n    if (!options.onlyWithDerivedHelpers) {\n        mainQueries = requestBuilder._getQueries(state.index, state);\n        states.push({\n            state: state,\n            queriesCount: mainQueries.length,\n            helper: this\n        });\n        this.emit(\"search\", {\n            state: state,\n            results: this.lastResults\n        });\n    }\n    var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n        var derivedState = derivedHelper.getModifiedState(state);\n        var derivedStateQueries = derivedState.index ? requestBuilder._getQueries(derivedState.index, derivedState) : [];\n        states.push({\n            state: derivedState,\n            queriesCount: derivedStateQueries.length,\n            helper: derivedHelper\n        });\n        derivedHelper.emit(\"search\", {\n            state: derivedState,\n            results: derivedHelper.lastResults\n        });\n        return derivedStateQueries;\n    });\n    var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n    var queryId = this._queryId++;\n    this._currentNbQueries++;\n    if (!queries.length) {\n        return Promise.resolve({\n            results: []\n        }).then(this._dispatchAlgoliaResponse.bind(this, states, queryId));\n    }\n    try {\n        this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n    } catch (error) {\n        // If we reach this part, we're in an internal error state\n        this.emit(\"error\", {\n            error: error\n        });\n    }\n    return undefined;\n};\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */ AlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n    // @TODO remove the number of outdated queries discarded instead of just one\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    if (this._currentNbQueries === 0) this.emit(\"searchQueueEmpty\");\n    var results = content.results.slice();\n    states.forEach(function(s) {\n        var state = s.state;\n        var queriesCount = s.queriesCount;\n        var helper = s.helper;\n        var specificResults = results.splice(0, queriesCount);\n        if (!state.index) {\n            helper.emit(\"result\", {\n                results: null,\n                state: state\n            });\n            return;\n        }\n        helper.lastResults = new SearchResults(state, specificResults);\n        helper.emit(\"result\", {\n            results: helper.lastResults,\n            state: state\n        });\n    });\n};\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    this.emit(\"error\", {\n        error: error\n    });\n    if (this._currentNbQueries === 0) this.emit(\"searchQueueEmpty\");\n};\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n    return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */ AlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n    return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\nAlgoliaSearchHelper.prototype._change = function(event) {\n    var state = event.state;\n    var isPageReset = event.isPageReset;\n    if (state !== this.state) {\n        this.state = state;\n        this.emit(\"change\", {\n            state: this.state,\n            results: this.lastResults,\n            isPageReset: isPageReset\n        });\n    }\n};\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.clearCache = function() {\n    if (this.client.clearCache) this.client.clearCache();\n    return this;\n};\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.setClient = function(newClient) {\n    if (this.client === newClient) return this;\n    if (typeof newClient.addAlgoliaAgent === \"function\") {\n        newClient.addAlgoliaAgent(\"JS Helper (\" + version + \")\");\n    }\n    this.client = newClient;\n    return this;\n};\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */ AlgoliaSearchHelper.prototype.getClient = function() {\n    return this.client;\n};\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper} a new DerivedHelper\n */ AlgoliaSearchHelper.prototype.derive = function(fn) {\n    var derivedHelper = new DerivedHelper(this, fn);\n    this.derivedHelpers.push(derivedHelper);\n    return derivedHelper;\n};\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */ AlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n    var pos = this.derivedHelpers.indexOf(derivedHelper);\n    if (pos === -1) throw new Error(\"Derived helper already detached\");\n    this.derivedHelpers.splice(pos, 1);\n};\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */ AlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n    return this._currentNbQueries > 0;\n};\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */ /**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */ module.exports = AlgoliaSearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/compact.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/compact.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function compact(array) {\n    if (!Array.isArray(array)) {\n        return [];\n    }\n    return array.filter(Boolean);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRQyxLQUFLO0lBQ3JDLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixRQUFRO1FBQ3pCLE9BQU8sRUFBRTtJQUNYO0lBRUEsT0FBT0EsTUFBTUcsTUFBTSxDQUFDQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvY29tcGFjdC5qcz9jM2I4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gYXJyYXkuZmlsdGVyKEJvb2xlYW4pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29tcGFjdCIsImFycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIiwiQm9vbGVhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js ***!
  \****************************************************************************************************************/
/***/ ((module) => {

eval("\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n    var sources = Array.prototype.slice.call(arguments);\n    return sources.reduceRight(function(acc, source) {\n        Object.keys(Object(source)).forEach(function(key) {\n            if (source[key] === undefined) {\n                return;\n            }\n            if (acc[key] !== undefined) {\n                // remove if already added, so that we can add it in correct order\n                delete acc[key];\n            }\n            acc[key] = source[key];\n        });\n        return acc;\n    }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9kZWZhdWx0c1B1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSx5RUFBeUU7QUFDekUsOEJBQThCO0FBQzlCQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0M7SUFDeEIsSUFBSUMsVUFBVUMsTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0M7SUFFekMsT0FBT0wsUUFBUU0sV0FBVyxDQUFDLFNBQVVDLEdBQUcsRUFBRUMsTUFBTTtRQUM5Q0MsT0FBT0MsSUFBSSxDQUFDRCxPQUFPRCxTQUFTRyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUMvQyxJQUFJSixNQUFNLENBQUNJLElBQUksS0FBS0MsV0FBVztnQkFDN0I7WUFDRjtZQUNBLElBQUlOLEdBQUcsQ0FBQ0ssSUFBSSxLQUFLQyxXQUFXO2dCQUMxQixrRUFBa0U7Z0JBQ2xFLE9BQU9OLEdBQUcsQ0FBQ0ssSUFBSTtZQUNqQjtZQUNBTCxHQUFHLENBQUNLLElBQUksR0FBR0osTUFBTSxDQUFDSSxJQUFJO1FBQ3hCO1FBQ0EsT0FBT0w7SUFDVCxHQUFHLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZGVmYXVsdHNQdXJlLmpzPzAxNjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvZGVmYXVsdHMsIGJ1dCBkb2Vzbid0IG11dGF0ZSB0aGUgdGFyZ2V0XG4vLyBpdCBhbHNvIHByZXNlcnZlIGtleXMgb3JkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmYXVsdHNQdXJlKCkge1xuICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNvdXJjZXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGFjYywgc291cmNlKSB7XG4gICAgT2JqZWN0LmtleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGlmIGFscmVhZHkgYWRkZWQsIHNvIHRoYXQgd2UgY2FuIGFkZCBpdCBpbiBjb3JyZWN0IG9yZGVyXG4gICAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICAgIH1cbiAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdHNQdXJlIiwic291cmNlcyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwicmVkdWNlUmlnaHQiLCJhY2MiLCJzb3VyY2UiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js ***!
  \********************************************************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */ function escapeFacetValue(value) {\n    if (typeof value !== \"string\") return value;\n    return String(value).replace(/^-/, \"\\\\-\");\n}\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */ function unescapeFacetValue(value) {\n    if (typeof value !== \"string\") return value;\n    return value.replace(/^\\\\-/, \"-\");\n}\nmodule.exports = {\n    escapeFacetValue: escapeFacetValue,\n    unescapeFacetValue: unescapeFacetValue\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9lc2NhcGVGYWNldFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTQSxpQkFBaUJDLEtBQUs7SUFDN0IsSUFBSSxPQUFPQSxVQUFVLFVBQVUsT0FBT0E7SUFFdEMsT0FBT0MsT0FBT0QsT0FBT0UsT0FBTyxDQUFDLE1BQU07QUFDckM7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNDLG1CQUFtQkgsS0FBSztJQUMvQixJQUFJLE9BQU9BLFVBQVUsVUFBVSxPQUFPQTtJQUV0QyxPQUFPQSxNQUFNRSxPQUFPLENBQUMsUUFBUTtBQUMvQjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDZk4sa0JBQWtCQTtJQUNsQkksb0JBQW9CQTtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZXNjYXBlRmFjZXRWYWx1ZS5qcz81NGEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXBsYWNlcyBhIGxlYWRpbmcgLSB3aXRoIFxcLVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSB0aGUgZmFjZXQgdmFsdWUgdG8gcmVwbGFjZVxuICogQHJldHVybnMge2FueX0gdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZXNjYXBlRmFjZXRWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL14tLywgJ1xcXFwtJyk7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgYSBsZWFkaW5nIFxcLSB3aXRoIC1cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWVcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB1bmVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGVGYWNldFZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15cXFxcLS8sICctJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlc2NhcGVGYWNldFZhbHVlOiBlc2NhcGVGYWNldFZhbHVlLFxuICB1bmVzY2FwZUZhY2V0VmFsdWU6IHVuZXNjYXBlRmFjZXRWYWx1ZSxcbn07XG4iXSwibmFtZXMiOlsiZXNjYXBlRmFjZXRWYWx1ZSIsInZhbHVlIiwiU3RyaW5nIiwicmVwbGFjZSIsInVuZXNjYXBlRmFjZXRWYWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n    if (!Array.isArray(array)) {\n        return undefined;\n    }\n    for(var i = 0; i < array.length; i++){\n        if (comparator(array[i])) {\n            return array[i];\n        }\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEscUVBQXFFO0FBQ3JFQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsS0FBSyxFQUFFQyxVQUFVO0lBQzlDLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSCxRQUFRO1FBQ3pCLE9BQU9JO0lBQ1Q7SUFFQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlKLFdBQVdELEtBQUssQ0FBQ0ssRUFBRSxHQUFHO1lBQ3hCLE9BQU9MLEtBQUssQ0FBQ0ssRUFBRTtRQUNqQjtJQUNGO0lBRUEsT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZmluZC5qcz81MjkxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gQE1BSk9SIGNhbiBiZSByZXBsYWNlZCBieSBuYXRpdmUgQXJyYXkjZmluZCB3aGVuIHdlIGNoYW5nZSBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmQoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZpbmQiLCJhcnJheSIsImNvbXBhcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/findIndex.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/findIndex.js ***!
  \*************************************************************************************************************/
/***/ ((module) => {

eval("\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n    if (!Array.isArray(array)) {\n        return -1;\n    }\n    for(var i = 0; i < array.length; i++){\n        if (comparator(array[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSwwRUFBMEU7QUFDMUVBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLFVBQVU7SUFDOUMsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNILFFBQVE7UUFDekIsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosTUFBTUssTUFBTSxFQUFFRCxJQUFLO1FBQ3JDLElBQUlILFdBQVdELEtBQUssQ0FBQ0ksRUFBRSxHQUFHO1lBQ3hCLE9BQU9BO1FBQ1Q7SUFDRjtJQUNBLE9BQU8sQ0FBQztBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanM/Yzk2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEBNQUpPUiBjYW4gYmUgcmVwbGFjZWQgYnkgbmF0aXZlIEFycmF5I2ZpbmRJbmRleCB3aGVuIHdlIGNoYW5nZSBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmQoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmaW5kIiwiYXJyYXkiLCJjb21wYXJhdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/findIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/formatSort.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/formatSort.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar find = __webpack_require__(/*! ./find */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/find.js\");\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */ module.exports = function formatSort(sortBy, defaults) {\n    var defaultInstructions = (defaults || []).map(function(sort) {\n        return sort.split(\":\");\n    });\n    return sortBy.reduce(function preparePredicate(out, sort) {\n        var sortInstruction = sort.split(\":\");\n        var matchingDefault = find(defaultInstructions, function(defaultInstruction) {\n            return defaultInstruction[0] === sortInstruction[0];\n        });\n        if (sortInstruction.length > 1 || !matchingDefault) {\n            out[0].push(sortInstruction[0]);\n            out[1].push(sortInstruction[1]);\n            return out;\n        }\n        out[0].push(matchingDefault[0]);\n        out[1].push(matchingDefault[1]);\n        return out;\n    }, [\n        [],\n        []\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mb3JtYXRTb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkI7Ozs7O0NBS0MsR0FDREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdDLE1BQU0sRUFBRUMsUUFBUTtJQUNuRCxJQUFJQyxzQkFBc0IsQ0FBQ0QsWUFBWSxFQUFFLEVBQUVFLEdBQUcsQ0FBQyxTQUFVQyxJQUFJO1FBQzNELE9BQU9BLEtBQUtDLEtBQUssQ0FBQztJQUNwQjtJQUVBLE9BQU9MLE9BQU9NLE1BQU0sQ0FDbEIsU0FBU0MsaUJBQWlCQyxHQUFHLEVBQUVKLElBQUk7UUFDakMsSUFBSUssa0JBQWtCTCxLQUFLQyxLQUFLLENBQUM7UUFFakMsSUFBSUssa0JBQWtCZixLQUNwQk8scUJBQ0EsU0FBVVMsa0JBQWtCO1lBQzFCLE9BQU9BLGtCQUFrQixDQUFDLEVBQUUsS0FBS0YsZUFBZSxDQUFDLEVBQUU7UUFDckQ7UUFHRixJQUFJQSxnQkFBZ0JHLE1BQU0sR0FBRyxLQUFLLENBQUNGLGlCQUFpQjtZQUNsREYsR0FBRyxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxDQUFDSixlQUFlLENBQUMsRUFBRTtZQUM5QkQsR0FBRyxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxDQUFDSixlQUFlLENBQUMsRUFBRTtZQUM5QixPQUFPRDtRQUNUO1FBRUFBLEdBQUcsQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0gsZUFBZSxDQUFDLEVBQUU7UUFDOUJGLEdBQUcsQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0gsZUFBZSxDQUFDLEVBQUU7UUFDOUIsT0FBT0Y7SUFDVCxHQUNBO1FBQUMsRUFBRTtRQUFFLEVBQUU7S0FBQztBQUVaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mb3JtYXRTb3J0LmpzP2ZlNmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmluZCA9IHJlcXVpcmUoJy4vZmluZCcpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSBzb3J0IGZvcm1hdCBmcm9tIHVzZXIgZnJpZW5kbHkgbm90YXRpb24gdG8gbG9kYXNoIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc29ydEJ5IGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbZGVmYXVsdHNdIGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcmV0dXJuIHthcnJheS48c3RyaW5nW10+fSBhcnJheSBjb250YWluaW5nIDIgZWxlbWVudHMgOiBhdHRyaWJ1dGVzLCBvcmRlcnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnRCeSwgZGVmYXVsdHMpIHtcbiAgdmFyIGRlZmF1bHRJbnN0cnVjdGlvbnMgPSAoZGVmYXVsdHMgfHwgW10pLm1hcChmdW5jdGlvbiAoc29ydCkge1xuICAgIHJldHVybiBzb3J0LnNwbGl0KCc6Jyk7XG4gIH0pO1xuXG4gIHJldHVybiBzb3J0QnkucmVkdWNlKFxuICAgIGZ1bmN0aW9uIHByZXBhcmVQcmVkaWNhdGUob3V0LCBzb3J0KSB7XG4gICAgICB2YXIgc29ydEluc3RydWN0aW9uID0gc29ydC5zcGxpdCgnOicpO1xuXG4gICAgICB2YXIgbWF0Y2hpbmdEZWZhdWx0ID0gZmluZChcbiAgICAgICAgZGVmYXVsdEluc3RydWN0aW9ucyxcbiAgICAgICAgZnVuY3Rpb24gKGRlZmF1bHRJbnN0cnVjdGlvbikge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0SW5zdHJ1Y3Rpb25bMF0gPT09IHNvcnRJbnN0cnVjdGlvblswXTtcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKHNvcnRJbnN0cnVjdGlvbi5sZW5ndGggPiAxIHx8ICFtYXRjaGluZ0RlZmF1bHQpIHtcbiAgICAgICAgb3V0WzBdLnB1c2goc29ydEluc3RydWN0aW9uWzBdKTtcbiAgICAgICAgb3V0WzFdLnB1c2goc29ydEluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cblxuICAgICAgb3V0WzBdLnB1c2gobWF0Y2hpbmdEZWZhdWx0WzBdKTtcbiAgICAgIG91dFsxXS5wdXNoKG1hdGNoaW5nRGVmYXVsdFsxXSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgW1tdLCBbXV1cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiZmluZCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0U29ydCIsInNvcnRCeSIsImRlZmF1bHRzIiwiZGVmYXVsdEluc3RydWN0aW9ucyIsIm1hcCIsInNvcnQiLCJzcGxpdCIsInJlZHVjZSIsInByZXBhcmVQcmVkaWNhdGUiLCJvdXQiLCJzb3J0SW5zdHJ1Y3Rpb24iLCJtYXRjaGluZ0RlZmF1bHQiLCJkZWZhdWx0SW5zdHJ1Y3Rpb24iLCJsZW5ndGgiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/formatSort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/inherits.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/inherits.js ***!
  \************************************************************************************************************/
/***/ ((module) => {

eval("\nfunction inherits(ctor, superCtor) {\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}\nmodule.exports = inherits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbmhlcml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLFNBQVNDLElBQUksRUFBRUMsU0FBUztJQUMvQkQsS0FBS0UsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNILFVBQVVDLFNBQVMsRUFBRTtRQUNsREcsYUFBYTtZQUNYQyxPQUFPTjtZQUNQTyxZQUFZO1lBQ1pDLFVBQVU7WUFDVkMsY0FBYztRQUNoQjtJQUNGO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvaW5oZXJpdHMuanM/YWFkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogY3RvcixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSxcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5oZXJpdHM7XG4iXSwibmFtZXMiOlsiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/inherits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/intersection.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/intersection.js ***!
  \****************************************************************************************************************/
/***/ ((module) => {

eval("\nfunction intersection(arr1, arr2) {\n    return arr1.filter(function(value, index) {\n        return arr2.indexOf(value) > -1 && arr1.indexOf(value) === index /* skips duplicates */ ;\n    });\n}\nmodule.exports = intersection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbnRlcnNlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFTQSxhQUFhQyxJQUFJLEVBQUVDLElBQUk7SUFDOUIsT0FBT0QsS0FBS0UsTUFBTSxDQUFDLFNBQVVDLEtBQUssRUFBRUMsS0FBSztRQUN2QyxPQUNFSCxLQUFLSSxPQUFPLENBQUNGLFNBQVMsQ0FBQyxLQUN2QkgsS0FBS0ssT0FBTyxDQUFDRixXQUFXQyxNQUFNLG9CQUFvQjtJQUV0RDtBQUNGO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ludGVyc2VjdGlvbi5qcz8zNjU1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW50ZXJzZWN0aW9uKGFycjEsIGFycjIpIHtcbiAgcmV0dXJuIGFycjEuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYXJyMi5pbmRleE9mKHZhbHVlKSA+IC0xICYmXG4gICAgICBhcnIxLmluZGV4T2YodmFsdWUpID09PSBpbmRleCAvKiBza2lwcyBkdXBsaWNhdGVzICovXG4gICAgKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0aW9uO1xuIl0sIm5hbWVzIjpbImludGVyc2VjdGlvbiIsImFycjEiLCJhcnIyIiwiZmlsdGVyIiwidmFsdWUiLCJpbmRleCIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/intersection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js ***!
  \*********************************************************************************************************/
/***/ ((module) => {

eval("\nfunction clone(value) {\n    if (typeof value === \"object\" && value !== null) {\n        return _merge(Array.isArray(value) ? [] : {}, value);\n    }\n    return value;\n}\nfunction isObjectOrArrayOrFunction(value) {\n    return typeof value === \"function\" || Array.isArray(value) || Object.prototype.toString.call(value) === \"[object Object]\";\n}\nfunction _merge(target, source) {\n    if (target === source) {\n        return target;\n    }\n    // eslint-disable-next-line no-restricted-syntax\n    for(var key in source){\n        if (!Object.prototype.hasOwnProperty.call(source, key) || key === \"__proto__\" || key === \"constructor\") {\n            continue;\n        }\n        var sourceVal = source[key];\n        var targetVal = target[key];\n        if (typeof targetVal !== \"undefined\" && typeof sourceVal === \"undefined\") {\n            continue;\n        }\n        if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {\n            target[key] = _merge(targetVal, sourceVal);\n        } else {\n            target[key] = clone(sourceVal);\n        }\n    }\n    return target;\n}\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */ function merge(target) {\n    if (!isObjectOrArrayOrFunction(target)) {\n        target = {};\n    }\n    for(var i = 1, l = arguments.length; i < l; i++){\n        var source = arguments[i];\n        if (isObjectOrArrayOrFunction(source)) {\n            _merge(target, source);\n        }\n    }\n    return target;\n}\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLE1BQU1DLEtBQUs7SUFDbEIsSUFBSSxPQUFPQSxVQUFVLFlBQVlBLFVBQVUsTUFBTTtRQUMvQyxPQUFPQyxPQUFPQyxNQUFNQyxPQUFPLENBQUNILFNBQVMsRUFBRSxHQUFHLENBQUMsR0FBR0E7SUFDaEQ7SUFDQSxPQUFPQTtBQUNUO0FBRUEsU0FBU0ksMEJBQTBCSixLQUFLO0lBQ3RDLE9BQ0UsT0FBT0EsVUFBVSxjQUNqQkUsTUFBTUMsT0FBTyxDQUFDSCxVQUNkSyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDUixXQUFXO0FBRTlDO0FBRUEsU0FBU0MsT0FBT1EsTUFBTSxFQUFFQyxNQUFNO0lBQzVCLElBQUlELFdBQVdDLFFBQVE7UUFDckIsT0FBT0Q7SUFDVDtJQUVBLGdEQUFnRDtJQUNoRCxJQUFLLElBQUlFLE9BQU9ELE9BQVE7UUFDdEIsSUFDRSxDQUFDTCxPQUFPQyxTQUFTLENBQUNNLGNBQWMsQ0FBQ0osSUFBSSxDQUFDRSxRQUFRQyxRQUM5Q0EsUUFBUSxlQUNSQSxRQUFRLGVBQ1I7WUFFQTtRQUNGO1FBRUEsSUFBSUUsWUFBWUgsTUFBTSxDQUFDQyxJQUFJO1FBQzNCLElBQUlHLFlBQVlMLE1BQU0sQ0FBQ0UsSUFBSTtRQUUzQixJQUFJLE9BQU9HLGNBQWMsZUFBZSxPQUFPRCxjQUFjLGFBQWE7WUFFeEU7UUFDRjtRQUVBLElBQ0VULDBCQUEwQlUsY0FDMUJWLDBCQUEwQlMsWUFDMUI7WUFDQUosTUFBTSxDQUFDRSxJQUFJLEdBQUdWLE9BQU9hLFdBQVdEO1FBQ2xDLE9BQU87WUFDTEosTUFBTSxDQUFDRSxJQUFJLEdBQUdaLE1BQU1jO1FBQ3RCO0lBQ0Y7SUFDQSxPQUFPSjtBQUNUO0FBRUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRCxTQUFTTSxNQUFNTixNQUFNO0lBQ25CLElBQUksQ0FBQ0wsMEJBQTBCSyxTQUFTO1FBQ3RDQSxTQUFTLENBQUM7SUFDWjtJQUVBLElBQUssSUFBSU8sSUFBSSxHQUFHQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVILElBQUlDLEdBQUdELElBQUs7UUFDaEQsSUFBSU4sU0FBU1EsU0FBUyxDQUFDRixFQUFFO1FBRXpCLElBQUlaLDBCQUEwQk0sU0FBUztZQUNyQ1QsT0FBT1EsUUFBUUM7UUFDakI7SUFDRjtJQUNBLE9BQU9EO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvbWVyZ2UuanM/ZjY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIF9tZXJnZShBcnJheS5pc0FycmF5KHZhbHVlKSA/IFtdIDoge30sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICBBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICk7XG59XG5cbmZ1bmN0aW9uIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoXG4gICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSB8fFxuICAgICAga2V5ID09PSAnX19wcm90b19fJyB8fFxuICAgICAga2V5ID09PSAnY29uc3RydWN0b3InXG4gICAgKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VWYWwgPSBzb3VyY2Vba2V5XTtcbiAgICB2YXIgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV07XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldFZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNvdXJjZVZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbih0YXJnZXRWYWwpICYmXG4gICAgICBpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHNvdXJjZVZhbClcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gX21lcmdlKHRhcmdldFZhbCwgc291cmNlVmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZShzb3VyY2VWYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgT2JqZWN0LmFzc2lnbiwgYnV0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kIGluaGVyaXRlZFxuICogZW51bWVyYWJsZSBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqXG4gKiBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvbWVyZ2UsIGJ1dDpcbiAqIC0gZG9lcyBtdXRhdGUgZnVuY3Rpb25zIGlmIHRoZXkgYXJlIGEgc291cmNlXG4gKiAtIHRyZWF0cyBub24tcGxhaW4gb2JqZWN0cyBhcyBwbGFpblxuICogLSBkb2VzIG5vdCB3b3JrIGZvciBjaXJjdWxhciBvYmplY3RzXG4gKiAtIHRyZWF0cyBzcGFyc2UgYXJyYXlzIGFzIHNwYXJzZVxuICogLSBkb2VzIG5vdCBjb252ZXJ0IEFycmF5LWxpa2Ugb2JqZWN0cyAoQXJndW1lbnRzLCBOb2RlTGlzdHMsIGV0Yy4pIHRvIGFycmF5c1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0KSB7XG4gIGlmICghaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cblxuICBmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgaWYgKGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24oc291cmNlKSkge1xuICAgICAgX21lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiJdLCJuYW1lcyI6WyJjbG9uZSIsInZhbHVlIiwiX21lcmdlIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInRhcmdldCIsInNvdXJjZSIsImtleSIsImhhc093blByb3BlcnR5Iiwic291cmNlVmFsIiwidGFyZ2V0VmFsIiwibWVyZ2UiLCJpIiwibCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

eval("\nfunction objectHasKeys(obj) {\n    return obj && Object.keys(obj).length > 0;\n}\nmodule.exports = objectHasKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsY0FBY0MsR0FBRztJQUN4QixPQUFPQSxPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQUtHLE1BQU0sR0FBRztBQUMxQztBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzPzM0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RIYXNLZXlzKG9iaikge1xuICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RIYXNLZXlzO1xuIl0sIm5hbWVzIjpbIm9iamVjdEhhc0tleXMiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source === null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key;\n    var i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        // eslint-disable-next-line no-continue\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vbWl0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsK0hBQStIO0FBQy9ILFNBQVNBLDhCQUE4QkMsTUFBTSxFQUFFQyxRQUFRO0lBQ3JELElBQUlELFdBQVcsTUFBTSxPQUFPLENBQUM7SUFDN0IsSUFBSUUsU0FBUyxDQUFDO0lBQ2QsSUFBSUMsYUFBYUMsT0FBT0MsSUFBSSxDQUFDTDtJQUM3QixJQUFJTTtJQUNKLElBQUlDO0lBQ0osSUFBS0EsSUFBSSxHQUFHQSxJQUFJSixXQUFXSyxNQUFNLEVBQUVELElBQUs7UUFDdENELE1BQU1ILFVBQVUsQ0FBQ0ksRUFBRTtRQUNuQix1Q0FBdUM7UUFDdkMsSUFBSU4sU0FBU1EsT0FBTyxDQUFDSCxRQUFRLEdBQUc7UUFDaENKLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHTixNQUFNLENBQUNNLElBQUk7SUFDM0I7SUFDQSxPQUFPSjtBQUNUO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL29taXQuanM/NGY1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9ibG9iLzNhYWFmYWUwNTNmYTc1ZmViYjNhYTQ1ZDQ1YjZmMDA2NDZlMzBiYTQvcGFja2FnZXMvYmFiZWwtaGVscGVycy9zcmMvaGVscGVycy5qcyNMNjA0LUw2MjBcbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleTtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTtcbiJdLCJuYW1lcyI6WyJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZSIsImV4Y2x1ZGVkIiwidGFyZ2V0Iiwic291cmNlS2V5cyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/omit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/orderBy.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/orderBy.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

eval("\nfunction compareAscending(value, other) {\n    if (value !== other) {\n        var valIsDefined = value !== undefined;\n        var valIsNull = value === null;\n        var othIsDefined = other !== undefined;\n        var othIsNull = other === null;\n        if (!othIsNull && value > other || valIsNull && othIsDefined || !valIsDefined) {\n            return 1;\n        }\n        if (!valIsNull && value < other || othIsNull && valIsDefined || !othIsDefined) {\n            return -1;\n        }\n    }\n    return 0;\n}\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */ function orderBy(collection, iteratees, orders) {\n    if (!Array.isArray(collection)) {\n        return [];\n    }\n    if (!Array.isArray(orders)) {\n        orders = [];\n    }\n    var result = collection.map(function(value, index) {\n        return {\n            criteria: iteratees.map(function(iteratee) {\n                return value[iteratee];\n            }),\n            index: index,\n            value: value\n        };\n    });\n    result.sort(function comparer(object, other) {\n        var index = -1;\n        while(++index < object.criteria.length){\n            var res = compareAscending(object.criteria[index], other.criteria[index]);\n            if (res) {\n                if (index >= orders.length) {\n                    return res;\n                }\n                if (orders[index] === \"desc\") {\n                    return -res;\n                }\n                return res;\n            }\n        }\n        // This ensures a stable sort in V8 and other engines.\n        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n        return object.index - other.index;\n    });\n    return result.map(function(res) {\n        return res.value;\n    });\n}\nmodule.exports = orderBy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vcmRlckJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsaUJBQWlCQyxLQUFLLEVBQUVDLEtBQUs7SUFDcEMsSUFBSUQsVUFBVUMsT0FBTztRQUNuQixJQUFJQyxlQUFlRixVQUFVRztRQUM3QixJQUFJQyxZQUFZSixVQUFVO1FBRTFCLElBQUlLLGVBQWVKLFVBQVVFO1FBQzdCLElBQUlHLFlBQVlMLFVBQVU7UUFFMUIsSUFDRSxDQUFFSyxhQUFhTixRQUFRQyxTQUN0QkcsYUFBYUMsZ0JBQ2QsQ0FBQ0gsY0FDRDtZQUNBLE9BQU87UUFDVDtRQUNBLElBQ0UsQ0FBRUUsYUFBYUosUUFBUUMsU0FDdEJLLGFBQWFKLGdCQUNkLENBQUNHLGNBQ0Q7WUFDQSxPQUFPLENBQUM7UUFDVjtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTRSxRQUFRQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsTUFBTTtJQUM1QyxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osYUFBYTtRQUM5QixPQUFPLEVBQUU7SUFDWDtJQUVBLElBQUksQ0FBQ0csTUFBTUMsT0FBTyxDQUFDRixTQUFTO1FBQzFCQSxTQUFTLEVBQUU7SUFDYjtJQUVBLElBQUlHLFNBQVNMLFdBQVdNLEdBQUcsQ0FBQyxTQUFVZCxLQUFLLEVBQUVlLEtBQUs7UUFDaEQsT0FBTztZQUNMQyxVQUFVUCxVQUFVSyxHQUFHLENBQUMsU0FBVUcsUUFBUTtnQkFDeEMsT0FBT2pCLEtBQUssQ0FBQ2lCLFNBQVM7WUFDeEI7WUFDQUYsT0FBT0E7WUFDUGYsT0FBT0E7UUFDVDtJQUNGO0lBRUFhLE9BQU9LLElBQUksQ0FBQyxTQUFTQyxTQUFTQyxNQUFNLEVBQUVuQixLQUFLO1FBQ3pDLElBQUljLFFBQVEsQ0FBQztRQUViLE1BQU8sRUFBRUEsUUFBUUssT0FBT0osUUFBUSxDQUFDSyxNQUFNLENBQUU7WUFDdkMsSUFBSUMsTUFBTXZCLGlCQUFpQnFCLE9BQU9KLFFBQVEsQ0FBQ0QsTUFBTSxFQUFFZCxNQUFNZSxRQUFRLENBQUNELE1BQU07WUFDeEUsSUFBSU8sS0FBSztnQkFDUCxJQUFJUCxTQUFTTCxPQUFPVyxNQUFNLEVBQUU7b0JBQzFCLE9BQU9DO2dCQUNUO2dCQUNBLElBQUlaLE1BQU0sQ0FBQ0ssTUFBTSxLQUFLLFFBQVE7b0JBQzVCLE9BQU8sQ0FBQ087Z0JBQ1Y7Z0JBQ0EsT0FBT0E7WUFDVDtRQUNGO1FBRUEsc0RBQXNEO1FBQ3RELDJFQUEyRTtRQUMzRSxPQUFPRixPQUFPTCxLQUFLLEdBQUdkLE1BQU1jLEtBQUs7SUFDbkM7SUFFQSxPQUFPRixPQUFPQyxHQUFHLENBQUMsU0FBVVEsR0FBRztRQUM3QixPQUFPQSxJQUFJdEIsS0FBSztJQUNsQjtBQUNGO0FBRUF1QixPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvb3JkZXJCeS5qcz8yMDA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbDtcblxuICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbDtcblxuICAgIGlmIChcbiAgICAgICghb3RoSXNOdWxsICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCkgfHxcbiAgICAgICF2YWxJc0RlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAoIXZhbElzTnVsbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQpIHx8XG4gICAgICAhb3RoSXNEZWZpbmVkXG4gICAgKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8b2JqZWN0Pn0gY29sbGVjdGlvbiBvYmplY3Qgd2l0aCBrZXlzIGluIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gaXRlcmF0ZWVzIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3JkZXJzIGFzYyB8IGRlc2NcbiAqIEByZXR1cm4ge0FycmF5PG9iamVjdD59IHNvcnRlZCBjb2xsZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KG9yZGVycykpIHtcbiAgICBvcmRlcnMgPSBbXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBjb2xsZWN0aW9uLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZXMubWFwKGZ1bmN0aW9uIChpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbaXRlcmF0ZWVdO1xuICAgICAgfSksXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgfTtcbiAgfSk7XG5cbiAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gY29tcGFyZXIob2JqZWN0LCBvdGhlcikge1xuICAgIHZhciBpbmRleCA9IC0xO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBvYmplY3QuY3JpdGVyaWEubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzID0gY29tcGFyZUFzY2VuZGluZyhvYmplY3QuY3JpdGVyaWFbaW5kZXhdLCBvdGhlci5jcml0ZXJpYVtpbmRleF0pO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyc1tpbmRleF0gPT09ICdkZXNjJykge1xuICAgICAgICAgIHJldHVybiAtcmVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0Lm1hcChmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIHJlcy52YWx1ZTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3JkZXJCeTtcbiJdLCJuYW1lcyI6WyJjb21wYXJlQXNjZW5kaW5nIiwidmFsdWUiLCJvdGhlciIsInZhbElzRGVmaW5lZCIsInVuZGVmaW5lZCIsInZhbElzTnVsbCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm9yZGVyQnkiLCJjb2xsZWN0aW9uIiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwicmVzdWx0IiwibWFwIiwiaW5kZXgiLCJjcml0ZXJpYSIsIml0ZXJhdGVlIiwic29ydCIsImNvbXBhcmVyIiwib2JqZWN0IiwibGVuZ3RoIiwicmVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/orderBy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/valToNumber.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/valToNumber.js ***!
  \***************************************************************************************************************/
/***/ ((module) => {

eval("\nfunction valToNumber(v) {\n    if (typeof v === \"number\") {\n        return v;\n    } else if (typeof v === \"string\") {\n        return parseFloat(v);\n    } else if (Array.isArray(v)) {\n        return v.map(valToNumber);\n    }\n    throw new Error(\"The value should be a number, a parsable string or an array of those.\");\n}\nmodule.exports = valToNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy92YWxUb051bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLFlBQVlDLENBQUM7SUFDcEIsSUFBSSxPQUFPQSxNQUFNLFVBQVU7UUFDekIsT0FBT0E7SUFDVCxPQUFPLElBQUksT0FBT0EsTUFBTSxVQUFVO1FBQ2hDLE9BQU9DLFdBQVdEO0lBQ3BCLE9BQU8sSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxJQUFJO1FBQzNCLE9BQU9BLEVBQUVJLEdBQUcsQ0FBQ0w7SUFDZjtJQUVBLE1BQU0sSUFBSU0sTUFDUjtBQUVKO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL3ZhbFRvTnVtYmVyLmpzPzgxMDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiB2YWxUb051bWJlcih2KSB7XG4gIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgcmV0dXJuIHYubWFwKHZhbFRvTnVtYmVyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnVGhlIHZhbHVlIHNob3VsZCBiZSBhIG51bWJlciwgYSBwYXJzYWJsZSBzdHJpbmcgb3IgYW4gYXJyYXkgb2YgdGhvc2UuJ1xuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbFRvTnVtYmVyO1xuIl0sIm5hbWVzIjpbInZhbFRvTnVtYmVyIiwidiIsInBhcnNlRmxvYXQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/valToNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/requestBuilder.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/requestBuilder.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/functions/merge.js\");\nfunction sortObject(obj) {\n    return Object.keys(obj).sort().reduce(function(acc, curr) {\n        acc[curr] = obj[curr];\n        return acc;\n    }, {});\n}\nvar requestBuilder = {\n    /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */ _getQueries: function getQueries(index, state) {\n        var queries = [];\n        // One query for the hits\n        queries.push({\n            indexName: index,\n            params: requestBuilder._getHitsSearchParams(state)\n        });\n        // One for each disjunctive facets\n        state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n            queries.push({\n                indexName: index,\n                params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n            });\n        });\n        // More to get the parent levels of the hierarchical facets when refined\n        state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n            var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n            var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            // If we are deeper than level 0 (starting from `beer > IPA`)\n            // we want to get all parent values\n            if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n                // We generate a map of the filters we will use for our facet values queries\n                var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(function createFiltersMap(map, segment, level) {\n                    return map.concat({\n                        attribute: hierarchicalFacet.attributes[level],\n                        value: level === 0 ? segment : [\n                            map[map.length - 1].value,\n                            segment\n                        ].join(separator)\n                    });\n                }, []);\n                filtersMap.forEach(function(filter, level) {\n                    var params = requestBuilder._getDisjunctiveFacetSearchParams(state, filter.attribute, level === 0);\n                    // Keep facet filters unrelated to current hierarchical attributes\n                    function hasHierarchicalFacetFilter(value) {\n                        return hierarchicalFacet.attributes.some(function(attribute) {\n                            return attribute === value.split(\":\")[0];\n                        });\n                    }\n                    var filteredFacetFilters = (params.facetFilters || []).reduce(function(acc, facetFilter) {\n                        if (Array.isArray(facetFilter)) {\n                            var filtered = facetFilter.filter(function(filterValue) {\n                                return !hasHierarchicalFacetFilter(filterValue);\n                            });\n                            if (filtered.length > 0) {\n                                acc.push(filtered);\n                            }\n                        }\n                        if (typeof facetFilter === \"string\" && !hasHierarchicalFacetFilter(facetFilter)) {\n                            acc.push(facetFilter);\n                        }\n                        return acc;\n                    }, []);\n                    var parent = filtersMap[level - 1];\n                    if (level > 0) {\n                        params.facetFilters = filteredFacetFilters.concat(parent.attribute + \":\" + parent.value);\n                    } else {\n                        params.facetFilters = filteredFacetFilters.length > 0 ? filteredFacetFilters : undefined;\n                    }\n                    queries.push({\n                        indexName: index,\n                        params: params\n                    });\n                });\n            }\n        });\n        return queries;\n    },\n    /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */ _getHitsSearchParams: function(state) {\n        var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state)).sort();\n        var facetFilters = requestBuilder._getFacetFilters(state);\n        var numericFilters = requestBuilder._getNumericFilters(state);\n        var tagFilters = requestBuilder._getTagFilters(state);\n        var additionalParams = {\n            facets: facets.indexOf(\"*\") > -1 ? [\n                \"*\"\n            ] : facets,\n            tagFilters: tagFilters\n        };\n        if (facetFilters.length > 0) {\n            additionalParams.facetFilters = facetFilters;\n        }\n        if (numericFilters.length > 0) {\n            additionalParams.numericFilters = numericFilters;\n        }\n        return sortObject(merge({}, state.getQueryParams(), additionalParams));\n    },\n    /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */ _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n        var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n        var numericFilters = requestBuilder._getNumericFilters(state, facet);\n        var tagFilters = requestBuilder._getTagFilters(state);\n        var additionalParams = {\n            hitsPerPage: 0,\n            page: 0,\n            analytics: false,\n            clickAnalytics: false\n        };\n        if (tagFilters.length > 0) {\n            additionalParams.tagFilters = tagFilters;\n        }\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n        if (hierarchicalFacet) {\n            additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n        } else {\n            additionalParams.facets = facet;\n        }\n        if (numericFilters.length > 0) {\n            additionalParams.numericFilters = numericFilters;\n        }\n        if (facetFilters.length > 0) {\n            additionalParams.facetFilters = facetFilters;\n        }\n        return sortObject(merge({}, state.getQueryParams(), additionalParams));\n    },\n    /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */ _getNumericFilters: function(state, facetName) {\n        if (state.numericFilters) {\n            return state.numericFilters;\n        }\n        var numericFilters = [];\n        Object.keys(state.numericRefinements).forEach(function(attribute) {\n            var operators = state.numericRefinements[attribute] || {};\n            Object.keys(operators).forEach(function(operator) {\n                var values = operators[operator] || [];\n                if (facetName !== attribute) {\n                    values.forEach(function(value) {\n                        if (Array.isArray(value)) {\n                            var vs = value.map(function(v) {\n                                return attribute + operator + v;\n                            });\n                            numericFilters.push(vs);\n                        } else {\n                            numericFilters.push(attribute + operator + value);\n                        }\n                    });\n                }\n            });\n        });\n        return numericFilters;\n    },\n    /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */ _getTagFilters: function(state) {\n        if (state.tagFilters) {\n            return state.tagFilters;\n        }\n        return state.tagRefinements.join(\",\");\n    },\n    /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */ _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n        var facetFilters = [];\n        var facetsRefinements = state.facetsRefinements || {};\n        Object.keys(facetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = facetsRefinements[facetName] || [];\n            facetValues.sort().forEach(function(facetValue) {\n                facetFilters.push(facetName + \":\" + facetValue);\n            });\n        });\n        var facetsExcludes = state.facetsExcludes || {};\n        Object.keys(facetsExcludes).sort().forEach(function(facetName) {\n            var facetValues = facetsExcludes[facetName] || [];\n            facetValues.sort().forEach(function(facetValue) {\n                facetFilters.push(facetName + \":-\" + facetValue);\n            });\n        });\n        var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n        Object.keys(disjunctiveFacetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n            if (facetName === facet || !facetValues || facetValues.length === 0) {\n                return;\n            }\n            var orFilters = [];\n            facetValues.sort().forEach(function(facetValue) {\n                orFilters.push(facetName + \":\" + facetValue);\n            });\n            facetFilters.push(orFilters);\n        });\n        var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n        Object.keys(hierarchicalFacetsRefinements).sort().forEach(function(facetName) {\n            var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n            var facetValue = facetValues[0];\n            if (facetValue === undefined) {\n                return;\n            }\n            var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n            var attributeToRefine;\n            var attributesIndex;\n            // we ask for parent facet values only when the `facet` is the current hierarchical facet\n            if (facet === facetName) {\n                // if we are at the root level already, no need to ask for facet values, we get them from\n                // the hits query\n                if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n                    return;\n                }\n                if (!rootPath) {\n                    attributesIndex = facetValue.split(separator).length - 2;\n                    facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n                } else {\n                    attributesIndex = rootPath.split(separator).length - 1;\n                    facetValue = rootPath;\n                }\n                attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n            } else {\n                attributesIndex = facetValue.split(separator).length - 1;\n                attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n            }\n            if (attributeToRefine) {\n                facetFilters.push([\n                    attributeToRefine + \":\" + facetValue\n                ]);\n            }\n        });\n        return facetFilters;\n    },\n    _getHitsHierarchicalFacetsAttributes: function(state) {\n        var out = [];\n        return state.hierarchicalFacets.reduce(// ask for as much levels as there's hierarchical refinements\n        function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n            var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n            // if no refinement, ask for root level\n            if (!hierarchicalRefinement) {\n                allAttributes.push(hierarchicalFacet.attributes[0]);\n                return allAttributes;\n            }\n            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n            var level = hierarchicalRefinement.split(separator).length;\n            var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n            return allAttributes.concat(newAttributes);\n        }, out);\n    },\n    _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        if (rootLevel === true) {\n            var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n            var attributeIndex = 0;\n            if (rootPath) {\n                attributeIndex = rootPath.split(separator).length;\n            }\n            return [\n                hierarchicalFacet.attributes[attributeIndex]\n            ];\n        }\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || \"\";\n        // if refinement is 'beers > IPA > Flying dog',\n        // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n        var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n        return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n    },\n    getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n        var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n        var searchForFacetSearchParameters = {\n            facetQuery: query,\n            facetName: facetName\n        };\n        if (typeof maxFacetHits === \"number\") {\n            searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n        }\n        return sortObject(merge({}, requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters));\n    }\n};\nmodule.exports = requestBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3JlcXVlc3RCdWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsU0FBU0MsV0FBV0MsR0FBRztJQUNyQixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQ2hCRyxJQUFJLEdBQ0pDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLElBQUk7UUFDekJELEdBQUcsQ0FBQ0MsS0FBSyxHQUFHTixHQUFHLENBQUNNLEtBQUs7UUFDckIsT0FBT0Q7SUFDVCxHQUFHLENBQUM7QUFDUjtBQUVBLElBQUlFLGlCQUFpQjtJQUNuQjs7Ozs7OztHQU9DLEdBQ0RDLGFBQWEsU0FBU0MsV0FBV0MsS0FBSyxFQUFFQyxLQUFLO1FBQzNDLElBQUlDLFVBQVUsRUFBRTtRQUVoQix5QkFBeUI7UUFDekJBLFFBQVFDLElBQUksQ0FBQztZQUNYQyxXQUFXSjtZQUNYSyxRQUFRUixlQUFlUyxvQkFBb0IsQ0FBQ0w7UUFDOUM7UUFFQSxrQ0FBa0M7UUFDbENBLE1BQU1NLDJCQUEyQixHQUFHQyxPQUFPLENBQUMsU0FBVUMsWUFBWTtZQUNoRVAsUUFBUUMsSUFBSSxDQUFDO2dCQUNYQyxXQUFXSjtnQkFDWEssUUFBUVIsZUFBZWEsZ0NBQWdDLENBQ3JEVCxPQUNBUTtZQUVKO1FBQ0Y7UUFFQSx3RUFBd0U7UUFDeEVSLE1BQU1VLDRCQUE0QixHQUFHSCxPQUFPLENBQUMsU0FBVUMsWUFBWTtZQUNqRSxJQUFJRyxvQkFBb0JYLE1BQU1ZLDBCQUEwQixDQUFDSjtZQUN6RCxJQUFJSyxvQkFBb0JiLE1BQU1jLHlCQUF5QixDQUFDTjtZQUN4RCxJQUFJTyxZQUFZZixNQUFNZ0IsOEJBQThCLENBQUNMO1lBRXJELDZEQUE2RDtZQUM3RCxtQ0FBbUM7WUFDbkMsSUFDRUUsa0JBQWtCSSxNQUFNLEdBQUcsS0FDM0JKLGlCQUFpQixDQUFDLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSCxXQUFXRSxNQUFNLEdBQUcsR0FDL0M7Z0JBQ0EsNEVBQTRFO2dCQUM1RSxJQUFJRSxhQUFhTixpQkFBaUIsQ0FBQyxFQUFFLENBQ2xDSyxLQUFLLENBQUNILFdBQ05LLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FDVjNCLE1BQU0sQ0FBQyxTQUFTNEIsaUJBQWlCQyxHQUFHLEVBQUVDLE9BQU8sRUFBRUMsS0FBSztvQkFDbkQsT0FBT0YsSUFBSUcsTUFBTSxDQUFDO3dCQUNoQkMsV0FBV2Ysa0JBQWtCZ0IsVUFBVSxDQUFDSCxNQUFNO3dCQUM5Q0ksT0FDRUosVUFBVSxJQUNORCxVQUNBOzRCQUFDRCxHQUFHLENBQUNBLElBQUlMLE1BQU0sR0FBRyxFQUFFLENBQUNXLEtBQUs7NEJBQUVMO3lCQUFRLENBQUNNLElBQUksQ0FBQ2Q7b0JBQ2xEO2dCQUNGLEdBQUcsRUFBRTtnQkFFUEksV0FBV1osT0FBTyxDQUFDLFNBQVV1QixNQUFNLEVBQUVOLEtBQUs7b0JBQ3hDLElBQUlwQixTQUFTUixlQUFlYSxnQ0FBZ0MsQ0FDMURULE9BQ0E4QixPQUFPSixTQUFTLEVBQ2hCRixVQUFVO29CQUdaLGtFQUFrRTtvQkFDbEUsU0FBU08sMkJBQTJCSCxLQUFLO3dCQUN2QyxPQUFPakIsa0JBQWtCZ0IsVUFBVSxDQUFDSyxJQUFJLENBQUMsU0FBVU4sU0FBUzs0QkFDMUQsT0FBT0EsY0FBY0UsTUFBTVYsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUMxQztvQkFDRjtvQkFFQSxJQUFJZSx1QkFBdUIsQ0FBQzdCLE9BQU84QixZQUFZLElBQUksRUFBRSxFQUFFekMsTUFBTSxDQUMzRCxTQUFVQyxHQUFHLEVBQUV5QyxXQUFXO3dCQUN4QixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLGNBQWM7NEJBQzlCLElBQUlHLFdBQVdILFlBQVlMLE1BQU0sQ0FBQyxTQUFVUyxXQUFXO2dDQUNyRCxPQUFPLENBQUNSLDJCQUEyQlE7NEJBQ3JDOzRCQUVBLElBQUlELFNBQVNyQixNQUFNLEdBQUcsR0FBRztnQ0FDdkJ2QixJQUFJUSxJQUFJLENBQUNvQzs0QkFDWDt3QkFDRjt3QkFFQSxJQUNFLE9BQU9ILGdCQUFnQixZQUN2QixDQUFDSiwyQkFBMkJJLGNBQzVCOzRCQUNBekMsSUFBSVEsSUFBSSxDQUFDaUM7d0JBQ1g7d0JBRUEsT0FBT3pDO29CQUNULEdBQ0EsRUFBRTtvQkFHSixJQUFJOEMsU0FBU3JCLFVBQVUsQ0FBQ0ssUUFBUSxFQUFFO29CQUNsQyxJQUFJQSxRQUFRLEdBQUc7d0JBQ2JwQixPQUFPOEIsWUFBWSxHQUFHRCxxQkFBcUJSLE1BQU0sQ0FDL0NlLE9BQU9kLFNBQVMsR0FBRyxNQUFNYyxPQUFPWixLQUFLO29CQUV6QyxPQUFPO3dCQUNMeEIsT0FBTzhCLFlBQVksR0FDakJELHFCQUFxQmhCLE1BQU0sR0FBRyxJQUMxQmdCLHVCQUNBUTtvQkFDUjtvQkFFQXhDLFFBQVFDLElBQUksQ0FBQzt3QkFBRUMsV0FBV0o7d0JBQU9LLFFBQVFBO29CQUFPO2dCQUNsRDtZQUNGO1FBQ0Y7UUFFQSxPQUFPSDtJQUNUO0lBRUE7Ozs7O0dBS0MsR0FDREksc0JBQXNCLFNBQVVMLEtBQUs7UUFDbkMsSUFBSTBDLFNBQVMxQyxNQUFNMEMsTUFBTSxDQUN0QmpCLE1BQU0sQ0FBQ3pCLE1BQU0yQyxpQkFBaUIsRUFDOUJsQixNQUFNLENBQUM3QixlQUFlZ0Qsb0NBQW9DLENBQUM1QyxRQUMzRFIsSUFBSTtRQUVQLElBQUkwQyxlQUFldEMsZUFBZWlELGdCQUFnQixDQUFDN0M7UUFDbkQsSUFBSThDLGlCQUFpQmxELGVBQWVtRCxrQkFBa0IsQ0FBQy9DO1FBQ3ZELElBQUlnRCxhQUFhcEQsZUFBZXFELGNBQWMsQ0FBQ2pEO1FBQy9DLElBQUlrRCxtQkFBbUI7WUFDckJSLFFBQVFBLE9BQU9TLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSTtnQkFBQzthQUFJLEdBQUdUO1lBQzNDTSxZQUFZQTtRQUNkO1FBRUEsSUFBSWQsYUFBYWpCLE1BQU0sR0FBRyxHQUFHO1lBQzNCaUMsaUJBQWlCaEIsWUFBWSxHQUFHQTtRQUNsQztRQUVBLElBQUlZLGVBQWU3QixNQUFNLEdBQUcsR0FBRztZQUM3QmlDLGlCQUFpQkosY0FBYyxHQUFHQTtRQUNwQztRQUVBLE9BQU8xRCxXQUFXRixNQUFNLENBQUMsR0FBR2MsTUFBTW9ELGNBQWMsSUFBSUY7SUFDdEQ7SUFFQTs7Ozs7OztHQU9DLEdBQ0R6QyxrQ0FBa0MsU0FDaENULEtBQUssRUFDTHFELEtBQUssRUFDTEMscUJBQXFCO1FBRXJCLElBQUlwQixlQUFldEMsZUFBZWlELGdCQUFnQixDQUNoRDdDLE9BQ0FxRCxPQUNBQztRQUVGLElBQUlSLGlCQUFpQmxELGVBQWVtRCxrQkFBa0IsQ0FBQy9DLE9BQU9xRDtRQUM5RCxJQUFJTCxhQUFhcEQsZUFBZXFELGNBQWMsQ0FBQ2pEO1FBQy9DLElBQUlrRCxtQkFBbUI7WUFDckJLLGFBQWE7WUFDYkMsTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLGdCQUFnQjtRQUNsQjtRQUVBLElBQUlWLFdBQVcvQixNQUFNLEdBQUcsR0FBRztZQUN6QmlDLGlCQUFpQkYsVUFBVSxHQUFHQTtRQUNoQztRQUVBLElBQUlyQyxvQkFBb0JYLE1BQU1ZLDBCQUEwQixDQUFDeUM7UUFFekQsSUFBSTFDLG1CQUFtQjtZQUNyQnVDLGlCQUFpQlIsTUFBTSxHQUNyQjlDLGVBQWUrRCx5Q0FBeUMsQ0FDdEQzRCxPQUNBVyxtQkFDQTJDO1FBRU4sT0FBTztZQUNMSixpQkFBaUJSLE1BQU0sR0FBR1c7UUFDNUI7UUFFQSxJQUFJUCxlQUFlN0IsTUFBTSxHQUFHLEdBQUc7WUFDN0JpQyxpQkFBaUJKLGNBQWMsR0FBR0E7UUFDcEM7UUFFQSxJQUFJWixhQUFhakIsTUFBTSxHQUFHLEdBQUc7WUFDM0JpQyxpQkFBaUJoQixZQUFZLEdBQUdBO1FBQ2xDO1FBRUEsT0FBTzlDLFdBQVdGLE1BQU0sQ0FBQyxHQUFHYyxNQUFNb0QsY0FBYyxJQUFJRjtJQUN0RDtJQUVBOzs7Ozs7R0FNQyxHQUNESCxvQkFBb0IsU0FBVS9DLEtBQUssRUFBRTRELFNBQVM7UUFDNUMsSUFBSTVELE1BQU04QyxjQUFjLEVBQUU7WUFDeEIsT0FBTzlDLE1BQU04QyxjQUFjO1FBQzdCO1FBRUEsSUFBSUEsaUJBQWlCLEVBQUU7UUFFdkJ4RCxPQUFPQyxJQUFJLENBQUNTLE1BQU02RCxrQkFBa0IsRUFBRXRELE9BQU8sQ0FBQyxTQUFVbUIsU0FBUztZQUMvRCxJQUFJb0MsWUFBWTlELE1BQU02RCxrQkFBa0IsQ0FBQ25DLFVBQVUsSUFBSSxDQUFDO1lBQ3hEcEMsT0FBT0MsSUFBSSxDQUFDdUUsV0FBV3ZELE9BQU8sQ0FBQyxTQUFVd0QsUUFBUTtnQkFDL0MsSUFBSUMsU0FBU0YsU0FBUyxDQUFDQyxTQUFTLElBQUksRUFBRTtnQkFDdEMsSUFBSUgsY0FBY2xDLFdBQVc7b0JBQzNCc0MsT0FBT3pELE9BQU8sQ0FBQyxTQUFVcUIsS0FBSzt3QkFDNUIsSUFBSVEsTUFBTUMsT0FBTyxDQUFDVCxRQUFROzRCQUN4QixJQUFJcUMsS0FBS3JDLE1BQU1OLEdBQUcsQ0FBQyxTQUFVNEMsQ0FBQztnQ0FDNUIsT0FBT3hDLFlBQVlxQyxXQUFXRzs0QkFDaEM7NEJBQ0FwQixlQUFlNUMsSUFBSSxDQUFDK0Q7d0JBQ3RCLE9BQU87NEJBQ0xuQixlQUFlNUMsSUFBSSxDQUFDd0IsWUFBWXFDLFdBQVduQzt3QkFDN0M7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsT0FBT2tCO0lBQ1Q7SUFFQTs7Ozs7R0FLQyxHQUNERyxnQkFBZ0IsU0FBVWpELEtBQUs7UUFDN0IsSUFBSUEsTUFBTWdELFVBQVUsRUFBRTtZQUNwQixPQUFPaEQsTUFBTWdELFVBQVU7UUFDekI7UUFFQSxPQUFPaEQsTUFBTW1FLGNBQWMsQ0FBQ3RDLElBQUksQ0FBQztJQUNuQztJQUVBOzs7Ozs7OztHQVFDLEdBQ0RnQixrQkFBa0IsU0FBVTdDLEtBQUssRUFBRXFELEtBQUssRUFBRUMscUJBQXFCO1FBQzdELElBQUlwQixlQUFlLEVBQUU7UUFFckIsSUFBSWtDLG9CQUFvQnBFLE1BQU1vRSxpQkFBaUIsSUFBSSxDQUFDO1FBQ3BEOUUsT0FBT0MsSUFBSSxDQUFDNkUsbUJBQ1Q1RSxJQUFJLEdBQ0plLE9BQU8sQ0FBQyxTQUFVcUQsU0FBUztZQUMxQixJQUFJUyxjQUFjRCxpQkFBaUIsQ0FBQ1IsVUFBVSxJQUFJLEVBQUU7WUFDcERTLFlBQVk3RSxJQUFJLEdBQUdlLE9BQU8sQ0FBQyxTQUFVK0QsVUFBVTtnQkFDN0NwQyxhQUFhaEMsSUFBSSxDQUFDMEQsWUFBWSxNQUFNVTtZQUN0QztRQUNGO1FBRUYsSUFBSUMsaUJBQWlCdkUsTUFBTXVFLGNBQWMsSUFBSSxDQUFDO1FBQzlDakYsT0FBT0MsSUFBSSxDQUFDZ0YsZ0JBQ1QvRSxJQUFJLEdBQ0plLE9BQU8sQ0FBQyxTQUFVcUQsU0FBUztZQUMxQixJQUFJUyxjQUFjRSxjQUFjLENBQUNYLFVBQVUsSUFBSSxFQUFFO1lBQ2pEUyxZQUFZN0UsSUFBSSxHQUFHZSxPQUFPLENBQUMsU0FBVStELFVBQVU7Z0JBQzdDcEMsYUFBYWhDLElBQUksQ0FBQzBELFlBQVksT0FBT1U7WUFDdkM7UUFDRjtRQUVGLElBQUlFLCtCQUErQnhFLE1BQU13RSw0QkFBNEIsSUFBSSxDQUFDO1FBQzFFbEYsT0FBT0MsSUFBSSxDQUFDaUYsOEJBQ1RoRixJQUFJLEdBQ0plLE9BQU8sQ0FBQyxTQUFVcUQsU0FBUztZQUMxQixJQUFJUyxjQUFjRyw0QkFBNEIsQ0FBQ1osVUFBVSxJQUFJLEVBQUU7WUFDL0QsSUFBSUEsY0FBY1AsU0FBUyxDQUFDZ0IsZUFBZUEsWUFBWXBELE1BQU0sS0FBSyxHQUFHO2dCQUNuRTtZQUNGO1lBQ0EsSUFBSXdELFlBQVksRUFBRTtZQUVsQkosWUFBWTdFLElBQUksR0FBR2UsT0FBTyxDQUFDLFNBQVUrRCxVQUFVO2dCQUM3Q0csVUFBVXZFLElBQUksQ0FBQzBELFlBQVksTUFBTVU7WUFDbkM7WUFFQXBDLGFBQWFoQyxJQUFJLENBQUN1RTtRQUNwQjtRQUVGLElBQUlDLGdDQUNGMUUsTUFBTTBFLDZCQUE2QixJQUFJLENBQUM7UUFDMUNwRixPQUFPQyxJQUFJLENBQUNtRiwrQkFDVGxGLElBQUksR0FDSmUsT0FBTyxDQUFDLFNBQVVxRCxTQUFTO1lBQzFCLElBQUlTLGNBQWNLLDZCQUE2QixDQUFDZCxVQUFVLElBQUksRUFBRTtZQUNoRSxJQUFJVSxhQUFhRCxXQUFXLENBQUMsRUFBRTtZQUUvQixJQUFJQyxlQUFlN0IsV0FBVztnQkFDNUI7WUFDRjtZQUVBLElBQUk5QixvQkFBb0JYLE1BQU1ZLDBCQUEwQixDQUFDZ0Q7WUFDekQsSUFBSTdDLFlBQVlmLE1BQU1nQiw4QkFBOEIsQ0FBQ0w7WUFDckQsSUFBSWdFLFdBQVczRSxNQUFNNEUsd0JBQXdCLENBQUNqRTtZQUM5QyxJQUFJa0U7WUFDSixJQUFJQztZQUVKLHlGQUF5RjtZQUN6RixJQUFJekIsVUFBVU8sV0FBVztnQkFDdkIseUZBQXlGO2dCQUN6RixpQkFBaUI7Z0JBQ2pCLElBQ0VVLFdBQVduQixPQUFPLENBQUNwQyxlQUFlLENBQUMsS0FDbEMsQ0FBQzRELFlBQVlyQiwwQkFBMEIsUUFDdkNxQixZQUNDQSxTQUFTekQsS0FBSyxDQUFDSCxXQUFXRSxNQUFNLEtBQzlCcUQsV0FBV3BELEtBQUssQ0FBQ0gsV0FBV0UsTUFBTSxFQUN0QztvQkFDQTtnQkFDRjtnQkFFQSxJQUFJLENBQUMwRCxVQUFVO29CQUNiRyxrQkFBa0JSLFdBQVdwRCxLQUFLLENBQUNILFdBQVdFLE1BQU0sR0FBRztvQkFDdkRxRCxhQUFhQSxXQUFXbEQsS0FBSyxDQUFDLEdBQUdrRCxXQUFXUyxXQUFXLENBQUNoRTtnQkFDMUQsT0FBTztvQkFDTCtELGtCQUFrQkgsU0FBU3pELEtBQUssQ0FBQ0gsV0FBV0UsTUFBTSxHQUFHO29CQUNyRHFELGFBQWFLO2dCQUNmO2dCQUVBRSxvQkFBb0JsRSxrQkFBa0JnQixVQUFVLENBQUNtRCxnQkFBZ0I7WUFDbkUsT0FBTztnQkFDTEEsa0JBQWtCUixXQUFXcEQsS0FBSyxDQUFDSCxXQUFXRSxNQUFNLEdBQUc7Z0JBRXZENEQsb0JBQW9CbEUsa0JBQWtCZ0IsVUFBVSxDQUFDbUQsZ0JBQWdCO1lBQ25FO1lBRUEsSUFBSUQsbUJBQW1CO2dCQUNyQjNDLGFBQWFoQyxJQUFJLENBQUM7b0JBQUMyRSxvQkFBb0IsTUFBTVA7aUJBQVc7WUFDMUQ7UUFDRjtRQUVGLE9BQU9wQztJQUNUO0lBRUFVLHNDQUFzQyxTQUFVNUMsS0FBSztRQUNuRCxJQUFJZ0YsTUFBTSxFQUFFO1FBRVosT0FBT2hGLE1BQU1pRixrQkFBa0IsQ0FBQ3hGLE1BQU0sQ0FDcEMsNkRBQTZEO1FBQzdELFNBQVN5RixzQ0FDUEMsYUFBYSxFQUNieEUsaUJBQWlCO1lBRWpCLElBQUl5RSx5QkFBeUJwRixNQUFNYyx5QkFBeUIsQ0FDMURILGtCQUFrQjBFLElBQUksQ0FDdkIsQ0FBQyxFQUFFO1lBRUosdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQ0Qsd0JBQXdCO2dCQUMzQkQsY0FBY2pGLElBQUksQ0FBQ1Msa0JBQWtCZ0IsVUFBVSxDQUFDLEVBQUU7Z0JBQ2xELE9BQU93RDtZQUNUO1lBRUEsSUFBSXBFLFlBQVlmLE1BQU1nQiw4QkFBOEIsQ0FBQ0w7WUFDckQsSUFBSWEsUUFBUTRELHVCQUF1QmxFLEtBQUssQ0FBQ0gsV0FBV0UsTUFBTTtZQUMxRCxJQUFJcUUsZ0JBQWdCM0Usa0JBQWtCZ0IsVUFBVSxDQUFDUCxLQUFLLENBQUMsR0FBR0ksUUFBUTtZQUVsRSxPQUFPMkQsY0FBYzFELE1BQU0sQ0FBQzZEO1FBQzlCLEdBQ0FOO0lBRUo7SUFFQXJCLDJDQUEyQyxTQUN6QzNELEtBQUssRUFDTFcsaUJBQWlCLEVBQ2pCNEUsU0FBUztRQUVULElBQUl4RSxZQUFZZixNQUFNZ0IsOEJBQThCLENBQUNMO1FBQ3JELElBQUk0RSxjQUFjLE1BQU07WUFDdEIsSUFBSVosV0FBVzNFLE1BQU00RSx3QkFBd0IsQ0FBQ2pFO1lBQzlDLElBQUk2RSxpQkFBaUI7WUFFckIsSUFBSWIsVUFBVTtnQkFDWmEsaUJBQWlCYixTQUFTekQsS0FBSyxDQUFDSCxXQUFXRSxNQUFNO1lBQ25EO1lBQ0EsT0FBTztnQkFBQ04sa0JBQWtCZ0IsVUFBVSxDQUFDNkQsZUFBZTthQUFDO1FBQ3ZEO1FBRUEsSUFBSUoseUJBQ0ZwRixNQUFNYyx5QkFBeUIsQ0FBQ0gsa0JBQWtCMEUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJO1FBQ2hFLCtDQUErQztRQUMvQyxvRkFBb0Y7UUFFcEYsSUFBSUksY0FBY0wsdUJBQXVCbEUsS0FBSyxDQUFDSCxXQUFXRSxNQUFNLEdBQUc7UUFDbkUsT0FBT04sa0JBQWtCZ0IsVUFBVSxDQUFDUCxLQUFLLENBQUMsR0FBR3FFLGNBQWM7SUFDN0Q7SUFFQUMsd0JBQXdCLFNBQVU5QixTQUFTLEVBQUUrQixLQUFLLEVBQUVDLFlBQVksRUFBRTVGLEtBQUs7UUFDckUsSUFBSTZGLCtCQUErQjdGLE1BQU04RixrQkFBa0IsQ0FBQ2xDLGFBQ3hENUQsTUFBTStGLGdCQUFnQixDQUFDbkMsYUFDdkI1RDtRQUNKLElBQUlnRyxpQ0FBaUM7WUFDbkNDLFlBQVlOO1lBQ1ovQixXQUFXQTtRQUNiO1FBQ0EsSUFBSSxPQUFPZ0MsaUJBQWlCLFVBQVU7WUFDcENJLCtCQUErQkosWUFBWSxHQUFHQTtRQUNoRDtRQUNBLE9BQU94RyxXQUNMRixNQUNFLENBQUMsR0FDRFUsZUFBZVMsb0JBQW9CLENBQUN3RiwrQkFDcENHO0lBR047QUFDRjtBQUVBRSxPQUFPQyxPQUFPLEdBQUd2RyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3Mvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9yZXF1ZXN0QnVpbGRlci5qcz83MWZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIG1lcmdlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvbWVyZ2UnKTtcblxuZnVuY3Rpb24gc29ydE9iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICAuc29ydCgpXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyKSB7XG4gICAgICBhY2NbY3Vycl0gPSBvYmpbY3Vycl07XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn1cblxudmFyIHJlcXVlc3RCdWlsZGVyID0ge1xuICAvKipcbiAgICogR2V0IGFsbCB0aGUgcXVlcmllcyB0byBzZW5kIHRvIHRoZSBjbGllbnQsIHRob3NlIHF1ZXJpZXMgY2FuIHVzZWQgZGlyZWN0bHlcbiAgICogd2l0aCB0aGUgQWxnb2xpYSBjbGllbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaW5kZXggVGhlIG5hbWUgb2YgdGhlIGluZGV4XG4gICAqIEBwYXJhbSAge1NlYXJjaFBhcmFtZXRlcnN9IHN0YXRlIFRoZSBzdGF0ZSBmcm9tIHdoaWNoIHRvIGdldCB0aGUgcXVlcmllc1xuICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gVGhlIHF1ZXJpZXNcbiAgICovXG4gIF9nZXRRdWVyaWVzOiBmdW5jdGlvbiBnZXRRdWVyaWVzKGluZGV4LCBzdGF0ZSkge1xuICAgIHZhciBxdWVyaWVzID0gW107XG5cbiAgICAvLyBPbmUgcXVlcnkgZm9yIHRoZSBoaXRzXG4gICAgcXVlcmllcy5wdXNoKHtcbiAgICAgIGluZGV4TmFtZTogaW5kZXgsXG4gICAgICBwYXJhbXM6IHJlcXVlc3RCdWlsZGVyLl9nZXRIaXRzU2VhcmNoUGFyYW1zKHN0YXRlKSxcbiAgICB9KTtcblxuICAgIC8vIE9uZSBmb3IgZWFjaCBkaXNqdW5jdGl2ZSBmYWNldHNcbiAgICBzdGF0ZS5nZXRSZWZpbmVkRGlzanVuY3RpdmVGYWNldHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWZpbmVkRmFjZXQpIHtcbiAgICAgIHF1ZXJpZXMucHVzaCh7XG4gICAgICAgIGluZGV4TmFtZTogaW5kZXgsXG4gICAgICAgIHBhcmFtczogcmVxdWVzdEJ1aWxkZXIuX2dldERpc2p1bmN0aXZlRmFjZXRTZWFyY2hQYXJhbXMoXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcmVmaW5lZEZhY2V0XG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIE1vcmUgdG8gZ2V0IHRoZSBwYXJlbnQgbGV2ZWxzIG9mIHRoZSBoaWVyYXJjaGljYWwgZmFjZXRzIHdoZW4gcmVmaW5lZFxuICAgIHN0YXRlLmdldFJlZmluZWRIaWVyYXJjaGljYWxGYWNldHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWZpbmVkRmFjZXQpIHtcbiAgICAgIHZhciBoaWVyYXJjaGljYWxGYWNldCA9IHN0YXRlLmdldEhpZXJhcmNoaWNhbEZhY2V0QnlOYW1lKHJlZmluZWRGYWNldCk7XG4gICAgICB2YXIgY3VycmVudFJlZmluZW1lbnQgPSBzdGF0ZS5nZXRIaWVyYXJjaGljYWxSZWZpbmVtZW50KHJlZmluZWRGYWNldCk7XG4gICAgICB2YXIgc2VwYXJhdG9yID0gc3RhdGUuX2dldEhpZXJhcmNoaWNhbEZhY2V0U2VwYXJhdG9yKGhpZXJhcmNoaWNhbEZhY2V0KTtcblxuICAgICAgLy8gSWYgd2UgYXJlIGRlZXBlciB0aGFuIGxldmVsIDAgKHN0YXJ0aW5nIGZyb20gYGJlZXIgPiBJUEFgKVxuICAgICAgLy8gd2Ugd2FudCB0byBnZXQgYWxsIHBhcmVudCB2YWx1ZXNcbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFJlZmluZW1lbnQubGVuZ3RoID4gMCAmJlxuICAgICAgICBjdXJyZW50UmVmaW5lbWVudFswXS5zcGxpdChzZXBhcmF0b3IpLmxlbmd0aCA+IDFcbiAgICAgICkge1xuICAgICAgICAvLyBXZSBnZW5lcmF0ZSBhIG1hcCBvZiB0aGUgZmlsdGVycyB3ZSB3aWxsIHVzZSBmb3Igb3VyIGZhY2V0IHZhbHVlcyBxdWVyaWVzXG4gICAgICAgIHZhciBmaWx0ZXJzTWFwID0gY3VycmVudFJlZmluZW1lbnRbMF1cbiAgICAgICAgICAuc3BsaXQoc2VwYXJhdG9yKVxuICAgICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcnNNYXAobWFwLCBzZWdtZW50LCBsZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcC5jb25jYXQoe1xuICAgICAgICAgICAgICBhdHRyaWJ1dGU6IGhpZXJhcmNoaWNhbEZhY2V0LmF0dHJpYnV0ZXNbbGV2ZWxdLFxuICAgICAgICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAgICAgICBsZXZlbCA9PT0gMFxuICAgICAgICAgICAgICAgICAgPyBzZWdtZW50XG4gICAgICAgICAgICAgICAgICA6IFttYXBbbWFwLmxlbmd0aCAtIDFdLnZhbHVlLCBzZWdtZW50XS5qb2luKHNlcGFyYXRvciksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgZmlsdGVyc01hcC5mb3JFYWNoKGZ1bmN0aW9uIChmaWx0ZXIsIGxldmVsKSB7XG4gICAgICAgICAgdmFyIHBhcmFtcyA9IHJlcXVlc3RCdWlsZGVyLl9nZXREaXNqdW5jdGl2ZUZhY2V0U2VhcmNoUGFyYW1zKFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICBmaWx0ZXIuYXR0cmlidXRlLFxuICAgICAgICAgICAgbGV2ZWwgPT09IDBcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gS2VlcCBmYWNldCBmaWx0ZXJzIHVucmVsYXRlZCB0byBjdXJyZW50IGhpZXJhcmNoaWNhbCBhdHRyaWJ1dGVzXG4gICAgICAgICAgZnVuY3Rpb24gaGFzSGllcmFyY2hpY2FsRmFjZXRGaWx0ZXIodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBoaWVyYXJjaGljYWxGYWNldC5hdHRyaWJ1dGVzLnNvbWUoZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlID09PSB2YWx1ZS5zcGxpdCgnOicpWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGZpbHRlcmVkRmFjZXRGaWx0ZXJzID0gKHBhcmFtcy5mYWNldEZpbHRlcnMgfHwgW10pLnJlZHVjZShcbiAgICAgICAgICAgIGZ1bmN0aW9uIChhY2MsIGZhY2V0RmlsdGVyKSB7XG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZhY2V0RmlsdGVyKSkge1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IGZhY2V0RmlsdGVyLmZpbHRlcihmdW5jdGlvbiAoZmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAhaGFzSGllcmFyY2hpY2FsRmFjZXRGaWx0ZXIoZmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGFjYy5wdXNoKGZpbHRlcmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGZhY2V0RmlsdGVyID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICFoYXNIaWVyYXJjaGljYWxGYWNldEZpbHRlcihmYWNldEZpbHRlcilcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYWNjLnB1c2goZmFjZXRGaWx0ZXIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICB2YXIgcGFyZW50ID0gZmlsdGVyc01hcFtsZXZlbCAtIDFdO1xuICAgICAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgICAgIHBhcmFtcy5mYWNldEZpbHRlcnMgPSBmaWx0ZXJlZEZhY2V0RmlsdGVycy5jb25jYXQoXG4gICAgICAgICAgICAgIHBhcmVudC5hdHRyaWJ1dGUgKyAnOicgKyBwYXJlbnQudmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmFtcy5mYWNldEZpbHRlcnMgPVxuICAgICAgICAgICAgICBmaWx0ZXJlZEZhY2V0RmlsdGVycy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBmaWx0ZXJlZEZhY2V0RmlsdGVyc1xuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHF1ZXJpZXMucHVzaCh7IGluZGV4TmFtZTogaW5kZXgsIHBhcmFtczogcGFyYW1zIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBxdWVyaWVzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZCBzZWFyY2ggcGFyYW1ldGVycyB1c2VkIHRvIGZldGNoIGhpdHNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7U2VhcmNoUGFyYW1ldGVyc30gc3RhdGUgVGhlIHN0YXRlIGZyb20gd2hpY2ggdG8gZ2V0IHRoZSBxdWVyaWVzXG4gICAqIEByZXR1cm4ge29iamVjdC48c3RyaW5nLCBhbnk+fSBUaGUgc2VhcmNoIHBhcmFtZXRlcnMgZm9yIGhpdHNcbiAgICovXG4gIF9nZXRIaXRzU2VhcmNoUGFyYW1zOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZmFjZXRzID0gc3RhdGUuZmFjZXRzXG4gICAgICAuY29uY2F0KHN0YXRlLmRpc2p1bmN0aXZlRmFjZXRzKVxuICAgICAgLmNvbmNhdChyZXF1ZXN0QnVpbGRlci5fZ2V0SGl0c0hpZXJhcmNoaWNhbEZhY2V0c0F0dHJpYnV0ZXMoc3RhdGUpKVxuICAgICAgLnNvcnQoKTtcblxuICAgIHZhciBmYWNldEZpbHRlcnMgPSByZXF1ZXN0QnVpbGRlci5fZ2V0RmFjZXRGaWx0ZXJzKHN0YXRlKTtcbiAgICB2YXIgbnVtZXJpY0ZpbHRlcnMgPSByZXF1ZXN0QnVpbGRlci5fZ2V0TnVtZXJpY0ZpbHRlcnMoc3RhdGUpO1xuICAgIHZhciB0YWdGaWx0ZXJzID0gcmVxdWVzdEJ1aWxkZXIuX2dldFRhZ0ZpbHRlcnMoc3RhdGUpO1xuICAgIHZhciBhZGRpdGlvbmFsUGFyYW1zID0ge1xuICAgICAgZmFjZXRzOiBmYWNldHMuaW5kZXhPZignKicpID4gLTEgPyBbJyonXSA6IGZhY2V0cyxcbiAgICAgIHRhZ0ZpbHRlcnM6IHRhZ0ZpbHRlcnMsXG4gICAgfTtcblxuICAgIGlmIChmYWNldEZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgYWRkaXRpb25hbFBhcmFtcy5mYWNldEZpbHRlcnMgPSBmYWNldEZpbHRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG51bWVyaWNGaWx0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGFkZGl0aW9uYWxQYXJhbXMubnVtZXJpY0ZpbHRlcnMgPSBudW1lcmljRmlsdGVycztcbiAgICB9XG5cbiAgICByZXR1cm4gc29ydE9iamVjdChtZXJnZSh7fSwgc3RhdGUuZ2V0UXVlcnlQYXJhbXMoKSwgYWRkaXRpb25hbFBhcmFtcykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZCBzZWFyY2ggcGFyYW1ldGVycyB1c2VkIHRvIGZldGNoIGEgZGlzanVuY3RpdmUgZmFjZXRcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7U2VhcmNoUGFyYW1ldGVyc30gc3RhdGUgVGhlIHN0YXRlIGZyb20gd2hpY2ggdG8gZ2V0IHRoZSBxdWVyaWVzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gZmFjZXQgdGhlIGFzc29jaWF0ZWQgZmFjZXQgbmFtZVxuICAgKiBAcGFyYW0gIHtib29sZWFufSBoaWVyYXJjaGljYWxSb290TGV2ZWwgPz8gRklYTUVcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgc2VhcmNoIHBhcmFtZXRlcnMgZm9yIGEgZGlzanVuY3RpdmUgZmFjZXRcbiAgICovXG4gIF9nZXREaXNqdW5jdGl2ZUZhY2V0U2VhcmNoUGFyYW1zOiBmdW5jdGlvbiAoXG4gICAgc3RhdGUsXG4gICAgZmFjZXQsXG4gICAgaGllcmFyY2hpY2FsUm9vdExldmVsXG4gICkge1xuICAgIHZhciBmYWNldEZpbHRlcnMgPSByZXF1ZXN0QnVpbGRlci5fZ2V0RmFjZXRGaWx0ZXJzKFxuICAgICAgc3RhdGUsXG4gICAgICBmYWNldCxcbiAgICAgIGhpZXJhcmNoaWNhbFJvb3RMZXZlbFxuICAgICk7XG4gICAgdmFyIG51bWVyaWNGaWx0ZXJzID0gcmVxdWVzdEJ1aWxkZXIuX2dldE51bWVyaWNGaWx0ZXJzKHN0YXRlLCBmYWNldCk7XG4gICAgdmFyIHRhZ0ZpbHRlcnMgPSByZXF1ZXN0QnVpbGRlci5fZ2V0VGFnRmlsdGVycyhzdGF0ZSk7XG4gICAgdmFyIGFkZGl0aW9uYWxQYXJhbXMgPSB7XG4gICAgICBoaXRzUGVyUGFnZTogMCxcbiAgICAgIHBhZ2U6IDAsXG4gICAgICBhbmFseXRpY3M6IGZhbHNlLFxuICAgICAgY2xpY2tBbmFseXRpY3M6IGZhbHNlLFxuICAgIH07XG5cbiAgICBpZiAodGFnRmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBhZGRpdGlvbmFsUGFyYW1zLnRhZ0ZpbHRlcnMgPSB0YWdGaWx0ZXJzO1xuICAgIH1cblxuICAgIHZhciBoaWVyYXJjaGljYWxGYWNldCA9IHN0YXRlLmdldEhpZXJhcmNoaWNhbEZhY2V0QnlOYW1lKGZhY2V0KTtcblxuICAgIGlmIChoaWVyYXJjaGljYWxGYWNldCkge1xuICAgICAgYWRkaXRpb25hbFBhcmFtcy5mYWNldHMgPVxuICAgICAgICByZXF1ZXN0QnVpbGRlci5fZ2V0RGlzanVuY3RpdmVIaWVyYXJjaGljYWxGYWNldEF0dHJpYnV0ZShcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBoaWVyYXJjaGljYWxGYWNldCxcbiAgICAgICAgICBoaWVyYXJjaGljYWxSb290TGV2ZWxcbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkaXRpb25hbFBhcmFtcy5mYWNldHMgPSBmYWNldDtcbiAgICB9XG5cbiAgICBpZiAobnVtZXJpY0ZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgYWRkaXRpb25hbFBhcmFtcy5udW1lcmljRmlsdGVycyA9IG51bWVyaWNGaWx0ZXJzO1xuICAgIH1cblxuICAgIGlmIChmYWNldEZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgYWRkaXRpb25hbFBhcmFtcy5mYWNldEZpbHRlcnMgPSBmYWNldEZpbHRlcnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRPYmplY3QobWVyZ2Uoe30sIHN0YXRlLmdldFF1ZXJ5UGFyYW1zKCksIGFkZGl0aW9uYWxQYXJhbXMpKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBudW1lcmljIGZpbHRlcnMgaW4gYW4gYWxnb2xpYSByZXF1ZXN0IGZhc2hpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTZWFyY2hQYXJhbWV0ZXJzfSBzdGF0ZSB0aGUgc3RhdGUgZnJvbSB3aGljaCB0byBnZXQgdGhlIGZpbHRlcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmYWNldE5hbWVdIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgZm9yIHdoaWNoIHRoZSBmaWx0ZXJzIHNob3VsZCBiZSBleGNsdWRlZFxuICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gdGhlIG51bWVyaWMgZmlsdGVycyBpbiB0aGUgYWxnb2xpYSBmb3JtYXRcbiAgICovXG4gIF9nZXROdW1lcmljRmlsdGVyczogZnVuY3Rpb24gKHN0YXRlLCBmYWNldE5hbWUpIHtcbiAgICBpZiAoc3RhdGUubnVtZXJpY0ZpbHRlcnMpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5udW1lcmljRmlsdGVycztcbiAgICB9XG5cbiAgICB2YXIgbnVtZXJpY0ZpbHRlcnMgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKHN0YXRlLm51bWVyaWNSZWZpbmVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICB2YXIgb3BlcmF0b3JzID0gc3RhdGUubnVtZXJpY1JlZmluZW1lbnRzW2F0dHJpYnV0ZV0gfHwge307XG4gICAgICBPYmplY3Qua2V5cyhvcGVyYXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBvcGVyYXRvcnNbb3BlcmF0b3JdIHx8IFtdO1xuICAgICAgICBpZiAoZmFjZXROYW1lICE9PSBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICB2YXIgdnMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlICsgb3BlcmF0b3IgKyB2O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgbnVtZXJpY0ZpbHRlcnMucHVzaCh2cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBudW1lcmljRmlsdGVycy5wdXNoKGF0dHJpYnV0ZSArIG9wZXJhdG9yICsgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBudW1lcmljRmlsdGVycztcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSB0YWdzIGZpbHRlcnMgZGVwZW5kaW5nIG9uIHdoaWNoIGZvcm1hdCBpcyB1c2VkLCBlaXRoZXIgdGFnRmlsdGVycyBvciB0YWdSZWZpbmVtZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1NlYXJjaFBhcmFtZXRlcnN9IHN0YXRlIHRoZSBzdGF0ZSBmcm9tIHdoaWNoIHRvIGdldCB0aGUgZmlsdGVyc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRhZyBmaWx0ZXJzIGluIGEgc2luZ2xlIHN0cmluZ1xuICAgKi9cbiAgX2dldFRhZ0ZpbHRlcnM6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS50YWdGaWx0ZXJzKSB7XG4gICAgICByZXR1cm4gc3RhdGUudGFnRmlsdGVycztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUudGFnUmVmaW5lbWVudHMuam9pbignLCcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZCBmYWNldEZpbHRlcnMgcGFyYW1ldGVyIGJhc2VkIG9uIGN1cnJlbnQgcmVmaW5lbWVudHMuIFRoZSBhcnJheSByZXR1cm5lZFxuICAgKiBjb250YWlucyBzdHJpbmdzIHJlcHJlc2VudGluZyB0aGUgZmFjZXQgZmlsdGVycyBpbiB0aGUgYWxnb2xpYSBmb3JtYXQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge1NlYXJjaFBhcmFtZXRlcnN9IHN0YXRlIFRoZSBzdGF0ZSBmcm9tIHdoaWNoIHRvIGdldCB0aGUgcXVlcmllc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtmYWNldF0gaWYgc2V0LCB0aGUgY3VycmVudCBkaXNqdW5jdGl2ZSBmYWNldFxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbaGllcmFyY2hpY2FsUm9vdExldmVsXSA/PyBGSVhNRVxuICAgKiBAcmV0dXJuIHthcnJheS48c3RyaW5nPn0gVGhlIGZhY2V0IGZpbHRlcnMgaW4gdGhlIGFsZ29saWEgZm9ybWF0XG4gICAqL1xuICBfZ2V0RmFjZXRGaWx0ZXJzOiBmdW5jdGlvbiAoc3RhdGUsIGZhY2V0LCBoaWVyYXJjaGljYWxSb290TGV2ZWwpIHtcbiAgICB2YXIgZmFjZXRGaWx0ZXJzID0gW107XG5cbiAgICB2YXIgZmFjZXRzUmVmaW5lbWVudHMgPSBzdGF0ZS5mYWNldHNSZWZpbmVtZW50cyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhmYWNldHNSZWZpbmVtZW50cylcbiAgICAgIC5zb3J0KClcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChmYWNldE5hbWUpIHtcbiAgICAgICAgdmFyIGZhY2V0VmFsdWVzID0gZmFjZXRzUmVmaW5lbWVudHNbZmFjZXROYW1lXSB8fCBbXTtcbiAgICAgICAgZmFjZXRWYWx1ZXMuc29ydCgpLmZvckVhY2goZnVuY3Rpb24gKGZhY2V0VmFsdWUpIHtcbiAgICAgICAgICBmYWNldEZpbHRlcnMucHVzaChmYWNldE5hbWUgKyAnOicgKyBmYWNldFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIHZhciBmYWNldHNFeGNsdWRlcyA9IHN0YXRlLmZhY2V0c0V4Y2x1ZGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGZhY2V0c0V4Y2x1ZGVzKVxuICAgICAgLnNvcnQoKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGZhY2V0TmFtZSkge1xuICAgICAgICB2YXIgZmFjZXRWYWx1ZXMgPSBmYWNldHNFeGNsdWRlc1tmYWNldE5hbWVdIHx8IFtdO1xuICAgICAgICBmYWNldFZhbHVlcy5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoZmFjZXRWYWx1ZSkge1xuICAgICAgICAgIGZhY2V0RmlsdGVycy5wdXNoKGZhY2V0TmFtZSArICc6LScgKyBmYWNldFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIHZhciBkaXNqdW5jdGl2ZUZhY2V0c1JlZmluZW1lbnRzID0gc3RhdGUuZGlzanVuY3RpdmVGYWNldHNSZWZpbmVtZW50cyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhkaXNqdW5jdGl2ZUZhY2V0c1JlZmluZW1lbnRzKVxuICAgICAgLnNvcnQoKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGZhY2V0TmFtZSkge1xuICAgICAgICB2YXIgZmFjZXRWYWx1ZXMgPSBkaXNqdW5jdGl2ZUZhY2V0c1JlZmluZW1lbnRzW2ZhY2V0TmFtZV0gfHwgW107XG4gICAgICAgIGlmIChmYWNldE5hbWUgPT09IGZhY2V0IHx8ICFmYWNldFZhbHVlcyB8fCBmYWNldFZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9yRmlsdGVycyA9IFtdO1xuXG4gICAgICAgIGZhY2V0VmFsdWVzLnNvcnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChmYWNldFZhbHVlKSB7XG4gICAgICAgICAgb3JGaWx0ZXJzLnB1c2goZmFjZXROYW1lICsgJzonICsgZmFjZXRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZhY2V0RmlsdGVycy5wdXNoKG9yRmlsdGVycyk7XG4gICAgICB9KTtcblxuICAgIHZhciBoaWVyYXJjaGljYWxGYWNldHNSZWZpbmVtZW50cyA9XG4gICAgICBzdGF0ZS5oaWVyYXJjaGljYWxGYWNldHNSZWZpbmVtZW50cyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhoaWVyYXJjaGljYWxGYWNldHNSZWZpbmVtZW50cylcbiAgICAgIC5zb3J0KClcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChmYWNldE5hbWUpIHtcbiAgICAgICAgdmFyIGZhY2V0VmFsdWVzID0gaGllcmFyY2hpY2FsRmFjZXRzUmVmaW5lbWVudHNbZmFjZXROYW1lXSB8fCBbXTtcbiAgICAgICAgdmFyIGZhY2V0VmFsdWUgPSBmYWNldFZhbHVlc1swXTtcblxuICAgICAgICBpZiAoZmFjZXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZXJhcmNoaWNhbEZhY2V0ID0gc3RhdGUuZ2V0SGllcmFyY2hpY2FsRmFjZXRCeU5hbWUoZmFjZXROYW1lKTtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IHN0YXRlLl9nZXRIaWVyYXJjaGljYWxGYWNldFNlcGFyYXRvcihoaWVyYXJjaGljYWxGYWNldCk7XG4gICAgICAgIHZhciByb290UGF0aCA9IHN0YXRlLl9nZXRIaWVyYXJjaGljYWxSb290UGF0aChoaWVyYXJjaGljYWxGYWNldCk7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVUb1JlZmluZTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXNJbmRleDtcblxuICAgICAgICAvLyB3ZSBhc2sgZm9yIHBhcmVudCBmYWNldCB2YWx1ZXMgb25seSB3aGVuIHRoZSBgZmFjZXRgIGlzIHRoZSBjdXJyZW50IGhpZXJhcmNoaWNhbCBmYWNldFxuICAgICAgICBpZiAoZmFjZXQgPT09IGZhY2V0TmFtZSkge1xuICAgICAgICAgIC8vIGlmIHdlIGFyZSBhdCB0aGUgcm9vdCBsZXZlbCBhbHJlYWR5LCBubyBuZWVkIHRvIGFzayBmb3IgZmFjZXQgdmFsdWVzLCB3ZSBnZXQgdGhlbSBmcm9tXG4gICAgICAgICAgLy8gdGhlIGhpdHMgcXVlcnlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBmYWNldFZhbHVlLmluZGV4T2Yoc2VwYXJhdG9yKSA9PT0gLTEgfHxcbiAgICAgICAgICAgICghcm9vdFBhdGggJiYgaGllcmFyY2hpY2FsUm9vdExldmVsID09PSB0cnVlKSB8fFxuICAgICAgICAgICAgKHJvb3RQYXRoICYmXG4gICAgICAgICAgICAgIHJvb3RQYXRoLnNwbGl0KHNlcGFyYXRvcikubGVuZ3RoID09PVxuICAgICAgICAgICAgICAgIGZhY2V0VmFsdWUuc3BsaXQoc2VwYXJhdG9yKS5sZW5ndGgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFyb290UGF0aCkge1xuICAgICAgICAgICAgYXR0cmlidXRlc0luZGV4ID0gZmFjZXRWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLmxlbmd0aCAtIDI7XG4gICAgICAgICAgICBmYWNldFZhbHVlID0gZmFjZXRWYWx1ZS5zbGljZSgwLCBmYWNldFZhbHVlLmxhc3RJbmRleE9mKHNlcGFyYXRvcikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzSW5kZXggPSByb290UGF0aC5zcGxpdChzZXBhcmF0b3IpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBmYWNldFZhbHVlID0gcm9vdFBhdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0cmlidXRlVG9SZWZpbmUgPSBoaWVyYXJjaGljYWxGYWNldC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZXNJbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0cmlidXRlc0luZGV4ID0gZmFjZXRWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICBhdHRyaWJ1dGVUb1JlZmluZSA9IGhpZXJhcmNoaWNhbEZhY2V0LmF0dHJpYnV0ZXNbYXR0cmlidXRlc0luZGV4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVUb1JlZmluZSkge1xuICAgICAgICAgIGZhY2V0RmlsdGVycy5wdXNoKFthdHRyaWJ1dGVUb1JlZmluZSArICc6JyArIGZhY2V0VmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICByZXR1cm4gZmFjZXRGaWx0ZXJzO1xuICB9LFxuXG4gIF9nZXRIaXRzSGllcmFyY2hpY2FsRmFjZXRzQXR0cmlidXRlczogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIG91dCA9IFtdO1xuXG4gICAgcmV0dXJuIHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0cy5yZWR1Y2UoXG4gICAgICAvLyBhc2sgZm9yIGFzIG11Y2ggbGV2ZWxzIGFzIHRoZXJlJ3MgaGllcmFyY2hpY2FsIHJlZmluZW1lbnRzXG4gICAgICBmdW5jdGlvbiBnZXRIaXRzQXR0cmlidXRlc0ZvckhpZXJhcmNoaWNhbEZhY2V0KFxuICAgICAgICBhbGxBdHRyaWJ1dGVzLFxuICAgICAgICBoaWVyYXJjaGljYWxGYWNldFxuICAgICAgKSB7XG4gICAgICAgIHZhciBoaWVyYXJjaGljYWxSZWZpbmVtZW50ID0gc3RhdGUuZ2V0SGllcmFyY2hpY2FsUmVmaW5lbWVudChcbiAgICAgICAgICBoaWVyYXJjaGljYWxGYWNldC5uYW1lXG4gICAgICAgIClbMF07XG5cbiAgICAgICAgLy8gaWYgbm8gcmVmaW5lbWVudCwgYXNrIGZvciByb290IGxldmVsXG4gICAgICAgIGlmICghaGllcmFyY2hpY2FsUmVmaW5lbWVudCkge1xuICAgICAgICAgIGFsbEF0dHJpYnV0ZXMucHVzaChoaWVyYXJjaGljYWxGYWNldC5hdHRyaWJ1dGVzWzBdKTtcbiAgICAgICAgICByZXR1cm4gYWxsQXR0cmlidXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBzdGF0ZS5fZ2V0SGllcmFyY2hpY2FsRmFjZXRTZXBhcmF0b3IoaGllcmFyY2hpY2FsRmFjZXQpO1xuICAgICAgICB2YXIgbGV2ZWwgPSBoaWVyYXJjaGljYWxSZWZpbmVtZW50LnNwbGl0KHNlcGFyYXRvcikubGVuZ3RoO1xuICAgICAgICB2YXIgbmV3QXR0cmlidXRlcyA9IGhpZXJhcmNoaWNhbEZhY2V0LmF0dHJpYnV0ZXMuc2xpY2UoMCwgbGV2ZWwgKyAxKTtcblxuICAgICAgICByZXR1cm4gYWxsQXR0cmlidXRlcy5jb25jYXQobmV3QXR0cmlidXRlcyk7XG4gICAgICB9LFxuICAgICAgb3V0XG4gICAgKTtcbiAgfSxcblxuICBfZ2V0RGlzanVuY3RpdmVIaWVyYXJjaGljYWxGYWNldEF0dHJpYnV0ZTogZnVuY3Rpb24gKFxuICAgIHN0YXRlLFxuICAgIGhpZXJhcmNoaWNhbEZhY2V0LFxuICAgIHJvb3RMZXZlbFxuICApIHtcbiAgICB2YXIgc2VwYXJhdG9yID0gc3RhdGUuX2dldEhpZXJhcmNoaWNhbEZhY2V0U2VwYXJhdG9yKGhpZXJhcmNoaWNhbEZhY2V0KTtcbiAgICBpZiAocm9vdExldmVsID09PSB0cnVlKSB7XG4gICAgICB2YXIgcm9vdFBhdGggPSBzdGF0ZS5fZ2V0SGllcmFyY2hpY2FsUm9vdFBhdGgoaGllcmFyY2hpY2FsRmFjZXQpO1xuICAgICAgdmFyIGF0dHJpYnV0ZUluZGV4ID0gMDtcblxuICAgICAgaWYgKHJvb3RQYXRoKSB7XG4gICAgICAgIGF0dHJpYnV0ZUluZGV4ID0gcm9vdFBhdGguc3BsaXQoc2VwYXJhdG9yKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2hpZXJhcmNoaWNhbEZhY2V0LmF0dHJpYnV0ZXNbYXR0cmlidXRlSW5kZXhdXTtcbiAgICB9XG5cbiAgICB2YXIgaGllcmFyY2hpY2FsUmVmaW5lbWVudCA9XG4gICAgICBzdGF0ZS5nZXRIaWVyYXJjaGljYWxSZWZpbmVtZW50KGhpZXJhcmNoaWNhbEZhY2V0Lm5hbWUpWzBdIHx8ICcnO1xuICAgIC8vIGlmIHJlZmluZW1lbnQgaXMgJ2JlZXJzID4gSVBBID4gRmx5aW5nIGRvZycsXG4gICAgLy8gdGhlbiB3ZSB3YW50IGBmYWNldHM6IFsnYmVlcnMgPiBJUEEnXWAgYXMgZGlzanVuY3RpdmUgZmFjZXQgKHBhcmVudCBsZXZlbCB2YWx1ZXMpXG5cbiAgICB2YXIgcGFyZW50TGV2ZWwgPSBoaWVyYXJjaGljYWxSZWZpbmVtZW50LnNwbGl0KHNlcGFyYXRvcikubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gaGllcmFyY2hpY2FsRmFjZXQuYXR0cmlidXRlcy5zbGljZSgwLCBwYXJlbnRMZXZlbCArIDEpO1xuICB9LFxuXG4gIGdldFNlYXJjaEZvckZhY2V0UXVlcnk6IGZ1bmN0aW9uIChmYWNldE5hbWUsIHF1ZXJ5LCBtYXhGYWNldEhpdHMsIHN0YXRlKSB7XG4gICAgdmFyIHN0YXRlRm9yU2VhcmNoRm9yRmFjZXRWYWx1ZXMgPSBzdGF0ZS5pc0Rpc2p1bmN0aXZlRmFjZXQoZmFjZXROYW1lKVxuICAgICAgPyBzdGF0ZS5jbGVhclJlZmluZW1lbnRzKGZhY2V0TmFtZSlcbiAgICAgIDogc3RhdGU7XG4gICAgdmFyIHNlYXJjaEZvckZhY2V0U2VhcmNoUGFyYW1ldGVycyA9IHtcbiAgICAgIGZhY2V0UXVlcnk6IHF1ZXJ5LFxuICAgICAgZmFjZXROYW1lOiBmYWNldE5hbWUsXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIG1heEZhY2V0SGl0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHNlYXJjaEZvckZhY2V0U2VhcmNoUGFyYW1ldGVycy5tYXhGYWNldEhpdHMgPSBtYXhGYWNldEhpdHM7XG4gICAgfVxuICAgIHJldHVybiBzb3J0T2JqZWN0KFxuICAgICAgbWVyZ2UoXG4gICAgICAgIHt9LFxuICAgICAgICByZXF1ZXN0QnVpbGRlci5fZ2V0SGl0c1NlYXJjaFBhcmFtcyhzdGF0ZUZvclNlYXJjaEZvckZhY2V0VmFsdWVzKSxcbiAgICAgICAgc2VhcmNoRm9yRmFjZXRTZWFyY2hQYXJhbWV0ZXJzXG4gICAgICApXG4gICAgKTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWVzdEJ1aWxkZXI7XG4iXSwibmFtZXMiOlsibWVyZ2UiLCJyZXF1aXJlIiwic29ydE9iamVjdCIsIm9iaiIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInJlcXVlc3RCdWlsZGVyIiwiX2dldFF1ZXJpZXMiLCJnZXRRdWVyaWVzIiwiaW5kZXgiLCJzdGF0ZSIsInF1ZXJpZXMiLCJwdXNoIiwiaW5kZXhOYW1lIiwicGFyYW1zIiwiX2dldEhpdHNTZWFyY2hQYXJhbXMiLCJnZXRSZWZpbmVkRGlzanVuY3RpdmVGYWNldHMiLCJmb3JFYWNoIiwicmVmaW5lZEZhY2V0IiwiX2dldERpc2p1bmN0aXZlRmFjZXRTZWFyY2hQYXJhbXMiLCJnZXRSZWZpbmVkSGllcmFyY2hpY2FsRmFjZXRzIiwiaGllcmFyY2hpY2FsRmFjZXQiLCJnZXRIaWVyYXJjaGljYWxGYWNldEJ5TmFtZSIsImN1cnJlbnRSZWZpbmVtZW50IiwiZ2V0SGllcmFyY2hpY2FsUmVmaW5lbWVudCIsInNlcGFyYXRvciIsIl9nZXRIaWVyYXJjaGljYWxGYWNldFNlcGFyYXRvciIsImxlbmd0aCIsInNwbGl0IiwiZmlsdGVyc01hcCIsInNsaWNlIiwiY3JlYXRlRmlsdGVyc01hcCIsIm1hcCIsInNlZ21lbnQiLCJsZXZlbCIsImNvbmNhdCIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZXMiLCJ2YWx1ZSIsImpvaW4iLCJmaWx0ZXIiLCJoYXNIaWVyYXJjaGljYWxGYWNldEZpbHRlciIsInNvbWUiLCJmaWx0ZXJlZEZhY2V0RmlsdGVycyIsImZhY2V0RmlsdGVycyIsImZhY2V0RmlsdGVyIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyZWQiLCJmaWx0ZXJWYWx1ZSIsInBhcmVudCIsInVuZGVmaW5lZCIsImZhY2V0cyIsImRpc2p1bmN0aXZlRmFjZXRzIiwiX2dldEhpdHNIaWVyYXJjaGljYWxGYWNldHNBdHRyaWJ1dGVzIiwiX2dldEZhY2V0RmlsdGVycyIsIm51bWVyaWNGaWx0ZXJzIiwiX2dldE51bWVyaWNGaWx0ZXJzIiwidGFnRmlsdGVycyIsIl9nZXRUYWdGaWx0ZXJzIiwiYWRkaXRpb25hbFBhcmFtcyIsImluZGV4T2YiLCJnZXRRdWVyeVBhcmFtcyIsImZhY2V0IiwiaGllcmFyY2hpY2FsUm9vdExldmVsIiwiaGl0c1BlclBhZ2UiLCJwYWdlIiwiYW5hbHl0aWNzIiwiY2xpY2tBbmFseXRpY3MiLCJfZ2V0RGlzanVuY3RpdmVIaWVyYXJjaGljYWxGYWNldEF0dHJpYnV0ZSIsImZhY2V0TmFtZSIsIm51bWVyaWNSZWZpbmVtZW50cyIsIm9wZXJhdG9ycyIsIm9wZXJhdG9yIiwidmFsdWVzIiwidnMiLCJ2IiwidGFnUmVmaW5lbWVudHMiLCJmYWNldHNSZWZpbmVtZW50cyIsImZhY2V0VmFsdWVzIiwiZmFjZXRWYWx1ZSIsImZhY2V0c0V4Y2x1ZGVzIiwiZGlzanVuY3RpdmVGYWNldHNSZWZpbmVtZW50cyIsIm9yRmlsdGVycyIsImhpZXJhcmNoaWNhbEZhY2V0c1JlZmluZW1lbnRzIiwicm9vdFBhdGgiLCJfZ2V0SGllcmFyY2hpY2FsUm9vdFBhdGgiLCJhdHRyaWJ1dGVUb1JlZmluZSIsImF0dHJpYnV0ZXNJbmRleCIsImxhc3RJbmRleE9mIiwib3V0IiwiaGllcmFyY2hpY2FsRmFjZXRzIiwiZ2V0SGl0c0F0dHJpYnV0ZXNGb3JIaWVyYXJjaGljYWxGYWNldCIsImFsbEF0dHJpYnV0ZXMiLCJoaWVyYXJjaGljYWxSZWZpbmVtZW50IiwibmFtZSIsIm5ld0F0dHJpYnV0ZXMiLCJyb290TGV2ZWwiLCJhdHRyaWJ1dGVJbmRleCIsInBhcmVudExldmVsIiwiZ2V0U2VhcmNoRm9yRmFjZXRRdWVyeSIsInF1ZXJ5IiwibWF4RmFjZXRIaXRzIiwic3RhdGVGb3JTZWFyY2hGb3JGYWNldFZhbHVlcyIsImlzRGlzanVuY3RpdmVGYWNldCIsImNsZWFyUmVmaW5lbWVudHMiLCJzZWFyY2hGb3JGYWNldFNlYXJjaFBhcmFtZXRlcnMiLCJmYWNldFF1ZXJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/requestBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js ***!
  \****************************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function isValidUserToken(userToken) {\n    if (userToken === null) {\n        return false;\n    }\n    return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3V0aWxzL2lzVmFsaWRVc2VyVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGlCQUFpQkMsU0FBUztJQUNsRCxJQUFJQSxjQUFjLE1BQU07UUFDdEIsT0FBTztJQUNUO0lBQ0EsT0FBTyx3QkFBd0JDLElBQUksQ0FBQ0Q7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvaXNWYWxpZFVzZXJUb2tlbi5qcz83NTY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ZhbGlkVXNlclRva2VuKHVzZXJUb2tlbikge1xuICBpZiAodXNlclRva2VuID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAvXlthLXpBLVowLTlfLV17MSw2NH0kLy50ZXN0KHVzZXJUb2tlbik7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc1ZhbGlkVXNlclRva2VuIiwidXNlclRva2VuIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/version.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/version.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = \"3.14.0\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3ZlcnNpb24uanM/MzY1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzMuMTQuMCc7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/src/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearch.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearch.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstantSearch: () => (/* binding */ InstantSearch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _lib_IndexContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/IndexContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/IndexContext.js\");\n/* harmony import */ var _lib_InstantSearchContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/InstantSearchContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchContext.js\");\n/* harmony import */ var _lib_useInstantSearchApi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/useInstantSearchApi.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js\");\nvar _excluded = [\n    \"children\"\n];\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\nfunction InstantSearch(_ref) {\n    var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded);\n    var search = (0,_lib_useInstantSearchApi_js__WEBPACK_IMPORTED_MODULE_1__.useInstantSearchApi)(props);\n    if (!search.started) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lib_InstantSearchContext_js__WEBPACK_IMPORTED_MODULE_2__.InstantSearchContext.Provider, {\n        value: search\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_lib_IndexContext_js__WEBPACK_IMPORTED_MODULE_3__.IndexContext.Provider, {\n        value: search.mainIndex\n    }, children));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2NvbXBvbmVudHMvSW5zdGFudFNlYXJjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUlBLFlBQVk7SUFBQztDQUFXO0FBQzVCLFNBQVNDLHlCQUF5QkMsTUFBTSxFQUFFQyxRQUFRO0lBQUksSUFBSUQsVUFBVSxNQUFNLE9BQU8sQ0FBQztJQUFHLElBQUlFLFNBQVNDLDhCQUE4QkgsUUFBUUM7SUFBVyxJQUFJRyxLQUFLQztJQUFHLElBQUlDLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSUMsbUJBQW1CRixPQUFPQyxxQkFBcUIsQ0FBQ1A7UUFBUyxJQUFLSyxJQUFJLEdBQUdBLElBQUlHLGlCQUFpQkMsTUFBTSxFQUFFSixJQUFLO1lBQUVELE1BQU1JLGdCQUFnQixDQUFDSCxFQUFFO1lBQUUsSUFBSUosU0FBU1MsT0FBTyxDQUFDTixRQUFRLEdBQUc7WUFBVSxJQUFJLENBQUNFLE9BQU9LLFNBQVMsQ0FBQ0Msb0JBQW9CLENBQUNDLElBQUksQ0FBQ2IsUUFBUUksTUFBTTtZQUFVRixNQUFNLENBQUNFLElBQUksR0FBR0osTUFBTSxDQUFDSSxJQUFJO1FBQUU7SUFBRTtJQUFFLE9BQU9GO0FBQVE7QUFDM2UsU0FBU0MsOEJBQThCSCxNQUFNLEVBQUVDLFFBQVE7SUFBSSxJQUFJRCxVQUFVLE1BQU0sT0FBTyxDQUFDO0lBQUcsSUFBSUUsU0FBUyxDQUFDO0lBQUcsSUFBSVksYUFBYVIsT0FBT1MsSUFBSSxDQUFDZjtJQUFTLElBQUlJLEtBQUtDO0lBQUcsSUFBS0EsSUFBSSxHQUFHQSxJQUFJUyxXQUFXTCxNQUFNLEVBQUVKLElBQUs7UUFBRUQsTUFBTVUsVUFBVSxDQUFDVCxFQUFFO1FBQUUsSUFBSUosU0FBU1MsT0FBTyxDQUFDTixRQUFRLEdBQUc7UUFBVUYsTUFBTSxDQUFDRSxJQUFJLEdBQUdKLE1BQU0sQ0FBQ0ksSUFBSTtJQUFFO0lBQUUsT0FBT0Y7QUFBUTtBQUN4UjtBQUM0QjtBQUNnQjtBQUNGO0FBQzdELFNBQVNrQixjQUFjQyxJQUFJO0lBQ2hDLElBQUlDLFdBQVdELEtBQUtDLFFBQVEsRUFDMUJDLFFBQVF4Qix5QkFBeUJzQixNQUFNdkI7SUFDekMsSUFBSTBCLFNBQVNMLGdGQUFtQkEsQ0FBQ0k7SUFDakMsSUFBSSxDQUFDQyxPQUFPQyxPQUFPLEVBQUU7UUFDbkIsT0FBTztJQUNUO0lBQ0EsT0FBTyxXQUFXLEdBQUVULGdEQUFtQixDQUFDRSw4RUFBb0JBLENBQUNTLFFBQVEsRUFBRTtRQUNyRUMsT0FBT0o7SUFDVCxHQUFHLFdBQVcsR0FBRVIsZ0RBQW1CLENBQUNDLDhEQUFZQSxDQUFDVSxRQUFRLEVBQUU7UUFDekRDLE9BQU9KLE9BQU9LLFNBQVM7SUFDekIsR0FBR1A7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9jb21wb25lbnRzL0luc3RhbnRTZWFyY2guanM/Zjc4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIl07XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbmRleENvbnRleHQgfSBmcm9tIFwiLi4vbGliL0luZGV4Q29udGV4dC5qc1wiO1xuaW1wb3J0IHsgSW5zdGFudFNlYXJjaENvbnRleHQgfSBmcm9tIFwiLi4vbGliL0luc3RhbnRTZWFyY2hDb250ZXh0LmpzXCI7XG5pbXBvcnQgeyB1c2VJbnN0YW50U2VhcmNoQXBpIH0gZnJvbSBcIi4uL2xpYi91c2VJbnN0YW50U2VhcmNoQXBpLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gSW5zdGFudFNlYXJjaChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgdmFyIHNlYXJjaCA9IHVzZUluc3RhbnRTZWFyY2hBcGkocHJvcHMpO1xuICBpZiAoIXNlYXJjaC5zdGFydGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc3RhbnRTZWFyY2hDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHNlYXJjaFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbmRleENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc2VhcmNoLm1haW5JbmRleFxuICB9LCBjaGlsZHJlbikpO1xufSJdLCJuYW1lcyI6WyJfZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJzb3VyY2UiLCJleGNsdWRlZCIsInRhcmdldCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwia2V5IiwiaSIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicHJvdG90eXBlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjYWxsIiwic291cmNlS2V5cyIsImtleXMiLCJSZWFjdCIsIkluZGV4Q29udGV4dCIsIkluc3RhbnRTZWFyY2hDb250ZXh0IiwidXNlSW5zdGFudFNlYXJjaEFwaSIsIkluc3RhbnRTZWFyY2giLCJfcmVmIiwiY2hpbGRyZW4iLCJwcm9wcyIsInNlYXJjaCIsInN0YXJ0ZWQiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIm1haW5JbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearchServerContext.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearchServerContext.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstantSearchServerContext: () => (/* binding */ InstantSearchServerContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar InstantSearchServerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nif (true) {\n    InstantSearchServerContext.displayName = \"InstantSearchServer\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2NvbXBvbmVudHMvSW5zdGFudFNlYXJjaFNlcnZlckNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFDL0IsSUFBSUMsNkJBQTZCLFdBQVcsR0FBRUQsb0RBQWFBLENBQUMsTUFBTTtBQUN6RSxJQUFJRSxJQUF5QixFQUFlO0lBQzFDRCwyQkFBMkJFLFdBQVcsR0FBRztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9jb21wb25lbnRzL0luc3RhbnRTZWFyY2hTZXJ2ZXJDb250ZXh0LmpzPzRhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgSW5zdGFudFNlYXJjaFNlcnZlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBJbnN0YW50U2VhcmNoU2VydmVyQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdJbnN0YW50U2VhcmNoU2VydmVyJztcbn0iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIkluc3RhbnRTZWFyY2hTZXJ2ZXJDb250ZXh0IiwicHJvY2VzcyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearchServerContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/connectors/useHits.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/connectors/useHits.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useHits: () => (/* binding */ useHits)\n/* harmony export */ });\n/* harmony import */ var instantsearch_js_es_connectors_hits_connectHits_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! instantsearch.js/es/connectors/hits/connectHits.js */ \"(ssr)/./node_modules/instantsearch.js/es/connectors/hits/connectHits.js\");\n/* harmony import */ var _hooks_useConnector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hooks/useConnector.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/hooks/useConnector.js\");\n\n\nfunction useHits(props, additionalWidgetProperties) {\n    return (0,_hooks_useConnector_js__WEBPACK_IMPORTED_MODULE_0__.useConnector)(instantsearch_js_es_connectors_hits_connectHits_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], props, additionalWidgetProperties);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2Nvbm5lY3RvcnMvdXNlSGl0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkU7QUFDckI7QUFDakQsU0FBU0UsUUFBUUMsS0FBSyxFQUFFQywwQkFBMEI7SUFDdkQsT0FBT0gsb0VBQVlBLENBQUNELDBGQUFXQSxFQUFFRyxPQUFPQztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9jb25uZWN0b3JzL3VzZUhpdHMuanM/MDYwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29ubmVjdEhpdHMgZnJvbSBcImluc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycy9oaXRzL2Nvbm5lY3RIaXRzLmpzXCI7XG5pbXBvcnQgeyB1c2VDb25uZWN0b3IgfSBmcm9tIFwiLi4vaG9va3MvdXNlQ29ubmVjdG9yLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlSGl0cyhwcm9wcywgYWRkaXRpb25hbFdpZGdldFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIHVzZUNvbm5lY3Rvcihjb25uZWN0SGl0cywgcHJvcHMsIGFkZGl0aW9uYWxXaWRnZXRQcm9wZXJ0aWVzKTtcbn0iXSwibmFtZXMiOlsiY29ubmVjdEhpdHMiLCJ1c2VDb25uZWN0b3IiLCJ1c2VIaXRzIiwicHJvcHMiLCJhZGRpdGlvbmFsV2lkZ2V0UHJvcGVydGllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/connectors/useHits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/connectors/useSearchBox.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/connectors/useSearchBox.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSearchBox: () => (/* binding */ useSearchBox)\n/* harmony export */ });\n/* harmony import */ var instantsearch_js_es_connectors_search_box_connectSearchBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! instantsearch.js/es/connectors/search-box/connectSearchBox.js */ \"(ssr)/./node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js\");\n/* harmony import */ var _hooks_useConnector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hooks/useConnector.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/hooks/useConnector.js\");\n\n\nfunction useSearchBox(props, additionalWidgetProperties) {\n    return (0,_hooks_useConnector_js__WEBPACK_IMPORTED_MODULE_0__.useConnector)(instantsearch_js_es_connectors_search_box_connectSearchBox_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], props, additionalWidgetProperties);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2Nvbm5lY3RvcnMvdXNlU2VhcmNoQm94LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RjtBQUNyQztBQUNqRCxTQUFTRSxhQUFhQyxLQUFLLEVBQUVDLDBCQUEwQjtJQUM1RCxPQUFPSCxvRUFBWUEsQ0FBQ0QscUdBQWdCQSxFQUFFRyxPQUFPQztBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9jb25uZWN0b3JzL3VzZVNlYXJjaEJveC5qcz83YTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0U2VhcmNoQm94IGZyb20gXCJpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMvc2VhcmNoLWJveC9jb25uZWN0U2VhcmNoQm94LmpzXCI7XG5pbXBvcnQgeyB1c2VDb25uZWN0b3IgfSBmcm9tIFwiLi4vaG9va3MvdXNlQ29ubmVjdG9yLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlU2VhcmNoQm94KHByb3BzLCBhZGRpdGlvbmFsV2lkZ2V0UHJvcGVydGllcykge1xuICByZXR1cm4gdXNlQ29ubmVjdG9yKGNvbm5lY3RTZWFyY2hCb3gsIHByb3BzLCBhZGRpdGlvbmFsV2lkZ2V0UHJvcGVydGllcyk7XG59Il0sIm5hbWVzIjpbImNvbm5lY3RTZWFyY2hCb3giLCJ1c2VDb25uZWN0b3IiLCJ1c2VTZWFyY2hCb3giLCJwcm9wcyIsImFkZGl0aW9uYWxXaWRnZXRQcm9wZXJ0aWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/connectors/useSearchBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/hooks/useConnector.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/hooks/useConnector.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useConnector: () => (/* binding */ useConnector)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _lib_dequal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/dequal.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js\");\n/* harmony import */ var _lib_getIndexSearchResults_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/getIndexSearchResults.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/getIndexSearchResults.js\");\n/* harmony import */ var _lib_useIndexContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/useIndexContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIndexContext.js\");\n/* harmony import */ var _lib_useInstantSearchContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/useInstantSearchContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchContext.js\");\n/* harmony import */ var _lib_useInstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/useInstantSearchServerContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchServerContext.js\");\n/* harmony import */ var _lib_useStableValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/useStableValue.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useStableValue.js\");\n/* harmony import */ var _lib_useWidget_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/useWidget.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useWidget.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"instantSearchInstance\",\n    \"widgetParams\"\n], _excluded2 = [\n    \"widgetParams\"\n];\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\nfunction useConnector(connector) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var additionalWidgetProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var serverContext = (0,_lib_useInstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_1__.useInstantSearchServerContext)();\n    var search = (0,_lib_useInstantSearchContext_js__WEBPACK_IMPORTED_MODULE_2__.useInstantSearchContext)();\n    var parentIndex = (0,_lib_useIndexContext_js__WEBPACK_IMPORTED_MODULE_3__.useIndexContext)();\n    var stableProps = (0,_lib_useStableValue_js__WEBPACK_IMPORTED_MODULE_4__.useStableValue)(props);\n    var stableAdditionalWidgetProperties = (0,_lib_useStableValue_js__WEBPACK_IMPORTED_MODULE_4__.useStableValue)(additionalWidgetProperties);\n    var shouldSetStateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    var previousRenderStateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var previousStatusRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(search.status);\n    var widget = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        var createWidget = connector(function(connectorState, isFirstRender) {\n            // We skip the `init` widget render because:\n            // - We rely on `getWidgetRenderState` to compute the initial state before\n            //   the InstantSearch.js lifecycle starts.\n            // - It prevents UI flashes when updating the widget props.\n            if (isFirstRender) {\n                shouldSetStateRef.current = true;\n                return;\n            }\n            // There are situations where InstantSearch.js may render widgets slightly\n            // after they're removed by React, and thus try to update the React state\n            // on unmounted components. React 16 and 17 consider them as memory leaks\n            // and display a warning.\n            // This happens in <DynamicWidgets> when `attributesToRender` contains a\n            // value without an attribute previously mounted. React will unmount the\n            // component controlled by that attribute, but InstantSearch.js will stay\n            // unaware of this change until the render pass finishes, and therefore\n            // notifies of a state change.\n            // This ref lets us track this situation and ignore these state updates.\n            if (shouldSetStateRef.current) {\n                var instantSearchInstance = connectorState.instantSearchInstance, widgetParams = connectorState.widgetParams, renderState = _objectWithoutProperties(connectorState, _excluded);\n                // We only update the state when a widget render state param changes,\n                // except for functions. We ignore function reference changes to avoid\n                // infinite loops. It's safe to omit them because they get updated\n                // every time another render param changes.\n                if (!(0,_lib_dequal_js__WEBPACK_IMPORTED_MODULE_5__.dequal)(renderState, previousRenderStateRef.current, function(a, b) {\n                    return (a === null || a === void 0 ? void 0 : a.constructor) === Function && (b === null || b === void 0 ? void 0 : b.constructor) === Function;\n                }) || instantSearchInstance.status !== previousStatusRef.current) {\n                    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                    setState(renderState);\n                    previousRenderStateRef.current = renderState;\n                    previousStatusRef.current = instantSearchInstance.status;\n                }\n            }\n        }, function() {\n            // We'll ignore the next state update until we know for sure that\n            // InstantSearch.js re-inits the component.\n            shouldSetStateRef.current = false;\n        });\n        return _objectSpread(_objectSpread({}, createWidget(stableProps)), stableAdditionalWidgetProperties);\n    }, [\n        connector,\n        stableProps,\n        stableAdditionalWidgetProperties\n    ]);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        if (widget.getWidgetRenderState) {\n            var _widget$getWidgetSear;\n            // The helper exists because we've started InstantSearch.\n            var helper = parentIndex.getHelper();\n            var uiState = parentIndex.getWidgetUiState({})[parentIndex.getIndexId()];\n            helper.state = ((_widget$getWidgetSear = widget.getWidgetSearchParameters) === null || _widget$getWidgetSear === void 0 ? void 0 : _widget$getWidgetSear.call(widget, helper.state, {\n                uiState: uiState\n            })) || helper.state;\n            var _getIndexSearchResult = (0,_lib_getIndexSearchResults_js__WEBPACK_IMPORTED_MODULE_6__.getIndexSearchResults)(parentIndex), results = _getIndexSearchResult.results, scopedResults = _getIndexSearchResult.scopedResults;\n            // We get the widget render state by providing the same parameters as\n            // InstantSearch provides to the widget's `render` method.\n            // See https://github.com/algolia/instantsearch.js/blob/019cd18d0de6dd320284aa4890541b7fe2198c65/src/widgets/index/index.ts#L604-L617\n            var _widget$getWidgetRend = widget.getWidgetRenderState({\n                helper: helper,\n                parent: parentIndex,\n                instantSearchInstance: search,\n                results: results,\n                scopedResults: scopedResults,\n                state: helper.state,\n                renderState: search.renderState,\n                templatesConfig: search.templatesConfig,\n                createURL: parentIndex.createURL,\n                searchMetadata: {\n                    isSearchStalled: search.status === \"stalled\"\n                },\n                status: search.status,\n                error: search.error\n            }), widgetParams = _widget$getWidgetRend.widgetParams, renderState = _objectWithoutProperties(_widget$getWidgetRend, _excluded2);\n            return renderState;\n        }\n        return {};\n    }), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];\n    (0,_lib_useWidget_js__WEBPACK_IMPORTED_MODULE_7__.useWidget)({\n        widget: widget,\n        parentIndex: parentIndex,\n        props: stableProps,\n        shouldSsr: Boolean(serverContext)\n    });\n    return state;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/hooks/useConnector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/IndexContext.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/IndexContext.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexContext: () => (/* binding */ IndexContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar IndexContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nif (true) {\n    IndexContext.displayName = \"Index\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbmRleENvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFDL0IsSUFBSUMsZUFBZSxXQUFXLEdBQUVELG9EQUFhQSxDQUFDLE1BQU07QUFDM0QsSUFBSUUsSUFBeUIsRUFBZTtJQUMxQ0QsYUFBYUUsV0FBVyxHQUFHO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbmRleENvbnRleHQuanM/OTBkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBJbmRleENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBJbmRleENvbnRleHQuZGlzcGxheU5hbWUgPSAnSW5kZXgnO1xufSJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0IiwiSW5kZXhDb250ZXh0IiwicHJvY2VzcyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/IndexContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchContext.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchContext.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstantSearchContext: () => (/* binding */ InstantSearchContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar InstantSearchContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nif (true) {\n    InstantSearchContext.displayName = \"InstantSearch\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbnN0YW50U2VhcmNoQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUMvQixJQUFJQyx1QkFBdUIsV0FBVyxHQUFFRCxvREFBYUEsQ0FBQyxNQUFNO0FBQ25FLElBQUlFLElBQXlCLEVBQWU7SUFDMUNELHFCQUFxQkUsV0FBVyxHQUFHO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbnN0YW50U2VhcmNoQ29udGV4dC5qcz83ZjBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIEluc3RhbnRTZWFyY2hDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgSW5zdGFudFNlYXJjaENvbnRleHQuZGlzcGxheU5hbWUgPSAnSW5zdGFudFNlYXJjaCc7XG59Il0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJJbnN0YW50U2VhcmNoQ29udGV4dCIsInByb2Nlc3MiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchSSRContext.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchSSRContext.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstantSearchSSRContext: () => (/* binding */ InstantSearchSSRContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar InstantSearchSSRContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nif (true) {\n    InstantSearchSSRContext.displayName = \"InstantSearchSSR\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbnN0YW50U2VhcmNoU1NSQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUMvQixJQUFJQywwQkFBMEIsV0FBVyxHQUFFRCxvREFBYUEsQ0FBQyxNQUFNO0FBQ3RFLElBQUlFLElBQXlCLEVBQWU7SUFDMUNELHdCQUF3QkUsV0FBVyxHQUFHO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9JbnN0YW50U2VhcmNoU1NSQ29udGV4dC5qcz83MmY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIEluc3RhbnRTZWFyY2hTU1JDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgSW5zdGFudFNlYXJjaFNTUkNvbnRleHQuZGlzcGxheU5hbWUgPSAnSW5zdGFudFNlYXJjaFNTUic7XG59Il0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJJbnN0YW50U2VhcmNoU1NSQ29udGV4dCIsInByb2Nlc3MiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchSSRContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/createSearchResults.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/createSearchResults.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSearchResults: () => (/* binding */ createSearchResults)\n/* harmony export */ });\n/* harmony import */ var algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! algoliasearch-helper */ \"(ssr)/./node_modules/react-instantsearch-hooks/node_modules/algoliasearch-helper/index.js\");\n\nfunction createSearchResults(state) {\n    var _state$query, _state$page, _state$hitsPerPage;\n    return new algoliasearch_helper__WEBPACK_IMPORTED_MODULE_0__.SearchResults(state, [\n        {\n            query: (_state$query = state.query) !== null && _state$query !== void 0 ? _state$query : \"\",\n            page: (_state$page = state.page) !== null && _state$page !== void 0 ? _state$page : 0,\n            hitsPerPage: (_state$hitsPerPage = state.hitsPerPage) !== null && _state$hitsPerPage !== void 0 ? _state$hitsPerPage : 20,\n            hits: [],\n            nbHits: 0,\n            nbPages: 0,\n            params: \"\",\n            exhaustiveNbHits: true,\n            exhaustiveFacetsCount: true,\n            processingTimeMS: 0,\n            index: state.index\n        }\n    ], {\n        /** used by connectors to prevent persisting these results */ __isArtificial: true\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9jcmVhdGVTZWFyY2hSZXN1bHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ2hELFNBQVNDLG9CQUFvQkMsS0FBSztJQUN2QyxJQUFJQyxjQUFjQyxhQUFhQztJQUMvQixPQUFPLElBQUlMLCtEQUFpQyxDQUFDRSxPQUFPO1FBQUM7WUFDbkRLLE9BQU8sQ0FBQ0osZUFBZUQsTUFBTUssS0FBSyxNQUFNLFFBQVFKLGlCQUFpQixLQUFLLElBQUlBLGVBQWU7WUFDekZLLE1BQU0sQ0FBQ0osY0FBY0YsTUFBTU0sSUFBSSxNQUFNLFFBQVFKLGdCQUFnQixLQUFLLElBQUlBLGNBQWM7WUFDcEZLLGFBQWEsQ0FBQ0oscUJBQXFCSCxNQUFNTyxXQUFXLE1BQU0sUUFBUUosdUJBQXVCLEtBQUssSUFBSUEscUJBQXFCO1lBQ3ZISyxNQUFNLEVBQUU7WUFDUkMsUUFBUTtZQUNSQyxTQUFTO1lBQ1RDLFFBQVE7WUFDUkMsa0JBQWtCO1lBQ2xCQyx1QkFBdUI7WUFDdkJDLGtCQUFrQjtZQUNsQkMsT0FBT2YsTUFBTWUsS0FBSztRQUNwQjtLQUFFLEVBQUU7UUFDRiwyREFBMkQsR0FDM0RDLGdCQUFnQjtJQUNsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9jcmVhdGVTZWFyY2hSZXN1bHRzLmpzP2I0N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFsZ29saWFzZWFyY2hIZWxwZXIgZnJvbSAnYWxnb2xpYXNlYXJjaC1oZWxwZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFJlc3VsdHMoc3RhdGUpIHtcbiAgdmFyIF9zdGF0ZSRxdWVyeSwgX3N0YXRlJHBhZ2UsIF9zdGF0ZSRoaXRzUGVyUGFnZTtcbiAgcmV0dXJuIG5ldyBhbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFJlc3VsdHMoc3RhdGUsIFt7XG4gICAgcXVlcnk6IChfc3RhdGUkcXVlcnkgPSBzdGF0ZS5xdWVyeSkgIT09IG51bGwgJiYgX3N0YXRlJHF1ZXJ5ICE9PSB2b2lkIDAgPyBfc3RhdGUkcXVlcnkgOiAnJyxcbiAgICBwYWdlOiAoX3N0YXRlJHBhZ2UgPSBzdGF0ZS5wYWdlKSAhPT0gbnVsbCAmJiBfc3RhdGUkcGFnZSAhPT0gdm9pZCAwID8gX3N0YXRlJHBhZ2UgOiAwLFxuICAgIGhpdHNQZXJQYWdlOiAoX3N0YXRlJGhpdHNQZXJQYWdlID0gc3RhdGUuaGl0c1BlclBhZ2UpICE9PSBudWxsICYmIF9zdGF0ZSRoaXRzUGVyUGFnZSAhPT0gdm9pZCAwID8gX3N0YXRlJGhpdHNQZXJQYWdlIDogMjAsXG4gICAgaGl0czogW10sXG4gICAgbmJIaXRzOiAwLFxuICAgIG5iUGFnZXM6IDAsXG4gICAgcGFyYW1zOiAnJyxcbiAgICBleGhhdXN0aXZlTmJIaXRzOiB0cnVlLFxuICAgIGV4aGF1c3RpdmVGYWNldHNDb3VudDogdHJ1ZSxcbiAgICBwcm9jZXNzaW5nVGltZU1TOiAwLFxuICAgIGluZGV4OiBzdGF0ZS5pbmRleFxuICB9XSwge1xuICAgIC8qKiB1c2VkIGJ5IGNvbm5lY3RvcnMgdG8gcHJldmVudCBwZXJzaXN0aW5nIHRoZXNlIHJlc3VsdHMgKi9cbiAgICBfX2lzQXJ0aWZpY2lhbDogdHJ1ZVxuICB9KTtcbn0iXSwibmFtZXMiOlsiYWxnb2xpYXNlYXJjaEhlbHBlciIsImNyZWF0ZVNlYXJjaFJlc3VsdHMiLCJzdGF0ZSIsIl9zdGF0ZSRxdWVyeSIsIl9zdGF0ZSRwYWdlIiwiX3N0YXRlJGhpdHNQZXJQYWdlIiwiU2VhcmNoUmVzdWx0cyIsInF1ZXJ5IiwicGFnZSIsImhpdHNQZXJQYWdlIiwiaGl0cyIsIm5iSGl0cyIsIm5iUGFnZXMiLCJwYXJhbXMiLCJleGhhdXN0aXZlTmJIaXRzIiwiZXhoYXVzdGl2ZUZhY2V0c0NvdW50IiwicHJvY2Vzc2luZ1RpbWVNUyIsImluZGV4IiwiX19pc0FydGlmaWNpYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/createSearchResults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dequal: () => (/* binding */ dequal)\n/* harmony export */ });\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n/* eslint-disable complexity */ /*\n * Code taken from dequal/lite v2.0.0\n * https://github.com/lukeed/dequal/blob/9aa73181ac7e081cd330cac67d313632ac04bb02/src/lite.js\n *\n * It adds a 3rd argument `compare(a, b)` that lets execute custom logic to\n * compare values.\n * We use it to skip comparing function references.\n */ // eslint-disable-next-line @typescript-eslint/unbound-method\nvar has = Object.prototype.hasOwnProperty;\nfunction dequal(foo, bar, compare) {\n    // start of custom implementation\n    if (compare !== null && compare !== void 0 && compare(foo, bar)) {\n        return true;\n    }\n    // end of custom implementation\n    var ctor;\n    var len;\n    if (foo === bar) return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n        if (ctor === Date) return foo.getTime() === bar.getTime();\n        if (ctor === RegExp) return foo.toString() === bar.toString();\n        if (ctor === Array) {\n            if ((len = foo.length) === bar.length) {\n                while(len-- && dequal(foo[len], bar[len], compare));\n            }\n            return len === -1;\n        }\n        if (!ctor || _typeof(foo) === \"object\") {\n            len = 0;\n            // eslint-disable-next-line guard-for-in, no-restricted-syntax\n            for(ctor in foo){\n                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor], compare)) return false;\n            }\n            return Object.keys(bar).length === len;\n        }\n    }\n    // eslint-disable-next-line no-self-compare\n    return foo !== foo && bar !== bar;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9kZXF1YWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFFBQVFDLEdBQUc7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixHQUFHO1FBQUksT0FBTyxPQUFPQTtJQUFLLElBQUksU0FBVUEsR0FBRztRQUFJLE9BQU9BLE9BQU8sY0FBYyxPQUFPQyxVQUFVRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUssR0FBR0QsUUFBUUM7QUFBTTtBQUMvVSw2QkFBNkIsR0FFN0I7Ozs7Ozs7Q0FPQyxHQUVELDZEQUE2RDtBQUM3RCxJQUFJSyxNQUFNQyxPQUFPRixTQUFTLENBQUNHLGNBQWM7QUFDbEMsU0FBU0MsT0FBT0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE9BQU87SUFDdEMsaUNBQWlDO0lBQ2pDLElBQUlBLFlBQVksUUFBUUEsWUFBWSxLQUFLLEtBQUtBLFFBQVFGLEtBQUtDLE1BQU07UUFDL0QsT0FBTztJQUNUO0lBQ0EsK0JBQStCO0lBRS9CLElBQUlFO0lBQ0osSUFBSUM7SUFDSixJQUFJSixRQUFRQyxLQUFLLE9BQU87SUFDeEIsSUFBSUQsT0FBT0MsT0FBTyxDQUFDRSxPQUFPSCxJQUFJTixXQUFXLE1BQU1PLElBQUlQLFdBQVcsRUFBRTtRQUM5RCxJQUFJUyxTQUFTRSxNQUFNLE9BQU9MLElBQUlNLE9BQU8sT0FBT0wsSUFBSUssT0FBTztRQUN2RCxJQUFJSCxTQUFTSSxRQUFRLE9BQU9QLElBQUlRLFFBQVEsT0FBT1AsSUFBSU8sUUFBUTtRQUMzRCxJQUFJTCxTQUFTTSxPQUFPO1lBQ2xCLElBQUksQ0FBQ0wsTUFBTUosSUFBSVUsTUFBTSxNQUFNVCxJQUFJUyxNQUFNLEVBQUU7Z0JBQ3JDLE1BQU9OLFNBQVNMLE9BQU9DLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFSCxHQUFHLENBQUNHLElBQUksRUFBRUY7WUFDN0M7WUFDQSxPQUFPRSxRQUFRLENBQUM7UUFDbEI7UUFDQSxJQUFJLENBQUNELFFBQVFiLFFBQVFVLFNBQVMsVUFBVTtZQUN0Q0ksTUFBTTtZQUNOLDhEQUE4RDtZQUM5RCxJQUFLRCxRQUFRSCxJQUFLO2dCQUNoQixJQUFJSixJQUFJZSxJQUFJLENBQUNYLEtBQUtHLFNBQVMsRUFBRUMsT0FBTyxDQUFDUixJQUFJZSxJQUFJLENBQUNWLEtBQUtFLE9BQU8sT0FBTztnQkFDakUsSUFBSSxDQUFFQSxDQUFBQSxRQUFRRixHQUFFLEtBQU0sQ0FBQ0YsT0FBT0MsR0FBRyxDQUFDRyxLQUFLLEVBQUVGLEdBQUcsQ0FBQ0UsS0FBSyxFQUFFRCxVQUFVLE9BQU87WUFDdkU7WUFDQSxPQUFPTCxPQUFPZSxJQUFJLENBQUNYLEtBQUtTLE1BQU0sS0FBS047UUFDckM7SUFDRjtJQUVBLDJDQUEyQztJQUMzQyxPQUFPSixRQUFRQSxPQUFPQyxRQUFRQTtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvZGVxdWFsLmpzP2FkZDIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuXG4vKlxuICogQ29kZSB0YWtlbiBmcm9tIGRlcXVhbC9saXRlIHYyLjAuMFxuICogaHR0cHM6Ly9naXRodWIuY29tL2x1a2VlZC9kZXF1YWwvYmxvYi85YWE3MzE4MWFjN2UwODFjZDMzMGNhYzY3ZDMxMzYzMmFjMDRiYjAyL3NyYy9saXRlLmpzXG4gKlxuICogSXQgYWRkcyBhIDNyZCBhcmd1bWVudCBgY29tcGFyZShhLCBiKWAgdGhhdCBsZXRzIGV4ZWN1dGUgY3VzdG9tIGxvZ2ljIHRvXG4gKiBjb21wYXJlIHZhbHVlcy5cbiAqIFdlIHVzZSBpdCB0byBza2lwIGNvbXBhcmluZyBmdW5jdGlvbiByZWZlcmVuY2VzLlxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZXhwb3J0IGZ1bmN0aW9uIGRlcXVhbChmb28sIGJhciwgY29tcGFyZSkge1xuICAvLyBzdGFydCBvZiBjdXN0b20gaW1wbGVtZW50YXRpb25cbiAgaWYgKGNvbXBhcmUgIT09IG51bGwgJiYgY29tcGFyZSAhPT0gdm9pZCAwICYmIGNvbXBhcmUoZm9vLCBiYXIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gZW5kIG9mIGN1c3RvbSBpbXBsZW1lbnRhdGlvblxuXG4gIHZhciBjdG9yO1xuICB2YXIgbGVuO1xuICBpZiAoZm9vID09PSBiYXIpIHJldHVybiB0cnVlO1xuICBpZiAoZm9vICYmIGJhciAmJiAoY3RvciA9IGZvby5jb25zdHJ1Y3RvcikgPT09IGJhci5jb25zdHJ1Y3Rvcikge1xuICAgIGlmIChjdG9yID09PSBEYXRlKSByZXR1cm4gZm9vLmdldFRpbWUoKSA9PT0gYmFyLmdldFRpbWUoKTtcbiAgICBpZiAoY3RvciA9PT0gUmVnRXhwKSByZXR1cm4gZm9vLnRvU3RyaW5nKCkgPT09IGJhci50b1N0cmluZygpO1xuICAgIGlmIChjdG9yID09PSBBcnJheSkge1xuICAgICAgaWYgKChsZW4gPSBmb28ubGVuZ3RoKSA9PT0gYmFyLmxlbmd0aCkge1xuICAgICAgICB3aGlsZSAobGVuLS0gJiYgZGVxdWFsKGZvb1tsZW5dLCBiYXJbbGVuXSwgY29tcGFyZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlbiA9PT0gLTE7XG4gICAgfVxuICAgIGlmICghY3RvciB8fCBfdHlwZW9mKGZvbykgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZW4gPSAwO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoY3RvciBpbiBmb28pIHtcbiAgICAgICAgaWYgKGhhcy5jYWxsKGZvbywgY3RvcikgJiYgKytsZW4gJiYgIWhhcy5jYWxsKGJhciwgY3RvcikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCEoY3RvciBpbiBiYXIpIHx8ICFkZXF1YWwoZm9vW2N0b3JdLCBiYXJbY3Rvcl0sIGNvbXBhcmUpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYmFyKS5sZW5ndGggPT09IGxlbjtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiBmb28gIT09IGZvbyAmJiBiYXIgIT09IGJhcjtcbn0iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJoYXMiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImRlcXVhbCIsImZvbyIsImJhciIsImNvbXBhcmUiLCJjdG9yIiwibGVuIiwiRGF0ZSIsImdldFRpbWUiLCJSZWdFeHAiLCJ0b1N0cmluZyIsIkFycmF5IiwibGVuZ3RoIiwiY2FsbCIsImtleXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/getIndexSearchResults.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/getIndexSearchResults.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIndexSearchResults: () => (/* binding */ getIndexSearchResults)\n/* harmony export */ });\n/* harmony import */ var _createSearchResults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createSearchResults.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/createSearchResults.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction getIndexSearchResults(indexWidget) {\n    var helper = indexWidget.getHelper();\n    var results = // On SSR, we get the results injected on the Index.\n    indexWidget.getResults() || // On the browser, we create fallback results based on the helper state.\n    (0,_createSearchResults_js__WEBPACK_IMPORTED_MODULE_0__.createSearchResults)(helper.state);\n    var scopedResults = indexWidget.getScopedResults().map(function(scopedResult) {\n        var fallbackResults = scopedResult.indexId === indexWidget.getIndexId() ? results : (0,_createSearchResults_js__WEBPACK_IMPORTED_MODULE_0__.createSearchResults)(scopedResult.helper.state);\n        return _objectSpread(_objectSpread({}, scopedResult), {}, {\n            // We keep `results` from being `null`.\n            results: scopedResult.results || fallbackResults\n        });\n    });\n    return {\n        results: results,\n        scopedResults: scopedResults\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9nZXRJbmRleFNlYXJjaFJlc3VsdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxRQUFRQyxHQUFHO0lBQUk7SUFBMkIsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsR0FBRztRQUFJLE9BQU8sT0FBT0E7SUFBSyxJQUFJLFNBQVVBLEdBQUc7UUFBSSxPQUFPQSxPQUFPLGNBQWMsT0FBT0MsVUFBVUQsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUFLLEdBQUdELFFBQVFDO0FBQU07QUFDL1UsU0FBU0ssUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRjtJQUFTLElBQUlHLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSUMsVUFBVUYsT0FBT0MscUJBQXFCLENBQUNKO1FBQVNDLGtCQUFtQkksQ0FBQUEsVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFBSSxPQUFPSixPQUFPSyx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtRQUFFLEVBQUMsR0FBSVAsS0FBS1EsSUFBSSxDQUFDQyxLQUFLLENBQUNULE1BQU1HO0lBQVU7SUFBRSxPQUFPSDtBQUFNO0FBQ3BWLFNBQVNVLGNBQWNDLE1BQU07SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQUUsSUFBSUcsU0FBUyxRQUFRRixTQUFTLENBQUNELEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxFQUFFLEdBQUcsQ0FBQztRQUFHQSxJQUFJLElBQUlmLFFBQVFJLE9BQU9jLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtRQUFHLEtBQUtoQixPQUFPa0IseUJBQXlCLEdBQUdsQixPQUFPbUIsZ0JBQWdCLENBQUNULFFBQVFWLE9BQU9rQix5QkFBeUIsQ0FBQ0osV0FBV2xCLFFBQVFJLE9BQU9jLFNBQVNDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUloQixPQUFPb0IsY0FBYyxDQUFDVixRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1FBQU87SUFBSTtJQUFFLE9BQU9OO0FBQVE7QUFDemYsU0FBU08sZ0JBQWdCMUIsR0FBRyxFQUFFeUIsR0FBRyxFQUFFSyxLQUFLO0lBQUlMLE1BQU1NLGVBQWVOO0lBQU0sSUFBSUEsT0FBT3pCLEtBQUs7UUFBRVMsT0FBT29CLGNBQWMsQ0FBQzdCLEtBQUt5QixLQUFLO1lBQUVLLE9BQU9BO1lBQU9mLFlBQVk7WUFBTWlCLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFakMsR0FBRyxDQUFDeUIsSUFBSSxHQUFHSztJQUFPO0lBQUUsT0FBTzlCO0FBQUs7QUFDM08sU0FBUytCLGVBQWVHLEdBQUc7SUFBSSxJQUFJVCxNQUFNVSxhQUFhRCxLQUFLO0lBQVcsT0FBT25DLFFBQVEwQixTQUFTLFdBQVdBLE1BQU1XLE9BQU9YO0FBQU07QUFDNUgsU0FBU1UsYUFBYUUsS0FBSyxFQUFFQyxJQUFJO0lBQUksSUFBSXZDLFFBQVFzQyxXQUFXLFlBQVlBLFVBQVUsTUFBTSxPQUFPQTtJQUFPLElBQUlFLE9BQU9GLEtBQUssQ0FBQ3BDLE9BQU91QyxXQUFXLENBQUM7SUFBRSxJQUFJRCxTQUFTRSxXQUFXO1FBQUUsSUFBSUMsTUFBTUgsS0FBS0ksSUFBSSxDQUFDTixPQUFPQyxRQUFRO1FBQVksSUFBSXZDLFFBQVEyQyxTQUFTLFVBQVUsT0FBT0E7UUFBSyxNQUFNLElBQUlFLFVBQVU7SUFBaUQ7SUFBRSxPQUFPLENBQUNOLFNBQVMsV0FBV0YsU0FBU1MsTUFBSyxFQUFHUjtBQUFRO0FBQzdUO0FBQ3hELFNBQVNVLHNCQUFzQkMsV0FBVztJQUMvQyxJQUFJQyxTQUFTRCxZQUFZRSxTQUFTO0lBQ2xDLElBQUlDLFVBQ0osb0RBQW9EO0lBQ3BESCxZQUFZSSxVQUFVLE1BQ3RCLHdFQUF3RTtJQUN4RU4sNEVBQW1CQSxDQUFDRyxPQUFPSSxLQUFLO0lBQ2hDLElBQUlDLGdCQUFnQk4sWUFBWU8sZ0JBQWdCLEdBQUdDLEdBQUcsQ0FBQyxTQUFVQyxZQUFZO1FBQzNFLElBQUlDLGtCQUFrQkQsYUFBYUUsT0FBTyxLQUFLWCxZQUFZWSxVQUFVLEtBQUtULFVBQVVMLDRFQUFtQkEsQ0FBQ1csYUFBYVIsTUFBTSxDQUFDSSxLQUFLO1FBQ2pJLE9BQU9uQyxjQUFjQSxjQUFjLENBQUMsR0FBR3VDLGVBQWUsQ0FBQyxHQUFHO1lBQ3hELHVDQUF1QztZQUN2Q04sU0FBU00sYUFBYU4sT0FBTyxJQUFJTztRQUNuQztJQUNGO0lBQ0EsT0FBTztRQUNMUCxTQUFTQTtRQUNURyxlQUFlQTtJQUNqQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9nZXRJbmRleFNlYXJjaFJlc3VsdHMuanM/N2JmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbmltcG9ydCB7IGNyZWF0ZVNlYXJjaFJlc3VsdHMgfSBmcm9tIFwiLi9jcmVhdGVTZWFyY2hSZXN1bHRzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXhTZWFyY2hSZXN1bHRzKGluZGV4V2lkZ2V0KSB7XG4gIHZhciBoZWxwZXIgPSBpbmRleFdpZGdldC5nZXRIZWxwZXIoKTtcbiAgdmFyIHJlc3VsdHMgPVxuICAvLyBPbiBTU1IsIHdlIGdldCB0aGUgcmVzdWx0cyBpbmplY3RlZCBvbiB0aGUgSW5kZXguXG4gIGluZGV4V2lkZ2V0LmdldFJlc3VsdHMoKSB8fFxuICAvLyBPbiB0aGUgYnJvd3Nlciwgd2UgY3JlYXRlIGZhbGxiYWNrIHJlc3VsdHMgYmFzZWQgb24gdGhlIGhlbHBlciBzdGF0ZS5cbiAgY3JlYXRlU2VhcmNoUmVzdWx0cyhoZWxwZXIuc3RhdGUpO1xuICB2YXIgc2NvcGVkUmVzdWx0cyA9IGluZGV4V2lkZ2V0LmdldFNjb3BlZFJlc3VsdHMoKS5tYXAoZnVuY3Rpb24gKHNjb3BlZFJlc3VsdCkge1xuICAgIHZhciBmYWxsYmFja1Jlc3VsdHMgPSBzY29wZWRSZXN1bHQuaW5kZXhJZCA9PT0gaW5kZXhXaWRnZXQuZ2V0SW5kZXhJZCgpID8gcmVzdWx0cyA6IGNyZWF0ZVNlYXJjaFJlc3VsdHMoc2NvcGVkUmVzdWx0LmhlbHBlci5zdGF0ZSk7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc2NvcGVkUmVzdWx0KSwge30sIHtcbiAgICAgIC8vIFdlIGtlZXAgYHJlc3VsdHNgIGZyb20gYmVpbmcgYG51bGxgLlxuICAgICAgcmVzdWx0czogc2NvcGVkUmVzdWx0LnJlc3VsdHMgfHwgZmFsbGJhY2tSZXN1bHRzXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHJlc3VsdHM6IHJlc3VsdHMsXG4gICAgc2NvcGVkUmVzdWx0czogc2NvcGVkUmVzdWx0c1xuICB9O1xufSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiY3JlYXRlU2VhcmNoUmVzdWx0cyIsImdldEluZGV4U2VhcmNoUmVzdWx0cyIsImluZGV4V2lkZ2V0IiwiaGVscGVyIiwiZ2V0SGVscGVyIiwicmVzdWx0cyIsImdldFJlc3VsdHMiLCJzdGF0ZSIsInNjb3BlZFJlc3VsdHMiLCJnZXRTY29wZWRSZXN1bHRzIiwibWFwIiwic2NvcGVkUmVzdWx0IiwiZmFsbGJhY2tSZXN1bHRzIiwiaW5kZXhJZCIsImdldEluZGV4SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/getIndexSearchResults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/invariant.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/invariant.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\n/**\n * Throws an error if the condition is not met.\n *\n * The error is exhaustive in development, and becomes generic in production.\n *\n * This is used to make development a better experience to provide guidance as\n * to where the error comes from.\n */ function invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (false) {}\n    if (true) {\n        throw new Error(\"[InstantSearch] \".concat(typeof message === \"function\" ? message() : message));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi9pbnZhcmlhbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQSxVQUFVQyxTQUFTLEVBQUVDLE9BQU87SUFDMUMsSUFBSUQsV0FBVztRQUNiO0lBQ0Y7SUFDQSxJQUFJLEtBQXVDLEVBQUksRUFFOUM7SUFDRCxJQUFJRSxJQUF5QixFQUFlO1FBQzFDLE1BQU0sSUFBSUMsTUFBTSxtQkFBbUJDLE1BQU0sQ0FBQyxPQUFPSCxZQUFZLGFBQWFBLFlBQVlBO0lBQ3hGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvbGliL2ludmFyaWFudC5qcz81ZmVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqXG4gKiBUaGUgZXJyb3IgaXMgZXhoYXVzdGl2ZSBpbiBkZXZlbG9wbWVudCwgYW5kIGJlY29tZXMgZ2VuZXJpYyBpbiBwcm9kdWN0aW9uLlxuICpcbiAqIFRoaXMgaXMgdXNlZCB0byBtYWtlIGRldmVsb3BtZW50IGEgYmV0dGVyIGV4cGVyaWVuY2UgdG8gcHJvdmlkZSBndWlkYW5jZSBhc1xuICogdG8gd2hlcmUgdGhlIGVycm9yIGNvbWVzIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhcmlhbnQgZmFpbGVkJyk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW0luc3RhbnRTZWFyY2hdIFwiLmNvbmNhdCh0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UoKSA6IG1lc3NhZ2UpKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwicHJvY2VzcyIsIkVycm9yIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/invariant.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useForceUpdate.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useForceUpdate.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForceUpdate: () => (/* binding */ useForceUpdate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n/**\n * Forces a React update that triggers a rerender.\n * @link https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n */ function useForceUpdate() {\n    var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(function(x) {\n        return x + 1;\n    }, 0), _useReducer2 = _slicedToArray(_useReducer, 2), forceUpdate = _useReducer2[1];\n    return forceUpdate;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VGb3JjZVVwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLGVBQWVDLEdBQUcsRUFBRUMsQ0FBQztJQUFJLE9BQU9DLGdCQUFnQkYsUUFBUUcsc0JBQXNCSCxLQUFLQyxNQUFNRyw0QkFBNEJKLEtBQUtDLE1BQU1JO0FBQW9CO0FBQzdKLFNBQVNBO0lBQXFCLE1BQU0sSUFBSUMsVUFBVTtBQUE4STtBQUNoTSxTQUFTRiw0QkFBNEJHLENBQUMsRUFBRUMsTUFBTTtJQUFJLElBQUksQ0FBQ0QsR0FBRztJQUFRLElBQUksT0FBT0EsTUFBTSxVQUFVLE9BQU9FLGtCQUFrQkYsR0FBR0M7SUFBUyxJQUFJRSxJQUFJQyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDUCxHQUFHUSxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQUksSUFBSUwsTUFBTSxZQUFZSCxFQUFFUyxXQUFXLEVBQUVOLElBQUlILEVBQUVTLFdBQVcsQ0FBQ0MsSUFBSTtJQUFFLElBQUlQLE1BQU0sU0FBU0EsTUFBTSxPQUFPLE9BQU9RLE1BQU1DLElBQUksQ0FBQ1o7SUFBSSxJQUFJRyxNQUFNLGVBQWUsMkNBQTJDVSxJQUFJLENBQUNWLElBQUksT0FBT0Qsa0JBQWtCRixHQUFHQztBQUFTO0FBQy9aLFNBQVNDLGtCQUFrQlQsR0FBRyxFQUFFcUIsR0FBRztJQUFJLElBQUlBLE9BQU8sUUFBUUEsTUFBTXJCLElBQUlzQixNQUFNLEVBQUVELE1BQU1yQixJQUFJc0IsTUFBTTtJQUFFLElBQUssSUFBSXJCLElBQUksR0FBR3NCLE9BQU8sSUFBSUwsTUFBTUcsTUFBTXBCLElBQUlvQixLQUFLcEIsSUFBS3NCLElBQUksQ0FBQ3RCLEVBQUUsR0FBR0QsR0FBRyxDQUFDQyxFQUFFO0lBQUUsT0FBT3NCO0FBQU07QUFDbEwsU0FBU3BCLHNCQUFzQkgsR0FBRyxFQUFFQyxDQUFDO0lBQUksSUFBSXVCLEtBQUssUUFBUXhCLE1BQU0sT0FBTyxlQUFlLE9BQU95QixVQUFVekIsR0FBRyxDQUFDeUIsT0FBT0MsUUFBUSxDQUFDLElBQUkxQixHQUFHLENBQUMsYUFBYTtJQUFFLElBQUksUUFBUXdCLElBQUk7UUFBRSxJQUFJRyxJQUFJQyxJQUFJQyxJQUFJQyxJQUFJQyxPQUFPLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEdBQUdDLEtBQUssQ0FBQztRQUFHLElBQUk7WUFBRSxJQUFJSixLQUFLLENBQUNMLEtBQUtBLEdBQUdWLElBQUksQ0FBQ2QsSUFBRyxFQUFHa0MsSUFBSSxFQUFFLE1BQU1qQyxHQUFHO2dCQUFFLElBQUlVLE9BQU9hLFFBQVFBLElBQUk7Z0JBQVFRLEtBQUssQ0FBQztZQUFHLE9BQU8sTUFBTyxDQUFFQSxDQUFBQSxLQUFLLENBQUNMLEtBQUtFLEdBQUdmLElBQUksQ0FBQ1UsR0FBRSxFQUFHVyxJQUFJLEtBQU1KLENBQUFBLEtBQUtLLElBQUksQ0FBQ1QsR0FBR1UsS0FBSyxHQUFHTixLQUFLVCxNQUFNLEtBQUtyQixDQUFBQSxHQUFJK0IsS0FBSyxDQUFDO1FBQUksRUFBRSxPQUFPTSxLQUFLO1lBQUVMLEtBQUssQ0FBQyxHQUFHTCxLQUFLVTtRQUFLLFNBQVU7WUFBRSxJQUFJO2dCQUFFLElBQUksQ0FBQ04sTUFBTSxRQUFRUixHQUFHZSxNQUFNLElBQUtULENBQUFBLEtBQUtOLEdBQUdlLE1BQU0sSUFBSTVCLE9BQU9tQixRQUFRQSxFQUFDLEdBQUk7WUFBUSxTQUFVO2dCQUFFLElBQUlHLElBQUksTUFBTUw7WUFBSTtRQUFFO1FBQUUsT0FBT0c7SUFBTTtBQUFFO0FBQzNrQixTQUFTN0IsZ0JBQWdCRixHQUFHO0lBQUksSUFBSWtCLE1BQU1zQixPQUFPLENBQUN4QyxNQUFNLE9BQU9BO0FBQUs7QUFDakM7QUFFbkM7OztDQUdDLEdBQ00sU0FBUzBDO0lBQ2QsSUFBSUMsY0FBY0YsaURBQVVBLENBQUMsU0FBVUcsQ0FBQztRQUNwQyxPQUFPQSxJQUFJO0lBQ2IsR0FBRyxJQUNIQyxlQUFlOUMsZUFBZTRDLGFBQWEsSUFDM0NHLGNBQWNELFlBQVksQ0FBQyxFQUFFO0lBQy9CLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvbGliL3VzZUZvcmNlVXBkYXRlLmpzPzEyNjMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gbnVsbCA9PSBhcnIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChudWxsICE9IF9pKSB7IHZhciBfcywgX2UsIF94LCBfciwgX2FyciA9IFtdLCBfbiA9ICEwLCBfZCA9ICExOyB0cnkgeyBpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHsgaWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47IF9uID0gITE7IH0gZWxzZSBmb3IgKDsgIShfbiA9IChfcyA9IF94LmNhbGwoX2kpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKTsgfSBjYXRjaCAoZXJyKSB7IF9kID0gITAsIF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIG51bGwgIT0gX2kucmV0dXJuICYmIChfciA9IF9pLnJldHVybigpLCBPYmplY3QoX3IpICE9PSBfcikpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuaW1wb3J0IHsgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBGb3JjZXMgYSBSZWFjdCB1cGRhdGUgdGhhdCB0cmlnZ2VycyBhIHJlcmVuZGVyLlxuICogQGxpbmsgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLWZhcS5odG1sI2lzLXRoZXJlLXNvbWV0aGluZy1saWtlLWZvcmNldXBkYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JjZVVwZGF0ZSgpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggKyAxO1xuICAgIH0sIDApLFxuICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSxcbiAgICBmb3JjZVVwZGF0ZSA9IF91c2VSZWR1Y2VyMlsxXTtcbiAgcmV0dXJuIGZvcmNlVXBkYXRlO1xufSJdLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsImFyciIsImkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXkiLCJmcm9tIiwidGVzdCIsImxlbiIsImxlbmd0aCIsImFycjIiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiZXJyIiwicmV0dXJuIiwiaXNBcnJheSIsInVzZVJlZHVjZXIiLCJ1c2VGb3JjZVVwZGF0ZSIsIl91c2VSZWR1Y2VyIiwieCIsIl91c2VSZWR1Y2VyMiIsImZvcmNlVXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useForceUpdate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIndexContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useIndexContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIndexContext: () => (/* binding */ useIndexContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _invariant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./invariant.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/invariant.js\");\n/* harmony import */ var _IndexContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IndexContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/IndexContext.js\");\n\n\n\nfunction useIndexContext() {\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_IndexContext_js__WEBPACK_IMPORTED_MODULE_1__.IndexContext);\n    (0,_invariant_js__WEBPACK_IMPORTED_MODULE_2__.invariant)(context !== null, \"The <Index> component must be used within <InstantSearch>.\");\n    return context;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VJbmRleENvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUNRO0FBQ007QUFDMUMsU0FBU0c7SUFDZCxJQUFJQyxVQUFVSixpREFBVUEsQ0FBQ0UsMERBQVlBO0lBQ3JDRCx3REFBU0EsQ0FBQ0csWUFBWSxNQUFNO0lBQzVCLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvbGliL3VzZUluZGV4Q29udGV4dC5qcz8zZjk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi9pbnZhcmlhbnQuanNcIjtcbmltcG9ydCB7IEluZGV4Q29udGV4dCB9IGZyb20gXCIuL0luZGV4Q29udGV4dC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUluZGV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHQgPSB1c2VDb250ZXh0KEluZGV4Q29udGV4dCk7XG4gIGludmFyaWFudChjb250ZXh0ICE9PSBudWxsLCAnVGhlIDxJbmRleD4gY29tcG9uZW50IG11c3QgYmUgdXNlZCB3aXRoaW4gPEluc3RhbnRTZWFyY2g+LicpO1xuICByZXR1cm4gY29udGV4dDtcbn0iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsImludmFyaWFudCIsIkluZGV4Q29udGV4dCIsInVzZUluZGV4Q29udGV4dCIsImNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIndexContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInstantSearchApi: () => (/* binding */ useInstantSearchApi)\n/* harmony export */ });\n/* harmony import */ var instantsearch_js_es_lib_InstantSearch_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! instantsearch.js/es/lib/InstantSearch.js */ \"(ssr)/./node_modules/instantsearch.js/es/lib/InstantSearch.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var _useInstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useInstantSearchServerContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchServerContext.js\");\n/* harmony import */ var _useInstantSearchSSRContext_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useInstantSearchSSRContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchSSRContext.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/version.js\");\n/* harmony import */ var _useForceUpdate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useForceUpdate.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useForceUpdate.js\");\n/* harmony import */ var _warn_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./warn.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/warn.js\");\n\n\n\n\n\n\n\n\nvar defaultUserAgents = [\n    \"react (\".concat(react__WEBPACK_IMPORTED_MODULE_0__.version, \")\"),\n    \"react-instantsearch (\".concat(_version_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \")\"),\n    \"react-instantsearch-hooks (\".concat(_version_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \")\")\n];\nvar serverUserAgent = \"react-instantsearch-server (\".concat(_version_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \")\");\nvar nextUserAgent = function nextUserAgent(nextVersion) {\n    return nextVersion ? \"next.js (\".concat(nextVersion, \")\") : null;\n};\nfunction useInstantSearchApi(props) {\n    var forceUpdate = (0,_useForceUpdate_js__WEBPACK_IMPORTED_MODULE_3__.useForceUpdate)();\n    var serverContext = (0,_useInstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_4__.useInstantSearchServerContext)();\n    var serverState = (0,_useInstantSearchSSRContext_js__WEBPACK_IMPORTED_MODULE_5__.useInstantSearchSSRContext)();\n    var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;\n    var prevPropsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props);\n    var searchRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // As we need to render on mount with SSR, using the local ref above in `StrictMode` will\n    // create and start two instances of InstantSearch. To avoid this, we instead discard it and use\n    // an upward ref from `InstantSearchSSRContext` as it has already been mounted a second time at this point.\n    if (serverState) {\n        searchRef = serverState.ssrSearchRef;\n    }\n    if (searchRef.current === null) {\n        // We don't use the `instantsearch()` function because it comes with other\n        // top-level APIs that we don't need.\n        // See https://github.com/algolia/instantsearch.js/blob/5b529f43d8acc680f85837eaaa41f7fd03a3f833/src/index.es.ts#L63-L86\n        var search = new instantsearch_js_es_lib_InstantSearch_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](props);\n        search._schedule = function _schedule(cb) {\n            search._schedule.queue.push(cb);\n            clearTimeout(search._schedule.timer);\n            search._schedule.timer = setTimeout(function() {\n                search._schedule.queue.forEach(function(callback) {\n                    callback();\n                });\n                search._schedule.queue = [];\n            }, 0);\n        };\n        search._schedule.queue = [];\n        if (serverContext || initialResults) {\n            // InstantSearch.js has a private Initial Results API that lets us inject\n            // results on the search instance.\n            // On the server, we default the initial results to an empty object so that\n            // InstantSearch.js doesn't schedule a search that isn't used, leading to\n            // an additional network request. (This is equivalent to monkey-patching\n            // `scheduleSearch` to a noop.)\n            search._initialResults = initialResults || {};\n        }\n        addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [\n            serverContext && serverUserAgent,\n            nextUserAgent(getNextVersion())\n        ]));\n        // On the server, we start the search early to compute the search parameters.\n        // On SSR, we start the search early to directly catch up with the lifecycle\n        // and render.\n        if (serverContext || initialResults) {\n            search.start();\n        }\n        if (serverContext) {\n            // We notify `getServerState()` of the InstantSearch internals to retrieve\n            // the server state and pass it to the render on SSR.\n            serverContext.notifyServer({\n                search: search\n            });\n        }\n        warnNextRouter(props.routing);\n        searchRef.current = search;\n    }\n    {\n        var _search = searchRef.current;\n        var prevProps = prevPropsRef.current;\n        if (prevProps.indexName !== props.indexName) {\n            _search.helper.setIndex(props.indexName || \"\").search();\n            prevPropsRef.current = props;\n        }\n        if (prevProps.searchClient !== props.searchClient) {\n             true ? (0,_warn_js__WEBPACK_IMPORTED_MODULE_7__.warn)(false, \"The `searchClient` prop of `<InstantSearch>` changed between renders, which may cause more search requests than necessary. If this is an unwanted behavior, please provide a stable reference: https://www.algolia.com/doc/api-reference/widgets/instantsearch/react-hooks/#widget-param-searchclient\") : 0;\n            addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [\n                serverContext && serverUserAgent\n            ]));\n            _search.mainHelper.setClient(props.searchClient).search();\n            prevPropsRef.current = props;\n        }\n        if (prevProps.onStateChange !== props.onStateChange) {\n            _search.onStateChange = props.onStateChange;\n            prevPropsRef.current = props;\n        }\n        if (prevProps.searchFunction !== props.searchFunction) {\n            // Updating the `searchFunction` to `undefined` is not supported by\n            // InstantSearch.js, so it will throw an error.\n            // This is a fair behavior until we add an update API in InstantSearch.js.\n            _search._searchFunction = props.searchFunction;\n            prevPropsRef.current = props;\n        }\n        if (prevProps.stalledSearchDelay !== props.stalledSearchDelay) {\n            var _props$stalledSearchD;\n            // The default `stalledSearchDelay` in InstantSearch.js is 200ms.\n            // We need to reset it when it's undefined to get back to the original value.\n            _search._stalledSearchDelay = (_props$stalledSearchD = props.stalledSearchDelay) !== null && _props$stalledSearchD !== void 0 ? _props$stalledSearchD : 200;\n            prevPropsRef.current = props;\n        }\n    // Updating the `routing` prop is not supported because InstantSearch.js\n    // doesn't let us change it. This might not be a problem though, because `routing`\n    // shouldn't need to be dynamic.\n    // If we find scenarios where `routing` needs to change, we can always expose\n    // it privately on the InstantSearch instance. Another way would be to\n    // manually inject the routing middleware in this library, and not rely\n    // on the provided `routing` prop.\n    }\n    var cleanupTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var store = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        var search = searchRef.current;\n        // Scenario 1: the component mounts.\n        if (cleanupTimerRef.current === null) {\n            // On SSR, the instance is already started so we don't start it again.\n            if (!search.started) {\n                search.start();\n                forceUpdate();\n            }\n        } else {\n            // We cancel the previous cleanup function because we don't want to\n            // dispose the search during an update.\n            clearTimeout(cleanupTimerRef.current);\n            search._preventWidgetCleanup = false;\n        }\n        return function() {\n            function cleanup() {\n                search.dispose();\n            }\n            clearTimeout(search._schedule.timer);\n            // We clean up only when the component that uses this subscription unmounts,\n            // but not when it updates, because it would dispose the instance, which\n            // would remove all the widgets and break routing.\n            // Executing the cleanup function in a `setTimeout()` lets us cancel it\n            // in the next effect.\n            // (There might be better ways to do this.)\n            cleanupTimerRef.current = setTimeout(cleanup);\n            // We need to prevent the `useWidget` cleanup function so that widgets\n            // are not removed before the instance is disposed, triggering\n            // an unwanted search request.\n            search._preventWidgetCleanup = true;\n        };\n    }, [\n        forceUpdate\n    ]), function() {\n        return searchRef.current;\n    }, function() {\n        return searchRef.current;\n    });\n    return store;\n}\nfunction addAlgoliaAgents(searchClient, userAgents) {\n    if (typeof searchClient.addAlgoliaAgent !== \"function\") {\n        return;\n    }\n    userAgents.filter(Boolean).forEach(function(userAgent) {\n        searchClient.addAlgoliaAgent(userAgent);\n    });\n}\nfunction warnNextRouter(routing) {\n    if (true) {\n        var _routing$router;\n        if (!routing || \"undefined\" === \"undefined\" || 0) {\n            return;\n        }\n        var isUsingNextRouter = // @ts-expect-error: _isNextRouter is only set on the Next.js router\n        routing !== true && (routing === null || routing === void 0 ? void 0 : (_routing$router = routing.router) === null || _routing$router === void 0 ? void 0 : _routing$router._isNextRouter);\n         true ? (0,_warn_js__WEBPACK_IMPORTED_MODULE_7__.warn)(isUsingNextRouter, '\\nYou are using Next.js with InstantSearch without the \"react-instantsearch-hooks-router-nextjs\" package.\\nThis package is recommended to make the routing work correctly with Next.js.\\nPlease check its usage instructions: https://github.com/algolia/instantsearch/tree/master/packages/react-instantsearch-hooks-router-nextjs\\n\\nYou can ignore this warning if you are using a custom router that suits your needs, it won\\'t be outputted in production builds.') : 0;\n    }\n}\n/**\n * Gets the version of Next.js if it is available in the `window` object,\n * otherwise it returns the NEXT_RUNTIME environment variable (in SSR),\n * which is either `nodejs` or `edge`.\n */ function getNextVersion() {\n    var _next, _process$env;\n    return  false || (typeof process !== \"undefined\" ? (_process$env = process.env) === null || _process$env === void 0 ? void 0 : \"nodejs\" : undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchContext.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchContext.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInstantSearchContext: () => (/* binding */ useInstantSearchContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _invariant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./invariant.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/invariant.js\");\n/* harmony import */ var _InstantSearchContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InstantSearchContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchContext.js\");\n\n\n\nfunction useInstantSearchContext() {\n    var search = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_InstantSearchContext_js__WEBPACK_IMPORTED_MODULE_1__.InstantSearchContext);\n    (0,_invariant_js__WEBPACK_IMPORTED_MODULE_2__.invariant)(search !== null, \"Hooks must be used inside the <InstantSearch> component.\\n\\n\" + \"They are not compatible with the `react-instantsearch-core` and `react-instantsearch-dom` packages, so make sure to use the <InstantSearch> component from `react-instantsearch-hooks`.\");\n    return search;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VJbnN0YW50U2VhcmNoQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1DO0FBQ1E7QUFDc0I7QUFDMUQsU0FBU0c7SUFDZCxJQUFJQyxTQUFTSixpREFBVUEsQ0FBQ0UsMEVBQW9CQTtJQUM1Q0Qsd0RBQVNBLENBQUNHLFdBQVcsTUFBTSxpRUFBaUU7SUFDNUYsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvdXNlSW5zdGFudFNlYXJjaENvbnRleHQuanM/NmE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4vaW52YXJpYW50LmpzXCI7XG5pbXBvcnQgeyBJbnN0YW50U2VhcmNoQ29udGV4dCB9IGZyb20gXCIuL0luc3RhbnRTZWFyY2hDb250ZXh0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlSW5zdGFudFNlYXJjaENvbnRleHQoKSB7XG4gIHZhciBzZWFyY2ggPSB1c2VDb250ZXh0KEluc3RhbnRTZWFyY2hDb250ZXh0KTtcbiAgaW52YXJpYW50KHNlYXJjaCAhPT0gbnVsbCwgJ0hvb2tzIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxJbnN0YW50U2VhcmNoPiBjb21wb25lbnQuXFxuXFxuJyArICdUaGV5IGFyZSBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBgcmVhY3QtaW5zdGFudHNlYXJjaC1jb3JlYCBhbmQgYHJlYWN0LWluc3RhbnRzZWFyY2gtZG9tYCBwYWNrYWdlcywgc28gbWFrZSBzdXJlIHRvIHVzZSB0aGUgPEluc3RhbnRTZWFyY2g+IGNvbXBvbmVudCBmcm9tIGByZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzYC4nKTtcbiAgcmV0dXJuIHNlYXJjaDtcbn0iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsImludmFyaWFudCIsIkluc3RhbnRTZWFyY2hDb250ZXh0IiwidXNlSW5zdGFudFNlYXJjaENvbnRleHQiLCJzZWFyY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchSSRContext.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchSSRContext.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInstantSearchSSRContext: () => (/* binding */ useInstantSearchSSRContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _InstantSearchSSRContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InstantSearchSSRContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/InstantSearchSSRContext.js\");\n\n\nfunction useInstantSearchSSRContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_InstantSearchSSRContext_js__WEBPACK_IMPORTED_MODULE_1__.InstantSearchSSRContext);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VJbnN0YW50U2VhcmNoU1NSQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0M7QUFDaEUsU0FBU0U7SUFDZCxPQUFPRixpREFBVUEsQ0FBQ0MsZ0ZBQXVCQTtBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvdXNlSW5zdGFudFNlYXJjaFNTUkNvbnRleHQuanM/Njk1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5zdGFudFNlYXJjaFNTUkNvbnRleHQgfSBmcm9tIFwiLi9JbnN0YW50U2VhcmNoU1NSQ29udGV4dC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUluc3RhbnRTZWFyY2hTU1JDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChJbnN0YW50U2VhcmNoU1NSQ29udGV4dCk7XG59Il0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJJbnN0YW50U2VhcmNoU1NSQ29udGV4dCIsInVzZUluc3RhbnRTZWFyY2hTU1JDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchSSRContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchServerContext.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchServerContext.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInstantSearchServerContext: () => (/* binding */ useInstantSearchServerContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_InstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/InstantSearchServerContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/components/InstantSearchServerContext.js\");\n\n\nfunction useInstantSearchServerContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_components_InstantSearchServerContext_js__WEBPACK_IMPORTED_MODULE_1__.InstantSearchServerContext);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VJbnN0YW50U2VhcmNoU2VydmVyQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDc0Q7QUFDbEYsU0FBU0U7SUFDZCxPQUFPRixpREFBVUEsQ0FBQ0MsaUdBQTBCQTtBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvdXNlSW5zdGFudFNlYXJjaFNlcnZlckNvbnRleHQuanM/NjY4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5zdGFudFNlYXJjaFNlcnZlckNvbnRleHQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbnN0YW50U2VhcmNoU2VydmVyQ29udGV4dC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUluc3RhbnRTZWFyY2hTZXJ2ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChJbnN0YW50U2VhcmNoU2VydmVyQ29udGV4dCk7XG59Il0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJJbnN0YW50U2VhcmNoU2VydmVyQ29udGV4dCIsInVzZUluc3RhbnRTZWFyY2hTZXJ2ZXJDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchServerContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIsomorphicLayoutEffect.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useIsomorphicLayoutEffect.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * `useLayoutEffect` that doesn't show a warning when server-side rendering.\n *\n * It uses `useEffect` on the server (no-op), and `useLayoutEffect` on the browser.\n */ var useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBRW5EOzs7O0NBSUMsR0FDTSxJQUFJRSw0QkFBNEIsTUFBa0IsR0FBY0QsQ0FBZUEsR0FBR0QsNENBQVNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvbGliL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanM/ZWMyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBgdXNlTGF5b3V0RWZmZWN0YCB0aGF0IGRvZXNuJ3Qgc2hvdyBhIHdhcm5pbmcgd2hlbiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gKlxuICogSXQgdXNlcyBgdXNlRWZmZWN0YCBvbiB0aGUgc2VydmVyIChuby1vcCksIGFuZCBgdXNlTGF5b3V0RWZmZWN0YCBvbiB0aGUgYnJvd3Nlci5cbiAqL1xuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7Il0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIsomorphicLayoutEffect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useStableValue.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useStableValue.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useStableValue: () => (/* binding */ useStableValue)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _dequal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dequal.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js\");\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction useStableValue(value) {\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        return value;\n    }), _useState2 = _slicedToArray(_useState, 2), stableValue = _useState2[0], setStableValue = _useState2[1];\n    if (!(0,_dequal_js__WEBPACK_IMPORTED_MODULE_1__.dequal)(stableValue, value)) {\n        setStableValue(value);\n    }\n    return stableValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VTdGFibGVWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxlQUFlQyxHQUFHLEVBQUVDLENBQUM7SUFBSSxPQUFPQyxnQkFBZ0JGLFFBQVFHLHNCQUFzQkgsS0FBS0MsTUFBTUcsNEJBQTRCSixLQUFLQyxNQUFNSTtBQUFvQjtBQUM3SixTQUFTQTtJQUFxQixNQUFNLElBQUlDLFVBQVU7QUFBOEk7QUFDaE0sU0FBU0YsNEJBQTRCRyxDQUFDLEVBQUVDLE1BQU07SUFBSSxJQUFJLENBQUNELEdBQUc7SUFBUSxJQUFJLE9BQU9BLE1BQU0sVUFBVSxPQUFPRSxrQkFBa0JGLEdBQUdDO0lBQVMsSUFBSUUsSUFBSUMsT0FBT0MsU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ1AsR0FBR1EsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUFJLElBQUlMLE1BQU0sWUFBWUgsRUFBRVMsV0FBVyxFQUFFTixJQUFJSCxFQUFFUyxXQUFXLENBQUNDLElBQUk7SUFBRSxJQUFJUCxNQUFNLFNBQVNBLE1BQU0sT0FBTyxPQUFPUSxNQUFNQyxJQUFJLENBQUNaO0lBQUksSUFBSUcsTUFBTSxlQUFlLDJDQUEyQ1UsSUFBSSxDQUFDVixJQUFJLE9BQU9ELGtCQUFrQkYsR0FBR0M7QUFBUztBQUMvWixTQUFTQyxrQkFBa0JULEdBQUcsRUFBRXFCLEdBQUc7SUFBSSxJQUFJQSxPQUFPLFFBQVFBLE1BQU1yQixJQUFJc0IsTUFBTSxFQUFFRCxNQUFNckIsSUFBSXNCLE1BQU07SUFBRSxJQUFLLElBQUlyQixJQUFJLEdBQUdzQixPQUFPLElBQUlMLE1BQU1HLE1BQU1wQixJQUFJb0IsS0FBS3BCLElBQUtzQixJQUFJLENBQUN0QixFQUFFLEdBQUdELEdBQUcsQ0FBQ0MsRUFBRTtJQUFFLE9BQU9zQjtBQUFNO0FBQ2xMLFNBQVNwQixzQkFBc0JILEdBQUcsRUFBRUMsQ0FBQztJQUFJLElBQUl1QixLQUFLLFFBQVF4QixNQUFNLE9BQU8sZUFBZSxPQUFPeUIsVUFBVXpCLEdBQUcsQ0FBQ3lCLE9BQU9DLFFBQVEsQ0FBQyxJQUFJMUIsR0FBRyxDQUFDLGFBQWE7SUFBRSxJQUFJLFFBQVF3QixJQUFJO1FBQUUsSUFBSUcsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUMsT0FBTyxFQUFFLEVBQUVDLEtBQUssQ0FBQyxHQUFHQyxLQUFLLENBQUM7UUFBRyxJQUFJO1lBQUUsSUFBSUosS0FBSyxDQUFDTCxLQUFLQSxHQUFHVixJQUFJLENBQUNkLElBQUcsRUFBR2tDLElBQUksRUFBRSxNQUFNakMsR0FBRztnQkFBRSxJQUFJVSxPQUFPYSxRQUFRQSxJQUFJO2dCQUFRUSxLQUFLLENBQUM7WUFBRyxPQUFPLE1BQU8sQ0FBRUEsQ0FBQUEsS0FBSyxDQUFDTCxLQUFLRSxHQUFHZixJQUFJLENBQUNVLEdBQUUsRUFBR1csSUFBSSxLQUFNSixDQUFBQSxLQUFLSyxJQUFJLENBQUNULEdBQUdVLEtBQUssR0FBR04sS0FBS1QsTUFBTSxLQUFLckIsQ0FBQUEsR0FBSStCLEtBQUssQ0FBQztRQUFJLEVBQUUsT0FBT00sS0FBSztZQUFFTCxLQUFLLENBQUMsR0FBR0wsS0FBS1U7UUFBSyxTQUFVO1lBQUUsSUFBSTtnQkFBRSxJQUFJLENBQUNOLE1BQU0sUUFBUVIsR0FBR2UsTUFBTSxJQUFLVCxDQUFBQSxLQUFLTixHQUFHZSxNQUFNLElBQUk1QixPQUFPbUIsUUFBUUEsRUFBQyxHQUFJO1lBQVEsU0FBVTtnQkFBRSxJQUFJRyxJQUFJLE1BQU1MO1lBQUk7UUFBRTtRQUFFLE9BQU9HO0lBQU07QUFBRTtBQUMza0IsU0FBUzdCLGdCQUFnQkYsR0FBRztJQUFJLElBQUlrQixNQUFNc0IsT0FBTyxDQUFDeEMsTUFBTSxPQUFPQTtBQUFLO0FBQ25DO0FBQ0k7QUFDOUIsU0FBUzJDLGVBQWVOLEtBQUs7SUFDbEMsSUFBSU8sWUFBWUgsK0NBQVFBLENBQUM7UUFDckIsT0FBT0o7SUFDVCxJQUNBUSxhQUFhOUMsZUFBZTZDLFdBQVcsSUFDdkNFLGNBQWNELFVBQVUsQ0FBQyxFQUFFLEVBQzNCRSxpQkFBaUJGLFVBQVUsQ0FBQyxFQUFFO0lBQ2hDLElBQUksQ0FBQ0gsa0RBQU1BLENBQUNJLGFBQWFULFFBQVE7UUFDL0JVLGVBQWVWO0lBQ2pCO0lBQ0EsT0FBT1M7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvdXNlU3RhYmxlVmFsdWUuanM/MGZkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBudWxsID09IGFyciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gX2kpIHsgdmFyIF9zLCBfZSwgX3gsIF9yLCBfYXJyID0gW10sIF9uID0gITAsIF9kID0gITE7IHRyeSB7IGlmIChfeCA9IChfaSA9IF9pLmNhbGwoYXJyKSkubmV4dCwgMCA9PT0gaSkgeyBpZiAoT2JqZWN0KF9pKSAhPT0gX2kpIHJldHVybjsgX24gPSAhMTsgfSBlbHNlIGZvciAoOyAhKF9uID0gKF9zID0gX3guY2FsbChfaSkpLmRvbmUpICYmIChfYXJyLnB1c2goX3MudmFsdWUpLCBfYXJyLmxlbmd0aCAhPT0gaSk7IF9uID0gITApOyB9IGNhdGNoIChlcnIpIHsgX2QgPSAhMCwgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgbnVsbCAhPSBfaS5yZXR1cm4gJiYgKF9yID0gX2kucmV0dXJuKCksIE9iamVjdChfcikgIT09IF9yKSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gfVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGRlcXVhbCB9IGZyb20gXCIuL2RlcXVhbC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YWJsZVZhbHVlKHZhbHVlKSB7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgc3RhYmxlVmFsdWUgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldFN0YWJsZVZhbHVlID0gX3VzZVN0YXRlMlsxXTtcbiAgaWYgKCFkZXF1YWwoc3RhYmxlVmFsdWUsIHZhbHVlKSkge1xuICAgIHNldFN0YWJsZVZhbHVlKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gc3RhYmxlVmFsdWU7XG59Il0sIm5hbWVzIjpbIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwibGVuZ3RoIiwiYXJyMiIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnIiLCJyZXR1cm4iLCJpc0FycmF5IiwidXNlU3RhdGUiLCJkZXF1YWwiLCJ1c2VTdGFibGVWYWx1ZSIsIl91c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJzdGFibGVWYWx1ZSIsInNldFN0YWJsZVZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useStableValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useWidget.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/useWidget.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWidget: () => (/* binding */ useWidget)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _dequal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dequal.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/dequal.js\");\n/* harmony import */ var _useInstantSearchContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useInstantSearchContext.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchContext.js\");\n/* harmony import */ var _useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useIsomorphicLayoutEffect.js\");\n\n\n\n\nfunction useWidget(_ref) {\n    var widget = _ref.widget, parentIndex = _ref.parentIndex, props = _ref.props, shouldSsr = _ref.shouldSsr;\n    var prevPropsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        prevPropsRef.current = props;\n    }, [\n        props\n    ]);\n    var prevWidgetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(widget);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        prevWidgetRef.current = widget;\n    }, [\n        widget\n    ]);\n    var cleanupTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var shouldAddWidgetEarly = shouldSsr && !parentIndex.getWidgets().includes(widget);\n    var search = (0,_useInstantSearchContext_js__WEBPACK_IMPORTED_MODULE_1__.useInstantSearchContext)();\n    // This effect is responsible for adding, removing, and updating the widget.\n    // We need to support scenarios where the widget is remounted quickly, like in\n    // Strict Mode, so that we don't lose its state, and therefore that we don't\n    // break routing.\n    (0,_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(function() {\n        var previousWidget = prevWidgetRef.current;\n        // Scenario 1: the widget is added for the first time.\n        if (!cleanupTimerRef.current) {\n            if (!shouldAddWidgetEarly) {\n                parentIndex.addWidgets([\n                    widget\n                ]);\n            }\n        } else {\n            // We cancel the original effect cleanup because it may not be necessary if\n            // props haven't changed. (We manually call it if it is below.)\n            clearTimeout(cleanupTimerRef.current);\n            // Warning: if an unstable function prop is provided, `dequal` is not able\n            // to keep its reference and therefore will consider that props did change.\n            // This could unsollicitely remove/add the widget, therefore forget its state,\n            // and could be a source of confusion.\n            // If users face this issue, we should advise them to provide stable function\n            // references.\n            var arePropsEqual = (0,_dequal_js__WEBPACK_IMPORTED_MODULE_3__.dequal)(props, prevPropsRef.current);\n            // If props did change, then we execute the cleanup function instantly\n            // and then add the widget back. This lets us add the widget without\n            // waiting for the scheduled cleanup function to finish (that we canceled\n            // above).\n            if (!arePropsEqual) {\n                parentIndex.removeWidgets([\n                    previousWidget\n                ]);\n                parentIndex.addWidgets([\n                    widget\n                ]);\n            }\n        }\n        return function() {\n            // We don't remove the widget right away, but rather schedule it so that\n            // we're able to cancel it in the next effect.\n            cleanupTimerRef.current = setTimeout(function() {\n                search._schedule(function() {\n                    if (search._preventWidgetCleanup) return;\n                    parentIndex.removeWidgets([\n                        previousWidget\n                    ]);\n                });\n            });\n        };\n    }, [\n        parentIndex,\n        widget,\n        shouldAddWidgetEarly,\n        search,\n        props\n    ]);\n    if (shouldAddWidgetEarly) {\n        parentIndex.addWidgets([\n            widget\n        ]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi91c2VXaWRnZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEM7QUFDTDtBQUNrQztBQUNJO0FBQ3BFLFNBQVNLLFVBQVVDLElBQUk7SUFDNUIsSUFBSUMsU0FBU0QsS0FBS0MsTUFBTSxFQUN0QkMsY0FBY0YsS0FBS0UsV0FBVyxFQUM5QkMsUUFBUUgsS0FBS0csS0FBSyxFQUNsQkMsWUFBWUosS0FBS0ksU0FBUztJQUM1QixJQUFJQyxlQUFlViw2Q0FBTUEsQ0FBQ1E7SUFDMUJULGdEQUFTQSxDQUFDO1FBQ1JXLGFBQWFDLE9BQU8sR0FBR0g7SUFDekIsR0FBRztRQUFDQTtLQUFNO0lBQ1YsSUFBSUksZ0JBQWdCWiw2Q0FBTUEsQ0FBQ007SUFDM0JQLGdEQUFTQSxDQUFDO1FBQ1JhLGNBQWNELE9BQU8sR0FBR0w7SUFDMUIsR0FBRztRQUFDQTtLQUFPO0lBQ1gsSUFBSU8sa0JBQWtCYiw2Q0FBTUEsQ0FBQztJQUM3QixJQUFJYyx1QkFBdUJMLGFBQWEsQ0FBQ0YsWUFBWVEsVUFBVSxHQUFHQyxRQUFRLENBQUNWO0lBQzNFLElBQUlXLFNBQVNmLG9GQUF1QkE7SUFFcEMsNEVBQTRFO0lBQzVFLDhFQUE4RTtJQUM5RSw0RUFBNEU7SUFDNUUsaUJBQWlCO0lBQ2pCQyx3RkFBeUJBLENBQUM7UUFDeEIsSUFBSWUsaUJBQWlCTixjQUFjRCxPQUFPO1FBRTFDLHNEQUFzRDtRQUN0RCxJQUFJLENBQUNFLGdCQUFnQkYsT0FBTyxFQUFFO1lBQzVCLElBQUksQ0FBQ0csc0JBQXNCO2dCQUN6QlAsWUFBWVksVUFBVSxDQUFDO29CQUFDYjtpQkFBTztZQUNqQztRQUNGLE9BRUs7WUFDSCwyRUFBMkU7WUFDM0UsK0RBQStEO1lBQy9EYyxhQUFhUCxnQkFBZ0JGLE9BQU87WUFFcEMsMEVBQTBFO1lBQzFFLDJFQUEyRTtZQUMzRSw4RUFBOEU7WUFDOUUsc0NBQXNDO1lBQ3RDLDZFQUE2RTtZQUM3RSxjQUFjO1lBQ2QsSUFBSVUsZ0JBQWdCcEIsa0RBQU1BLENBQUNPLE9BQU9FLGFBQWFDLE9BQU87WUFFdEQsc0VBQXNFO1lBQ3RFLG9FQUFvRTtZQUNwRSx5RUFBeUU7WUFDekUsVUFBVTtZQUNWLElBQUksQ0FBQ1UsZUFBZTtnQkFDbEJkLFlBQVllLGFBQWEsQ0FBQztvQkFBQ0o7aUJBQWU7Z0JBQzFDWCxZQUFZWSxVQUFVLENBQUM7b0JBQUNiO2lCQUFPO1lBQ2pDO1FBQ0Y7UUFDQSxPQUFPO1lBQ0wsd0VBQXdFO1lBQ3hFLDhDQUE4QztZQUM5Q08sZ0JBQWdCRixPQUFPLEdBQUdZLFdBQVc7Z0JBQ25DTixPQUFPTyxTQUFTLENBQUM7b0JBQ2YsSUFBSVAsT0FBT1EscUJBQXFCLEVBQUU7b0JBQ2xDbEIsWUFBWWUsYUFBYSxDQUFDO3dCQUFDSjtxQkFBZTtnQkFDNUM7WUFDRjtRQUNGO0lBQ0YsR0FBRztRQUFDWDtRQUFhRDtRQUFRUTtRQUFzQkc7UUFBUVQ7S0FBTTtJQUM3RCxJQUFJTSxzQkFBc0I7UUFDeEJQLFlBQVlZLFVBQVUsQ0FBQztZQUFDYjtTQUFPO0lBQ2pDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvbGliL3VzZVdpZGdldC5qcz9jMWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVxdWFsIH0gZnJvbSBcIi4vZGVxdWFsLmpzXCI7XG5pbXBvcnQgeyB1c2VJbnN0YW50U2VhcmNoQ29udGV4dCB9IGZyb20gXCIuL3VzZUluc3RhbnRTZWFyY2hDb250ZXh0LmpzXCI7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSBcIi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVdpZGdldChfcmVmKSB7XG4gIHZhciB3aWRnZXQgPSBfcmVmLndpZGdldCxcbiAgICBwYXJlbnRJbmRleCA9IF9yZWYucGFyZW50SW5kZXgsXG4gICAgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgIHNob3VsZFNzciA9IF9yZWYuc2hvdWxkU3NyO1xuICB2YXIgcHJldlByb3BzUmVmID0gdXNlUmVmKHByb3BzKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBwcmV2UHJvcHNSZWYuY3VycmVudCA9IHByb3BzO1xuICB9LCBbcHJvcHNdKTtcbiAgdmFyIHByZXZXaWRnZXRSZWYgPSB1c2VSZWYod2lkZ2V0KTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBwcmV2V2lkZ2V0UmVmLmN1cnJlbnQgPSB3aWRnZXQ7XG4gIH0sIFt3aWRnZXRdKTtcbiAgdmFyIGNsZWFudXBUaW1lclJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHNob3VsZEFkZFdpZGdldEVhcmx5ID0gc2hvdWxkU3NyICYmICFwYXJlbnRJbmRleC5nZXRXaWRnZXRzKCkuaW5jbHVkZXMod2lkZ2V0KTtcbiAgdmFyIHNlYXJjaCA9IHVzZUluc3RhbnRTZWFyY2hDb250ZXh0KCk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaXMgcmVzcG9uc2libGUgZm9yIGFkZGluZywgcmVtb3ZpbmcsIGFuZCB1cGRhdGluZyB0aGUgd2lkZ2V0LlxuICAvLyBXZSBuZWVkIHRvIHN1cHBvcnQgc2NlbmFyaW9zIHdoZXJlIHRoZSB3aWRnZXQgaXMgcmVtb3VudGVkIHF1aWNrbHksIGxpa2UgaW5cbiAgLy8gU3RyaWN0IE1vZGUsIHNvIHRoYXQgd2UgZG9uJ3QgbG9zZSBpdHMgc3RhdGUsIGFuZCB0aGVyZWZvcmUgdGhhdCB3ZSBkb24ndFxuICAvLyBicmVhayByb3V0aW5nLlxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlvdXNXaWRnZXQgPSBwcmV2V2lkZ2V0UmVmLmN1cnJlbnQ7XG5cbiAgICAvLyBTY2VuYXJpbyAxOiB0aGUgd2lkZ2V0IGlzIGFkZGVkIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICBpZiAoIWNsZWFudXBUaW1lclJlZi5jdXJyZW50KSB7XG4gICAgICBpZiAoIXNob3VsZEFkZFdpZGdldEVhcmx5KSB7XG4gICAgICAgIHBhcmVudEluZGV4LmFkZFdpZGdldHMoW3dpZGdldF0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBTY2VuYXJpbyAyOiB0aGUgd2lkZ2V0IGlzIHJlcmVuZGVyZWQgb3IgdXBkYXRlZC5cbiAgICBlbHNlIHtcbiAgICAgIC8vIFdlIGNhbmNlbCB0aGUgb3JpZ2luYWwgZWZmZWN0IGNsZWFudXAgYmVjYXVzZSBpdCBtYXkgbm90IGJlIG5lY2Vzc2FyeSBpZlxuICAgICAgLy8gcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLiAoV2UgbWFudWFsbHkgY2FsbCBpdCBpZiBpdCBpcyBiZWxvdy4pXG4gICAgICBjbGVhclRpbWVvdXQoY2xlYW51cFRpbWVyUmVmLmN1cnJlbnQpO1xuXG4gICAgICAvLyBXYXJuaW5nOiBpZiBhbiB1bnN0YWJsZSBmdW5jdGlvbiBwcm9wIGlzIHByb3ZpZGVkLCBgZGVxdWFsYCBpcyBub3QgYWJsZVxuICAgICAgLy8gdG8ga2VlcCBpdHMgcmVmZXJlbmNlIGFuZCB0aGVyZWZvcmUgd2lsbCBjb25zaWRlciB0aGF0IHByb3BzIGRpZCBjaGFuZ2UuXG4gICAgICAvLyBUaGlzIGNvdWxkIHVuc29sbGljaXRlbHkgcmVtb3ZlL2FkZCB0aGUgd2lkZ2V0LCB0aGVyZWZvcmUgZm9yZ2V0IGl0cyBzdGF0ZSxcbiAgICAgIC8vIGFuZCBjb3VsZCBiZSBhIHNvdXJjZSBvZiBjb25mdXNpb24uXG4gICAgICAvLyBJZiB1c2VycyBmYWNlIHRoaXMgaXNzdWUsIHdlIHNob3VsZCBhZHZpc2UgdGhlbSB0byBwcm92aWRlIHN0YWJsZSBmdW5jdGlvblxuICAgICAgLy8gcmVmZXJlbmNlcy5cbiAgICAgIHZhciBhcmVQcm9wc0VxdWFsID0gZGVxdWFsKHByb3BzLCBwcmV2UHJvcHNSZWYuY3VycmVudCk7XG5cbiAgICAgIC8vIElmIHByb3BzIGRpZCBjaGFuZ2UsIHRoZW4gd2UgZXhlY3V0ZSB0aGUgY2xlYW51cCBmdW5jdGlvbiBpbnN0YW50bHlcbiAgICAgIC8vIGFuZCB0aGVuIGFkZCB0aGUgd2lkZ2V0IGJhY2suIFRoaXMgbGV0cyB1cyBhZGQgdGhlIHdpZGdldCB3aXRob3V0XG4gICAgICAvLyB3YWl0aW5nIGZvciB0aGUgc2NoZWR1bGVkIGNsZWFudXAgZnVuY3Rpb24gdG8gZmluaXNoICh0aGF0IHdlIGNhbmNlbGVkXG4gICAgICAvLyBhYm92ZSkuXG4gICAgICBpZiAoIWFyZVByb3BzRXF1YWwpIHtcbiAgICAgICAgcGFyZW50SW5kZXgucmVtb3ZlV2lkZ2V0cyhbcHJldmlvdXNXaWRnZXRdKTtcbiAgICAgICAgcGFyZW50SW5kZXguYWRkV2lkZ2V0cyhbd2lkZ2V0XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBXZSBkb24ndCByZW1vdmUgdGhlIHdpZGdldCByaWdodCBhd2F5LCBidXQgcmF0aGVyIHNjaGVkdWxlIGl0IHNvIHRoYXRcbiAgICAgIC8vIHdlJ3JlIGFibGUgdG8gY2FuY2VsIGl0IGluIHRoZSBuZXh0IGVmZmVjdC5cbiAgICAgIGNsZWFudXBUaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlYXJjaC5fc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChzZWFyY2guX3ByZXZlbnRXaWRnZXRDbGVhbnVwKSByZXR1cm47XG4gICAgICAgICAgcGFyZW50SW5kZXgucmVtb3ZlV2lkZ2V0cyhbcHJldmlvdXNXaWRnZXRdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBbcGFyZW50SW5kZXgsIHdpZGdldCwgc2hvdWxkQWRkV2lkZ2V0RWFybHksIHNlYXJjaCwgcHJvcHNdKTtcbiAgaWYgKHNob3VsZEFkZFdpZGdldEVhcmx5KSB7XG4gICAgcGFyZW50SW5kZXguYWRkV2lkZ2V0cyhbd2lkZ2V0XSk7XG4gIH1cbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwiZGVxdWFsIiwidXNlSW5zdGFudFNlYXJjaENvbnRleHQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlV2lkZ2V0IiwiX3JlZiIsIndpZGdldCIsInBhcmVudEluZGV4IiwicHJvcHMiLCJzaG91bGRTc3IiLCJwcmV2UHJvcHNSZWYiLCJjdXJyZW50IiwicHJldldpZGdldFJlZiIsImNsZWFudXBUaW1lclJlZiIsInNob3VsZEFkZFdpZGdldEVhcmx5IiwiZ2V0V2lkZ2V0cyIsImluY2x1ZGVzIiwic2VhcmNoIiwicHJldmlvdXNXaWRnZXQiLCJhZGRXaWRnZXRzIiwiY2xlYXJUaW1lb3V0IiwiYXJlUHJvcHNFcXVhbCIsInJlbW92ZVdpZGdldHMiLCJzZXRUaW1lb3V0IiwiX3NjaGVkdWxlIiwiX3ByZXZlbnRXaWRnZXRDbGVhbnVwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/useWidget.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/warn.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/lib/warn.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   warn: () => (/* binding */ warn),\n/* harmony export */   warnCache: () => (/* binding */ warnCache)\n/* harmony export */ });\n/* eslint-disable no-console, no-empty */ var warnCache = {\n    current: {}\n};\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */ function warn(condition, message) {\n    if (false) {}\n    if (condition) {\n        return;\n    }\n    var sanitizedMessage = message.trim();\n    var hasAlreadyPrinted = warnCache.current[sanitizedMessage];\n    if (!hasAlreadyPrinted) {\n        warnCache.current[sanitizedMessage] = true;\n        var warning = \"[InstantSearch] \".concat(sanitizedMessage);\n        console.warn(warning);\n        try {\n            // Welcome to debugging InstantSearch.\n            //\n            // This error was thrown as a convenience so that you can find the source\n            // of the warning that appears in the console by enabling \"Pause on exceptions\"\n            // in your debugger.\n            throw new Error(warning);\n        } catch (error) {}\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL2xpYi93YXJuLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDLEdBRWhDLElBQUlBLFlBQVk7SUFDckJDLFNBQVMsQ0FBQztBQUNaLEVBQUU7QUFFRjs7O0NBR0MsR0FDTSxTQUFTQyxLQUFLQyxTQUFTLEVBQUVDLE9BQU87SUFDckMsSUFBSSxLQUF1QyxFQUFJLEVBRTlDO0lBQ0QsSUFBSUQsV0FBVztRQUNiO0lBQ0Y7SUFDQSxJQUFJRyxtQkFBbUJGLFFBQVFHLElBQUk7SUFDbkMsSUFBSUMsb0JBQW9CUixVQUFVQyxPQUFPLENBQUNLLGlCQUFpQjtJQUMzRCxJQUFJLENBQUNFLG1CQUFtQjtRQUN0QlIsVUFBVUMsT0FBTyxDQUFDSyxpQkFBaUIsR0FBRztRQUN0QyxJQUFJRyxVQUFVLG1CQUFtQkMsTUFBTSxDQUFDSjtRQUN4Q0ssUUFBUVQsSUFBSSxDQUFDTztRQUNiLElBQUk7WUFDRixzQ0FBc0M7WUFDdEMsRUFBRTtZQUNGLHlFQUF5RTtZQUN6RSwrRUFBK0U7WUFDL0Usb0JBQW9CO1lBQ3BCLE1BQU0sSUFBSUcsTUFBTUg7UUFDbEIsRUFBRSxPQUFPSSxPQUFPLENBQUM7SUFDbkI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZHVzYS1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWluc3RhbnRzZWFyY2gtaG9va3MvZGlzdC9lcy9saWIvd2Fybi5qcz9kMGYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIG5vLWVtcHR5ICovXG5cbmV4cG9ydCB2YXIgd2FybkNhY2hlID0ge1xuICBjdXJyZW50OiB7fVxufTtcblxuLyoqXG4gKiBMb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGlzIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBvbmx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2Fybihjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHNhbml0aXplZE1lc3NhZ2UgPSBtZXNzYWdlLnRyaW0oKTtcbiAgdmFyIGhhc0FscmVhZHlQcmludGVkID0gd2FybkNhY2hlLmN1cnJlbnRbc2FuaXRpemVkTWVzc2FnZV07XG4gIGlmICghaGFzQWxyZWFkeVByaW50ZWQpIHtcbiAgICB3YXJuQ2FjaGUuY3VycmVudFtzYW5pdGl6ZWRNZXNzYWdlXSA9IHRydWU7XG4gICAgdmFyIHdhcm5pbmcgPSBcIltJbnN0YW50U2VhcmNoXSBcIi5jb25jYXQoc2FuaXRpemVkTWVzc2FnZSk7XG4gICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBJbnN0YW50U2VhcmNoLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiBmaW5kIHRoZSBzb3VyY2VcbiAgICAgIC8vIG9mIHRoZSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieSBlbmFibGluZyBcIlBhdXNlIG9uIGV4Y2VwdGlvbnNcIlxuICAgICAgLy8gaW4geW91ciBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcih3YXJuaW5nKTtcbiAgICB9IGNhdGNoIChlcnJvcikge31cbiAgfVxufSJdLCJuYW1lcyI6WyJ3YXJuQ2FjaGUiLCJjdXJyZW50Iiwid2FybiIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJwcm9jZXNzIiwic2FuaXRpemVkTWVzc2FnZSIsInRyaW0iLCJoYXNBbHJlYWR5UHJpbnRlZCIsIndhcm5pbmciLCJjb25jYXQiLCJjb25zb2xlIiwiRXJyb3IiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/lib/warn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-instantsearch-hooks/dist/es/version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-instantsearch-hooks/dist/es/version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6.47.3\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5zdGFudHNlYXJjaC1ob29rcy9kaXN0L2VzL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLFVBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnN0YW50c2VhcmNoLWhvb2tzL2Rpc3QvZXMvdmVyc2lvbi5qcz82ODNhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICc2LjQ3LjMnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-instantsearch-hooks/dist/es/version.js\n");

/***/ })

};
;