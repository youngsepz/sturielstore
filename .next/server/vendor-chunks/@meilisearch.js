"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@meilisearch";
exports.ids = ["vendor-chunks/@meilisearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instantMeiliSearch: () => (/* binding */ instantMeiliSearch)\n/* harmony export */ });\n/* harmony import */ var meilisearch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! meilisearch */ \"(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.esm.js\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __spreadArray(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n}\nvar removeUndefined = function(arr) {\n    return arr.filter(function(x) {\n        return x !== undefined;\n    });\n};\n/**\r\n * @param  {any} str\r\n * @returns {boolean}\r\n */ /**\r\n * @param  {string} filter\r\n * @returns {string}\r\n */ function replaceColonByEqualSign(filter) {\n    // will only change first occurence of `:`\n    return filter.replace(/:(.*)/i, '=\"$1\"');\n}\n/**\r\n * @param  {any[]} arr\r\n * @returns {string}\r\n */ function stringifyArray(arr) {\n    return arr.reduce(function(acc, curr) {\n        return acc += JSON.stringify(curr);\n    }, \"\");\n}\n/**\r\n * @param  {number} dividend\r\n * @param  {number} divisor\r\n * @returns number\r\n */ function ceiledDivision(dividend, divisor) {\n    if (divisor > 0) {\n        var NumberPages = Math.ceil(dividend / divisor); // total number of pages rounded up to the next largest integer.\n        return NumberPages;\n    }\n    return 0;\n}\nfunction isPureObject(data) {\n    return typeof data === \"object\" && !Array.isArray(data) && data !== null;\n}\n/**\r\n * @param  {string} filter\r\n */ var adaptFilterSyntax = function(filter) {\n    var matches = filter.match(/([^=]*)=\"?([^\\\\\"]*)\"?$/);\n    if (matches) {\n        matches[0];\n        var filterName = matches[1], value = matches[2];\n        return [\n            {\n                filterName: filterName,\n                value: value\n            }\n        ];\n    }\n    return [];\n};\n/**\r\n * @param  {Filter} filters?\r\n * @returns {Array}\r\n */ function extractFilters(filters) {\n    if (typeof filters === \"string\") {\n        return adaptFilterSyntax(filters);\n    } else if (Array.isArray(filters)) {\n        return filters.map(function(nestedFilter) {\n            if (Array.isArray(nestedFilter)) {\n                return nestedFilter.map(function(filter) {\n                    return adaptFilterSyntax(filter);\n                });\n            }\n            return adaptFilterSyntax(nestedFilter);\n        }).flat(2);\n    }\n    return [];\n}\n/**\r\n * @param  {Filter} filters?\r\n * @returns {FacetsCache}\r\n */ function getFacetsFromFilter(filters) {\n    var extractedFilters = extractFilters(filters);\n    var cleanFilters = removeUndefined(extractedFilters);\n    return cleanFilters.reduce(function(cache, parsedFilter) {\n        var _a;\n        var filterName = parsedFilter.filterName, value = parsedFilter.value;\n        var prevFields = cache[filterName] || [];\n        cache = __assign(__assign({}, cache), (_a = {}, _a[filterName] = __spreadArray(__spreadArray([], prevFields, true), [\n            value\n        ]), _a));\n        return cache;\n    }, {});\n}\nfunction getFacetsFromDefaultDistribution(facetsDistribution) {\n    return Object.keys(facetsDistribution).reduce(function(cache, facet) {\n        var _a;\n        var facetValues = Object.keys(facetsDistribution[facet]);\n        return __assign(__assign({}, cache), (_a = {}, _a[facet] = facetValues, _a));\n    }, {});\n}\n/**\r\n * @param  {Filter} filters?\r\n * @returns {FacetsCache}\r\n */ function extractFacets(searchContext, searchParams) {\n    if (searchContext.keepZeroFacets) {\n        return getFacetsFromDefaultDistribution(searchContext.defaultFacetDistribution);\n    } else {\n        return getFacetsFromFilter(searchParams === null || searchParams === void 0 ? void 0 : searchParams.filter);\n    }\n}\n/**\r\n * Assign missing filters to facetsDistribution.\r\n * All facet passed as filter should appear in the facetsDistribution.\r\n * If not present, the facet is added with 0 as value.\r\n *\r\n *\r\n * @param  {FacetsCache} cache?\r\n * @param  {FacetsDistribution} distribution?\r\n * @returns {FacetsDistribution}\r\n */ function addMissingFacets(cachedFacets, distribution) {\n    distribution = distribution || {};\n    // If cachedFacets contains something\n    if (cachedFacets && Object.keys(cachedFacets).length > 0) {\n        // for all filters in cached filters\n        for(var cachedFacet in cachedFacets){\n            // if facet does not exist on returned distribution, add an empty object\n            if (!distribution[cachedFacet]) distribution[cachedFacet] = {};\n            // for all fields in every filter\n            for(var _i = 0, _a = cachedFacets[cachedFacet]; _i < _a.length; _i++){\n                var cachedField = _a[_i];\n                // if the field is not present in the returned distribution\n                // set it at 0\n                if (!Object.keys(distribution[cachedFacet]).includes(cachedField)) {\n                    // add 0 value\n                    distribution[cachedFacet][cachedField] = 0;\n                }\n            }\n        }\n    }\n    return distribution;\n}\nvar emptySearch = {\n    hits: [],\n    query: \"\",\n    facetsDistribution: {},\n    limit: 0,\n    offset: 0,\n    exhaustiveNbHits: false,\n    nbHits: 0,\n    processingTimeMs: 0\n};\n/**\r\n * @param  {ResponseCacher} cache\r\n */ function SearchResolver(cache) {\n    return {\n        /**\r\n         * @param  {SearchContext} searchContext\r\n         * @param  {MeiliSearchParams} searchParams\r\n         * @param  {MeiliSearch} client\r\n         * @returns {Promise}\r\n         */ searchResponse: function(searchContext, searchParams, client) {\n            return __awaiter(this, void 0, void 0, function() {\n                var placeholderSearch, query, pagination, paginationCache, key, cachedResponse, facetsCache, searchResponse;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            placeholderSearch = searchContext.placeholderSearch, query = searchContext.query;\n                            // query can be: empty string, undefined or null\n                            // all of them are falsy's\n                            if (!placeholderSearch && !query) {\n                                return [\n                                    2 /*return*/ ,\n                                    emptySearch\n                                ];\n                            }\n                            pagination = searchContext.pagination;\n                            paginationCache = searchContext.finitePagination ? {} : pagination;\n                            key = cache.formatKey([\n                                searchParams,\n                                searchContext.indexUid,\n                                searchContext.query,\n                                paginationCache\n                            ]);\n                            cachedResponse = cache.getEntry(key);\n                            // Check if specific request is already cached with its associated search response.\n                            if (cachedResponse) return [\n                                2 /*return*/ ,\n                                cachedResponse\n                            ];\n                            facetsCache = extractFacets(searchContext, searchParams);\n                            return [\n                                4 /*yield*/ ,\n                                client.index(searchContext.indexUid).search(searchContext.query, searchParams)\n                            ];\n                        case 1:\n                            searchResponse = _a.sent();\n                            // Add missing facets back into facetsDistribution\n                            searchResponse.facetsDistribution = addMissingFacets(facetsCache, searchResponse.facetsDistribution);\n                            // Cache response\n                            cache.setEntry(key, searchResponse);\n                            return [\n                                2 /*return*/ ,\n                                searchResponse\n                            ];\n                    }\n                });\n            });\n        }\n    };\n}\n/**\r\n * @param  {number} rad\r\n * @returns {number}\r\n */ function rad2degr(rad) {\n    return rad * 180 / Math.PI;\n}\n/**\r\n * @param  {number} degr\r\n * @returns {number}\r\n */ function degr2rad(degr) {\n    return degr * Math.PI / 180;\n}\n/**\r\n * @param  {number} lat1\r\n * @param  {number} lng1\r\n * @param  {number} lat2\r\n * @param  {number} lng2\r\n * @returns {string}\r\n */ function middleGeoPoints(lat1, lng1, lat2, lng2) {\n    // convert to radians\n    lat1 = degr2rad(lat1);\n    lng1 = degr2rad(lng1);\n    var x1 = Math.cos(lat1) * Math.cos(lng1);\n    var y1 = Math.cos(lat1) * Math.sin(lng1);\n    var z1 = Math.sin(lat1);\n    // convert to radians\n    lat2 = degr2rad(lat2);\n    lng2 = degr2rad(lng2);\n    var x2 = Math.cos(lat2) * Math.cos(lng2);\n    var y2 = Math.cos(lat2) * Math.sin(lng2);\n    var z2 = Math.sin(lat2);\n    var x = x1 + x2;\n    var y = y1 + y2;\n    var z = z1 + z2;\n    var Hyp = Math.sqrt(x * x + y * y);\n    var lng3 = Math.atan2(y, x);\n    var lat3 = Math.atan2(z, Hyp);\n    if (lng1 < lng2 || lng1 > lng2 && lng1 > Math.PI && lng2 < -Math.PI) {\n        lat3 = lat3 + Math.PI;\n        lng3 = lng3 + Math.PI;\n    } else {\n        lat3 = rad2degr(lat3);\n        lng3 = rad2degr(lng3);\n    }\n    if (Math.abs(x) < Math.pow(10, -9) && Math.abs(y) < Math.pow(10, -9) && Math.abs(z) < Math.pow(10, -9)) {\n        lat3 = 0;\n        lng3 = 0;\n    }\n    return \"\".concat(lat3, \",\").concat(lng3);\n}\n/**\r\n * @param  {number} lat1\r\n * @param  {number} lng1\r\n * @param  {number} lat2\r\n * @param  {number} lng2\r\n * @returns {number}\r\n */ function getDistanceInMeter(lat1, lng1, lat2, lng2) {\n    // Haversine Algorithm\n    var R = 6371e3; // metres\n    var latRad1 = lat1 * Math.PI / 180;\n    var latRad2 = lat2 * Math.PI / 180;\n    var latCenterRad = (lat2 - lat1) * Math.PI / 180;\n    var lngCenterRad = (lng2 - lng1) * Math.PI / 180;\n    var a = Math.sin(latCenterRad / 2) * Math.sin(latCenterRad / 2) + Math.cos(latRad1) * Math.cos(latRad2) * Math.sin(lngCenterRad / 2) * Math.sin(lngCenterRad / 2);\n    var bearing = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var distance = R * bearing; // in metres\n    return distance;\n}\nfunction adaptGeoPointsRules(geoSearchContext) {\n    if (!geoSearchContext) {\n        return undefined;\n    }\n    var insideBoundingBox = geoSearchContext.insideBoundingBox, aroundLatLng = geoSearchContext.aroundLatLng, aroundRadius = geoSearchContext.aroundRadius, minimumAroundRadius = geoSearchContext.minimumAroundRadius;\n    var middlePoint;\n    var radius;\n    if (aroundLatLng) {\n        middlePoint = aroundLatLng;\n    }\n    if (aroundRadius != null || minimumAroundRadius != null) {\n        if (aroundRadius != null) radius = aroundRadius;\n        else radius = minimumAroundRadius;\n    }\n    // If insideBoundingBox is provided it takes precedent over all other options\n    if (insideBoundingBox && typeof insideBoundingBox === \"string\") {\n        var _a = insideBoundingBox.split(\",\"), lat1Raw = _a[0], lng1Raw = _a[1], lat2Raw = _a[2], lng2Raw = _a[3];\n        var _b = [\n            parseFloat(lat1Raw),\n            parseFloat(lng1Raw),\n            parseFloat(lat2Raw),\n            parseFloat(lng2Raw)\n        ], lat1 = _b[0], lng1 = _b[1], lat2 = _b[2], lng2 = _b[3];\n        radius = getDistanceInMeter(lat1, lng1, lat2, lng2) / 2;\n        middlePoint = middleGeoPoints(lat1, lng1, lat2, lng2);\n    }\n    if (middlePoint != null && radius != null) {\n        var _c = middlePoint.split(\",\"), lat3 = _c[0], lng3 = _c[1];\n        lat3 = Number.parseFloat(lat3).toFixed(5);\n        lng3 = Number.parseFloat(lng3).toFixed(5);\n        var filter = \"_geoRadius(\".concat(lat3, \", \").concat(lng3, \", \").concat(radius, \")\");\n        return {\n            filter: filter\n        };\n    }\n    return undefined;\n}\nfunction createGeoSearchContext(searchContext) {\n    var geoContext = {};\n    var aroundLatLng = searchContext.aroundLatLng, aroundLatLngViaIP = searchContext.aroundLatLngViaIP, aroundRadius = searchContext.aroundRadius, aroundPrecision = searchContext.aroundPrecision, minimumAroundRadius = searchContext.minimumAroundRadius, insideBoundingBox = searchContext.insideBoundingBox, insidePolygon = searchContext.insidePolygon;\n    if (aroundLatLng) {\n        geoContext.aroundLatLng = aroundLatLng;\n    }\n    if (aroundLatLngViaIP) {\n        console.warn(\"instant-meilisearch: `aroundLatLngViaIP` is not supported.\");\n    }\n    if (aroundRadius) {\n        geoContext.aroundRadius = aroundRadius;\n    }\n    if (aroundPrecision) {\n        console.warn(\"instant-meilisearch: `aroundPrecision` is not supported.\\n    See this discussion to track its implementation https://github.com/meilisearch/product/discussions/264\");\n    }\n    if (minimumAroundRadius) {\n        geoContext.minimumAroundRadius = minimumAroundRadius;\n    }\n    if (insideBoundingBox) {\n        geoContext.insideBoundingBox = insideBoundingBox;\n    }\n    // See related issue: https://github.com/meilisearch/instant-meilisearch/issues/555\n    if (insidePolygon) {\n        console.warn(\"instant-meilisearch: `insidePolygon` is not implented in instant-meilisearch.\");\n    }\n    return geoContext;\n}\n/**\r\n * Transform InstantSearch filter to Meilisearch filter.\r\n * Change sign from `:` to `=` in nested filter object.\r\n * example: [`genres:comedy`] becomes [`genres=comedy`]\r\n *\r\n * @param  {SearchContext['facetFilters']} filters?\r\n * @returns {Filter}\r\n */ function transformFilter(filters) {\n    if (typeof filters === \"string\") {\n        return replaceColonByEqualSign(filters);\n    } else if (Array.isArray(filters)) return filters.map(function(filter) {\n        if (Array.isArray(filter)) return filter.map(function(nestedFilter) {\n            return replaceColonByEqualSign(nestedFilter);\n        }).filter(function(elem) {\n            return elem;\n        });\n        else {\n            return replaceColonByEqualSign(filter);\n        }\n    }).filter(function(elem) {\n        return elem;\n    });\n    return [];\n}\n/**\r\n * Return the filter in an array if it is a string\r\n * If filter is array, return without change.\r\n *\r\n * @param  {Filter} filter\r\n * @returns {Array}\r\n */ function filterToArray(filter) {\n    // Filter is a string\n    if (filter === \"\") return [];\n    else if (typeof filter === \"string\") return [\n        filter\n    ];\n    // Filter is either an array of strings, or an array of array of strings\n    return filter;\n}\n/**\r\n * Merge facetFilters, numericFilters and filters together.\r\n *\r\n * @param  {Filter} facetFilters\r\n * @param  {Filter} numericFilters\r\n * @param  {string} filters\r\n * @returns {Filter}\r\n */ function mergeFilters(facetFilters, numericFilters, filters) {\n    var adaptedFilters = filters.trim();\n    var adaptedFacetFilters = filterToArray(facetFilters);\n    var adaptedNumericFilters = filterToArray(numericFilters);\n    var adaptedFilter = __spreadArray(__spreadArray(__spreadArray([], adaptedFacetFilters, true), adaptedNumericFilters, true), [\n        adaptedFilters\n    ]);\n    var cleanedFilters = adaptedFilter.filter(function(filter) {\n        if (Array.isArray(filter)) {\n            return filter.length;\n        }\n        return filter;\n    });\n    return cleanedFilters;\n}\n/**\r\n * Adapt instantsearch.js filters to Meilisearch filters by\r\n * combining and transforming all provided filters.\r\n *\r\n * @param  {string|undefined} filters\r\n * @param  {SearchContext['numericFilters']} numericFilters\r\n * @param  {SearchContext['facetFilters']} facetFilters\r\n * @returns {Filter}\r\n */ function adaptFilters(filters, numericFilters, facetFilters) {\n    var transformedFilter = transformFilter(facetFilters || []);\n    var transformedNumericFilter = transformFilter(numericFilters || []);\n    return mergeFilters(transformedFilter, transformedNumericFilter, filters || \"\");\n}\n/**\r\n * Adapt search request from instantsearch.js\r\n * to search request compliant with Meilisearch\r\n *\r\n * @param  {SearchContext} searchContext\r\n * @returns {MeiliSearchParams}\r\n */ function adaptSearchParams(searchContext) {\n    // Creates search params object compliant with Meilisearch\n    var meiliSearchParams = {};\n    // Facets\n    var facets = searchContext === null || searchContext === void 0 ? void 0 : searchContext.facets;\n    if (facets === null || facets === void 0 ? void 0 : facets.length) {\n        meiliSearchParams.facetsDistribution = facets;\n    }\n    // Attributes To Crop\n    var attributesToCrop = searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToSnippet;\n    if (attributesToCrop) {\n        meiliSearchParams.attributesToCrop = attributesToCrop;\n    }\n    // Attributes To Crop marker\n    var cropMarker = searchContext === null || searchContext === void 0 ? void 0 : searchContext.snippetEllipsisText;\n    if (cropMarker != null) {\n        meiliSearchParams.cropMarker = cropMarker;\n    }\n    // Attributes To Retrieve\n    var attributesToRetrieve = searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToRetrieve;\n    if (attributesToRetrieve) {\n        meiliSearchParams.attributesToRetrieve = attributesToRetrieve;\n    }\n    // Filter\n    var filter = adaptFilters(searchContext === null || searchContext === void 0 ? void 0 : searchContext.filters, searchContext === null || searchContext === void 0 ? void 0 : searchContext.numericFilters, searchContext === null || searchContext === void 0 ? void 0 : searchContext.facetFilters);\n    if (filter.length) {\n        meiliSearchParams.filter = filter;\n    }\n    // Attributes To Retrieve\n    if (attributesToRetrieve) {\n        meiliSearchParams.attributesToCrop = attributesToRetrieve;\n    }\n    // Attributes To Highlight\n    meiliSearchParams.attributesToHighlight = (searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToHighlight) || [\n        \"*\"\n    ];\n    // Highlight pre tag\n    var highlightPreTag = searchContext === null || searchContext === void 0 ? void 0 : searchContext.highlightPreTag;\n    if (highlightPreTag) {\n        meiliSearchParams.highlightPreTag = highlightPreTag;\n    } else {\n        meiliSearchParams.highlightPreTag = \"__ais-highlight__\";\n    }\n    // Highlight post tag\n    var highlightPostTag = searchContext === null || searchContext === void 0 ? void 0 : searchContext.highlightPostTag;\n    if (highlightPostTag) {\n        meiliSearchParams.highlightPostTag = highlightPostTag;\n    } else {\n        meiliSearchParams.highlightPostTag = \"__/ais-highlight__\";\n    }\n    var placeholderSearch = searchContext.placeholderSearch;\n    var query = searchContext.query;\n    // Pagination\n    var pagination = searchContext.pagination;\n    // Limit based on pagination preferences\n    if (!placeholderSearch && query === \"\" || pagination.paginationTotalHits === 0) {\n        meiliSearchParams.limit = 0;\n    } else if (searchContext.finitePagination) {\n        meiliSearchParams.limit = pagination.paginationTotalHits;\n    } else {\n        var limit = (pagination.page + 1) * pagination.hitsPerPage + 1;\n        // If the limit is bigger than the total hits accepted\n        // force the limit to that amount\n        if (limit > pagination.paginationTotalHits) {\n            meiliSearchParams.limit = pagination.paginationTotalHits;\n        } else {\n            meiliSearchParams.limit = limit;\n        }\n    }\n    var sort = searchContext.sort;\n    // Sort\n    if (sort === null || sort === void 0 ? void 0 : sort.length) {\n        meiliSearchParams.sort = [\n            sort\n        ];\n    }\n    var geoSearchContext = createGeoSearchContext(searchContext);\n    var geoRules = adaptGeoPointsRules(geoSearchContext);\n    if (geoRules === null || geoRules === void 0 ? void 0 : geoRules.filter) {\n        if (meiliSearchParams.filter) {\n            meiliSearchParams.filter.unshift(geoRules.filter);\n        } else {\n            meiliSearchParams.filter = [\n                geoRules.filter\n            ];\n        }\n    }\n    return meiliSearchParams;\n}\n/**\r\n * Slice the requested hits based on the pagination position.\r\n *\r\n * @param  {Record<string} hits\r\n * @param  {number} page\r\n * @param  {number} hitsPerPage\r\n * @returns {Array}\r\n */ function adaptPagination(hits, page, hitsPerPage) {\n    if (hitsPerPage < 0) {\n        throw new TypeError('Value too small for \"hitsPerPage\" parameter, expected integer between 0 and 9223372036854775807');\n    }\n    var start = page * hitsPerPage;\n    return hits.slice(start, start + hitsPerPage);\n}\n/**\r\n * Stringify values following instantsearch practices.\r\n *\r\n * @param  {any} value - value that needs to be stringified\r\n */ function stringifyValue(value) {\n    if (typeof value === \"string\") {\n        // String\n        return value;\n    } else if (value === undefined) {\n        // undefined\n        return JSON.stringify(null);\n    } else {\n        return JSON.stringify(value);\n    }\n}\n/**\r\n * Recursif function wrap the deepest possible value\r\n * the following way: { value: \"xx\" }.\r\n *\r\n * For example:\r\n *\r\n * {\r\n * \"rootField\": { \"value\": \"x\" }\r\n * \"nestedField\": { child: { value: \"y\" } }\r\n * }\r\n *\r\n * recursivity continues until the value is not an array or an object.\r\n *\r\n * @param  {any} value - value of a field\r\n *\r\n * @returns Record<string, any>\r\n */ function wrapValue(value) {\n    if (Array.isArray(value)) {\n        // Array\n        return value.map(function(elem) {\n            return wrapValue(elem);\n        });\n    } else if (isPureObject(value)) {\n        // Object\n        return Object.keys(value).reduce(function(nested, key) {\n            nested[key] = wrapValue(value[key]);\n            return nested;\n        }, {});\n    } else {\n        return {\n            value: stringifyValue(value)\n        };\n    }\n}\n/**\r\n * Adapt Meilisearch formatted fields to a format compliant to instantsearch.js.\r\n *\r\n * @param  {Record<string} formattedHit\r\n * @param  {SearchContext} searchContext\r\n * @returns {Record}\r\n */ function adaptFormattedFields(hit) {\n    if (!hit) return {};\n    var _formattedResult = wrapValue(hit);\n    var highlightedHit = {\n        // We could not determine what the differences are between those two fields.\n        _highlightResult: _formattedResult,\n        _snippetResult: _formattedResult\n    };\n    return highlightedHit;\n}\n/**\r\n * @param  {any[]} hits\r\n * @returns {Array<Record<string, any>>}\r\n */ function adaptGeoResponse(hits) {\n    for(var i = 0; i < hits.length; i++){\n        if (hits[i]._geo) {\n            hits[i]._geoloc = {\n                lat: hits[i]._geo.lat,\n                lng: hits[i]._geo.lng\n            };\n            hits[i].objectID = \"\".concat(i + Math.random() * 1000000);\n            delete hits[i]._geo;\n        }\n    }\n    return hits;\n}\n/**\r\n * @param  {Array<Record<string} hits\r\n * @param  {SearchContext} searchContext\r\n * @param  {PaginationContext} paginationContext\r\n * @returns {any}\r\n */ function adaptHits(hits, searchContext, paginationContext) {\n    var primaryKey = searchContext.primaryKey;\n    var hitsPerPage = paginationContext.hitsPerPage, page = paginationContext.page;\n    var paginatedHits = adaptPagination(hits, page, hitsPerPage);\n    var adaptedHits = paginatedHits.map(function(hit) {\n        // Creates Hit object compliant with InstantSearch\n        if (Object.keys(hit).length > 0) {\n            var formattedHit = hit._formatted;\n            hit._matchesInfo;\n            var documentFields = __rest(hit, [\n                \"_formatted\",\n                \"_matchesInfo\"\n            ]);\n            var adaptedHit = Object.assign(documentFields, adaptFormattedFields(formattedHit));\n            if (primaryKey) {\n                adaptedHit.objectID = hit[primaryKey];\n            }\n            return adaptedHit;\n        }\n        return hit;\n    });\n    adaptedHits = adaptGeoResponse(adaptedHits);\n    return adaptedHits;\n}\n/**\r\n * Adapt search response from Meilisearch\r\n * to search response compliant with instantsearch.js\r\n *\r\n * @param  {MeiliSearchResponse<Record<string} searchResponse\r\n * @param  {SearchContext} searchContext\r\n * @param  {PaginationContext} paginationContext\r\n * @returns {{ results: Array<AlgoliaSearchResponse<T>> }}\r\n */ function adaptSearchResponse(searchResponse, searchContext) {\n    var searchResponseOptionals = {};\n    var facets = searchResponse.facetsDistribution;\n    var pagination = searchContext.pagination;\n    var exhaustiveFacetsCount = searchResponse === null || searchResponse === void 0 ? void 0 : searchResponse.exhaustiveFacetsCount;\n    if (exhaustiveFacetsCount) {\n        searchResponseOptionals.exhaustiveFacetsCount = exhaustiveFacetsCount;\n    }\n    var nbPages = ceiledDivision(searchResponse.hits.length, pagination.hitsPerPage);\n    var hits = adaptHits(searchResponse.hits, searchContext, pagination);\n    var exhaustiveNbHits = searchResponse.exhaustiveNbHits;\n    var nbHits = searchResponse.nbHits;\n    var processingTimeMs = searchResponse.processingTimeMs;\n    var query = searchResponse.query;\n    var hitsPerPage = pagination.hitsPerPage, page = pagination.page;\n    // Create response object compliant with InstantSearch\n    var adaptedSearchResponse = __assign({\n        index: searchContext.indexUid,\n        hitsPerPage: hitsPerPage,\n        page: page,\n        facets: facets,\n        nbPages: nbPages,\n        exhaustiveNbHits: exhaustiveNbHits,\n        nbHits: nbHits,\n        processingTimeMS: processingTimeMs,\n        query: query,\n        hits: hits,\n        params: \"\"\n    }, searchResponseOptionals);\n    return {\n        results: [\n            adaptedSearchResponse\n        ]\n    };\n}\n/**\r\n * @param  {AlgoliaMultipleQueriesQuery} searchRequest\r\n * @param  {Context} options\r\n * @returns {SearchContext}\r\n */ function createPaginationContext(_a) {\n    var paginationTotalHits = _a.paginationTotalHits, hitsPerPage = _a.hitsPerPage, page = _a.page;\n    return {\n        paginationTotalHits: paginationTotalHits != null ? paginationTotalHits : 200,\n        hitsPerPage: hitsPerPage === undefined ? 20 : hitsPerPage,\n        page: page || 0\n    };\n}\n/**\r\n * @param  {AlgoliaMultipleQueriesQuery} searchRequest\r\n * @param  {Context} options\r\n * @returns {SearchContext}\r\n */ function createSearchContext(searchRequest, options, defaultFacetDistribution) {\n    // Split index name and possible sorting rules\n    var _a = searchRequest.indexName.split(\":\"), indexUid = _a[0], sortByArray = _a.slice(1);\n    var instantSearchParams = searchRequest.params;\n    var pagination = createPaginationContext({\n        paginationTotalHits: options.paginationTotalHits,\n        hitsPerPage: instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.hitsPerPage,\n        page: instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.page\n    });\n    var searchContext = __assign(__assign(__assign({}, options), instantSearchParams), {\n        sort: sortByArray.join(\":\") || \"\",\n        indexUid: indexUid,\n        pagination: pagination,\n        defaultFacetDistribution: defaultFacetDistribution,\n        placeholderSearch: options.placeholderSearch !== false,\n        keepZeroFacets: !!options.keepZeroFacets,\n        finitePagination: !!options.finitePagination\n    });\n    return searchContext;\n}\n/**\r\n * @param  {Record<string} cache\r\n * @returns {SearchCache}\r\n */ function SearchCache(cache) {\n    if (cache === void 0) {\n        cache = {};\n    }\n    var searchCache = cache;\n    return {\n        getEntry: function(key) {\n            if (searchCache[key]) {\n                try {\n                    return JSON.parse(searchCache[key]);\n                } catch (_) {\n                    return searchCache[key];\n                }\n            }\n            return undefined;\n        },\n        formatKey: function(components) {\n            return stringifyArray(components);\n        },\n        setEntry: function(key, searchResponse) {\n            searchCache[key] = JSON.stringify(searchResponse);\n        }\n    };\n}\nfunction cacheFirstFacetsDistribution(defaultFacetDistribution, searchResponse) {\n    if (searchResponse.query === \"\" && Object.keys(defaultFacetDistribution).length === 0) {\n        return searchResponse.facetsDistribution;\n    }\n    return defaultFacetDistribution;\n}\n/**\r\n * Instanciate SearchClient required by instantsearch.js.\r\n *\r\n * @param  {string} hostUrl\r\n * @param  {string} apiKey\r\n * @param  {InstantMeiliSearchOptions={}} meiliSearchOptions\r\n * @returns {InstantMeiliSearchInstance}\r\n */ function instantMeiliSearch(hostUrl, apiKey, instantMeiliSearchOptions) {\n    if (apiKey === void 0) {\n        apiKey = \"\";\n    }\n    if (instantMeiliSearchOptions === void 0) {\n        instantMeiliSearchOptions = {};\n    }\n    // create search resolver with included cache\n    var searchResolver = SearchResolver(SearchCache());\n    // paginationTotalHits can be 0 as it is a valid number\n    var defaultFacetDistribution = {};\n    var meilisearchClient = new meilisearch__WEBPACK_IMPORTED_MODULE_0__.MeiliSearch({\n        host: hostUrl,\n        apiKey: apiKey\n    });\n    return {\n        /**\r\n         * @param  {readonlyAlgoliaMultipleQueriesQuery[]} instantSearchRequests\r\n         * @returns {Array}\r\n         */ search: function(instantSearchRequests) {\n            return __awaiter(this, void 0, void 0, function() {\n                var searchRequest, searchContext, adaptedSearchRequest, searchResponse, adaptedSearchResponse, e_1;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            _a.trys.push([\n                                0,\n                                2,\n                                ,\n                                3\n                            ]);\n                            searchRequest = instantSearchRequests[0];\n                            searchContext = createSearchContext(searchRequest, instantMeiliSearchOptions, defaultFacetDistribution);\n                            adaptedSearchRequest = adaptSearchParams(searchContext);\n                            return [\n                                4 /*yield*/ ,\n                                searchResolver.searchResponse(searchContext, adaptedSearchRequest, meilisearchClient)\n                            ];\n                        case 1:\n                            searchResponse = _a.sent();\n                            // Cache first facets distribution of the instantMeilisearch instance\n                            // Needed to add in the facetsDistribution the fields that were not returned\n                            // When the user sets `keepZeroFacets` to true.\n                            defaultFacetDistribution = cacheFirstFacetsDistribution(defaultFacetDistribution, searchResponse);\n                            adaptedSearchResponse = adaptSearchResponse(searchResponse, searchContext);\n                            return [\n                                2 /*return*/ ,\n                                adaptedSearchResponse\n                            ];\n                        case 2:\n                            e_1 = _a.sent();\n                            console.error(e_1);\n                            throw new Error(e_1);\n                        case 3:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        },\n        searchForFacetValues: function(_) {\n            return __awaiter(this, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                new Promise(function(resolve, reject) {\n                                    reject(new Error(\"SearchForFacetValues is not compatible with Meilisearch\"));\n                                    resolve([]); // added here to avoid compilation error\n                                })\n                            ];\n                        case 1:\n                            return [\n                                2 /*return*/ ,\n                                _a.sent()\n                            ];\n                    }\n                });\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js\n");

/***/ })

};
;